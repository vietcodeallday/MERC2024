
motor MERC2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08008de8  08008de8  00018de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d8  080093d8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080093d8  080093d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093e0  080093e0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e4  080093e4  000193e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080093e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200001e0  080095c4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  080095c4  00020664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1e2  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a5  00000000  00000000  0002e431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  000307d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a58  00000000  00000000  00031528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180da  00000000  00000000  00031f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001085d  00000000  00000000  0004a05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090823  00000000  00000000  0005a8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049c4  00000000  00000000  000eb0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000efaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008dd0 	.word	0x08008dd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008dd0 	.word	0x08008dd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	0000      	movs	r0, r0
	...

08000ef8 <get_rpm>:
	double rpm;
	uint16_t cnt=0;
	uint16_t preCnt=0;
	int loop=0;
	bool flag_rot;
double get_rpm(int motor){
 8000ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
	reset_tick();
 8000f02:	f000 f9b7 	bl	8001274 <reset_tick>

	switch (motor){
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d029      	beq.n	8000f60 <get_rpm+0x68>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	dc36      	bgt.n	8000f80 <get_rpm+0x88>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d003      	beq.n	8000f20 <get_rpm+0x28>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d010      	beq.n	8000f40 <get_rpm+0x48>
 8000f1e:	e02f      	b.n	8000f80 <get_rpm+0x88>
		case MOTOR_1:
			__HAL_TIM_SET_COUNTER(&htim1, (flag_rot_1)?65535:0);
 8000f20:	4b69      	ldr	r3, [pc, #420]	; (80010c8 <get_rpm+0x1d0>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <get_rpm+0x36>
 8000f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f2c:	e000      	b.n	8000f30 <get_rpm+0x38>
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4b66      	ldr	r3, [pc, #408]	; (80010cc <get_rpm+0x1d4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_1;
 8000f36:	4b64      	ldr	r3, [pc, #400]	; (80010c8 <get_rpm+0x1d0>)
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <get_rpm+0x1d8>)
 8000f3c:	701a      	strb	r2, [r3, #0]
			break;
 8000f3e:	e01f      	b.n	8000f80 <get_rpm+0x88>
		case MOTOR_2:
			__HAL_TIM_SET_COUNTER(&htim3, (flag_rot_2)?65535:0);
 8000f40:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <get_rpm+0x1dc>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <get_rpm+0x56>
 8000f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4c:	e000      	b.n	8000f50 <get_rpm+0x58>
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <get_rpm+0x1e0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_2;
 8000f56:	4b5f      	ldr	r3, [pc, #380]	; (80010d4 <get_rpm+0x1dc>)
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <get_rpm+0x1d8>)
 8000f5c:	701a      	strb	r2, [r3, #0]
			break;
 8000f5e:	e00f      	b.n	8000f80 <get_rpm+0x88>
		case MOTOR_3:
			__HAL_TIM_SET_COUNTER(&htim4, (flag_rot_3)?65535:0);
 8000f60:	4b5e      	ldr	r3, [pc, #376]	; (80010dc <get_rpm+0x1e4>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <get_rpm+0x76>
 8000f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6c:	e000      	b.n	8000f70 <get_rpm+0x78>
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4b5b      	ldr	r3, [pc, #364]	; (80010e0 <get_rpm+0x1e8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_3;
 8000f76:	4b59      	ldr	r3, [pc, #356]	; (80010dc <get_rpm+0x1e4>)
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <get_rpm+0x1d8>)
 8000f7c:	701a      	strb	r2, [r3, #0]
			break;
 8000f7e:	bf00      	nop
	}
	ResetLoop(flag_rot);
 8000f80:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <get_rpm+0x1d8>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f8e9 	bl	800115c <ResetLoop>
	volatile uint16_t a=millis();
 8000f8a:	f000 f959 	bl	8001240 <millis>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	b293      	uxth	r3, r2
 8000f94:	81fb      	strh	r3, [r7, #14]

	while(millis()- a <=500){
 8000f96:	e029      	b.n	8000fec <get_rpm+0xf4>
		switch (motor){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d017      	beq.n	8000fce <get_rpm+0xd6>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	dc1b      	bgt.n	8000fdc <get_rpm+0xe4>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d003      	beq.n	8000fb2 <get_rpm+0xba>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d007      	beq.n	8000fc0 <get_rpm+0xc8>
 8000fb0:	e014      	b.n	8000fdc <get_rpm+0xe4>
			case MOTOR_1:
				cnt = __HAL_TIM_GET_COUNTER(&htim1);
 8000fb2:	4b46      	ldr	r3, [pc, #280]	; (80010cc <get_rpm+0x1d4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <get_rpm+0x1ec>)
 8000fbc:	801a      	strh	r2, [r3, #0]
				break;
 8000fbe:	e00d      	b.n	8000fdc <get_rpm+0xe4>

			case MOTOR_2:
				cnt = __HAL_TIM_GET_COUNTER(&htim3);
 8000fc0:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <get_rpm+0x1e0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <get_rpm+0x1ec>)
 8000fca:	801a      	strh	r2, [r3, #0]
				break;
 8000fcc:	e006      	b.n	8000fdc <get_rpm+0xe4>

			case MOTOR_3:
				cnt = __HAL_TIM_GET_COUNTER(&htim4);
 8000fce:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <get_rpm+0x1e8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <get_rpm+0x1ec>)
 8000fd8:	801a      	strh	r2, [r3, #0]
				break;
 8000fda:	bf00      	nop
		}
		CountLoop(cnt, flag_rot);
 8000fdc:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <get_rpm+0x1ec>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	4a3b      	ldr	r2, [pc, #236]	; (80010d0 <get_rpm+0x1d8>)
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f884 	bl	80010f4 <CountLoop>
	while(millis()- a <=500){
 8000fec:	f000 f928 	bl	8001240 <millis>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	89f9      	ldrh	r1, [r7, #14]
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	b289      	uxth	r1, r1
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	4688      	mov	r8, r1
 8000ffe:	4681      	mov	r9, r0
 8001000:	ebb2 0408 	subs.w	r4, r2, r8
 8001004:	eb63 0509 	sbc.w	r5, r3, r9
 8001008:	f240 13f5 	movw	r3, #501	; 0x1f5
 800100c:	429c      	cmp	r4, r3
 800100e:	f175 0300 	sbcs.w	r3, r5, #0
 8001012:	d3c1      	bcc.n	8000f98 <get_rpm+0xa0>
	}
	rpm= ((double)loop*65000+((flag_rot)?(double)(65535-cnt):(double)cnt))/47000*2*60;
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <get_rpm+0x1f0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa8b 	bl	8000534 <__aeabi_i2d>
 800101e:	a326      	add	r3, pc, #152	; (adr r3, 80010b8 <get_rpm+0x1c0>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff faf0 	bl	8000608 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4614      	mov	r4, r2
 800102e:	461d      	mov	r5, r3
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <get_rpm+0x1d8>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d008      	beq.n	800104a <get_rpm+0x152>
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <get_rpm+0x1ec>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001040:	33ff      	adds	r3, #255	; 0xff
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa76 	bl	8000534 <__aeabi_i2d>
 8001048:	e004      	b.n	8001054 <get_rpm+0x15c>
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <get_rpm+0x1ec>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fa60 	bl	8000514 <__aeabi_ui2d>
 8001054:	4622      	mov	r2, r4
 8001056:	462b      	mov	r3, r5
 8001058:	f7ff f920 	bl	800029c <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	a316      	add	r3, pc, #88	; (adr r3, 80010c0 <get_rpm+0x1c8>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff fbf7 	bl	800085c <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	f7ff f90f 	bl	800029c <__adddf3>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <get_rpm+0x1f4>)
 800108c:	f7ff fabc 	bl	8000608 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4916      	ldr	r1, [pc, #88]	; (80010f0 <get_rpm+0x1f8>)
 8001096:	e9c1 2300 	strd	r2, r3, [r1]

	return rpm;
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <get_rpm+0x1f8>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	ec43 2b17 	vmov	d7, r2, r3
}
 80010a4:	eeb0 0a47 	vmov.f32	s0, s14
 80010a8:	eef0 0a67 	vmov.f32	s1, s15
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010b4:	f3af 8000 	nop.w
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40efbd00 	.word	0x40efbd00
 80010c0:	00000000 	.word	0x00000000
 80010c4:	40e6f300 	.word	0x40e6f300
 80010c8:	20000448 	.word	0x20000448
 80010cc:	20000228 	.word	0x20000228
 80010d0:	20000210 	.word	0x20000210
 80010d4:	20000449 	.word	0x20000449
 80010d8:	200002b8 	.word	0x200002b8
 80010dc:	2000044a 	.word	0x2000044a
 80010e0:	20000300 	.word	0x20000300
 80010e4:	20000208 	.word	0x20000208
 80010e8:	2000020c 	.word	0x2000020c
 80010ec:	404e0000 	.word	0x404e0000
 80010f0:	20000200 	.word	0x20000200

080010f4 <CountLoop>:
void CountLoop(uint16_t cnt, bool flag){
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	460a      	mov	r2, r1
 80010fe:	80fb      	strh	r3, [r7, #6]
 8001100:	4613      	mov	r3, r2
 8001102:	717b      	strb	r3, [r7, #5]
	if (!flag){
 8001104:	797b      	ldrb	r3, [r7, #5]
 8001106:	f083 0301 	eor.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00d      	beq.n	800112c <CountLoop+0x38>
		if(cnt<preCnt){ //working as MOTOR1=RESET, MOTOR2=RESET, MOTOR3=RESET
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <CountLoop+0x60>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	88fa      	ldrh	r2, [r7, #6]
 8001116:	429a      	cmp	r2, r3
 8001118:	d204      	bcs.n	8001124 <CountLoop+0x30>
			loop++;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <CountLoop+0x64>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <CountLoop+0x64>)
 8001122:	6013      	str	r3, [r2, #0]
		}
		preCnt=cnt;
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <CountLoop+0x60>)
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	8013      	strh	r3, [r2, #0]
		if(cnt>preCnt){	//
			loop++;
		}
		preCnt=cnt;
	}
}
 800112a:	e00c      	b.n	8001146 <CountLoop+0x52>
		if(cnt>preCnt){	//
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <CountLoop+0x60>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	88fa      	ldrh	r2, [r7, #6]
 8001132:	429a      	cmp	r2, r3
 8001134:	d904      	bls.n	8001140 <CountLoop+0x4c>
			loop++;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <CountLoop+0x64>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <CountLoop+0x64>)
 800113e:	6013      	str	r3, [r2, #0]
		preCnt=cnt;
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <CountLoop+0x60>)
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	8013      	strh	r3, [r2, #0]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	2000020a 	.word	0x2000020a
 8001158:	2000020c 	.word	0x2000020c

0800115c <ResetLoop>:
void ResetLoop(bool flag){
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	if(!flag){
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f083 0301 	eor.w	r3, r3, #1
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <ResetLoop+0x24>
		loop=0;
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <ResetLoop+0x40>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
		preCnt=0;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <ResetLoop+0x44>)
 800117a:	2200      	movs	r2, #0
 800117c:	801a      	strh	r2, [r3, #0]
	}else{
		loop=0;
		preCnt=65535;
	}
}
 800117e:	e006      	b.n	800118e <ResetLoop+0x32>
		loop=0;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <ResetLoop+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
		preCnt=65535;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <ResetLoop+0x44>)
 8001188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800118c:	801a      	strh	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000020c 	.word	0x2000020c
 80011a0:	2000020a 	.word	0x2000020a

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	; (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	; (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <systick_init_ms>:
#include "stm32f4xx.h"                  // Device header
#include "stm32f4xx_it.h"

volatile uint64_t ms,rms;
void systick_init_ms(uint32_t freq) /*Frequency in MHz*/
	{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
	__disable_irq();
	SysTick->LOAD=(freq/1000)-1;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <systick_init_ms+0x40>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	099b      	lsrs	r3, r3, #6
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <systick_init_ms+0x44>)
 8001210:	3b01      	subs	r3, #1
 8001212:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <systick_init_ms+0x44>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=7; //0b00000111;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <systick_init_ms+0x44>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(SysTick_IRQn,7);
 8001220:	2107      	movs	r1, #7
 8001222:	f04f 30ff 	mov.w	r0, #4294967295
 8001226:	f7ff ffbd 	bl	80011a4 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800122a:	b662      	cpsie	i
}
 800122c:	bf00      	nop
	__enable_irq();	
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	10624dd3 	.word	0x10624dd3
 800123c:	e000e010 	.word	0xe000e010

08001240 <millis>:

uint64_t millis(void)
	{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
	__disable_irq();
	rms=ms; //store current ms in rms
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <millis+0x2c>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <millis+0x30>)
 8001250:	e9c1 2300 	strd	r2, r3, [r1]
  __ASM volatile ("cpsie i" : : : "memory");
 8001254:	b662      	cpsie	i
}
 8001256:	bf00      	nop
	__enable_irq();
	return rms;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <millis+0x30>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
	}
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000218 	.word	0x20000218
 8001270:	20000220 	.word	0x20000220

08001274 <reset_tick>:

void reset_tick(void){
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
	ms=0;
 8001278:	4909      	ldr	r1, [pc, #36]	; (80012a0 <reset_tick+0x2c>)
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	e9c1 2300 	strd	r2, r3, [r1]
	rms=0;
 8001286:	4907      	ldr	r1, [pc, #28]	; (80012a4 <reset_tick+0x30>)
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000218 	.word	0x20000218
 80012a4:	20000220 	.word	0x20000220

080012a8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012b0:	1d39      	adds	r1, r7, #4
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	2201      	movs	r2, #1
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <__io_putchar+0x20>)
 80012ba:	f003 fc67 	bl	8004b8c <HAL_UART_Transmit>
  return ch;
 80012be:	687b      	ldr	r3, [r7, #4]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000348 	.word	0x20000348

080012cc <pid_config>:
void pid_config(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	pid_par.Kp=5;
 80012d0:	4921      	ldr	r1, [pc, #132]	; (8001358 <pid_config+0x8c>)
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <pid_config+0x90>)
 80012d8:	e9c1 2300 	strd	r2, r3, [r1]
	pid_par.Ki=3;
 80012dc:	491e      	ldr	r1, [pc, #120]	; (8001358 <pid_config+0x8c>)
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <pid_config+0x94>)
 80012e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid_par.Kd=3;
 80012e8:	491b      	ldr	r1, [pc, #108]	; (8001358 <pid_config+0x8c>)
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <pid_config+0x94>)
 80012f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pid_par.Ts=1;
 80012f4:	4918      	ldr	r1, [pc, #96]	; (8001358 <pid_config+0x8c>)
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <pid_config+0x98>)
 80012fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid_par.Anti_windup=Anti_windup_disabled;
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <pid_config+0x8c>)
 8001302:	2200      	movs	r2, #0
 8001304:	651a      	str	r2, [r3, #80]	; 0x50
	pid_par.Anti_windup_error=10;
 8001306:	4914      	ldr	r1, [pc, #80]	; (8001358 <pid_config+0x8c>)
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <pid_config+0x9c>)
 800130e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	pid_par.Set_point_motor_1=V1;
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <pid_config+0xa0>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	490f      	ldr	r1, [pc, #60]	; (8001358 <pid_config+0x8c>)
 800131a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid_par.Set_point_motor_2=V2;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <pid_config+0xa4>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	490c      	ldr	r1, [pc, #48]	; (8001358 <pid_config+0x8c>)
 8001326:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pid_par.Set_point_motor_3=V3;
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <pid_config+0xa8>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	4909      	ldr	r1, [pc, #36]	; (8001358 <pid_config+0x8c>)
 8001332:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	pid_par.Outmin=-5;
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <pid_config+0x8c>)
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <pid_config+0xac>)
 800133e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pid_par.Outmax=5;
 8001342:	4905      	ldr	r1, [pc, #20]	; (8001358 <pid_config+0x8c>)
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <pid_config+0x90>)
 800134a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	PID_init(&pid_par);
 800134e:	4802      	ldr	r0, [pc, #8]	; (8001358 <pid_config+0x8c>)
 8001350:	f000 fec4 	bl	80020dc <PID_init>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000390 	.word	0x20000390
 800135c:	40140000 	.word	0x40140000
 8001360:	40080000 	.word	0x40080000
 8001364:	3ff00000 	.word	0x3ff00000
 8001368:	40240000 	.word	0x40240000
 800136c:	20000418 	.word	0x20000418
 8001370:	20000420 	.word	0x20000420
 8001374:	20000428 	.word	0x20000428
 8001378:	c0140000 	.word	0xc0140000

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001380:	f001 fca6 	bl	8002cd0 <HAL_Init>
  /* USER CODE BEGIN Init */
  //init_State();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001384:	f000 f850 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001388:	f000 fa5e 	bl	8001848 <MX_GPIO_Init>
  MX_TIM3_Init();
 800138c:	f000 f98a 	bl	80016a4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001390:	f000 f8fe 	bl	8001590 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001394:	f000 f8a4 	bl	80014e0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001398:	f000 fa2c 	bl	80017f4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800139c:	f000 f9d6 	bl	800174c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  systick_init_ms(8000000);
 80013a0:	481a      	ldr	r0, [pc, #104]	; (800140c <main+0x90>)
 80013a2:	f7ff ff29 	bl	80011f8 <systick_init_ms>
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 100);
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <main+0x94>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2264      	movs	r2, #100	; 0x64
 80013ac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, 100); //motor 2
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <main+0x94>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2264      	movs	r2, #100	; 0x64
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 100); //motor 3
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <main+0x94>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2264      	movs	r2, #100	; 0x64
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c

//	flag_rot_1=false;
//	flag_rot_2=false;
//	flag_rot_3=false;

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013be:	2100      	movs	r1, #0
 80013c0:	4813      	ldr	r0, [pc, #76]	; (8001410 <main+0x94>)
 80013c2:	f002 fcdf 	bl	8003d84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80013c6:	2104      	movs	r1, #4
 80013c8:	4811      	ldr	r0, [pc, #68]	; (8001410 <main+0x94>)
 80013ca:	f002 fcdb 	bl	8003d84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013ce:	2108      	movs	r1, #8
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <main+0x94>)
 80013d2:	f002 fcd7 	bl	8003d84 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80013d6:	2104      	movs	r1, #4
 80013d8:	480e      	ldr	r0, [pc, #56]	; (8001414 <main+0x98>)
 80013da:	f002 fe29 	bl	8004030 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80013de:	2104      	movs	r1, #4
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <main+0x9c>)
 80013e2:	f002 fe25 	bl	8004030 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80013e6:	2104      	movs	r1, #4
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <main+0xa0>)
 80013ea:	f002 fe21 	bl	8004030 <HAL_TIM_Encoder_Start>
  /* USER CODE BEGIN WHILE */

  /*
   * max is 1m/s
   */
	Robot_Move(1, 225, 0);
 80013ee:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8001420 <main+0xa4>
 80013f2:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001424 <main+0xa8>
 80013f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80013fa:	f000 fa95 	bl	8001928 <Robot_Move>

	HAL_Delay(500);
 80013fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001402:	f001 fcd7 	bl	8002db4 <HAL_Delay>

  while (1)
  {
    /* USER CODE END WHILE */
	  PID();
 8001406:	f001 f8af 	bl	8002568 <PID>
 800140a:	e7fc      	b.n	8001406 <main+0x8a>
 800140c:	007a1200 	.word	0x007a1200
 8001410:	20000270 	.word	0x20000270
 8001414:	20000228 	.word	0x20000228
 8001418:	200002b8 	.word	0x200002b8
 800141c:	20000300 	.word	0x20000300
 8001420:	00000000 	.word	0x00000000
 8001424:	43610000 	.word	0x43610000

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b094      	sub	sp, #80	; 0x50
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	2230      	movs	r2, #48	; 0x30
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f004 fce1 	bl	8005dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <SystemClock_Config+0xb0>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	4a20      	ldr	r2, [pc, #128]	; (80014d8 <SystemClock_Config+0xb0>)
 8001456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <SystemClock_Config+0xb0>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <SystemClock_Config+0xb4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a1a      	ldr	r2, [pc, #104]	; (80014dc <SystemClock_Config+0xb4>)
 8001472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <SystemClock_Config+0xb4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001484:	2301      	movs	r3, #1
 8001486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	4618      	mov	r0, r3
 8001498:	f001 ff34 	bl	8003304 <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80014a2:	f000 fa39 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	230f      	movs	r3, #15
 80014a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014aa:	2301      	movs	r3, #1
 80014ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 f997 	bl	80037f4 <HAL_RCC_ClockConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80014cc:	f000 fa24 	bl	8001918 <Error_Handler>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3750      	adds	r7, #80	; 0x50
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000

080014e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2224      	movs	r2, #36	; 0x24
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f004 fc85 	bl	8005dfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_TIM1_Init+0xa8>)
 80014fe:	4a23      	ldr	r2, [pc, #140]	; (800158c <MX_TIM1_Init+0xac>)
 8001500:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <MX_TIM1_Init+0xa8>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MX_TIM1_Init+0xa8>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <MX_TIM1_Init+0xa8>)
 8001510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001514:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <MX_TIM1_Init+0xa8>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_TIM1_Init+0xa8>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <MX_TIM1_Init+0xa8>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001528:	2303      	movs	r3, #3
 800152a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001530:	2301      	movs	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001540:	2301      	movs	r3, #1
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4619      	mov	r1, r3
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <MX_TIM1_Init+0xa8>)
 8001554:	f002 fcc6 	bl	8003ee4 <HAL_TIM_Encoder_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800155e:	f000 f9db 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_TIM1_Init+0xa8>)
 8001570:	f003 fa4e 	bl	8004a10 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800157a:	f000 f9cd 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3730      	adds	r7, #48	; 0x30
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000228 	.word	0x20000228
 800158c:	40010000 	.word	0x40010000

08001590 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08e      	sub	sp, #56	; 0x38
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a4:	f107 0320 	add.w	r3, r7, #32
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
 80015bc:	615a      	str	r2, [r3, #20]
 80015be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015c0:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <MX_TIM2_Init+0x110>)
 80015c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <MX_TIM2_Init+0x110>)
 80015ca:	2207      	movs	r2, #7
 80015cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <MX_TIM2_Init+0x110>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <MX_TIM2_Init+0x110>)
 80015d6:	2263      	movs	r2, #99	; 0x63
 80015d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <MX_TIM2_Init+0x110>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b2f      	ldr	r3, [pc, #188]	; (80016a0 <MX_TIM2_Init+0x110>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e6:	482e      	ldr	r0, [pc, #184]	; (80016a0 <MX_TIM2_Init+0x110>)
 80015e8:	f002 fb24 	bl	8003c34 <HAL_TIM_Base_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80015f2:	f000 f991 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001600:	4619      	mov	r1, r3
 8001602:	4827      	ldr	r0, [pc, #156]	; (80016a0 <MX_TIM2_Init+0x110>)
 8001604:	f002 fe64 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800160e:	f000 f983 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001612:	4823      	ldr	r0, [pc, #140]	; (80016a0 <MX_TIM2_Init+0x110>)
 8001614:	f002 fb5d 	bl	8003cd2 <HAL_TIM_PWM_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800161e:	f000 f97b 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	4619      	mov	r1, r3
 8001630:	481b      	ldr	r0, [pc, #108]	; (80016a0 <MX_TIM2_Init+0x110>)
 8001632:	f003 f9ed 	bl	8004a10 <HAL_TIMEx_MasterConfigSynchronization>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800163c:	f000 f96c 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001640:	2360      	movs	r3, #96	; 0x60
 8001642:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	4619      	mov	r1, r3
 8001656:	4812      	ldr	r0, [pc, #72]	; (80016a0 <MX_TIM2_Init+0x110>)
 8001658:	f002 fd78 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001662:	f000 f959 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2204      	movs	r2, #4
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_TIM2_Init+0x110>)
 800166e:	f002 fd6d 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001678:	f000 f94e 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2208      	movs	r2, #8
 8001680:	4619      	mov	r1, r3
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <MX_TIM2_Init+0x110>)
 8001684:	f002 fd62 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800168e:	f000 f943 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <MX_TIM2_Init+0x110>)
 8001694:	f001 f944 	bl	8002920 <HAL_TIM_MspPostInit>

}
 8001698:	bf00      	nop
 800169a:	3738      	adds	r7, #56	; 0x38
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000270 	.word	0x20000270

080016a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	2224      	movs	r2, #36	; 0x24
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f004 fba3 	bl	8005dfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <MX_TIM3_Init+0xa0>)
 80016c2:	4a21      	ldr	r2, [pc, #132]	; (8001748 <MX_TIM3_Init+0xa4>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <MX_TIM3_Init+0xa0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_TIM3_Init+0xa0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_TIM3_Init+0xa0>)
 80016d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_TIM3_Init+0xa0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_TIM3_Init+0xa0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016e6:	2303      	movs	r3, #3
 80016e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ee:	2301      	movs	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016fe:	2301      	movs	r3, #1
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <MX_TIM3_Init+0xa0>)
 8001712:	f002 fbe7 	bl	8003ee4 <HAL_TIM_Encoder_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800171c:	f000 f8fc 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_TIM3_Init+0xa0>)
 800172e:	f003 f96f 	bl	8004a10 <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001738:	f000 f8ee 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3730      	adds	r7, #48	; 0x30
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200002b8 	.word	0x200002b8
 8001748:	40000400 	.word	0x40000400

0800174c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	2224      	movs	r2, #36	; 0x24
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f004 fb4f 	bl	8005dfe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001768:	4b20      	ldr	r3, [pc, #128]	; (80017ec <MX_TIM4_Init+0xa0>)
 800176a:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <MX_TIM4_Init+0xa4>)
 800176c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <MX_TIM4_Init+0xa0>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <MX_TIM4_Init+0xa0>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_TIM4_Init+0xa0>)
 800177c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001780:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MX_TIM4_Init+0xa0>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <MX_TIM4_Init+0xa0>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800178e:	2303      	movs	r3, #3
 8001790:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001796:	2301      	movs	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017a6:	2301      	movs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4619      	mov	r1, r3
 80017b8:	480c      	ldr	r0, [pc, #48]	; (80017ec <MX_TIM4_Init+0xa0>)
 80017ba:	f002 fb93 	bl	8003ee4 <HAL_TIM_Encoder_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80017c4:	f000 f8a8 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_TIM4_Init+0xa0>)
 80017d6:	f003 f91b 	bl	8004a10 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80017e0:	f000 f89a 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	3730      	adds	r7, #48	; 0x30
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000300 	.word	0x20000300
 80017f0:	40000800 	.word	0x40000800

080017f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <MX_USART2_UART_Init+0x50>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 8001800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_USART2_UART_Init+0x4c>)
 800182c:	f003 f95e 	bl	8004aec <HAL_UART_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001836:	f000 f86f 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000348 	.word	0x20000348
 8001844:	40004400 	.word	0x40004400

08001848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <MX_GPIO_Init+0xc4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a29      	ldr	r2, [pc, #164]	; (800190c <MX_GPIO_Init+0xc4>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <MX_GPIO_Init+0xc4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <MX_GPIO_Init+0xc4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a22      	ldr	r2, [pc, #136]	; (800190c <MX_GPIO_Init+0xc4>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <MX_GPIO_Init+0xc4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <MX_GPIO_Init+0xc4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a1b      	ldr	r2, [pc, #108]	; (800190c <MX_GPIO_Init+0xc4>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <MX_GPIO_Init+0xc4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIRECTION_3_Pin|DIRECTION_2_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2106      	movs	r1, #6
 80018b6:	4816      	ldr	r0, [pc, #88]	; (8001910 <MX_GPIO_Init+0xc8>)
 80018b8:	f001 fd0a 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c2:	4814      	ldr	r0, [pc, #80]	; (8001914 <MX_GPIO_Init+0xcc>)
 80018c4:	f001 fd04 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIRECTION_3_Pin DIRECTION_2_Pin */
  GPIO_InitStruct.Pin = DIRECTION_3_Pin|DIRECTION_2_Pin;
 80018c8:	2306      	movs	r3, #6
 80018ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <MX_GPIO_Init+0xc8>)
 80018e0:	f001 fb72 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECTION_1_Pin */
  GPIO_InitStruct.Pin = DIRECTION_1_Pin;
 80018e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIRECTION_1_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_GPIO_Init+0xcc>)
 80018fe:	f001 fb63 	bl	8002fc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001902:	bf00      	nop
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40020400 	.word	0x40020400
 8001914:	40020000 	.word	0x40020000

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	e7fe      	b.n	8001920 <Error_Handler+0x8>
 8001922:	0000      	movs	r0, r0
 8001924:	0000      	movs	r0, r0
	...

08001928 <Robot_Move>:
flag_rot_2,
flag_rot_3=false;

double prev_duty_1, prev_duty_2, prev_duty_3;
double duty=100;
void Robot_Move(float Vd, float Theta, float Vtheta){
 8001928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800192c:	b092      	sub	sp, #72	; 0x48
 800192e:	af00      	add	r7, sp, #0
 8001930:	ed87 0a07 	vstr	s0, [r7, #28]
 8001934:	edc7 0a06 	vstr	s1, [r7, #24]
 8001938:	ed87 1a05 	vstr	s2, [r7, #20]
	double V1_abs, V2_abs, V3_abs, Vmax, Temp;

	V2=Vd*(-0.87*cos(Theta*PI/180)-0.5*sin(Theta*PI/180));
 800193c:	69f8      	ldr	r0, [r7, #28]
 800193e:	f7fe fe0b 	bl	8000558 <__aeabi_f2d>
 8001942:	4604      	mov	r4, r0
 8001944:	460d      	mov	r5, r1
 8001946:	69b8      	ldr	r0, [r7, #24]
 8001948:	f7fe fe06 	bl	8000558 <__aeabi_f2d>
 800194c:	a3ba      	add	r3, pc, #744	; (adr r3, 8001c38 <Robot_Move+0x310>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fe59 	bl	8000608 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4bbb      	ldr	r3, [pc, #748]	; (8001c50 <Robot_Move+0x328>)
 8001964:	f7fe ff7a 	bl	800085c <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	ec43 2b17 	vmov	d7, r2, r3
 8001970:	eeb0 0a47 	vmov.f32	s0, s14
 8001974:	eef0 0a67 	vmov.f32	s1, s15
 8001978:	f006 f996 	bl	8007ca8 <cos>
 800197c:	ec51 0b10 	vmov	r0, r1, d0
 8001980:	a3ab      	add	r3, pc, #684	; (adr r3, 8001c30 <Robot_Move+0x308>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe fe3f 	bl	8000608 <__aeabi_dmul>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4690      	mov	r8, r2
 8001990:	4699      	mov	r9, r3
 8001992:	69b8      	ldr	r0, [r7, #24]
 8001994:	f7fe fde0 	bl	8000558 <__aeabi_f2d>
 8001998:	a3a7      	add	r3, pc, #668	; (adr r3, 8001c38 <Robot_Move+0x310>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fe33 	bl	8000608 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4ba8      	ldr	r3, [pc, #672]	; (8001c50 <Robot_Move+0x328>)
 80019b0:	f7fe ff54 	bl	800085c <__aeabi_ddiv>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	ec43 2b17 	vmov	d7, r2, r3
 80019bc:	eeb0 0a47 	vmov.f32	s0, s14
 80019c0:	eef0 0a67 	vmov.f32	s1, s15
 80019c4:	f006 f9c4 	bl	8007d50 <sin>
 80019c8:	ec51 0b10 	vmov	r0, r1, d0
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4ba0      	ldr	r3, [pc, #640]	; (8001c54 <Robot_Move+0x32c>)
 80019d2:	f7fe fe19 	bl	8000608 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4640      	mov	r0, r8
 80019dc:	4649      	mov	r1, r9
 80019de:	f7fe fc5b 	bl	8000298 <__aeabi_dsub>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4620      	mov	r0, r4
 80019e8:	4629      	mov	r1, r5
 80019ea:	f7fe fe0d 	bl	8000608 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4999      	ldr	r1, [pc, #612]	; (8001c58 <Robot_Move+0x330>)
 80019f4:	e9c1 2300 	strd	r2, r3, [r1]
	V3=Vd*(0.87*cos(Theta*PI/180)-0.5*sin(Theta*PI/180));
 80019f8:	69f8      	ldr	r0, [r7, #28]
 80019fa:	f7fe fdad 	bl	8000558 <__aeabi_f2d>
 80019fe:	4604      	mov	r4, r0
 8001a00:	460d      	mov	r5, r1
 8001a02:	69b8      	ldr	r0, [r7, #24]
 8001a04:	f7fe fda8 	bl	8000558 <__aeabi_f2d>
 8001a08:	a38b      	add	r3, pc, #556	; (adr r3, 8001c38 <Robot_Move+0x310>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fdfb 	bl	8000608 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b8c      	ldr	r3, [pc, #560]	; (8001c50 <Robot_Move+0x328>)
 8001a20:	f7fe ff1c 	bl	800085c <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	ec43 2b17 	vmov	d7, r2, r3
 8001a2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a30:	eef0 0a67 	vmov.f32	s1, s15
 8001a34:	f006 f938 	bl	8007ca8 <cos>
 8001a38:	ec51 0b10 	vmov	r0, r1, d0
 8001a3c:	a380      	add	r3, pc, #512	; (adr r3, 8001c40 <Robot_Move+0x318>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fde1 	bl	8000608 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4690      	mov	r8, r2
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	69b8      	ldr	r0, [r7, #24]
 8001a50:	f7fe fd82 	bl	8000558 <__aeabi_f2d>
 8001a54:	a378      	add	r3, pc, #480	; (adr r3, 8001c38 <Robot_Move+0x310>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7fe fdd5 	bl	8000608 <__aeabi_dmul>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	4b79      	ldr	r3, [pc, #484]	; (8001c50 <Robot_Move+0x328>)
 8001a6c:	f7fe fef6 	bl	800085c <__aeabi_ddiv>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	ec43 2b17 	vmov	d7, r2, r3
 8001a78:	eeb0 0a47 	vmov.f32	s0, s14
 8001a7c:	eef0 0a67 	vmov.f32	s1, s15
 8001a80:	f006 f966 	bl	8007d50 <sin>
 8001a84:	ec51 0b10 	vmov	r0, r1, d0
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b71      	ldr	r3, [pc, #452]	; (8001c54 <Robot_Move+0x32c>)
 8001a8e:	f7fe fdbb 	bl	8000608 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4640      	mov	r0, r8
 8001a98:	4649      	mov	r1, r9
 8001a9a:	f7fe fbfd 	bl	8000298 <__aeabi_dsub>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f7fe fdaf 	bl	8000608 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	496b      	ldr	r1, [pc, #428]	; (8001c5c <Robot_Move+0x334>)
 8001ab0:	e9c1 2300 	strd	r2, r3, [r1]
	V1=Vd*sin(Theta*PI/180);
 8001ab4:	69f8      	ldr	r0, [r7, #28]
 8001ab6:	f7fe fd4f 	bl	8000558 <__aeabi_f2d>
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	69b8      	ldr	r0, [r7, #24]
 8001ac0:	f7fe fd4a 	bl	8000558 <__aeabi_f2d>
 8001ac4:	a35c      	add	r3, pc, #368	; (adr r3, 8001c38 <Robot_Move+0x310>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fd9d 	bl	8000608 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <Robot_Move+0x328>)
 8001adc:	f7fe febe 	bl	800085c <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	ec43 2b17 	vmov	d7, r2, r3
 8001ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8001aec:	eef0 0a67 	vmov.f32	s1, s15
 8001af0:	f006 f92e 	bl	8007d50 <sin>
 8001af4:	ec53 2b10 	vmov	r2, r3, d0
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe fd84 	bl	8000608 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4956      	ldr	r1, [pc, #344]	; (8001c60 <Robot_Move+0x338>)
 8001b06:	e9c1 2300 	strd	r2, r3, [r1]

	V1_abs=fabs(V1);
 8001b0a:	4b55      	ldr	r3, [pc, #340]	; (8001c60 <Robot_Move+0x338>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	4611      	mov	r1, r2
 8001b12:	6439      	str	r1, [r7, #64]	; 0x40
 8001b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b18:	647b      	str	r3, [r7, #68]	; 0x44
	V2_abs=fabs(V2);
 8001b1a:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <Robot_Move+0x330>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	4611      	mov	r1, r2
 8001b22:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b28:	63fb      	str	r3, [r7, #60]	; 0x3c
	V3_abs=fabs(V3);
 8001b2a:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <Robot_Move+0x334>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	4611      	mov	r1, r2
 8001b32:	6339      	str	r1, [r7, #48]	; 0x30
 8001b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34

	Vmax=V1_abs;
 8001b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V2_abs > Vmax) ? V2_abs : Vmax;
 8001b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b46:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b4a:	f7fe ffed 	bl	8000b28 <__aeabi_dcmpgt>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <Robot_Move+0x232>
 8001b54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b58:	e001      	b.n	8001b5e <Robot_Move+0x236>
 8001b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V3_abs > Vmax) ? V3_abs : Vmax;
 8001b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b66:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b6a:	f7fe ffdd 	bl	8000b28 <__aeabi_dcmpgt>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <Robot_Move+0x252>
 8001b74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b78:	e001      	b.n	8001b7e <Robot_Move+0x256>
 8001b7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (Vmax>10000){
 8001b82:	a331      	add	r3, pc, #196	; (adr r3, 8001c48 <Robot_Move+0x320>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b8c:	f7fe ffcc 	bl	8000b28 <__aeabi_dcmpgt>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d02e      	beq.n	8001bf4 <Robot_Move+0x2cc>
	Temp=10000/Vmax;
 8001b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b9a:	a12b      	add	r1, pc, #172	; (adr r1, 8001c48 <Robot_Move+0x320>)
 8001b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ba0:	f7fe fe5c 	bl	800085c <__aeabi_ddiv>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	e9c7 2308 	strd	r2, r3, [r7, #32]
		V1= V1*Temp;
 8001bac:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <Robot_Move+0x338>)
 8001bae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bb6:	f7fe fd27 	bl	8000608 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4928      	ldr	r1, [pc, #160]	; (8001c60 <Robot_Move+0x338>)
 8001bc0:	e9c1 2300 	strd	r2, r3, [r1]
		V2= V2*Temp;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <Robot_Move+0x330>)
 8001bc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bce:	f7fe fd1b 	bl	8000608 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4920      	ldr	r1, [pc, #128]	; (8001c58 <Robot_Move+0x330>)
 8001bd8:	e9c1 2300 	strd	r2, r3, [r1]
		V3= V3*Temp;
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <Robot_Move+0x334>)
 8001bde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001be6:	f7fe fd0f 	bl	8000608 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	491b      	ldr	r1, [pc, #108]	; (8001c5c <Robot_Move+0x334>)
 8001bf0:	e9c1 2300 	strd	r2, r3, [r1]
//	 V1 = Vmax*V1/10000;
//	 V2 = Vmax*V2/10000;
//	 V3 = Vmax*V3/10000;

//	 printf("V1= %.2f m/s \t V2= %.2f m/s \t V3= %.2f m/s \r\n", V1,V2,V3);
	if(V1<0){
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <Robot_Move+0x338>)
 8001bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	f7fe ff73 	bl	8000aec <__aeabi_dcmplt>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02b      	beq.n	8001c64 <Robot_Move+0x33c>
	 Rotation(MOTOR_1, !CLOCK_WISE);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f000 f9e4 	bl	8001fdc <Rotation>
	 V1=fabs(V1);
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <Robot_Move+0x338>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	60ba      	str	r2, [r7, #8]
 8001c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <Robot_Move+0x338>)
 8001c24:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c28:	ed83 7b00 	vstr	d7, [r3]
 8001c2c:	e01e      	b.n	8001c6c <Robot_Move+0x344>
 8001c2e:	bf00      	nop
 8001c30:	3d70a3d7 	.word	0x3d70a3d7
 8001c34:	bfebd70a 	.word	0xbfebd70a
 8001c38:	54524550 	.word	0x54524550
 8001c3c:	400921fb 	.word	0x400921fb
 8001c40:	3d70a3d7 	.word	0x3d70a3d7
 8001c44:	3febd70a 	.word	0x3febd70a
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	40c38800 	.word	0x40c38800
 8001c50:	40668000 	.word	0x40668000
 8001c54:	3fe00000 	.word	0x3fe00000
 8001c58:	20000420 	.word	0x20000420
 8001c5c:	20000428 	.word	0x20000428
 8001c60:	20000418 	.word	0x20000418
	} else{
	 Rotation(MOTOR_1, CLOCK_WISE);
 8001c64:	2101      	movs	r1, #1
 8001c66:	2001      	movs	r0, #1
 8001c68:	f000 f9b8 	bl	8001fdc <Rotation>
	}
	if(V2<0){
 8001c6c:	4b6c      	ldr	r3, [pc, #432]	; (8001e20 <Robot_Move+0x4f8>)
 8001c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	f7fe ff37 	bl	8000aec <__aeabi_dcmplt>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d010      	beq.n	8001ca6 <Robot_Move+0x37e>
	 Rotation(MOTOR_2, !CLOCK_WISE);
 8001c84:	2100      	movs	r1, #0
 8001c86:	2002      	movs	r0, #2
 8001c88:	f000 f9a8 	bl	8001fdc <Rotation>
	 V2=fabs(V2);
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <Robot_Move+0x4f8>)
 8001c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c92:	603a      	str	r2, [r7, #0]
 8001c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <Robot_Move+0x4f8>)
 8001c9c:	ed97 7b00 	vldr	d7, [r7]
 8001ca0:	ed83 7b00 	vstr	d7, [r3]
 8001ca4:	e003      	b.n	8001cae <Robot_Move+0x386>
	} else{
	 Rotation(MOTOR_2, CLOCK_WISE);
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f000 f997 	bl	8001fdc <Rotation>
	}
	if(V3<0){
 8001cae:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <Robot_Move+0x4fc>)
 8001cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	f7fe ff16 	bl	8000aec <__aeabi_dcmplt>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00d      	beq.n	8001ce2 <Robot_Move+0x3ba>
	 Rotation(MOTOR_3, !CLOCK_WISE);
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f000 f987 	bl	8001fdc <Rotation>
	 V3=fabs(V3);
 8001cce:	4b55      	ldr	r3, [pc, #340]	; (8001e24 <Robot_Move+0x4fc>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	4692      	mov	sl, r2
 8001cd6:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001cda:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <Robot_Move+0x4fc>)
 8001cdc:	e9c3 ab00 	strd	sl, fp, [r3]
 8001ce0:	e003      	b.n	8001cea <Robot_Move+0x3c2>
	} else{
	 Rotation(MOTOR_3, CLOCK_WISE);
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f000 f979 	bl	8001fdc <Rotation>
	}

	V1=v2rpm(V1);
 8001cea:	4b4f      	ldr	r3, [pc, #316]	; (8001e28 <Robot_Move+0x500>)
 8001cec:	ed93 7b00 	vldr	d7, [r3]
 8001cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf4:	eef0 0a67 	vmov.f32	s1, s15
 8001cf8:	f000 f9ca 	bl	8002090 <v2rpm>
 8001cfc:	eeb0 7a40 	vmov.f32	s14, s0
 8001d00:	eef0 7a60 	vmov.f32	s15, s1
 8001d04:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <Robot_Move+0x500>)
 8001d06:	ed83 7b00 	vstr	d7, [r3]
	V2=v2rpm(V2);
 8001d0a:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <Robot_Move+0x4f8>)
 8001d0c:	ed93 7b00 	vldr	d7, [r3]
 8001d10:	eeb0 0a47 	vmov.f32	s0, s14
 8001d14:	eef0 0a67 	vmov.f32	s1, s15
 8001d18:	f000 f9ba 	bl	8002090 <v2rpm>
 8001d1c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d20:	eef0 7a60 	vmov.f32	s15, s1
 8001d24:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <Robot_Move+0x4f8>)
 8001d26:	ed83 7b00 	vstr	d7, [r3]
	V3=v2rpm(V3);
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <Robot_Move+0x4fc>)
 8001d2c:	ed93 7b00 	vldr	d7, [r3]
 8001d30:	eeb0 0a47 	vmov.f32	s0, s14
 8001d34:	eef0 0a67 	vmov.f32	s1, s15
 8001d38:	f000 f9aa 	bl	8002090 <v2rpm>
 8001d3c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d40:	eef0 7a60 	vmov.f32	s15, s1
 8001d44:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <Robot_Move+0x4fc>)
 8001d46:	ed83 7b00 	vstr	d7, [r3]
	pid_config();
 8001d4a:	f7ff fabf 	bl	80012cc <pid_config>

	duty_V1=rpm_to_duty(V1);
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <Robot_Move+0x500>)
 8001d50:	ed93 7b00 	vldr	d7, [r3]
 8001d54:	eeb0 0a47 	vmov.f32	s0, s14
 8001d58:	eef0 0a67 	vmov.f32	s1, s15
 8001d5c:	f000 f874 	bl	8001e48 <rpm_to_duty>
 8001d60:	eeb0 7a40 	vmov.f32	s14, s0
 8001d64:	eef0 7a60 	vmov.f32	s15, s1
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <Robot_Move+0x504>)
 8001d6a:	ed83 7b00 	vstr	d7, [r3]
	duty_V2=rpm_to_duty(V2);
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <Robot_Move+0x4f8>)
 8001d70:	ed93 7b00 	vldr	d7, [r3]
 8001d74:	eeb0 0a47 	vmov.f32	s0, s14
 8001d78:	eef0 0a67 	vmov.f32	s1, s15
 8001d7c:	f000 f864 	bl	8001e48 <rpm_to_duty>
 8001d80:	eeb0 7a40 	vmov.f32	s14, s0
 8001d84:	eef0 7a60 	vmov.f32	s15, s1
 8001d88:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <Robot_Move+0x508>)
 8001d8a:	ed83 7b00 	vstr	d7, [r3]
	duty_V3=rpm_to_duty(V3);
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <Robot_Move+0x4fc>)
 8001d90:	ed93 7b00 	vldr	d7, [r3]
 8001d94:	eeb0 0a47 	vmov.f32	s0, s14
 8001d98:	eef0 0a67 	vmov.f32	s1, s15
 8001d9c:	f000 f854 	bl	8001e48 <rpm_to_duty>
 8001da0:	eeb0 7a40 	vmov.f32	s14, s0
 8001da4:	eef0 7a60 	vmov.f32	s15, s1
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <Robot_Move+0x50c>)
 8001daa:	ed83 7b00 	vstr	d7, [r3]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, duty_V1);
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <Robot_Move+0x504>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	4920      	ldr	r1, [pc, #128]	; (8001e38 <Robot_Move+0x510>)
 8001db6:	680c      	ldr	r4, [r1, #0]
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fefc 	bl	8000bb8 <__aeabi_d2uiz>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	6363      	str	r3, [r4, #52]	; 0x34
	prev_duty_1=duty_V1;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <Robot_Move+0x504>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	491c      	ldr	r1, [pc, #112]	; (8001e3c <Robot_Move+0x514>)
 8001dcc:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, duty_V2);
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <Robot_Move+0x508>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	4918      	ldr	r1, [pc, #96]	; (8001e38 <Robot_Move+0x510>)
 8001dd8:	680c      	ldr	r4, [r1, #0]
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe feeb 	bl	8000bb8 <__aeabi_d2uiz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	63a3      	str	r3, [r4, #56]	; 0x38
	prev_duty_2=duty_V2;
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <Robot_Move+0x508>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	4914      	ldr	r1, [pc, #80]	; (8001e40 <Robot_Move+0x518>)
 8001dee:	e9c1 2300 	strd	r2, r3, [r1]
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, duty_V3);
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <Robot_Move+0x50c>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	490f      	ldr	r1, [pc, #60]	; (8001e38 <Robot_Move+0x510>)
 8001dfa:	680c      	ldr	r4, [r1, #0]
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe feda 	bl	8000bb8 <__aeabi_d2uiz>
 8001e04:	4603      	mov	r3, r0
 8001e06:	63e3      	str	r3, [r4, #60]	; 0x3c
	prev_duty_3=duty_V3;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <Robot_Move+0x50c>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	490d      	ldr	r1, [pc, #52]	; (8001e44 <Robot_Move+0x51c>)
 8001e10:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001e14:	bf00      	nop
 8001e16:	3748      	adds	r7, #72	; 0x48
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000420 	.word	0x20000420
 8001e24:	20000428 	.word	0x20000428
 8001e28:	20000418 	.word	0x20000418
 8001e2c:	20000430 	.word	0x20000430
 8001e30:	20000438 	.word	0x20000438
 8001e34:	20000440 	.word	0x20000440
 8001e38:	20000270 	.word	0x20000270
 8001e3c:	20000450 	.word	0x20000450
 8001e40:	20000458 	.word	0x20000458
 8001e44:	20000460 	.word	0x20000460

08001e48 <rpm_to_duty>:
double rpm_to_duty(double rpm){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	ed87 0b00 	vstr	d0, [r7]
	double duty=(98.15-0.6*rpm);
 8001e52:	a30f      	add	r3, pc, #60	; (adr r3, 8001e90 <rpm_to_duty+0x48>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e5c:	f7fe fbd4 	bl	8000608 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	a10c      	add	r1, pc, #48	; (adr r1, 8001e98 <rpm_to_duty+0x50>)
 8001e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e6a:	f7fe fa15 	bl	8000298 <__aeabi_dsub>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return duty;
 8001e76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e7a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e82:	eef0 0a67 	vmov.f32	s1, s15
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	f3af 8000 	nop.w
 8001e90:	33333333 	.word	0x33333333
 8001e94:	3fe33333 	.word	0x3fe33333
 8001e98:	9999999a 	.word	0x9999999a
 8001e9c:	40588999 	.word	0x40588999

08001ea0 <set_duty_cycle>:
void set_duty_cycle(int motor, double out){
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	ed87 0b00 	vstr	d0, [r7]
	double prev_duty;
	if(motor==MOTOR_1){
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <set_duty_cycle+0x1e>
		prev_duty=prev_duty_1;
 8001eb2:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <set_duty_cycle+0x124>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001ebc:	e010      	b.n	8001ee0 <set_duty_cycle+0x40>
	}
	else if(motor==MOTOR_2){
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d105      	bne.n	8001ed0 <set_duty_cycle+0x30>
		prev_duty=prev_duty_2;
 8001ec4:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <set_duty_cycle+0x128>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001ece:	e007      	b.n	8001ee0 <set_duty_cycle+0x40>
	}
	else if(motor==MOTOR_3){
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d104      	bne.n	8001ee0 <set_duty_cycle+0x40>
		prev_duty=prev_duty_3;
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <set_duty_cycle+0x12c>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
//	double duty = rpm_to_duty(rpm,out)-out;
	duty=prev_duty-out;
 8001ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ee4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ee8:	f7fe f9d6 	bl	8000298 <__aeabi_dsub>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4937      	ldr	r1, [pc, #220]	; (8001fd0 <set_duty_cycle+0x130>)
 8001ef2:	e9c1 2300 	strd	r2, r3, [r1]
	if(duty>100){duty=100;}
 8001ef6:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <set_duty_cycle+0x130>)
 8001ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <set_duty_cycle+0x134>)
 8001f02:	f7fe fe11 	bl	8000b28 <__aeabi_dcmpgt>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <set_duty_cycle+0x78>
 8001f0c:	4930      	ldr	r1, [pc, #192]	; (8001fd0 <set_duty_cycle+0x130>)
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <set_duty_cycle+0x134>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
	if(duty<0){duty=0;}
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <set_duty_cycle+0x130>)
 8001f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	f7fe fde1 	bl	8000aec <__aeabi_dcmplt>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <set_duty_cycle+0x9e>
 8001f30:	4927      	ldr	r1, [pc, #156]	; (8001fd0 <set_duty_cycle+0x130>)
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	e9c1 2300 	strd	r2, r3, [r1]

	if(motor==MOTOR_1){
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d111      	bne.n	8001f68 <set_duty_cycle+0xc8>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, duty);
 8001f44:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <set_duty_cycle+0x130>)
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	4923      	ldr	r1, [pc, #140]	; (8001fd8 <set_duty_cycle+0x138>)
 8001f4c:	680c      	ldr	r4, [r1, #0]
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fe31 	bl	8000bb8 <__aeabi_d2uiz>
 8001f56:	4603      	mov	r3, r0
 8001f58:	6363      	str	r3, [r4, #52]	; 0x34
		prev_duty_1=duty;
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <set_duty_cycle+0x130>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	4918      	ldr	r1, [pc, #96]	; (8001fc4 <set_duty_cycle+0x124>)
 8001f62:	e9c1 2300 	strd	r2, r3, [r1]
	}
	else if(motor==MOTOR_3){
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, duty);
		prev_duty_3=duty;
	}
}
 8001f66:	e028      	b.n	8001fba <set_duty_cycle+0x11a>
	else if(motor==MOTOR_2){
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d111      	bne.n	8001f92 <set_duty_cycle+0xf2>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, duty);
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <set_duty_cycle+0x130>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	4918      	ldr	r1, [pc, #96]	; (8001fd8 <set_duty_cycle+0x138>)
 8001f76:	680c      	ldr	r4, [r1, #0]
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7fe fe1c 	bl	8000bb8 <__aeabi_d2uiz>
 8001f80:	4603      	mov	r3, r0
 8001f82:	63a3      	str	r3, [r4, #56]	; 0x38
		prev_duty_2=duty;
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <set_duty_cycle+0x130>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	490f      	ldr	r1, [pc, #60]	; (8001fc8 <set_duty_cycle+0x128>)
 8001f8c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001f90:	e013      	b.n	8001fba <set_duty_cycle+0x11a>
	else if(motor==MOTOR_3){
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d110      	bne.n	8001fba <set_duty_cycle+0x11a>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, duty);
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <set_duty_cycle+0x130>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <set_duty_cycle+0x138>)
 8001fa0:	680c      	ldr	r4, [r1, #0]
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fe07 	bl	8000bb8 <__aeabi_d2uiz>
 8001faa:	4603      	mov	r3, r0
 8001fac:	63e3      	str	r3, [r4, #60]	; 0x3c
		prev_duty_3=duty;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <set_duty_cycle+0x130>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	4905      	ldr	r1, [pc, #20]	; (8001fcc <set_duty_cycle+0x12c>)
 8001fb6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000450 	.word	0x20000450
 8001fc8:	20000458 	.word	0x20000458
 8001fcc:	20000460 	.word	0x20000460
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	40590000 	.word	0x40590000
 8001fd8:	20000270 	.word	0x20000270

08001fdc <Rotation>:
void Rotation(int motor, int rotation){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	if(motor==MOTOR_1){
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d115      	bne.n	8002018 <Rotation+0x3c>
		if(rotation==CLOCK_WISE){
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d109      	bne.n	8002006 <Rotation+0x2a>
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, CLOCK_WISE);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff8:	4820      	ldr	r0, [pc, #128]	; (800207c <Rotation+0xa0>)
 8001ffa:	f001 f969 	bl	80032d0 <HAL_GPIO_WritePin>
			flag_rot_1=true;
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <Rotation+0xa4>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e008      	b.n	8002018 <Rotation+0x3c>
		} else {
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, !CLOCK_WISE);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800200c:	481b      	ldr	r0, [pc, #108]	; (800207c <Rotation+0xa0>)
 800200e:	f001 f95f 	bl	80032d0 <HAL_GPIO_WritePin>
			flag_rot_1=false;
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <Rotation+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_2){
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d113      	bne.n	8002046 <Rotation+0x6a>
		if(rotation==CLOCK_WISE){
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d108      	bne.n	8002036 <Rotation+0x5a>
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, CLOCK_WISE);
 8002024:	2201      	movs	r2, #1
 8002026:	2104      	movs	r1, #4
 8002028:	4816      	ldr	r0, [pc, #88]	; (8002084 <Rotation+0xa8>)
 800202a:	f001 f951 	bl	80032d0 <HAL_GPIO_WritePin>
			flag_rot_2=true;
 800202e:	4b16      	ldr	r3, [pc, #88]	; (8002088 <Rotation+0xac>)
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	e007      	b.n	8002046 <Rotation+0x6a>
		} else {
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, !CLOCK_WISE);
 8002036:	2200      	movs	r2, #0
 8002038:	2104      	movs	r1, #4
 800203a:	4812      	ldr	r0, [pc, #72]	; (8002084 <Rotation+0xa8>)
 800203c:	f001 f948 	bl	80032d0 <HAL_GPIO_WritePin>
			flag_rot_2=false;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <Rotation+0xac>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_3){
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d113      	bne.n	8002074 <Rotation+0x98>
		if(rotation==CLOCK_WISE){
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d108      	bne.n	8002064 <Rotation+0x88>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, CLOCK_WISE);
 8002052:	2201      	movs	r2, #1
 8002054:	2102      	movs	r1, #2
 8002056:	480b      	ldr	r0, [pc, #44]	; (8002084 <Rotation+0xa8>)
 8002058:	f001 f93a 	bl	80032d0 <HAL_GPIO_WritePin>
			flag_rot_3=true;
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <Rotation+0xb0>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
		} else {
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
			flag_rot_3=false;
		}
	}
}
 8002062:	e007      	b.n	8002074 <Rotation+0x98>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
 8002064:	2200      	movs	r2, #0
 8002066:	2102      	movs	r1, #2
 8002068:	4806      	ldr	r0, [pc, #24]	; (8002084 <Rotation+0xa8>)
 800206a:	f001 f931 	bl	80032d0 <HAL_GPIO_WritePin>
			flag_rot_3=false;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <Rotation+0xb0>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40020000 	.word	0x40020000
 8002080:	20000448 	.word	0x20000448
 8002084:	40020400 	.word	0x40020400
 8002088:	20000449 	.word	0x20000449
 800208c:	2000044a 	.word	0x2000044a

08002090 <v2rpm>:

double v2rpm (double vantoc){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	ed87 0b00 	vstr	d0, [r7]
    return (vantoc/(PI*diameter))*60;
 800209a:	a30e      	add	r3, pc, #56	; (adr r3, 80020d4 <v2rpm+0x44>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020a4:	f7fe fbda 	bl	800085c <__aeabi_ddiv>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <v2rpm+0x40>)
 80020b6:	f7fe faa7 	bl	8000608 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	ec43 2b17 	vmov	d7, r2, r3
}
 80020c2:	eeb0 0a47 	vmov.f32	s0, s14
 80020c6:	eef0 0a67 	vmov.f32	s1, s15
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	404e0000 	.word	0x404e0000
 80020d4:	5b30428a 	.word	0x5b30428a
 80020d8:	3fd8209f 	.word	0x3fd8209f

080020dc <PID_init>:
,Ki_sum_2
,Ki_sum_3=0;

int ble=5;

void PID_init(PID_Param_t *par){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	Kp=par->Kp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	492a      	ldr	r1, [pc, #168]	; (8002194 <PID_init+0xb8>)
 80020ec:	e9c1 2300 	strd	r2, r3, [r1]
	Ki=par->Ki;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020f6:	4928      	ldr	r1, [pc, #160]	; (8002198 <PID_init+0xbc>)
 80020f8:	e9c1 2300 	strd	r2, r3, [r1]
	Kd=par->Kd;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002102:	4926      	ldr	r1, [pc, #152]	; (800219c <PID_init+0xc0>)
 8002104:	e9c1 2300 	strd	r2, r3, [r1]
	Ts=(par->Ts);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800210e:	4924      	ldr	r1, [pc, #144]	; (80021a0 <PID_init+0xc4>)
 8002110:	e9c1 2300 	strd	r2, r3, [r1]
	set_point_motor_1=par->Set_point_motor_1;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800211a:	4922      	ldr	r1, [pc, #136]	; (80021a4 <PID_init+0xc8>)
 800211c:	e9c1 2300 	strd	r2, r3, [r1]
	set_point_motor_2=par->Set_point_motor_2;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002126:	4920      	ldr	r1, [pc, #128]	; (80021a8 <PID_init+0xcc>)
 8002128:	e9c1 2300 	strd	r2, r3, [r1]
	set_point_motor_3=par->Set_point_motor_3;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002132:	491e      	ldr	r1, [pc, #120]	; (80021ac <PID_init+0xd0>)
 8002134:	e9c1 2300 	strd	r2, r3, [r1]
	antiwinduperror=par->Anti_windup_error;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800213e:	491c      	ldr	r1, [pc, #112]	; (80021b0 <PID_init+0xd4>)
 8002140:	e9c1 2300 	strd	r2, r3, [r1]
	Outmin=par->Outmin;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800214a:	491a      	ldr	r1, [pc, #104]	; (80021b4 <PID_init+0xd8>)
 800214c:	e9c1 2300 	strd	r2, r3, [r1]
	Outmax=par->Outmax;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002156:	4918      	ldr	r1, [pc, #96]	; (80021b8 <PID_init+0xdc>)
 8002158:	e9c1 2300 	strd	r2, r3, [r1]
	windup=par->Anti_windup;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <PID_init+0xe0>)
 8002162:	6013      	str	r3, [r2, #0]

	if(0==par->Anti_windup_error){antiwinduperror=10;}
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	f7fe fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d100      	bne.n	800217e <PID_init+0xa2>
	}
 800217c:	e005      	b.n	800218a <PID_init+0xae>
	if(0==par->Anti_windup_error){antiwinduperror=10;}
 800217e:	490c      	ldr	r1, [pc, #48]	; (80021b0 <PID_init+0xd4>)
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <PID_init+0xe4>)
 8002186:	e9c1 2300 	strd	r2, r3, [r1]
	}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000468 	.word	0x20000468
 8002198:	20000470 	.word	0x20000470
 800219c:	20000478 	.word	0x20000478
 80021a0:	20000480 	.word	0x20000480
 80021a4:	20000498 	.word	0x20000498
 80021a8:	200004a0 	.word	0x200004a0
 80021ac:	200004a8 	.word	0x200004a8
 80021b0:	200004b8 	.word	0x200004b8
 80021b4:	20000488 	.word	0x20000488
 80021b8:	20000490 	.word	0x20000490
 80021bc:	200004c0 	.word	0x200004c0
 80021c0:	40240000 	.word	0x40240000

080021c4 <PID_Calculation>:


double PID_Calculation(int motor, double input)
	{
 80021c4:	b5b0      	push	{r4, r5, r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	ed87 0b00 	vstr	d0, [r7]
//	set_point=(motor==MOTOR_1)? set_point_motor_1: ((motor==MOTOR_2)? set_point_motor_2:set_point_motor_3);
//	prev_input = (motor==MOTOR_1)? prev_input_1:((motor==MOTOR_2)? prev_input_2:prev_input_3);

	switch(motor){
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d02f      	beq.n	8002236 <PID_Calculation+0x72>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	dc3f      	bgt.n	800225c <PID_Calculation+0x98>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d003      	beq.n	80021ea <PID_Calculation+0x26>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d013      	beq.n	8002210 <PID_Calculation+0x4c>
 80021e8:	e038      	b.n	800225c <PID_Calculation+0x98>
	case MOTOR_1:
		set_point=set_point_motor_1;
 80021ea:	4b9d      	ldr	r3, [pc, #628]	; (8002460 <PID_Calculation+0x29c>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	499c      	ldr	r1, [pc, #624]	; (8002464 <PID_Calculation+0x2a0>)
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]
		prev_input=prev_input_1;
 80021f6:	4b9c      	ldr	r3, [pc, #624]	; (8002468 <PID_Calculation+0x2a4>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	499b      	ldr	r1, [pc, #620]	; (800246c <PID_Calculation+0x2a8>)
 80021fe:	e9c1 2300 	strd	r2, r3, [r1]
		Ki_sum=Ki_sum_1;
 8002202:	4b9b      	ldr	r3, [pc, #620]	; (8002470 <PID_Calculation+0x2ac>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	499a      	ldr	r1, [pc, #616]	; (8002474 <PID_Calculation+0x2b0>)
 800220a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800220e:	e025      	b.n	800225c <PID_Calculation+0x98>
	case MOTOR_2:
		set_point=set_point_motor_2;
 8002210:	4b99      	ldr	r3, [pc, #612]	; (8002478 <PID_Calculation+0x2b4>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	4993      	ldr	r1, [pc, #588]	; (8002464 <PID_Calculation+0x2a0>)
 8002218:	e9c1 2300 	strd	r2, r3, [r1]
		prev_input=prev_input_2;
 800221c:	4b97      	ldr	r3, [pc, #604]	; (800247c <PID_Calculation+0x2b8>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	4992      	ldr	r1, [pc, #584]	; (800246c <PID_Calculation+0x2a8>)
 8002224:	e9c1 2300 	strd	r2, r3, [r1]
		Ki_sum=Ki_sum_2;
 8002228:	4b95      	ldr	r3, [pc, #596]	; (8002480 <PID_Calculation+0x2bc>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	4991      	ldr	r1, [pc, #580]	; (8002474 <PID_Calculation+0x2b0>)
 8002230:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002234:	e012      	b.n	800225c <PID_Calculation+0x98>
	case MOTOR_3:
		set_point=set_point_motor_3;
 8002236:	4b93      	ldr	r3, [pc, #588]	; (8002484 <PID_Calculation+0x2c0>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	4989      	ldr	r1, [pc, #548]	; (8002464 <PID_Calculation+0x2a0>)
 800223e:	e9c1 2300 	strd	r2, r3, [r1]
		prev_input=prev_input_3;
 8002242:	4b91      	ldr	r3, [pc, #580]	; (8002488 <PID_Calculation+0x2c4>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	4988      	ldr	r1, [pc, #544]	; (800246c <PID_Calculation+0x2a8>)
 800224a:	e9c1 2300 	strd	r2, r3, [r1]
		Ki_sum=Ki_sum_3;
 800224e:	4b8f      	ldr	r3, [pc, #572]	; (800248c <PID_Calculation+0x2c8>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	4987      	ldr	r1, [pc, #540]	; (8002474 <PID_Calculation+0x2b0>)
 8002256:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800225a:	bf00      	nop
	}

	error=(set_point-input);
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <PID_Calculation+0x2a0>)
 800225e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002266:	f7fe f817 	bl	8000298 <__aeabi_dsub>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4988      	ldr	r1, [pc, #544]	; (8002490 <PID_Calculation+0x2cc>)
 8002270:	e9c1 2300 	strd	r2, r3, [r1]

	double out;
	if(Anti_windup_enabled==windup)
 8002274:	4b87      	ldr	r3, [pc, #540]	; (8002494 <PID_Calculation+0x2d0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	f040 808b 	bne.w	8002394 <PID_Calculation+0x1d0>
		{

		if(antiwinduperror<fabs(error))
 800227e:	4b84      	ldr	r3, [pc, #528]	; (8002490 <PID_Calculation+0x2cc>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	4614      	mov	r4, r2
 8002286:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800228a:	4b83      	ldr	r3, [pc, #524]	; (8002498 <PID_Calculation+0x2d4>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	4620      	mov	r0, r4
 8002292:	4629      	mov	r1, r5
 8002294:	f7fe fc48 	bl	8000b28 <__aeabi_dcmpgt>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d02f      	beq.n	80022fe <PID_Calculation+0x13a>
			{
			out=Kp*(error)+Kd*(input-prev_input)/Ts;
 800229e:	4b7f      	ldr	r3, [pc, #508]	; (800249c <PID_Calculation+0x2d8>)
 80022a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022a4:	4b7a      	ldr	r3, [pc, #488]	; (8002490 <PID_Calculation+0x2cc>)
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	f7fe f9ad 	bl	8000608 <__aeabi_dmul>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4614      	mov	r4, r2
 80022b4:	461d      	mov	r5, r3
 80022b6:	4b6d      	ldr	r3, [pc, #436]	; (800246c <PID_Calculation+0x2a8>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022c0:	f7fd ffea 	bl	8000298 <__aeabi_dsub>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	4b74      	ldr	r3, [pc, #464]	; (80024a0 <PID_Calculation+0x2dc>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	f7fe f999 	bl	8000608 <__aeabi_dmul>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	4b71      	ldr	r3, [pc, #452]	; (80024a4 <PID_Calculation+0x2e0>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	f7fe faba 	bl	800085c <__aeabi_ddiv>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4620      	mov	r0, r4
 80022ee:	4629      	mov	r1, r5
 80022f0:	f7fd ffd4 	bl	800029c <__adddf3>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80022fc:	e094      	b.n	8002428 <PID_Calculation+0x264>
			}
		else
			{
			out=(Kp*(error)) +( Ki*(Ki_sum)*Ts) -( Kd*(input-prev_input)/Ts);
 80022fe:	4b67      	ldr	r3, [pc, #412]	; (800249c <PID_Calculation+0x2d8>)
 8002300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002304:	4b62      	ldr	r3, [pc, #392]	; (8002490 <PID_Calculation+0x2cc>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f97d 	bl	8000608 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4614      	mov	r4, r2
 8002314:	461d      	mov	r5, r3
 8002316:	4b64      	ldr	r3, [pc, #400]	; (80024a8 <PID_Calculation+0x2e4>)
 8002318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800231c:	4b55      	ldr	r3, [pc, #340]	; (8002474 <PID_Calculation+0x2b0>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fe f971 	bl	8000608 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <PID_Calculation+0x2e0>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f7fe f968 	bl	8000608 <__aeabi_dmul>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4620      	mov	r0, r4
 800233e:	4629      	mov	r1, r5
 8002340:	f7fd ffac 	bl	800029c <__adddf3>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4614      	mov	r4, r2
 800234a:	461d      	mov	r5, r3
 800234c:	4b47      	ldr	r3, [pc, #284]	; (800246c <PID_Calculation+0x2a8>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002356:	f7fd ff9f 	bl	8000298 <__aeabi_dsub>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <PID_Calculation+0x2dc>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe f94e 	bl	8000608 <__aeabi_dmul>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	4b4b      	ldr	r3, [pc, #300]	; (80024a4 <PID_Calculation+0x2e0>)
 8002376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237a:	f7fe fa6f 	bl	800085c <__aeabi_ddiv>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4620      	mov	r0, r4
 8002384:	4629      	mov	r1, r5
 8002386:	f7fd ff87 	bl	8000298 <__aeabi_dsub>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002392:	e049      	b.n	8002428 <PID_Calculation+0x264>

		}

	else
		{
		out=Kp*(error) + Ki*(Ki_sum)*Ts - Kd*(input-prev_input)/Ts;
 8002394:	4b41      	ldr	r3, [pc, #260]	; (800249c <PID_Calculation+0x2d8>)
 8002396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <PID_Calculation+0x2cc>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	f7fe f932 	bl	8000608 <__aeabi_dmul>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4614      	mov	r4, r2
 80023aa:	461d      	mov	r5, r3
 80023ac:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <PID_Calculation+0x2e4>)
 80023ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b2:	4b30      	ldr	r3, [pc, #192]	; (8002474 <PID_Calculation+0x2b0>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe f926 	bl	8000608 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <PID_Calculation+0x2e0>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe f91d 	bl	8000608 <__aeabi_dmul>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4620      	mov	r0, r4
 80023d4:	4629      	mov	r1, r5
 80023d6:	f7fd ff61 	bl	800029c <__adddf3>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4614      	mov	r4, r2
 80023e0:	461d      	mov	r5, r3
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <PID_Calculation+0x2a8>)
 80023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023ec:	f7fd ff54 	bl	8000298 <__aeabi_dsub>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <PID_Calculation+0x2dc>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f7fe f903 	bl	8000608 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <PID_Calculation+0x2e0>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fe fa24 	bl	800085c <__aeabi_ddiv>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4620      	mov	r0, r4
 800241a:	4629      	mov	r1, r5
 800241c:	f7fd ff3c 	bl	8000298 <__aeabi_dsub>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}
	Ki_sum=Ki_sum+(Ki_sum);
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <PID_Calculation+0x2b0>)
 800242a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	f7fd ff33 	bl	800029c <__adddf3>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	490e      	ldr	r1, [pc, #56]	; (8002474 <PID_Calculation+0x2b0>)
 800243c:	e9c1 2300 	strd	r2, r3, [r1]

	if(motor==MOTOR_1){
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d132      	bne.n	80024ac <PID_Calculation+0x2e8>
		Ki_sum_1=Ki_sum;
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <PID_Calculation+0x2b0>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	4908      	ldr	r1, [pc, #32]	; (8002470 <PID_Calculation+0x2ac>)
 800244e:	e9c1 2300 	strd	r2, r3, [r1]
		prev_input_1=input;
 8002452:	4905      	ldr	r1, [pc, #20]	; (8002468 <PID_Calculation+0x2a4>)
 8002454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002458:	e9c1 2300 	strd	r2, r3, [r1]
 800245c:	e040      	b.n	80024e0 <PID_Calculation+0x31c>
 800245e:	bf00      	nop
 8002460:	20000498 	.word	0x20000498
 8002464:	200004b0 	.word	0x200004b0
 8002468:	200004d0 	.word	0x200004d0
 800246c:	200004e8 	.word	0x200004e8
 8002470:	200004f8 	.word	0x200004f8
 8002474:	200004f0 	.word	0x200004f0
 8002478:	200004a0 	.word	0x200004a0
 800247c:	200004d8 	.word	0x200004d8
 8002480:	20000500 	.word	0x20000500
 8002484:	200004a8 	.word	0x200004a8
 8002488:	200004e0 	.word	0x200004e0
 800248c:	20000508 	.word	0x20000508
 8002490:	200004c8 	.word	0x200004c8
 8002494:	200004c0 	.word	0x200004c0
 8002498:	200004b8 	.word	0x200004b8
 800249c:	20000468 	.word	0x20000468
 80024a0:	20000478 	.word	0x20000478
 80024a4:	20000480 	.word	0x20000480
 80024a8:	20000470 	.word	0x20000470
	}else if(motor==MOTOR_2){
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d10b      	bne.n	80024ca <PID_Calculation+0x306>
		Ki_sum_2=Ki_sum;
 80024b2:	4b25      	ldr	r3, [pc, #148]	; (8002548 <PID_Calculation+0x384>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	4924      	ldr	r1, [pc, #144]	; (800254c <PID_Calculation+0x388>)
 80024ba:	e9c1 2300 	strd	r2, r3, [r1]
		prev_input_2=input;
 80024be:	4924      	ldr	r1, [pc, #144]	; (8002550 <PID_Calculation+0x38c>)
 80024c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c4:	e9c1 2300 	strd	r2, r3, [r1]
 80024c8:	e00a      	b.n	80024e0 <PID_Calculation+0x31c>
	}else{
		Ki_sum_3=Ki_sum;
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <PID_Calculation+0x384>)
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	4920      	ldr	r1, [pc, #128]	; (8002554 <PID_Calculation+0x390>)
 80024d2:	e9c1 2300 	strd	r2, r3, [r1]
		prev_input_3=input;
 80024d6:	4920      	ldr	r1, [pc, #128]	; (8002558 <PID_Calculation+0x394>)
 80024d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024dc:	e9c1 2300 	strd	r2, r3, [r1]
	}
//	if(fabs(out)>90) out /= 10;
	out /= 50;
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <PID_Calculation+0x398>)
 80024e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ea:	f7fe f9b7 	bl	800085c <__aeabi_ddiv>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(out>Outmax){out=Outmax;}
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <PID_Calculation+0x39c>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002500:	f7fe fb12 	bl	8000b28 <__aeabi_dcmpgt>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <PID_Calculation+0x350>
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <PID_Calculation+0x39c>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(out<Outmin){out=Outmin;}
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <PID_Calculation+0x3a0>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800251e:	f7fe fae5 	bl	8000aec <__aeabi_dcmplt>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <PID_Calculation+0x36e>
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <PID_Calculation+0x3a0>)
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	e9c7 2304 	strd	r2, r3, [r7, #16]

//	out=out / 15;
	return out;
 8002532:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002536:	ec43 2b17 	vmov	d7, r2, r3
	}
 800253a:	eeb0 0a47 	vmov.f32	s0, s14
 800253e:	eef0 0a67 	vmov.f32	s1, s15
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bdb0      	pop	{r4, r5, r7, pc}
 8002548:	200004f0 	.word	0x200004f0
 800254c:	20000500 	.word	0x20000500
 8002550:	200004d8 	.word	0x200004d8
 8002554:	20000508 	.word	0x20000508
 8002558:	200004e0 	.word	0x200004e0
 800255c:	40490000 	.word	0x40490000
 8002560:	20000490 	.word	0x20000490
 8002564:	20000488 	.word	0x20000488

08002568 <PID>:

void PID(void){
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af04      	add	r7, sp, #16
	printf("V1= %.2f rpm \t V2= %.2f rpm \t V3= %.2f rpm \r\n", V1,V2,V3);
 800256e:	4b54      	ldr	r3, [pc, #336]	; (80026c0 <PID+0x158>)
 8002570:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002574:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <PID+0x15c>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	4953      	ldr	r1, [pc, #332]	; (80026c8 <PID+0x160>)
 800257c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002584:	e9cd 2300 	strd	r2, r3, [sp]
 8002588:	4622      	mov	r2, r4
 800258a:	462b      	mov	r3, r5
 800258c:	484f      	ldr	r0, [pc, #316]	; (80026cc <PID+0x164>)
 800258e:	f003 fbe1 	bl	8005d54 <iprintf>

	rpm_1=get_rpm(MOTOR_1);
 8002592:	2001      	movs	r0, #1
 8002594:	f7fe fcb0 	bl	8000ef8 <get_rpm>
 8002598:	eeb0 7a40 	vmov.f32	s14, s0
 800259c:	eef0 7a60 	vmov.f32	s15, s1
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <PID+0x168>)
 80025a2:	ed83 7b00 	vstr	d7, [r3]
	rpm_2=get_rpm(MOTOR_2);
 80025a6:	2002      	movs	r0, #2
 80025a8:	f7fe fca6 	bl	8000ef8 <get_rpm>
 80025ac:	eeb0 7a40 	vmov.f32	s14, s0
 80025b0:	eef0 7a60 	vmov.f32	s15, s1
 80025b4:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <PID+0x16c>)
 80025b6:	ed83 7b00 	vstr	d7, [r3]
	rpm_3=get_rpm(MOTOR_3);
 80025ba:	2003      	movs	r0, #3
 80025bc:	f7fe fc9c 	bl	8000ef8 <get_rpm>
 80025c0:	eeb0 7a40 	vmov.f32	s14, s0
 80025c4:	eef0 7a60 	vmov.f32	s15, s1
 80025c8:	4b43      	ldr	r3, [pc, #268]	; (80026d8 <PID+0x170>)
 80025ca:	ed83 7b00 	vstr	d7, [r3]

	out_1=PID_Calculation(MOTOR_1, rpm_1);
 80025ce:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <PID+0x168>)
 80025d0:	ed93 7b00 	vldr	d7, [r3]
 80025d4:	eeb0 0a47 	vmov.f32	s0, s14
 80025d8:	eef0 0a67 	vmov.f32	s1, s15
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff fdf1 	bl	80021c4 <PID_Calculation>
 80025e2:	eeb0 7a40 	vmov.f32	s14, s0
 80025e6:	eef0 7a60 	vmov.f32	s15, s1
 80025ea:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <PID+0x174>)
 80025ec:	ed83 7b00 	vstr	d7, [r3]
	out_2=PID_Calculation(MOTOR_2, rpm_2);
 80025f0:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <PID+0x16c>)
 80025f2:	ed93 7b00 	vldr	d7, [r3]
 80025f6:	eeb0 0a47 	vmov.f32	s0, s14
 80025fa:	eef0 0a67 	vmov.f32	s1, s15
 80025fe:	2002      	movs	r0, #2
 8002600:	f7ff fde0 	bl	80021c4 <PID_Calculation>
 8002604:	eeb0 7a40 	vmov.f32	s14, s0
 8002608:	eef0 7a60 	vmov.f32	s15, s1
 800260c:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <PID+0x178>)
 800260e:	ed83 7b00 	vstr	d7, [r3]
	out_3=PID_Calculation(MOTOR_3, rpm_3);
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <PID+0x170>)
 8002614:	ed93 7b00 	vldr	d7, [r3]
 8002618:	eeb0 0a47 	vmov.f32	s0, s14
 800261c:	eef0 0a67 	vmov.f32	s1, s15
 8002620:	2003      	movs	r0, #3
 8002622:	f7ff fdcf 	bl	80021c4 <PID_Calculation>
 8002626:	eeb0 7a40 	vmov.f32	s14, s0
 800262a:	eef0 7a60 	vmov.f32	s15, s1
 800262e:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <PID+0x17c>)
 8002630:	ed83 7b00 	vstr	d7, [r3]

	set_duty_cycle(MOTOR_1, out_1);
 8002634:	4b29      	ldr	r3, [pc, #164]	; (80026dc <PID+0x174>)
 8002636:	ed93 7b00 	vldr	d7, [r3]
 800263a:	eeb0 0a47 	vmov.f32	s0, s14
 800263e:	eef0 0a67 	vmov.f32	s1, s15
 8002642:	2001      	movs	r0, #1
 8002644:	f7ff fc2c 	bl	8001ea0 <set_duty_cycle>
	set_duty_cycle(MOTOR_2, out_2);
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <PID+0x178>)
 800264a:	ed93 7b00 	vldr	d7, [r3]
 800264e:	eeb0 0a47 	vmov.f32	s0, s14
 8002652:	eef0 0a67 	vmov.f32	s1, s15
 8002656:	2002      	movs	r0, #2
 8002658:	f7ff fc22 	bl	8001ea0 <set_duty_cycle>
	set_duty_cycle(MOTOR_3, out_3);
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <PID+0x17c>)
 800265e:	ed93 7b00 	vldr	d7, [r3]
 8002662:	eeb0 0a47 	vmov.f32	s0, s14
 8002666:	eef0 0a67 	vmov.f32	s1, s15
 800266a:	2003      	movs	r0, #3
 800266c:	f7ff fc18 	bl	8001ea0 <set_duty_cycle>

	printf("out_1: %f \t out_2: %f \t out_3: %f \r \n",out_1,out_2,out_3);
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <PID+0x174>)
 8002672:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <PID+0x178>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	4919      	ldr	r1, [pc, #100]	; (80026e4 <PID+0x17c>)
 800267e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002686:	e9cd 2300 	strd	r2, r3, [sp]
 800268a:	4622      	mov	r2, r4
 800268c:	462b      	mov	r3, r5
 800268e:	4816      	ldr	r0, [pc, #88]	; (80026e8 <PID+0x180>)
 8002690:	f003 fb60 	bl	8005d54 <iprintf>
	printf("rpm_1: %.2f \t rpm_2: %.2f \t rpm_3: %.2f \r \n \r\n", rpm_1, rpm_2, rpm_3);
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <PID+0x168>)
 8002696:	e9d3 4500 	ldrd	r4, r5, [r3]
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <PID+0x16c>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	490d      	ldr	r1, [pc, #52]	; (80026d8 <PID+0x170>)
 80026a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026aa:	e9cd 2300 	strd	r2, r3, [sp]
 80026ae:	4622      	mov	r2, r4
 80026b0:	462b      	mov	r3, r5
 80026b2:	480e      	ldr	r0, [pc, #56]	; (80026ec <PID+0x184>)
 80026b4:	f003 fb4e 	bl	8005d54 <iprintf>
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bdb0      	pop	{r4, r5, r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000418 	.word	0x20000418
 80026c4:	20000420 	.word	0x20000420
 80026c8:	20000428 	.word	0x20000428
 80026cc:	08008de8 	.word	0x08008de8
 80026d0:	20000400 	.word	0x20000400
 80026d4:	20000408 	.word	0x20000408
 80026d8:	20000410 	.word	0x20000410
 80026dc:	200003e8 	.word	0x200003e8
 80026e0:	200003f0 	.word	0x200003f0
 80026e4:	200003f8 	.word	0x200003f8
 80026e8:	08008e18 	.word	0x08008e18
 80026ec:	08008e40 	.word	0x08008e40

080026f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_MspInit+0x4c>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a0f      	ldr	r2, [pc, #60]	; (800273c <HAL_MspInit+0x4c>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_MspInit+0x4c>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_MspInit+0x4c>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a08      	ldr	r2, [pc, #32]	; (800273c <HAL_MspInit+0x4c>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_MspInit+0x4c>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800

08002740 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08e      	sub	sp, #56	; 0x38
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a5a      	ldr	r2, [pc, #360]	; (80028c8 <HAL_TIM_Encoder_MspInit+0x188>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d12d      	bne.n	80027be <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
 8002766:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b56      	ldr	r3, [pc, #344]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	4b52      	ldr	r3, [pc, #328]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a51      	ldr	r2, [pc, #324]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b4f      	ldr	r3, [pc, #316]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800279a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027ac:	2301      	movs	r3, #1
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b4:	4619      	mov	r1, r3
 80027b6:	4846      	ldr	r0, [pc, #280]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x190>)
 80027b8:	f000 fc06 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027bc:	e080      	b.n	80028c0 <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM3)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a44      	ldr	r2, [pc, #272]	; (80028d4 <HAL_TIM_Encoder_MspInit+0x194>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d14a      	bne.n	800285e <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027c8:	2300      	movs	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	4a3e      	ldr	r2, [pc, #248]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	6413      	str	r3, [r2, #64]	; 0x40
 80027d8:	4b3c      	ldr	r3, [pc, #240]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	4b38      	ldr	r3, [pc, #224]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	4a37      	ldr	r2, [pc, #220]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6313      	str	r3, [r2, #48]	; 0x30
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	6313      	str	r3, [r2, #48]	; 0x30
 8002810:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800281c:	2340      	movs	r3, #64	; 0x40
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800282c:	2302      	movs	r3, #2
 800282e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002834:	4619      	mov	r1, r3
 8002836:	4826      	ldr	r0, [pc, #152]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x190>)
 8002838:	f000 fbc6 	bl	8002fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800283c:	2320      	movs	r3, #32
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800284c:	2302      	movs	r3, #2
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002854:	4619      	mov	r1, r3
 8002856:	4820      	ldr	r0, [pc, #128]	; (80028d8 <HAL_TIM_Encoder_MspInit+0x198>)
 8002858:	f000 fbb6 	bl	8002fc8 <HAL_GPIO_Init>
}
 800285c:	e030      	b.n	80028c0 <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM4)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d12b      	bne.n	80028c0 <HAL_TIM_Encoder_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	4a16      	ldr	r2, [pc, #88]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	6413      	str	r3, [r2, #64]	; 0x40
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	6313      	str	r3, [r2, #48]	; 0x30
 8002894:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028a0:	23c0      	movs	r3, #192	; 0xc0
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028b0:	2302      	movs	r3, #2
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	4619      	mov	r1, r3
 80028ba:	4807      	ldr	r0, [pc, #28]	; (80028d8 <HAL_TIM_Encoder_MspInit+0x198>)
 80028bc:	f000 fb84 	bl	8002fc8 <HAL_GPIO_Init>
}
 80028c0:	bf00      	nop
 80028c2:	3738      	adds	r7, #56	; 0x38
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40010000 	.word	0x40010000
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40000800 	.word	0x40000800

080028e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f0:	d10d      	bne.n	800290e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_TIM_Base_MspInit+0x3c>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_TIM_Base_MspInit+0x3c>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_TIM_Base_MspInit+0x3c>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002940:	d13c      	bne.n	80029bc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_TIM_MspPostInit+0xa4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <HAL_TIM_MspPostInit+0xa4>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_TIM_MspPostInit+0xa4>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_TIM_MspPostInit+0xa4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_TIM_MspPostInit+0xa4>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_TIM_MspPostInit+0xa4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800297a:	2303      	movs	r3, #3
 800297c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800298a:	2301      	movs	r3, #1
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <HAL_TIM_MspPostInit+0xa8>)
 8002996:	f000 fb17 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800299a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029ac:	2301      	movs	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	4805      	ldr	r0, [pc, #20]	; (80029cc <HAL_TIM_MspPostInit+0xac>)
 80029b8:	f000 fb06 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029bc:	bf00      	nop
 80029be:	3728      	adds	r7, #40	; 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020000 	.word	0x40020000
 80029cc:	40020400 	.word	0x40020400

080029d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_UART_MspInit+0x84>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12b      	bne.n	8002a4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_UART_MspInit+0x88>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_UART_MspInit+0x88>)
 80029fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_UART_MspInit+0x88>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_UART_MspInit+0x88>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <HAL_UART_MspInit+0x88>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_UART_MspInit+0x88>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	4805      	ldr	r0, [pc, #20]	; (8002a5c <HAL_UART_MspInit+0x8c>)
 8002a46:	f000 fabf 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	; 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40004400 	.word	0x40004400
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020000 	.word	0x40020000

08002a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a64:	e7fe      	b.n	8002a64 <NMI_Handler+0x4>

08002a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a6a:	e7fe      	b.n	8002a6a <HardFault_Handler+0x4>

08002a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a70:	e7fe      	b.n	8002a70 <MemManage_Handler+0x4>

08002a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a76:	e7fe      	b.n	8002a76 <BusFault_Handler+0x4>

08002a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <UsageFault_Handler+0x4>

08002a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aac:	f000 f962 	bl	8002d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ms++;
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <SysTick_Handler+0x20>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	1c54      	adds	r4, r2, #1
 8002ab8:	f143 0500 	adc.w	r5, r3, #0
 8002abc:	4b02      	ldr	r3, [pc, #8]	; (8002ac8 <SysTick_Handler+0x20>)
 8002abe:	e9c3 4500 	strd	r4, r5, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000218 	.word	0x20000218

08002acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return 1;
 8002ad0:	2301      	movs	r3, #1
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <_kill>:

int _kill(int pid, int sig)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ae6:	f003 f9dd 	bl	8005ea4 <__errno>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2216      	movs	r2, #22
 8002aee:	601a      	str	r2, [r3, #0]
  return -1;
 8002af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <_exit>:

void _exit (int status)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b04:	f04f 31ff 	mov.w	r1, #4294967295
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ffe7 	bl	8002adc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b0e:	e7fe      	b.n	8002b0e <_exit+0x12>

08002b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e00a      	b.n	8002b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b22:	f3af 8000 	nop.w
 8002b26:	4601      	mov	r1, r0
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	60ba      	str	r2, [r7, #8]
 8002b2e:	b2ca      	uxtb	r2, r1
 8002b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	dbf0      	blt.n	8002b22 <_read+0x12>
  }

  return len;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	e009      	b.n	8002b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	60ba      	str	r2, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fb9f 	bl	80012a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	dbf1      	blt.n	8002b5c <_write+0x12>
  }
  return len;
 8002b78:	687b      	ldr	r3, [r7, #4]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <_close>:

int _close(int file)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002baa:	605a      	str	r2, [r3, #4]
  return 0;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <_isatty>:

int _isatty(int file)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <_sbrk+0x5c>)
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <_sbrk+0x60>)
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <_sbrk+0x64>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <_sbrk+0x64>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <_sbrk+0x68>)
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d207      	bcs.n	8002c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c1c:	f003 f942 	bl	8005ea4 <__errno>
 8002c20:	4603      	mov	r3, r0
 8002c22:	220c      	movs	r2, #12
 8002c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	e009      	b.n	8002c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <_sbrk+0x64>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <_sbrk+0x64>)
 8002c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20020000 	.word	0x20020000
 8002c4c:	00000400 	.word	0x00000400
 8002c50:	20000510 	.word	0x20000510
 8002c54:	20000668 	.word	0x20000668

08002c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <SystemInit+0x20>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <SystemInit+0x20>)
 8002c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c80:	f7ff ffea 	bl	8002c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c86:	490d      	ldr	r1, [pc, #52]	; (8002cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c88:	4a0d      	ldr	r2, [pc, #52]	; (8002cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c8c:	e002      	b.n	8002c94 <LoopCopyDataInit>

08002c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c92:	3304      	adds	r3, #4

08002c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c98:	d3f9      	bcc.n	8002c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c9c:	4c0a      	ldr	r4, [pc, #40]	; (8002cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca0:	e001      	b.n	8002ca6 <LoopFillZerobss>

08002ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca4:	3204      	adds	r2, #4

08002ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca8:	d3fb      	bcc.n	8002ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002caa:	f003 f901 	bl	8005eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cae:	f7fe fb65 	bl	800137c <main>
  bx  lr    
 8002cb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cbc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002cc0:	080093e8 	.word	0x080093e8
  ldr r2, =_sbss
 8002cc4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002cc8:	20000664 	.word	0x20000664

08002ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC_IRQHandler>
	...

08002cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <HAL_Init+0x40>)
 8002cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_Init+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <HAL_Init+0x40>)
 8002ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_Init+0x40>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <HAL_Init+0x40>)
 8002cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f000 f931 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cfe:	200f      	movs	r0, #15
 8002d00:	f000 f808 	bl	8002d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d04:	f7ff fcf4 	bl	80026f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023c00 	.word	0x40023c00

08002d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_InitTick+0x54>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_InitTick+0x58>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f93b 	bl	8002fae <HAL_SYSTICK_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00e      	b.n	8002d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b0f      	cmp	r3, #15
 8002d46:	d80a      	bhi.n	8002d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d50:	f000 f911 	bl	8002f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d54:	4a06      	ldr	r2, [pc, #24]	; (8002d70 <HAL_InitTick+0x5c>)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e000      	b.n	8002d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000008 	.word	0x20000008
 8002d6c:	20000010 	.word	0x20000010
 8002d70:	2000000c 	.word	0x2000000c

08002d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_IncTick+0x20>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_IncTick+0x24>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <HAL_IncTick+0x24>)
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000010 	.word	0x20000010
 8002d98:	20000514 	.word	0x20000514

08002d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_GetTick+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000514 	.word	0x20000514

08002db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dbc:	f7ff ffee 	bl	8002d9c <HAL_GetTick>
 8002dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d005      	beq.n	8002dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_Delay+0x44>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dda:	bf00      	nop
 8002ddc:	f7ff ffde 	bl	8002d9c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d8f7      	bhi.n	8002ddc <HAL_Delay+0x28>
  {
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000010 	.word	0x20000010

08002dfc <__NVIC_SetPriorityGrouping>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <__NVIC_SetPriorityGrouping+0x44>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e2e:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <__NVIC_SetPriorityGrouping+0x44>)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	60d3      	str	r3, [r2, #12]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <__NVIC_GetPriorityGrouping>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e48:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <__NVIC_GetPriorityGrouping+0x18>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	0a1b      	lsrs	r3, r3, #8
 8002e4e:	f003 0307 	and.w	r3, r3, #7
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <__NVIC_SetPriority>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db0a      	blt.n	8002e8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	490c      	ldr	r1, [pc, #48]	; (8002eac <__NVIC_SetPriority+0x4c>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e88:	e00a      	b.n	8002ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <__NVIC_SetPriority+0x50>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3b04      	subs	r3, #4
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	761a      	strb	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf28      	it	cs
 8002ed2:	2304      	movcs	r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d902      	bls.n	8002ee4 <NVIC_EncodePriority+0x30>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b03      	subs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <NVIC_EncodePriority+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43d9      	mvns	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	4313      	orrs	r3, r2
         );
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	; 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f2c:	d301      	bcc.n	8002f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00f      	b.n	8002f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <SysTick_Config+0x40>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f7ff ff8e 	bl	8002e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <SysTick_Config+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <SysTick_Config+0x40>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff47 	bl	8002dfc <__NVIC_SetPriorityGrouping>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff5c 	bl	8002e44 <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff8e 	bl	8002eb4 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5d 	bl	8002e60 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ffb0 	bl	8002f1c <SysTick_Config>
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	e159      	b.n	8003298 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	f040 8148 	bne.w	8003292 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d005      	beq.n	800301a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003016:	2b02      	cmp	r3, #2
 8003018:	d130      	bne.n	800307c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003050:	2201      	movs	r2, #1
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 0201 	and.w	r2, r3, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b03      	cmp	r3, #3
 8003086:	d017      	beq.n	80030b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d123      	bne.n	800310c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	08da      	lsrs	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	220f      	movs	r2, #15
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	08da      	lsrs	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3208      	adds	r2, #8
 8003106:	69b9      	ldr	r1, [r7, #24]
 8003108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0203 	and.w	r2, r3, #3
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80a2 	beq.w	8003292 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b57      	ldr	r3, [pc, #348]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	4a56      	ldr	r2, [pc, #344]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800315c:	6453      	str	r3, [r2, #68]	; 0x44
 800315e:	4b54      	ldr	r3, [pc, #336]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800316a:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_GPIO_Init+0x2ec>)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3302      	adds	r3, #2
 8003172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	220f      	movs	r2, #15
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a49      	ldr	r2, [pc, #292]	; (80032b8 <HAL_GPIO_Init+0x2f0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d019      	beq.n	80031ca <HAL_GPIO_Init+0x202>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a48      	ldr	r2, [pc, #288]	; (80032bc <HAL_GPIO_Init+0x2f4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_GPIO_Init+0x1fe>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a47      	ldr	r2, [pc, #284]	; (80032c0 <HAL_GPIO_Init+0x2f8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00d      	beq.n	80031c2 <HAL_GPIO_Init+0x1fa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a46      	ldr	r2, [pc, #280]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <HAL_GPIO_Init+0x1f6>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a45      	ldr	r2, [pc, #276]	; (80032c8 <HAL_GPIO_Init+0x300>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_GPIO_Init+0x1f2>
 80031b6:	2304      	movs	r3, #4
 80031b8:	e008      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031ba:	2307      	movs	r3, #7
 80031bc:	e006      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031be:	2303      	movs	r3, #3
 80031c0:	e004      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e002      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031ca:	2300      	movs	r3, #0
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f002 0203 	and.w	r2, r2, #3
 80031d2:	0092      	lsls	r2, r2, #2
 80031d4:	4093      	lsls	r3, r2
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031dc:	4935      	ldr	r1, [pc, #212]	; (80032b4 <HAL_GPIO_Init+0x2ec>)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	3302      	adds	r3, #2
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ea:	4b38      	ldr	r3, [pc, #224]	; (80032cc <HAL_GPIO_Init+0x304>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003214:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003238:	4a24      	ldr	r2, [pc, #144]	; (80032cc <HAL_GPIO_Init+0x304>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800323e:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003262:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003268:	4b18      	ldr	r3, [pc, #96]	; (80032cc <HAL_GPIO_Init+0x304>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800328c:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <HAL_GPIO_Init+0x304>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	f67f aea2 	bls.w	8002fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3724      	adds	r7, #36	; 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40013c00 	.word	0x40013c00

080032d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
 80032dc:	4613      	mov	r3, r2
 80032de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e0:	787b      	ldrb	r3, [r7, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ec:	e003      	b.n	80032f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	041a      	lsls	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	619a      	str	r2, [r3, #24]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e267      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d075      	beq.n	800340e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003322:	4b88      	ldr	r3, [pc, #544]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b04      	cmp	r3, #4
 800332c:	d00c      	beq.n	8003348 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332e:	4b85      	ldr	r3, [pc, #532]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003336:	2b08      	cmp	r3, #8
 8003338:	d112      	bne.n	8003360 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333a:	4b82      	ldr	r3, [pc, #520]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003346:	d10b      	bne.n	8003360 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003348:	4b7e      	ldr	r3, [pc, #504]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d05b      	beq.n	800340c <HAL_RCC_OscConfig+0x108>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d157      	bne.n	800340c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e242      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003368:	d106      	bne.n	8003378 <HAL_RCC_OscConfig+0x74>
 800336a:	4b76      	ldr	r3, [pc, #472]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a75      	ldr	r2, [pc, #468]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e01d      	b.n	80033b4 <HAL_RCC_OscConfig+0xb0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x98>
 8003382:	4b70      	ldr	r3, [pc, #448]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6f      	ldr	r2, [pc, #444]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b6d      	ldr	r3, [pc, #436]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a6c      	ldr	r2, [pc, #432]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e00b      	b.n	80033b4 <HAL_RCC_OscConfig+0xb0>
 800339c:	4b69      	ldr	r3, [pc, #420]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a68      	ldr	r2, [pc, #416]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 80033a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b66      	ldr	r3, [pc, #408]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a65      	ldr	r2, [pc, #404]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 80033ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7ff fcee 	bl	8002d9c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c4:	f7ff fcea 	bl	8002d9c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	; 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e207      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	4b5b      	ldr	r3, [pc, #364]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0xc0>
 80033e2:	e014      	b.n	800340e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7ff fcda 	bl	8002d9c <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ec:	f7ff fcd6 	bl	8002d9c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e1f3      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	4b51      	ldr	r3, [pc, #324]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0xe8>
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d063      	beq.n	80034e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341a:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800342e:	2b08      	cmp	r3, #8
 8003430:	d11c      	bne.n	800346c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003432:	4b44      	ldr	r3, [pc, #272]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d116      	bne.n	800346c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_RCC_OscConfig+0x152>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d001      	beq.n	8003456 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e1c7      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003456:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4937      	ldr	r1, [pc, #220]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346a:	e03a      	b.n	80034e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003474:	4b34      	ldr	r3, [pc, #208]	; (8003548 <HAL_RCC_OscConfig+0x244>)
 8003476:	2201      	movs	r2, #1
 8003478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7ff fc8f 	bl	8002d9c <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003482:	f7ff fc8b 	bl	8002d9c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e1a8      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a0:	4b28      	ldr	r3, [pc, #160]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4925      	ldr	r1, [pc, #148]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	600b      	str	r3, [r1, #0]
 80034b4:	e015      	b.n	80034e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_RCC_OscConfig+0x244>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7ff fc6e 	bl	8002d9c <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c4:	f7ff fc6a 	bl	8002d9c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e187      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d6:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d036      	beq.n	800355c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d016      	beq.n	8003524 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <HAL_RCC_OscConfig+0x248>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7ff fc4e 	bl	8002d9c <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003504:	f7ff fc4a 	bl	8002d9c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e167      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_OscConfig+0x240>)
 8003518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x200>
 8003522:	e01b      	b.n	800355c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_OscConfig+0x248>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352a:	f7ff fc37 	bl	8002d9c <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003530:	e00e      	b.n	8003550 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003532:	f7ff fc33 	bl	8002d9c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d907      	bls.n	8003550 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e150      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
 8003544:	40023800 	.word	0x40023800
 8003548:	42470000 	.word	0x42470000
 800354c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	4b88      	ldr	r3, [pc, #544]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ea      	bne.n	8003532 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8097 	beq.w	8003698 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356e:	4b81      	ldr	r3, [pc, #516]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	4b7d      	ldr	r3, [pc, #500]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a7c      	ldr	r2, [pc, #496]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b7a      	ldr	r3, [pc, #488]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	4b77      	ldr	r3, [pc, #476]	; (8003778 <HAL_RCC_OscConfig+0x474>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d118      	bne.n	80035d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a6:	4b74      	ldr	r3, [pc, #464]	; (8003778 <HAL_RCC_OscConfig+0x474>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a73      	ldr	r2, [pc, #460]	; (8003778 <HAL_RCC_OscConfig+0x474>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7ff fbf3 	bl	8002d9c <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ba:	f7ff fbef 	bl	8002d9c <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e10c      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <HAL_RCC_OscConfig+0x474>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x2ea>
 80035e0:	4b64      	ldr	r3, [pc, #400]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4a63      	ldr	r2, [pc, #396]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6713      	str	r3, [r2, #112]	; 0x70
 80035ec:	e01c      	b.n	8003628 <HAL_RCC_OscConfig+0x324>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x30c>
 80035f6:	4b5f      	ldr	r3, [pc, #380]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a5e      	ldr	r2, [pc, #376]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 80035fc:	f043 0304 	orr.w	r3, r3, #4
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	4b5c      	ldr	r3, [pc, #368]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a5b      	ldr	r2, [pc, #364]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
 800360e:	e00b      	b.n	8003628 <HAL_RCC_OscConfig+0x324>
 8003610:	4b58      	ldr	r3, [pc, #352]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	4a57      	ldr	r2, [pc, #348]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	6713      	str	r3, [r2, #112]	; 0x70
 800361c:	4b55      	ldr	r3, [pc, #340]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	4a54      	ldr	r2, [pc, #336]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003622:	f023 0304 	bic.w	r3, r3, #4
 8003626:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d015      	beq.n	800365c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7ff fbb4 	bl	8002d9c <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003636:	e00a      	b.n	800364e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003638:	f7ff fbb0 	bl	8002d9c <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e0cb      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364e:	4b49      	ldr	r3, [pc, #292]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0ee      	beq.n	8003638 <HAL_RCC_OscConfig+0x334>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365c:	f7ff fb9e 	bl	8002d9c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003662:	e00a      	b.n	800367a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003664:	f7ff fb9a 	bl	8002d9c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e0b5      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367a:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1ee      	bne.n	8003664 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368c:	4b39      	ldr	r3, [pc, #228]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	4a38      	ldr	r2, [pc, #224]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003696:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80a1 	beq.w	80037e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a2:	4b34      	ldr	r3, [pc, #208]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d05c      	beq.n	8003768 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d141      	bne.n	800373a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b6:	4b31      	ldr	r3, [pc, #196]	; (800377c <HAL_RCC_OscConfig+0x478>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7ff fb6e 	bl	8002d9c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c4:	f7ff fb6a 	bl	8002d9c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e087      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	4b27      	ldr	r3, [pc, #156]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69da      	ldr	r2, [r3, #28]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	019b      	lsls	r3, r3, #6
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	3b01      	subs	r3, #1
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	491b      	ldr	r1, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCC_OscConfig+0x478>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003712:	f7ff fb43 	bl	8002d9c <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371a:	f7ff fb3f 	bl	8002d9c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e05c      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x416>
 8003738:	e054      	b.n	80037e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCC_OscConfig+0x478>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7ff fb2c 	bl	8002d9c <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7ff fb28 	bl	8002d9c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e045      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_OscConfig+0x470>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x444>
 8003766:	e03d      	b.n	80037e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e038      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
 8003774:	40023800 	.word	0x40023800
 8003778:	40007000 	.word	0x40007000
 800377c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <HAL_RCC_OscConfig+0x4ec>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d028      	beq.n	80037e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d121      	bne.n	80037e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d11a      	bne.n	80037e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d111      	bne.n	80037e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	3b01      	subs	r3, #1
 80037ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800

080037f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0cc      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003808:	4b68      	ldr	r3, [pc, #416]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d90c      	bls.n	8003830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b65      	ldr	r3, [pc, #404]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b63      	ldr	r3, [pc, #396]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0b8      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d020      	beq.n	800387e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003848:	4b59      	ldr	r3, [pc, #356]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a58      	ldr	r2, [pc, #352]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003860:	4b53      	ldr	r3, [pc, #332]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a52      	ldr	r2, [pc, #328]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800386c:	4b50      	ldr	r3, [pc, #320]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	494d      	ldr	r1, [pc, #308]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d044      	beq.n	8003914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	4b47      	ldr	r3, [pc, #284]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d119      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e07f      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b2:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e06f      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c2:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e067      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d2:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f023 0203 	bic.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4934      	ldr	r1, [pc, #208]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e4:	f7ff fa5a 	bl	8002d9c <HAL_GetTick>
 80038e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ec:	f7ff fa56 	bl	8002d9c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e04f      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 020c 	and.w	r2, r3, #12
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	429a      	cmp	r2, r3
 8003912:	d1eb      	bne.n	80038ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d20c      	bcs.n	800393c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003922:	4b22      	ldr	r3, [pc, #136]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b20      	ldr	r3, [pc, #128]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e032      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4916      	ldr	r1, [pc, #88]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003966:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	490e      	ldr	r1, [pc, #56]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397a:	f000 f821 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 800397e:	4602      	mov	r2, r0
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	490a      	ldr	r1, [pc, #40]	; (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	5ccb      	ldrb	r3, [r1, r3]
 800398e:	fa22 f303 	lsr.w	r3, r2, r3
 8003992:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff f9ba 	bl	8002d14 <HAL_InitTick>

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023c00 	.word	0x40023c00
 80039b0:	40023800 	.word	0x40023800
 80039b4:	08008e70 	.word	0x08008e70
 80039b8:	20000008 	.word	0x20000008
 80039bc:	2000000c 	.word	0x2000000c

080039c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c4:	b094      	sub	sp, #80	; 0x50
 80039c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	647b      	str	r3, [r7, #68]	; 0x44
 80039cc:	2300      	movs	r3, #0
 80039ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d0:	2300      	movs	r3, #0
 80039d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d8:	4b79      	ldr	r3, [pc, #484]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 030c 	and.w	r3, r3, #12
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d00d      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x40>
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	f200 80e1 	bhi.w	8003bac <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d003      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0x3a>
 80039f2:	e0db      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f4:	4b73      	ldr	r3, [pc, #460]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039f8:	e0db      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039fa:	4b73      	ldr	r3, [pc, #460]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x208>)
 80039fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039fe:	e0d8      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a00:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0a:	4b6d      	ldr	r3, [pc, #436]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d063      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a16:	4b6a      	ldr	r3, [pc, #424]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	099b      	lsrs	r3, r3, #6
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a28:	633b      	str	r3, [r7, #48]	; 0x30
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a32:	4622      	mov	r2, r4
 8003a34:	462b      	mov	r3, r5
 8003a36:	f04f 0000 	mov.w	r0, #0
 8003a3a:	f04f 0100 	mov.w	r1, #0
 8003a3e:	0159      	lsls	r1, r3, #5
 8003a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a44:	0150      	lsls	r0, r2, #5
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	1a51      	subs	r1, r2, r1
 8003a4e:	6139      	str	r1, [r7, #16]
 8003a50:	4629      	mov	r1, r5
 8003a52:	eb63 0301 	sbc.w	r3, r3, r1
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a64:	4659      	mov	r1, fp
 8003a66:	018b      	lsls	r3, r1, #6
 8003a68:	4651      	mov	r1, sl
 8003a6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a6e:	4651      	mov	r1, sl
 8003a70:	018a      	lsls	r2, r1, #6
 8003a72:	4651      	mov	r1, sl
 8003a74:	ebb2 0801 	subs.w	r8, r2, r1
 8003a78:	4659      	mov	r1, fp
 8003a7a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a92:	4690      	mov	r8, r2
 8003a94:	4699      	mov	r9, r3
 8003a96:	4623      	mov	r3, r4
 8003a98:	eb18 0303 	adds.w	r3, r8, r3
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	462b      	mov	r3, r5
 8003aa0:	eb49 0303 	adc.w	r3, r9, r3
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	024b      	lsls	r3, r1, #9
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003abc:	4621      	mov	r1, r4
 8003abe:	024a      	lsls	r2, r1, #9
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003acc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad0:	f7fd f892 	bl	8000bf8 <__aeabi_uldivmod>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4613      	mov	r3, r2
 8003ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003adc:	e058      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ade:	4b38      	ldr	r3, [pc, #224]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	4611      	mov	r1, r2
 8003aea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003aee:	623b      	str	r3, [r7, #32]
 8003af0:	2300      	movs	r3, #0
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
 8003af4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003af8:	4642      	mov	r2, r8
 8003afa:	464b      	mov	r3, r9
 8003afc:	f04f 0000 	mov.w	r0, #0
 8003b00:	f04f 0100 	mov.w	r1, #0
 8003b04:	0159      	lsls	r1, r3, #5
 8003b06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b0a:	0150      	lsls	r0, r2, #5
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4641      	mov	r1, r8
 8003b12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b16:	4649      	mov	r1, r9
 8003b18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b30:	ebb2 040a 	subs.w	r4, r2, sl
 8003b34:	eb63 050b 	sbc.w	r5, r3, fp
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	00eb      	lsls	r3, r5, #3
 8003b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b46:	00e2      	lsls	r2, r4, #3
 8003b48:	4614      	mov	r4, r2
 8003b4a:	461d      	mov	r5, r3
 8003b4c:	4643      	mov	r3, r8
 8003b4e:	18e3      	adds	r3, r4, r3
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	464b      	mov	r3, r9
 8003b54:	eb45 0303 	adc.w	r3, r5, r3
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b66:	4629      	mov	r1, r5
 8003b68:	028b      	lsls	r3, r1, #10
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b70:	4621      	mov	r1, r4
 8003b72:	028a      	lsls	r2, r1, #10
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	61fa      	str	r2, [r7, #28]
 8003b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b84:	f7fd f838 	bl	8000bf8 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	0c1b      	lsrs	r3, r3, #16
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003baa:	e002      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3750      	adds	r7, #80	; 0x50
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	00f42400 	.word	0x00f42400
 8003bc8:	007a1200 	.word	0x007a1200

08003bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	; (8003be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000008 	.word	0x20000008

08003be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be8:	f7ff fff0 	bl	8003bcc <HAL_RCC_GetHCLKFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	0a9b      	lsrs	r3, r3, #10
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4903      	ldr	r1, [pc, #12]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40023800 	.word	0x40023800
 8003c08:	08008e80 	.word	0x08008e80

08003c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c10:	f7ff ffdc 	bl	8003bcc <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0b5b      	lsrs	r3, r3, #13
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	08008e80 	.word	0x08008e80

08003c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e041      	b.n	8003cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fe fe40 	bl	80028e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f000 fbf4 	bl	8004460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e041      	b.n	8003d68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f839 	bl	8003d70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4610      	mov	r0, r2
 8003d12:	f000 fba5 	bl	8004460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d109      	bne.n	8003da8 <HAL_TIM_PWM_Start+0x24>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	e022      	b.n	8003dee <HAL_TIM_PWM_Start+0x6a>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d109      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0x3e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	bf14      	ite	ne
 8003dba:	2301      	movne	r3, #1
 8003dbc:	2300      	moveq	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	e015      	b.n	8003dee <HAL_TIM_PWM_Start+0x6a>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d109      	bne.n	8003ddc <HAL_TIM_PWM_Start+0x58>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e008      	b.n	8003dee <HAL_TIM_PWM_Start+0x6a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e068      	b.n	8003ec8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d104      	bne.n	8003e06 <HAL_TIM_PWM_Start+0x82>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e04:	e013      	b.n	8003e2e <HAL_TIM_PWM_Start+0xaa>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d104      	bne.n	8003e16 <HAL_TIM_PWM_Start+0x92>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e14:	e00b      	b.n	8003e2e <HAL_TIM_PWM_Start+0xaa>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d104      	bne.n	8003e26 <HAL_TIM_PWM_Start+0xa2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e24:	e003      	b.n	8003e2e <HAL_TIM_PWM_Start+0xaa>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2201      	movs	r2, #1
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fdc4 	bl	80049c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <HAL_TIM_PWM_Start+0x14c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d107      	bne.n	8003e56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <HAL_TIM_PWM_Start+0x14c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d018      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x10e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e68:	d013      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x10e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <HAL_TIM_PWM_Start+0x150>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x10e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <HAL_TIM_PWM_Start+0x154>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x10e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a16      	ldr	r2, [pc, #88]	; (8003edc <HAL_TIM_PWM_Start+0x158>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x10e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <HAL_TIM_PWM_Start+0x15c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d111      	bne.n	8003eb6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	d010      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb4:	e007      	b.n	8003ec6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40000400 	.word	0x40000400
 8003ed8:	40000800 	.word	0x40000800
 8003edc:	40000c00 	.word	0x40000c00
 8003ee0:	40014000 	.word	0x40014000

08003ee4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e097      	b.n	8004028 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fe fc17 	bl	8002740 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f28:	f023 0307 	bic.w	r3, r3, #7
 8003f2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f000 fa91 	bl	8004460 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	4313      	orrs	r3, r2
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f84:	f023 030c 	bic.w	r3, r3, #12
 8003f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	011a      	lsls	r2, r3, #4
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	031b      	lsls	r3, r3, #12
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003fc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004040:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004048:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004050:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004058:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d110      	bne.n	8004082 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d102      	bne.n	800406c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004066:	7b7b      	ldrb	r3, [r7, #13]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d001      	beq.n	8004070 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e069      	b.n	8004144 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004080:	e031      	b.n	80040e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b04      	cmp	r3, #4
 8004086:	d110      	bne.n	80040aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004088:	7bbb      	ldrb	r3, [r7, #14]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d102      	bne.n	8004094 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800408e:	7b3b      	ldrb	r3, [r7, #12]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d001      	beq.n	8004098 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e055      	b.n	8004144 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a8:	e01d      	b.n	80040e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d108      	bne.n	80040c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040b0:	7bbb      	ldrb	r3, [r7, #14]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040b6:	7b7b      	ldrb	r3, [r7, #13]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d102      	bne.n	80040c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040bc:	7b3b      	ldrb	r3, [r7, #12]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d001      	beq.n	80040c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e03e      	b.n	8004144 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_TIM_Encoder_Start+0xc4>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d008      	beq.n	8004104 <HAL_TIM_Encoder_Start+0xd4>
 80040f2:	e00f      	b.n	8004114 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2201      	movs	r2, #1
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fc61 	bl	80049c4 <TIM_CCxChannelCmd>
      break;
 8004102:	e016      	b.n	8004132 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2201      	movs	r2, #1
 800410a:	2104      	movs	r1, #4
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fc59 	bl	80049c4 <TIM_CCxChannelCmd>
      break;
 8004112:	e00e      	b.n	8004132 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2201      	movs	r2, #1
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fc51 	bl	80049c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2201      	movs	r2, #1
 8004128:	2104      	movs	r1, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fc4a 	bl	80049c4 <TIM_CCxChannelCmd>
      break;
 8004130:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004166:	2302      	movs	r3, #2
 8004168:	e0ae      	b.n	80042c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b0c      	cmp	r3, #12
 8004176:	f200 809f 	bhi.w	80042b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	080041b5 	.word	0x080041b5
 8004184:	080042b9 	.word	0x080042b9
 8004188:	080042b9 	.word	0x080042b9
 800418c:	080042b9 	.word	0x080042b9
 8004190:	080041f5 	.word	0x080041f5
 8004194:	080042b9 	.word	0x080042b9
 8004198:	080042b9 	.word	0x080042b9
 800419c:	080042b9 	.word	0x080042b9
 80041a0:	08004237 	.word	0x08004237
 80041a4:	080042b9 	.word	0x080042b9
 80041a8:	080042b9 	.word	0x080042b9
 80041ac:	080042b9 	.word	0x080042b9
 80041b0:	08004277 	.word	0x08004277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f9dc 	bl	8004578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0208 	orr.w	r2, r2, #8
 80041ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6999      	ldr	r1, [r3, #24]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	619a      	str	r2, [r3, #24]
      break;
 80041f2:	e064      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fa22 	bl	8004644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6999      	ldr	r1, [r3, #24]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	021a      	lsls	r2, r3, #8
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	619a      	str	r2, [r3, #24]
      break;
 8004234:	e043      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fa6d 	bl	800471c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0208 	orr.w	r2, r2, #8
 8004250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0204 	bic.w	r2, r2, #4
 8004260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69d9      	ldr	r1, [r3, #28]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	61da      	str	r2, [r3, #28]
      break;
 8004274:	e023      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fab7 	bl	80047f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69d9      	ldr	r1, [r3, #28]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	021a      	lsls	r2, r3, #8
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	61da      	str	r2, [r3, #28]
      break;
 80042b6:	e002      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
      break;
 80042bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIM_ConfigClockSource+0x1c>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0b4      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x186>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800430a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d03e      	beq.n	80043a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432a:	f200 8087 	bhi.w	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004332:	f000 8086 	beq.w	8004442 <HAL_TIM_ConfigClockSource+0x172>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	d87f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b70      	cmp	r3, #112	; 0x70
 800433e:	d01a      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0xa6>
 8004340:	2b70      	cmp	r3, #112	; 0x70
 8004342:	d87b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b60      	cmp	r3, #96	; 0x60
 8004346:	d050      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x11a>
 8004348:	2b60      	cmp	r3, #96	; 0x60
 800434a:	d877      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b50      	cmp	r3, #80	; 0x50
 800434e:	d03c      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0xfa>
 8004350:	2b50      	cmp	r3, #80	; 0x50
 8004352:	d873      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d058      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x13a>
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d86f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b30      	cmp	r3, #48	; 0x30
 800435e:	d064      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004360:	2b30      	cmp	r3, #48	; 0x30
 8004362:	d86b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b20      	cmp	r3, #32
 8004366:	d060      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d867      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05c      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004370:	2b10      	cmp	r3, #16
 8004372:	d05a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004374:	e062      	b.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004386:	f000 fafd 	bl	8004984 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	609a      	str	r2, [r3, #8]
      break;
 80043a2:	e04f      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043b4:	f000 fae6 	bl	8004984 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043c6:	609a      	str	r2, [r3, #8]
      break;
 80043c8:	e03c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 fa5a 	bl	8004890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2150      	movs	r1, #80	; 0x50
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fab3 	bl	800494e <TIM_ITRx_SetConfig>
      break;
 80043e8:	e02c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 fa79 	bl	80048ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2160      	movs	r1, #96	; 0x60
 8004402:	4618      	mov	r0, r3
 8004404:	f000 faa3 	bl	800494e <TIM_ITRx_SetConfig>
      break;
 8004408:	e01c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004416:	461a      	mov	r2, r3
 8004418:	f000 fa3a 	bl	8004890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2140      	movs	r1, #64	; 0x40
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fa93 	bl	800494e <TIM_ITRx_SetConfig>
      break;
 8004428:	e00c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f000 fa8a 	bl	800494e <TIM_ITRx_SetConfig>
      break;
 800443a:	e003      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      break;
 8004440:	e000      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a3a      	ldr	r2, [pc, #232]	; (800455c <TIM_Base_SetConfig+0xfc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00f      	beq.n	8004498 <TIM_Base_SetConfig+0x38>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447e:	d00b      	beq.n	8004498 <TIM_Base_SetConfig+0x38>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a37      	ldr	r2, [pc, #220]	; (8004560 <TIM_Base_SetConfig+0x100>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d007      	beq.n	8004498 <TIM_Base_SetConfig+0x38>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a36      	ldr	r2, [pc, #216]	; (8004564 <TIM_Base_SetConfig+0x104>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_Base_SetConfig+0x38>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a35      	ldr	r2, [pc, #212]	; (8004568 <TIM_Base_SetConfig+0x108>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d108      	bne.n	80044aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2b      	ldr	r2, [pc, #172]	; (800455c <TIM_Base_SetConfig+0xfc>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01b      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b8:	d017      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a28      	ldr	r2, [pc, #160]	; (8004560 <TIM_Base_SetConfig+0x100>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a27      	ldr	r2, [pc, #156]	; (8004564 <TIM_Base_SetConfig+0x104>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00f      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <TIM_Base_SetConfig+0x108>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00b      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a25      	ldr	r2, [pc, #148]	; (800456c <TIM_Base_SetConfig+0x10c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a24      	ldr	r2, [pc, #144]	; (8004570 <TIM_Base_SetConfig+0x110>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0x8a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a23      	ldr	r2, [pc, #140]	; (8004574 <TIM_Base_SetConfig+0x114>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a0e      	ldr	r2, [pc, #56]	; (800455c <TIM_Base_SetConfig+0xfc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d103      	bne.n	8004530 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b01      	cmp	r3, #1
 8004540:	d105      	bne.n	800454e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]
  }
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40010000 	.word	0x40010000
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40000c00 	.word	0x40000c00
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800

08004578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f023 0201 	bic.w	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f023 0302 	bic.w	r3, r3, #2
 80045c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a1c      	ldr	r2, [pc, #112]	; (8004640 <TIM_OC1_SetConfig+0xc8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10c      	bne.n	80045ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0308 	bic.w	r3, r3, #8
 80045da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f023 0304 	bic.w	r3, r3, #4
 80045ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a13      	ldr	r2, [pc, #76]	; (8004640 <TIM_OC1_SetConfig+0xc8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d111      	bne.n	800461a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	621a      	str	r2, [r3, #32]
}
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	40010000 	.word	0x40010000

08004644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f023 0210 	bic.w	r2, r3, #16
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0320 	bic.w	r3, r3, #32
 800468e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a1e      	ldr	r2, [pc, #120]	; (8004718 <TIM_OC2_SetConfig+0xd4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d10d      	bne.n	80046c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a15      	ldr	r2, [pc, #84]	; (8004718 <TIM_OC2_SetConfig+0xd4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d113      	bne.n	80046f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000

0800471c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0303 	bic.w	r3, r3, #3
 8004752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1d      	ldr	r2, [pc, #116]	; (80047ec <TIM_OC3_SetConfig+0xd0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10d      	bne.n	8004796 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a14      	ldr	r2, [pc, #80]	; (80047ec <TIM_OC3_SetConfig+0xd0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d113      	bne.n	80047c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	621a      	str	r2, [r3, #32]
}
 80047e0:	bf00      	nop
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	40010000 	.word	0x40010000

080047f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800483a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	031b      	lsls	r3, r3, #12
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a10      	ldr	r2, [pc, #64]	; (800488c <TIM_OC4_SetConfig+0x9c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d109      	bne.n	8004864 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	019b      	lsls	r3, r3, #6
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000

08004890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f023 0201 	bic.w	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f023 030a 	bic.w	r3, r3, #10
 80048cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b087      	sub	sp, #28
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f023 0210 	bic.w	r2, r3, #16
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004918:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	031b      	lsls	r3, r3, #12
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800492a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	f043 0307 	orr.w	r3, r3, #7
 8004970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	609a      	str	r2, [r3, #8]
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800499e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	021a      	lsls	r2, r3, #8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	609a      	str	r2, [r3, #8]
}
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2201      	movs	r2, #1
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1a      	ldr	r2, [r3, #32]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	401a      	ands	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1a      	ldr	r2, [r3, #32]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	fa01 f303 	lsl.w	r3, r1, r3
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e050      	b.n	8004aca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d018      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a74:	d013      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a18      	ldr	r2, [pc, #96]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00e      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a16      	ldr	r2, [pc, #88]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a15      	ldr	r2, [pc, #84]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40010000 	.word	0x40010000
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40000800 	.word	0x40000800
 8004ae4:	40000c00 	.word	0x40000c00
 8004ae8:	40014000 	.word	0x40014000

08004aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e042      	b.n	8004b84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fd ff5c 	bl	80029d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2224      	movs	r2, #36	; 0x24
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f973 	bl	8004e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	; 0x28
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d175      	bne.n	8004c98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_UART_Transmit+0x2c>
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e06e      	b.n	8004c9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2221      	movs	r2, #33	; 0x21
 8004bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bca:	f7fe f8e7 	bl	8002d9c <HAL_GetTick>
 8004bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	88fa      	ldrh	r2, [r7, #6]
 8004bda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be4:	d108      	bne.n	8004bf8 <HAL_UART_Transmit+0x6c>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	e003      	b.n	8004c00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c00:	e02e      	b.n	8004c60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2180      	movs	r1, #128	; 0x80
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f848 	bl	8004ca2 <UART_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e03a      	b.n	8004c9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10b      	bne.n	8004c42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	61bb      	str	r3, [r7, #24]
 8004c40:	e007      	b.n	8004c52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1cb      	bne.n	8004c02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2200      	movs	r2, #0
 8004c72:	2140      	movs	r1, #64	; 0x40
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f814 	bl	8004ca2 <UART_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e006      	b.n	8004c9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	e000      	b.n	8004c9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
  }
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b086      	sub	sp, #24
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	603b      	str	r3, [r7, #0]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb2:	e03b      	b.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cba:	d037      	beq.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbc:	f7fe f86e 	bl	8002d9c <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	6a3a      	ldr	r2, [r7, #32]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d302      	bcc.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e03a      	b.n	8004d4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d023      	beq.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d020      	beq.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d01d      	beq.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d116      	bne.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f81d 	bl	8004d54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e00f      	b.n	8004d4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4013      	ands	r3, r2
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d0b4      	beq.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b095      	sub	sp, #84	; 0x54
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d7c:	643a      	str	r2, [r7, #64]	; 0x40
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e5      	bne.n	8004d5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3314      	adds	r3, #20
 8004d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f023 0301 	bic.w	r3, r3, #1
 8004da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3314      	adds	r3, #20
 8004dae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004db0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e5      	bne.n	8004d90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d119      	bne.n	8004e00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f023 0310 	bic.w	r3, r3, #16
 8004de2:	647b      	str	r3, [r7, #68]	; 0x44
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dec:	61ba      	str	r2, [r7, #24]
 8004dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6979      	ldr	r1, [r7, #20]
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e0e:	bf00      	nop
 8004e10:	3754      	adds	r7, #84	; 0x54
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e20:	b0c0      	sub	sp, #256	; 0x100
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e38:	68d9      	ldr	r1, [r3, #12]
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	ea40 0301 	orr.w	r3, r0, r1
 8004e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e74:	f021 010c 	bic.w	r1, r1, #12
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e82:	430b      	orrs	r3, r1
 8004e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	6999      	ldr	r1, [r3, #24]
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	ea40 0301 	orr.w	r3, r0, r1
 8004ea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b8f      	ldr	r3, [pc, #572]	; (80050e8 <UART_SetConfig+0x2cc>)
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d005      	beq.n	8004ebc <UART_SetConfig+0xa0>
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b8d      	ldr	r3, [pc, #564]	; (80050ec <UART_SetConfig+0x2d0>)
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d104      	bne.n	8004ec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ebc:	f7fe fea6 	bl	8003c0c <HAL_RCC_GetPCLK2Freq>
 8004ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ec4:	e003      	b.n	8004ece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ec6:	f7fe fe8d 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 8004eca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed8:	f040 810c 	bne.w	80050f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004eee:	4622      	mov	r2, r4
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	1891      	adds	r1, r2, r2
 8004ef4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ef6:	415b      	adcs	r3, r3
 8004ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004efe:	4621      	mov	r1, r4
 8004f00:	eb12 0801 	adds.w	r8, r2, r1
 8004f04:	4629      	mov	r1, r5
 8004f06:	eb43 0901 	adc.w	r9, r3, r1
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f1e:	4690      	mov	r8, r2
 8004f20:	4699      	mov	r9, r3
 8004f22:	4623      	mov	r3, r4
 8004f24:	eb18 0303 	adds.w	r3, r8, r3
 8004f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	eb49 0303 	adc.w	r3, r9, r3
 8004f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	18db      	adds	r3, r3, r3
 8004f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f50:	4613      	mov	r3, r2
 8004f52:	eb42 0303 	adc.w	r3, r2, r3
 8004f56:	657b      	str	r3, [r7, #84]	; 0x54
 8004f58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f60:	f7fb fe4a 	bl	8000bf8 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4b61      	ldr	r3, [pc, #388]	; (80050f0 <UART_SetConfig+0x2d4>)
 8004f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	011c      	lsls	r4, r3, #4
 8004f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	1891      	adds	r1, r2, r2
 8004f8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f8c:	415b      	adcs	r3, r3
 8004f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f94:	4641      	mov	r1, r8
 8004f96:	eb12 0a01 	adds.w	sl, r2, r1
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb4:	4692      	mov	sl, r2
 8004fb6:	469b      	mov	fp, r3
 8004fb8:	4643      	mov	r3, r8
 8004fba:	eb1a 0303 	adds.w	r3, sl, r3
 8004fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8004fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	18db      	adds	r3, r3, r3
 8004fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	eb42 0303 	adc.w	r3, r2, r3
 8004fec:	647b      	str	r3, [r7, #68]	; 0x44
 8004fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ff6:	f7fb fdff 	bl	8000bf8 <__aeabi_uldivmod>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <UART_SetConfig+0x2d4>)
 8005002:	fba3 2301 	umull	r2, r3, r3, r1
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	2264      	movs	r2, #100	; 0x64
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	1acb      	subs	r3, r1, r3
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005016:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <UART_SetConfig+0x2d4>)
 8005018:	fba3 2302 	umull	r2, r3, r3, r2
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005024:	441c      	add	r4, r3
 8005026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800502a:	2200      	movs	r2, #0
 800502c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005030:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	1891      	adds	r1, r2, r2
 800503e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005040:	415b      	adcs	r3, r3
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005048:	4641      	mov	r1, r8
 800504a:	1851      	adds	r1, r2, r1
 800504c:	6339      	str	r1, [r7, #48]	; 0x30
 800504e:	4649      	mov	r1, r9
 8005050:	414b      	adcs	r3, r1
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005060:	4659      	mov	r1, fp
 8005062:	00cb      	lsls	r3, r1, #3
 8005064:	4651      	mov	r1, sl
 8005066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800506a:	4651      	mov	r1, sl
 800506c:	00ca      	lsls	r2, r1, #3
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	4603      	mov	r3, r0
 8005074:	4642      	mov	r2, r8
 8005076:	189b      	adds	r3, r3, r2
 8005078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800507c:	464b      	mov	r3, r9
 800507e:	460a      	mov	r2, r1
 8005080:	eb42 0303 	adc.w	r3, r2, r3
 8005084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005094:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800509c:	460b      	mov	r3, r1
 800509e:	18db      	adds	r3, r3, r3
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a2:	4613      	mov	r3, r2
 80050a4:	eb42 0303 	adc.w	r3, r2, r3
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050b2:	f7fb fda1 	bl	8000bf8 <__aeabi_uldivmod>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <UART_SetConfig+0x2d4>)
 80050bc:	fba3 1302 	umull	r1, r3, r3, r2
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	2164      	movs	r1, #100	; 0x64
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	3332      	adds	r3, #50	; 0x32
 80050ce:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <UART_SetConfig+0x2d4>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	f003 0207 	and.w	r2, r3, #7
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4422      	add	r2, r4
 80050e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050e4:	e106      	b.n	80052f4 <UART_SetConfig+0x4d8>
 80050e6:	bf00      	nop
 80050e8:	40011000 	.word	0x40011000
 80050ec:	40011400 	.word	0x40011400
 80050f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005106:	4642      	mov	r2, r8
 8005108:	464b      	mov	r3, r9
 800510a:	1891      	adds	r1, r2, r2
 800510c:	6239      	str	r1, [r7, #32]
 800510e:	415b      	adcs	r3, r3
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
 8005112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005116:	4641      	mov	r1, r8
 8005118:	1854      	adds	r4, r2, r1
 800511a:	4649      	mov	r1, r9
 800511c:	eb43 0501 	adc.w	r5, r3, r1
 8005120:	f04f 0200 	mov.w	r2, #0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	00eb      	lsls	r3, r5, #3
 800512a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800512e:	00e2      	lsls	r2, r4, #3
 8005130:	4614      	mov	r4, r2
 8005132:	461d      	mov	r5, r3
 8005134:	4643      	mov	r3, r8
 8005136:	18e3      	adds	r3, r4, r3
 8005138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800513c:	464b      	mov	r3, r9
 800513e:	eb45 0303 	adc.w	r3, r5, r3
 8005142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005152:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005162:	4629      	mov	r1, r5
 8005164:	008b      	lsls	r3, r1, #2
 8005166:	4621      	mov	r1, r4
 8005168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800516c:	4621      	mov	r1, r4
 800516e:	008a      	lsls	r2, r1, #2
 8005170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005174:	f7fb fd40 	bl	8000bf8 <__aeabi_uldivmod>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4b60      	ldr	r3, [pc, #384]	; (8005300 <UART_SetConfig+0x4e4>)
 800517e:	fba3 2302 	umull	r2, r3, r3, r2
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	011c      	lsls	r4, r3, #4
 8005186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800518a:	2200      	movs	r2, #0
 800518c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005190:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005198:	4642      	mov	r2, r8
 800519a:	464b      	mov	r3, r9
 800519c:	1891      	adds	r1, r2, r2
 800519e:	61b9      	str	r1, [r7, #24]
 80051a0:	415b      	adcs	r3, r3
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a8:	4641      	mov	r1, r8
 80051aa:	1851      	adds	r1, r2, r1
 80051ac:	6139      	str	r1, [r7, #16]
 80051ae:	4649      	mov	r1, r9
 80051b0:	414b      	adcs	r3, r1
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051c0:	4659      	mov	r1, fp
 80051c2:	00cb      	lsls	r3, r1, #3
 80051c4:	4651      	mov	r1, sl
 80051c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ca:	4651      	mov	r1, sl
 80051cc:	00ca      	lsls	r2, r1, #3
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	4642      	mov	r2, r8
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051dc:	464b      	mov	r3, r9
 80051de:	460a      	mov	r2, r1
 80051e0:	eb42 0303 	adc.w	r3, r2, r3
 80051e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80051f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005200:	4649      	mov	r1, r9
 8005202:	008b      	lsls	r3, r1, #2
 8005204:	4641      	mov	r1, r8
 8005206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800520a:	4641      	mov	r1, r8
 800520c:	008a      	lsls	r2, r1, #2
 800520e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005212:	f7fb fcf1 	bl	8000bf8 <__aeabi_uldivmod>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4611      	mov	r1, r2
 800521c:	4b38      	ldr	r3, [pc, #224]	; (8005300 <UART_SetConfig+0x4e4>)
 800521e:	fba3 2301 	umull	r2, r3, r3, r1
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2264      	movs	r2, #100	; 0x64
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	1acb      	subs	r3, r1, r3
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	3332      	adds	r3, #50	; 0x32
 8005230:	4a33      	ldr	r2, [pc, #204]	; (8005300 <UART_SetConfig+0x4e4>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523c:	441c      	add	r4, r3
 800523e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005242:	2200      	movs	r2, #0
 8005244:	673b      	str	r3, [r7, #112]	; 0x70
 8005246:	677a      	str	r2, [r7, #116]	; 0x74
 8005248:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800524c:	4642      	mov	r2, r8
 800524e:	464b      	mov	r3, r9
 8005250:	1891      	adds	r1, r2, r2
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	415b      	adcs	r3, r3
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800525c:	4641      	mov	r1, r8
 800525e:	1851      	adds	r1, r2, r1
 8005260:	6039      	str	r1, [r7, #0]
 8005262:	4649      	mov	r1, r9
 8005264:	414b      	adcs	r3, r1
 8005266:	607b      	str	r3, [r7, #4]
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005274:	4659      	mov	r1, fp
 8005276:	00cb      	lsls	r3, r1, #3
 8005278:	4651      	mov	r1, sl
 800527a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800527e:	4651      	mov	r1, sl
 8005280:	00ca      	lsls	r2, r1, #3
 8005282:	4610      	mov	r0, r2
 8005284:	4619      	mov	r1, r3
 8005286:	4603      	mov	r3, r0
 8005288:	4642      	mov	r2, r8
 800528a:	189b      	adds	r3, r3, r2
 800528c:	66bb      	str	r3, [r7, #104]	; 0x68
 800528e:	464b      	mov	r3, r9
 8005290:	460a      	mov	r2, r1
 8005292:	eb42 0303 	adc.w	r3, r2, r3
 8005296:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	663b      	str	r3, [r7, #96]	; 0x60
 80052a2:	667a      	str	r2, [r7, #100]	; 0x64
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052b0:	4649      	mov	r1, r9
 80052b2:	008b      	lsls	r3, r1, #2
 80052b4:	4641      	mov	r1, r8
 80052b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ba:	4641      	mov	r1, r8
 80052bc:	008a      	lsls	r2, r1, #2
 80052be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052c2:	f7fb fc99 	bl	8000bf8 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <UART_SetConfig+0x4e4>)
 80052cc:	fba3 1302 	umull	r1, r3, r3, r2
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	2164      	movs	r1, #100	; 0x64
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	3332      	adds	r3, #50	; 0x32
 80052de:	4a08      	ldr	r2, [pc, #32]	; (8005300 <UART_SetConfig+0x4e4>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	f003 020f 	and.w	r2, r3, #15
 80052ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4422      	add	r2, r4
 80052f2:	609a      	str	r2, [r3, #8]
}
 80052f4:	bf00      	nop
 80052f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052fa:	46bd      	mov	sp, r7
 80052fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005300:	51eb851f 	.word	0x51eb851f

08005304 <__cvt>:
 8005304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	ec55 4b10 	vmov	r4, r5, d0
 800530c:	2d00      	cmp	r5, #0
 800530e:	460e      	mov	r6, r1
 8005310:	4619      	mov	r1, r3
 8005312:	462b      	mov	r3, r5
 8005314:	bfbb      	ittet	lt
 8005316:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800531a:	461d      	movlt	r5, r3
 800531c:	2300      	movge	r3, #0
 800531e:	232d      	movlt	r3, #45	; 0x2d
 8005320:	700b      	strb	r3, [r1, #0]
 8005322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005324:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005328:	4691      	mov	r9, r2
 800532a:	f023 0820 	bic.w	r8, r3, #32
 800532e:	bfbc      	itt	lt
 8005330:	4622      	movlt	r2, r4
 8005332:	4614      	movlt	r4, r2
 8005334:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005338:	d005      	beq.n	8005346 <__cvt+0x42>
 800533a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800533e:	d100      	bne.n	8005342 <__cvt+0x3e>
 8005340:	3601      	adds	r6, #1
 8005342:	2102      	movs	r1, #2
 8005344:	e000      	b.n	8005348 <__cvt+0x44>
 8005346:	2103      	movs	r1, #3
 8005348:	ab03      	add	r3, sp, #12
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	ab02      	add	r3, sp, #8
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	ec45 4b10 	vmov	d0, r4, r5
 8005354:	4653      	mov	r3, sl
 8005356:	4632      	mov	r2, r6
 8005358:	f000 fe5a 	bl	8006010 <_dtoa_r>
 800535c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005360:	4607      	mov	r7, r0
 8005362:	d102      	bne.n	800536a <__cvt+0x66>
 8005364:	f019 0f01 	tst.w	r9, #1
 8005368:	d022      	beq.n	80053b0 <__cvt+0xac>
 800536a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800536e:	eb07 0906 	add.w	r9, r7, r6
 8005372:	d110      	bne.n	8005396 <__cvt+0x92>
 8005374:	783b      	ldrb	r3, [r7, #0]
 8005376:	2b30      	cmp	r3, #48	; 0x30
 8005378:	d10a      	bne.n	8005390 <__cvt+0x8c>
 800537a:	2200      	movs	r2, #0
 800537c:	2300      	movs	r3, #0
 800537e:	4620      	mov	r0, r4
 8005380:	4629      	mov	r1, r5
 8005382:	f7fb fba9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005386:	b918      	cbnz	r0, 8005390 <__cvt+0x8c>
 8005388:	f1c6 0601 	rsb	r6, r6, #1
 800538c:	f8ca 6000 	str.w	r6, [sl]
 8005390:	f8da 3000 	ldr.w	r3, [sl]
 8005394:	4499      	add	r9, r3
 8005396:	2200      	movs	r2, #0
 8005398:	2300      	movs	r3, #0
 800539a:	4620      	mov	r0, r4
 800539c:	4629      	mov	r1, r5
 800539e:	f7fb fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80053a2:	b108      	cbz	r0, 80053a8 <__cvt+0xa4>
 80053a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80053a8:	2230      	movs	r2, #48	; 0x30
 80053aa:	9b03      	ldr	r3, [sp, #12]
 80053ac:	454b      	cmp	r3, r9
 80053ae:	d307      	bcc.n	80053c0 <__cvt+0xbc>
 80053b0:	9b03      	ldr	r3, [sp, #12]
 80053b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053b4:	1bdb      	subs	r3, r3, r7
 80053b6:	4638      	mov	r0, r7
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	b004      	add	sp, #16
 80053bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c0:	1c59      	adds	r1, r3, #1
 80053c2:	9103      	str	r1, [sp, #12]
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e7f0      	b.n	80053aa <__cvt+0xa6>

080053c8 <__exponent>:
 80053c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ca:	4603      	mov	r3, r0
 80053cc:	2900      	cmp	r1, #0
 80053ce:	bfb8      	it	lt
 80053d0:	4249      	neglt	r1, r1
 80053d2:	f803 2b02 	strb.w	r2, [r3], #2
 80053d6:	bfb4      	ite	lt
 80053d8:	222d      	movlt	r2, #45	; 0x2d
 80053da:	222b      	movge	r2, #43	; 0x2b
 80053dc:	2909      	cmp	r1, #9
 80053de:	7042      	strb	r2, [r0, #1]
 80053e0:	dd2a      	ble.n	8005438 <__exponent+0x70>
 80053e2:	f10d 0207 	add.w	r2, sp, #7
 80053e6:	4617      	mov	r7, r2
 80053e8:	260a      	movs	r6, #10
 80053ea:	4694      	mov	ip, r2
 80053ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80053f0:	fb06 1415 	mls	r4, r6, r5, r1
 80053f4:	3430      	adds	r4, #48	; 0x30
 80053f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80053fa:	460c      	mov	r4, r1
 80053fc:	2c63      	cmp	r4, #99	; 0x63
 80053fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8005402:	4629      	mov	r1, r5
 8005404:	dcf1      	bgt.n	80053ea <__exponent+0x22>
 8005406:	3130      	adds	r1, #48	; 0x30
 8005408:	f1ac 0402 	sub.w	r4, ip, #2
 800540c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005410:	1c41      	adds	r1, r0, #1
 8005412:	4622      	mov	r2, r4
 8005414:	42ba      	cmp	r2, r7
 8005416:	d30a      	bcc.n	800542e <__exponent+0x66>
 8005418:	f10d 0209 	add.w	r2, sp, #9
 800541c:	eba2 020c 	sub.w	r2, r2, ip
 8005420:	42bc      	cmp	r4, r7
 8005422:	bf88      	it	hi
 8005424:	2200      	movhi	r2, #0
 8005426:	4413      	add	r3, r2
 8005428:	1a18      	subs	r0, r3, r0
 800542a:	b003      	add	sp, #12
 800542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800542e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005432:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005436:	e7ed      	b.n	8005414 <__exponent+0x4c>
 8005438:	2330      	movs	r3, #48	; 0x30
 800543a:	3130      	adds	r1, #48	; 0x30
 800543c:	7083      	strb	r3, [r0, #2]
 800543e:	70c1      	strb	r1, [r0, #3]
 8005440:	1d03      	adds	r3, r0, #4
 8005442:	e7f1      	b.n	8005428 <__exponent+0x60>

08005444 <_printf_float>:
 8005444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005448:	ed2d 8b02 	vpush	{d8}
 800544c:	b08d      	sub	sp, #52	; 0x34
 800544e:	460c      	mov	r4, r1
 8005450:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005454:	4616      	mov	r6, r2
 8005456:	461f      	mov	r7, r3
 8005458:	4605      	mov	r5, r0
 800545a:	f000 fcd9 	bl	8005e10 <_localeconv_r>
 800545e:	f8d0 a000 	ldr.w	sl, [r0]
 8005462:	4650      	mov	r0, sl
 8005464:	f7fa ff0c 	bl	8000280 <strlen>
 8005468:	2300      	movs	r3, #0
 800546a:	930a      	str	r3, [sp, #40]	; 0x28
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	9305      	str	r3, [sp, #20]
 8005470:	f8d8 3000 	ldr.w	r3, [r8]
 8005474:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005478:	3307      	adds	r3, #7
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	f103 0208 	add.w	r2, r3, #8
 8005482:	f8c8 2000 	str.w	r2, [r8]
 8005486:	e9d3 8900 	ldrd	r8, r9, [r3]
 800548a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800548e:	9307      	str	r3, [sp, #28]
 8005490:	f8cd 8018 	str.w	r8, [sp, #24]
 8005494:	ee08 0a10 	vmov	s16, r0
 8005498:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800549c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054a0:	4b9e      	ldr	r3, [pc, #632]	; (800571c <_printf_float+0x2d8>)
 80054a2:	f04f 32ff 	mov.w	r2, #4294967295
 80054a6:	f7fb fb49 	bl	8000b3c <__aeabi_dcmpun>
 80054aa:	bb88      	cbnz	r0, 8005510 <_printf_float+0xcc>
 80054ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054b0:	4b9a      	ldr	r3, [pc, #616]	; (800571c <_printf_float+0x2d8>)
 80054b2:	f04f 32ff 	mov.w	r2, #4294967295
 80054b6:	f7fb fb23 	bl	8000b00 <__aeabi_dcmple>
 80054ba:	bb48      	cbnz	r0, 8005510 <_printf_float+0xcc>
 80054bc:	2200      	movs	r2, #0
 80054be:	2300      	movs	r3, #0
 80054c0:	4640      	mov	r0, r8
 80054c2:	4649      	mov	r1, r9
 80054c4:	f7fb fb12 	bl	8000aec <__aeabi_dcmplt>
 80054c8:	b110      	cbz	r0, 80054d0 <_printf_float+0x8c>
 80054ca:	232d      	movs	r3, #45	; 0x2d
 80054cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d0:	4a93      	ldr	r2, [pc, #588]	; (8005720 <_printf_float+0x2dc>)
 80054d2:	4b94      	ldr	r3, [pc, #592]	; (8005724 <_printf_float+0x2e0>)
 80054d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80054d8:	bf94      	ite	ls
 80054da:	4690      	movls	r8, r2
 80054dc:	4698      	movhi	r8, r3
 80054de:	2303      	movs	r3, #3
 80054e0:	6123      	str	r3, [r4, #16]
 80054e2:	9b05      	ldr	r3, [sp, #20]
 80054e4:	f023 0304 	bic.w	r3, r3, #4
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	f04f 0900 	mov.w	r9, #0
 80054ee:	9700      	str	r7, [sp, #0]
 80054f0:	4633      	mov	r3, r6
 80054f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80054f4:	4621      	mov	r1, r4
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 f9da 	bl	80058b0 <_printf_common>
 80054fc:	3001      	adds	r0, #1
 80054fe:	f040 8090 	bne.w	8005622 <_printf_float+0x1de>
 8005502:	f04f 30ff 	mov.w	r0, #4294967295
 8005506:	b00d      	add	sp, #52	; 0x34
 8005508:	ecbd 8b02 	vpop	{d8}
 800550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005510:	4642      	mov	r2, r8
 8005512:	464b      	mov	r3, r9
 8005514:	4640      	mov	r0, r8
 8005516:	4649      	mov	r1, r9
 8005518:	f7fb fb10 	bl	8000b3c <__aeabi_dcmpun>
 800551c:	b140      	cbz	r0, 8005530 <_printf_float+0xec>
 800551e:	464b      	mov	r3, r9
 8005520:	2b00      	cmp	r3, #0
 8005522:	bfbc      	itt	lt
 8005524:	232d      	movlt	r3, #45	; 0x2d
 8005526:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800552a:	4a7f      	ldr	r2, [pc, #508]	; (8005728 <_printf_float+0x2e4>)
 800552c:	4b7f      	ldr	r3, [pc, #508]	; (800572c <_printf_float+0x2e8>)
 800552e:	e7d1      	b.n	80054d4 <_printf_float+0x90>
 8005530:	6863      	ldr	r3, [r4, #4]
 8005532:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005536:	9206      	str	r2, [sp, #24]
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	d13f      	bne.n	80055bc <_printf_float+0x178>
 800553c:	2306      	movs	r3, #6
 800553e:	6063      	str	r3, [r4, #4]
 8005540:	9b05      	ldr	r3, [sp, #20]
 8005542:	6861      	ldr	r1, [r4, #4]
 8005544:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005548:	2300      	movs	r3, #0
 800554a:	9303      	str	r3, [sp, #12]
 800554c:	ab0a      	add	r3, sp, #40	; 0x28
 800554e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005552:	ab09      	add	r3, sp, #36	; 0x24
 8005554:	ec49 8b10 	vmov	d0, r8, r9
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	6022      	str	r2, [r4, #0]
 800555c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005560:	4628      	mov	r0, r5
 8005562:	f7ff fecf 	bl	8005304 <__cvt>
 8005566:	9b06      	ldr	r3, [sp, #24]
 8005568:	9909      	ldr	r1, [sp, #36]	; 0x24
 800556a:	2b47      	cmp	r3, #71	; 0x47
 800556c:	4680      	mov	r8, r0
 800556e:	d108      	bne.n	8005582 <_printf_float+0x13e>
 8005570:	1cc8      	adds	r0, r1, #3
 8005572:	db02      	blt.n	800557a <_printf_float+0x136>
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	4299      	cmp	r1, r3
 8005578:	dd41      	ble.n	80055fe <_printf_float+0x1ba>
 800557a:	f1ab 0302 	sub.w	r3, fp, #2
 800557e:	fa5f fb83 	uxtb.w	fp, r3
 8005582:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005586:	d820      	bhi.n	80055ca <_printf_float+0x186>
 8005588:	3901      	subs	r1, #1
 800558a:	465a      	mov	r2, fp
 800558c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005590:	9109      	str	r1, [sp, #36]	; 0x24
 8005592:	f7ff ff19 	bl	80053c8 <__exponent>
 8005596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005598:	1813      	adds	r3, r2, r0
 800559a:	2a01      	cmp	r2, #1
 800559c:	4681      	mov	r9, r0
 800559e:	6123      	str	r3, [r4, #16]
 80055a0:	dc02      	bgt.n	80055a8 <_printf_float+0x164>
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	07d2      	lsls	r2, r2, #31
 80055a6:	d501      	bpl.n	80055ac <_printf_float+0x168>
 80055a8:	3301      	adds	r3, #1
 80055aa:	6123      	str	r3, [r4, #16]
 80055ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d09c      	beq.n	80054ee <_printf_float+0xaa>
 80055b4:	232d      	movs	r3, #45	; 0x2d
 80055b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ba:	e798      	b.n	80054ee <_printf_float+0xaa>
 80055bc:	9a06      	ldr	r2, [sp, #24]
 80055be:	2a47      	cmp	r2, #71	; 0x47
 80055c0:	d1be      	bne.n	8005540 <_printf_float+0xfc>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1bc      	bne.n	8005540 <_printf_float+0xfc>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e7b9      	b.n	800553e <_printf_float+0xfa>
 80055ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80055ce:	d118      	bne.n	8005602 <_printf_float+0x1be>
 80055d0:	2900      	cmp	r1, #0
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	dd0b      	ble.n	80055ee <_printf_float+0x1aa>
 80055d6:	6121      	str	r1, [r4, #16]
 80055d8:	b913      	cbnz	r3, 80055e0 <_printf_float+0x19c>
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	07d0      	lsls	r0, r2, #31
 80055de:	d502      	bpl.n	80055e6 <_printf_float+0x1a2>
 80055e0:	3301      	adds	r3, #1
 80055e2:	440b      	add	r3, r1
 80055e4:	6123      	str	r3, [r4, #16]
 80055e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80055e8:	f04f 0900 	mov.w	r9, #0
 80055ec:	e7de      	b.n	80055ac <_printf_float+0x168>
 80055ee:	b913      	cbnz	r3, 80055f6 <_printf_float+0x1b2>
 80055f0:	6822      	ldr	r2, [r4, #0]
 80055f2:	07d2      	lsls	r2, r2, #31
 80055f4:	d501      	bpl.n	80055fa <_printf_float+0x1b6>
 80055f6:	3302      	adds	r3, #2
 80055f8:	e7f4      	b.n	80055e4 <_printf_float+0x1a0>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e7f2      	b.n	80055e4 <_printf_float+0x1a0>
 80055fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005604:	4299      	cmp	r1, r3
 8005606:	db05      	blt.n	8005614 <_printf_float+0x1d0>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	6121      	str	r1, [r4, #16]
 800560c:	07d8      	lsls	r0, r3, #31
 800560e:	d5ea      	bpl.n	80055e6 <_printf_float+0x1a2>
 8005610:	1c4b      	adds	r3, r1, #1
 8005612:	e7e7      	b.n	80055e4 <_printf_float+0x1a0>
 8005614:	2900      	cmp	r1, #0
 8005616:	bfd4      	ite	le
 8005618:	f1c1 0202 	rsble	r2, r1, #2
 800561c:	2201      	movgt	r2, #1
 800561e:	4413      	add	r3, r2
 8005620:	e7e0      	b.n	80055e4 <_printf_float+0x1a0>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	055a      	lsls	r2, r3, #21
 8005626:	d407      	bmi.n	8005638 <_printf_float+0x1f4>
 8005628:	6923      	ldr	r3, [r4, #16]
 800562a:	4642      	mov	r2, r8
 800562c:	4631      	mov	r1, r6
 800562e:	4628      	mov	r0, r5
 8005630:	47b8      	blx	r7
 8005632:	3001      	adds	r0, #1
 8005634:	d12c      	bne.n	8005690 <_printf_float+0x24c>
 8005636:	e764      	b.n	8005502 <_printf_float+0xbe>
 8005638:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800563c:	f240 80e0 	bls.w	8005800 <_printf_float+0x3bc>
 8005640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005644:	2200      	movs	r2, #0
 8005646:	2300      	movs	r3, #0
 8005648:	f7fb fa46 	bl	8000ad8 <__aeabi_dcmpeq>
 800564c:	2800      	cmp	r0, #0
 800564e:	d034      	beq.n	80056ba <_printf_float+0x276>
 8005650:	4a37      	ldr	r2, [pc, #220]	; (8005730 <_printf_float+0x2ec>)
 8005652:	2301      	movs	r3, #1
 8005654:	4631      	mov	r1, r6
 8005656:	4628      	mov	r0, r5
 8005658:	47b8      	blx	r7
 800565a:	3001      	adds	r0, #1
 800565c:	f43f af51 	beq.w	8005502 <_printf_float+0xbe>
 8005660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005664:	429a      	cmp	r2, r3
 8005666:	db02      	blt.n	800566e <_printf_float+0x22a>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	07d8      	lsls	r0, r3, #31
 800566c:	d510      	bpl.n	8005690 <_printf_float+0x24c>
 800566e:	ee18 3a10 	vmov	r3, s16
 8005672:	4652      	mov	r2, sl
 8005674:	4631      	mov	r1, r6
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	f43f af41 	beq.w	8005502 <_printf_float+0xbe>
 8005680:	f04f 0800 	mov.w	r8, #0
 8005684:	f104 091a 	add.w	r9, r4, #26
 8005688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800568a:	3b01      	subs	r3, #1
 800568c:	4543      	cmp	r3, r8
 800568e:	dc09      	bgt.n	80056a4 <_printf_float+0x260>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	079b      	lsls	r3, r3, #30
 8005694:	f100 8107 	bmi.w	80058a6 <_printf_float+0x462>
 8005698:	68e0      	ldr	r0, [r4, #12]
 800569a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800569c:	4298      	cmp	r0, r3
 800569e:	bfb8      	it	lt
 80056a0:	4618      	movlt	r0, r3
 80056a2:	e730      	b.n	8005506 <_printf_float+0xc2>
 80056a4:	2301      	movs	r3, #1
 80056a6:	464a      	mov	r2, r9
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f af27 	beq.w	8005502 <_printf_float+0xbe>
 80056b4:	f108 0801 	add.w	r8, r8, #1
 80056b8:	e7e6      	b.n	8005688 <_printf_float+0x244>
 80056ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056bc:	2b00      	cmp	r3, #0
 80056be:	dc39      	bgt.n	8005734 <_printf_float+0x2f0>
 80056c0:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <_printf_float+0x2ec>)
 80056c2:	2301      	movs	r3, #1
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	f43f af19 	beq.w	8005502 <_printf_float+0xbe>
 80056d0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056d4:	4313      	orrs	r3, r2
 80056d6:	d102      	bne.n	80056de <_printf_float+0x29a>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	07d9      	lsls	r1, r3, #31
 80056dc:	d5d8      	bpl.n	8005690 <_printf_float+0x24c>
 80056de:	ee18 3a10 	vmov	r3, s16
 80056e2:	4652      	mov	r2, sl
 80056e4:	4631      	mov	r1, r6
 80056e6:	4628      	mov	r0, r5
 80056e8:	47b8      	blx	r7
 80056ea:	3001      	adds	r0, #1
 80056ec:	f43f af09 	beq.w	8005502 <_printf_float+0xbe>
 80056f0:	f04f 0900 	mov.w	r9, #0
 80056f4:	f104 0a1a 	add.w	sl, r4, #26
 80056f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056fa:	425b      	negs	r3, r3
 80056fc:	454b      	cmp	r3, r9
 80056fe:	dc01      	bgt.n	8005704 <_printf_float+0x2c0>
 8005700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005702:	e792      	b.n	800562a <_printf_float+0x1e6>
 8005704:	2301      	movs	r3, #1
 8005706:	4652      	mov	r2, sl
 8005708:	4631      	mov	r1, r6
 800570a:	4628      	mov	r0, r5
 800570c:	47b8      	blx	r7
 800570e:	3001      	adds	r0, #1
 8005710:	f43f aef7 	beq.w	8005502 <_printf_float+0xbe>
 8005714:	f109 0901 	add.w	r9, r9, #1
 8005718:	e7ee      	b.n	80056f8 <_printf_float+0x2b4>
 800571a:	bf00      	nop
 800571c:	7fefffff 	.word	0x7fefffff
 8005720:	08008e88 	.word	0x08008e88
 8005724:	08008e8c 	.word	0x08008e8c
 8005728:	08008e90 	.word	0x08008e90
 800572c:	08008e94 	.word	0x08008e94
 8005730:	08008e98 	.word	0x08008e98
 8005734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005736:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005738:	429a      	cmp	r2, r3
 800573a:	bfa8      	it	ge
 800573c:	461a      	movge	r2, r3
 800573e:	2a00      	cmp	r2, #0
 8005740:	4691      	mov	r9, r2
 8005742:	dc37      	bgt.n	80057b4 <_printf_float+0x370>
 8005744:	f04f 0b00 	mov.w	fp, #0
 8005748:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800574c:	f104 021a 	add.w	r2, r4, #26
 8005750:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005752:	9305      	str	r3, [sp, #20]
 8005754:	eba3 0309 	sub.w	r3, r3, r9
 8005758:	455b      	cmp	r3, fp
 800575a:	dc33      	bgt.n	80057c4 <_printf_float+0x380>
 800575c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005760:	429a      	cmp	r2, r3
 8005762:	db3b      	blt.n	80057dc <_printf_float+0x398>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	07da      	lsls	r2, r3, #31
 8005768:	d438      	bmi.n	80057dc <_printf_float+0x398>
 800576a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800576e:	eba2 0903 	sub.w	r9, r2, r3
 8005772:	9b05      	ldr	r3, [sp, #20]
 8005774:	1ad2      	subs	r2, r2, r3
 8005776:	4591      	cmp	r9, r2
 8005778:	bfa8      	it	ge
 800577a:	4691      	movge	r9, r2
 800577c:	f1b9 0f00 	cmp.w	r9, #0
 8005780:	dc35      	bgt.n	80057ee <_printf_float+0x3aa>
 8005782:	f04f 0800 	mov.w	r8, #0
 8005786:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800578a:	f104 0a1a 	add.w	sl, r4, #26
 800578e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	eba3 0309 	sub.w	r3, r3, r9
 8005798:	4543      	cmp	r3, r8
 800579a:	f77f af79 	ble.w	8005690 <_printf_float+0x24c>
 800579e:	2301      	movs	r3, #1
 80057a0:	4652      	mov	r2, sl
 80057a2:	4631      	mov	r1, r6
 80057a4:	4628      	mov	r0, r5
 80057a6:	47b8      	blx	r7
 80057a8:	3001      	adds	r0, #1
 80057aa:	f43f aeaa 	beq.w	8005502 <_printf_float+0xbe>
 80057ae:	f108 0801 	add.w	r8, r8, #1
 80057b2:	e7ec      	b.n	800578e <_printf_float+0x34a>
 80057b4:	4613      	mov	r3, r2
 80057b6:	4631      	mov	r1, r6
 80057b8:	4642      	mov	r2, r8
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	d1c0      	bne.n	8005744 <_printf_float+0x300>
 80057c2:	e69e      	b.n	8005502 <_printf_float+0xbe>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4631      	mov	r1, r6
 80057c8:	4628      	mov	r0, r5
 80057ca:	9205      	str	r2, [sp, #20]
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f ae97 	beq.w	8005502 <_printf_float+0xbe>
 80057d4:	9a05      	ldr	r2, [sp, #20]
 80057d6:	f10b 0b01 	add.w	fp, fp, #1
 80057da:	e7b9      	b.n	8005750 <_printf_float+0x30c>
 80057dc:	ee18 3a10 	vmov	r3, s16
 80057e0:	4652      	mov	r2, sl
 80057e2:	4631      	mov	r1, r6
 80057e4:	4628      	mov	r0, r5
 80057e6:	47b8      	blx	r7
 80057e8:	3001      	adds	r0, #1
 80057ea:	d1be      	bne.n	800576a <_printf_float+0x326>
 80057ec:	e689      	b.n	8005502 <_printf_float+0xbe>
 80057ee:	9a05      	ldr	r2, [sp, #20]
 80057f0:	464b      	mov	r3, r9
 80057f2:	4442      	add	r2, r8
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b8      	blx	r7
 80057fa:	3001      	adds	r0, #1
 80057fc:	d1c1      	bne.n	8005782 <_printf_float+0x33e>
 80057fe:	e680      	b.n	8005502 <_printf_float+0xbe>
 8005800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005802:	2a01      	cmp	r2, #1
 8005804:	dc01      	bgt.n	800580a <_printf_float+0x3c6>
 8005806:	07db      	lsls	r3, r3, #31
 8005808:	d53a      	bpl.n	8005880 <_printf_float+0x43c>
 800580a:	2301      	movs	r3, #1
 800580c:	4642      	mov	r2, r8
 800580e:	4631      	mov	r1, r6
 8005810:	4628      	mov	r0, r5
 8005812:	47b8      	blx	r7
 8005814:	3001      	adds	r0, #1
 8005816:	f43f ae74 	beq.w	8005502 <_printf_float+0xbe>
 800581a:	ee18 3a10 	vmov	r3, s16
 800581e:	4652      	mov	r2, sl
 8005820:	4631      	mov	r1, r6
 8005822:	4628      	mov	r0, r5
 8005824:	47b8      	blx	r7
 8005826:	3001      	adds	r0, #1
 8005828:	f43f ae6b 	beq.w	8005502 <_printf_float+0xbe>
 800582c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005830:	2200      	movs	r2, #0
 8005832:	2300      	movs	r3, #0
 8005834:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005838:	f7fb f94e 	bl	8000ad8 <__aeabi_dcmpeq>
 800583c:	b9d8      	cbnz	r0, 8005876 <_printf_float+0x432>
 800583e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005842:	f108 0201 	add.w	r2, r8, #1
 8005846:	4631      	mov	r1, r6
 8005848:	4628      	mov	r0, r5
 800584a:	47b8      	blx	r7
 800584c:	3001      	adds	r0, #1
 800584e:	d10e      	bne.n	800586e <_printf_float+0x42a>
 8005850:	e657      	b.n	8005502 <_printf_float+0xbe>
 8005852:	2301      	movs	r3, #1
 8005854:	4652      	mov	r2, sl
 8005856:	4631      	mov	r1, r6
 8005858:	4628      	mov	r0, r5
 800585a:	47b8      	blx	r7
 800585c:	3001      	adds	r0, #1
 800585e:	f43f ae50 	beq.w	8005502 <_printf_float+0xbe>
 8005862:	f108 0801 	add.w	r8, r8, #1
 8005866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005868:	3b01      	subs	r3, #1
 800586a:	4543      	cmp	r3, r8
 800586c:	dcf1      	bgt.n	8005852 <_printf_float+0x40e>
 800586e:	464b      	mov	r3, r9
 8005870:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005874:	e6da      	b.n	800562c <_printf_float+0x1e8>
 8005876:	f04f 0800 	mov.w	r8, #0
 800587a:	f104 0a1a 	add.w	sl, r4, #26
 800587e:	e7f2      	b.n	8005866 <_printf_float+0x422>
 8005880:	2301      	movs	r3, #1
 8005882:	4642      	mov	r2, r8
 8005884:	e7df      	b.n	8005846 <_printf_float+0x402>
 8005886:	2301      	movs	r3, #1
 8005888:	464a      	mov	r2, r9
 800588a:	4631      	mov	r1, r6
 800588c:	4628      	mov	r0, r5
 800588e:	47b8      	blx	r7
 8005890:	3001      	adds	r0, #1
 8005892:	f43f ae36 	beq.w	8005502 <_printf_float+0xbe>
 8005896:	f108 0801 	add.w	r8, r8, #1
 800589a:	68e3      	ldr	r3, [r4, #12]
 800589c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800589e:	1a5b      	subs	r3, r3, r1
 80058a0:	4543      	cmp	r3, r8
 80058a2:	dcf0      	bgt.n	8005886 <_printf_float+0x442>
 80058a4:	e6f8      	b.n	8005698 <_printf_float+0x254>
 80058a6:	f04f 0800 	mov.w	r8, #0
 80058aa:	f104 0919 	add.w	r9, r4, #25
 80058ae:	e7f4      	b.n	800589a <_printf_float+0x456>

080058b0 <_printf_common>:
 80058b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	4616      	mov	r6, r2
 80058b6:	4699      	mov	r9, r3
 80058b8:	688a      	ldr	r2, [r1, #8]
 80058ba:	690b      	ldr	r3, [r1, #16]
 80058bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058c0:	4293      	cmp	r3, r2
 80058c2:	bfb8      	it	lt
 80058c4:	4613      	movlt	r3, r2
 80058c6:	6033      	str	r3, [r6, #0]
 80058c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058cc:	4607      	mov	r7, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	b10a      	cbz	r2, 80058d6 <_printf_common+0x26>
 80058d2:	3301      	adds	r3, #1
 80058d4:	6033      	str	r3, [r6, #0]
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	0699      	lsls	r1, r3, #26
 80058da:	bf42      	ittt	mi
 80058dc:	6833      	ldrmi	r3, [r6, #0]
 80058de:	3302      	addmi	r3, #2
 80058e0:	6033      	strmi	r3, [r6, #0]
 80058e2:	6825      	ldr	r5, [r4, #0]
 80058e4:	f015 0506 	ands.w	r5, r5, #6
 80058e8:	d106      	bne.n	80058f8 <_printf_common+0x48>
 80058ea:	f104 0a19 	add.w	sl, r4, #25
 80058ee:	68e3      	ldr	r3, [r4, #12]
 80058f0:	6832      	ldr	r2, [r6, #0]
 80058f2:	1a9b      	subs	r3, r3, r2
 80058f4:	42ab      	cmp	r3, r5
 80058f6:	dc26      	bgt.n	8005946 <_printf_common+0x96>
 80058f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058fc:	1e13      	subs	r3, r2, #0
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	bf18      	it	ne
 8005902:	2301      	movne	r3, #1
 8005904:	0692      	lsls	r2, r2, #26
 8005906:	d42b      	bmi.n	8005960 <_printf_common+0xb0>
 8005908:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800590c:	4649      	mov	r1, r9
 800590e:	4638      	mov	r0, r7
 8005910:	47c0      	blx	r8
 8005912:	3001      	adds	r0, #1
 8005914:	d01e      	beq.n	8005954 <_printf_common+0xa4>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	6922      	ldr	r2, [r4, #16]
 800591a:	f003 0306 	and.w	r3, r3, #6
 800591e:	2b04      	cmp	r3, #4
 8005920:	bf02      	ittt	eq
 8005922:	68e5      	ldreq	r5, [r4, #12]
 8005924:	6833      	ldreq	r3, [r6, #0]
 8005926:	1aed      	subeq	r5, r5, r3
 8005928:	68a3      	ldr	r3, [r4, #8]
 800592a:	bf0c      	ite	eq
 800592c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005930:	2500      	movne	r5, #0
 8005932:	4293      	cmp	r3, r2
 8005934:	bfc4      	itt	gt
 8005936:	1a9b      	subgt	r3, r3, r2
 8005938:	18ed      	addgt	r5, r5, r3
 800593a:	2600      	movs	r6, #0
 800593c:	341a      	adds	r4, #26
 800593e:	42b5      	cmp	r5, r6
 8005940:	d11a      	bne.n	8005978 <_printf_common+0xc8>
 8005942:	2000      	movs	r0, #0
 8005944:	e008      	b.n	8005958 <_printf_common+0xa8>
 8005946:	2301      	movs	r3, #1
 8005948:	4652      	mov	r2, sl
 800594a:	4649      	mov	r1, r9
 800594c:	4638      	mov	r0, r7
 800594e:	47c0      	blx	r8
 8005950:	3001      	adds	r0, #1
 8005952:	d103      	bne.n	800595c <_printf_common+0xac>
 8005954:	f04f 30ff 	mov.w	r0, #4294967295
 8005958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595c:	3501      	adds	r5, #1
 800595e:	e7c6      	b.n	80058ee <_printf_common+0x3e>
 8005960:	18e1      	adds	r1, r4, r3
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	2030      	movs	r0, #48	; 0x30
 8005966:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800596a:	4422      	add	r2, r4
 800596c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005970:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005974:	3302      	adds	r3, #2
 8005976:	e7c7      	b.n	8005908 <_printf_common+0x58>
 8005978:	2301      	movs	r3, #1
 800597a:	4622      	mov	r2, r4
 800597c:	4649      	mov	r1, r9
 800597e:	4638      	mov	r0, r7
 8005980:	47c0      	blx	r8
 8005982:	3001      	adds	r0, #1
 8005984:	d0e6      	beq.n	8005954 <_printf_common+0xa4>
 8005986:	3601      	adds	r6, #1
 8005988:	e7d9      	b.n	800593e <_printf_common+0x8e>
	...

0800598c <_printf_i>:
 800598c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005990:	7e0f      	ldrb	r7, [r1, #24]
 8005992:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005994:	2f78      	cmp	r7, #120	; 0x78
 8005996:	4691      	mov	r9, r2
 8005998:	4680      	mov	r8, r0
 800599a:	460c      	mov	r4, r1
 800599c:	469a      	mov	sl, r3
 800599e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059a2:	d807      	bhi.n	80059b4 <_printf_i+0x28>
 80059a4:	2f62      	cmp	r7, #98	; 0x62
 80059a6:	d80a      	bhi.n	80059be <_printf_i+0x32>
 80059a8:	2f00      	cmp	r7, #0
 80059aa:	f000 80d4 	beq.w	8005b56 <_printf_i+0x1ca>
 80059ae:	2f58      	cmp	r7, #88	; 0x58
 80059b0:	f000 80c0 	beq.w	8005b34 <_printf_i+0x1a8>
 80059b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059bc:	e03a      	b.n	8005a34 <_printf_i+0xa8>
 80059be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059c2:	2b15      	cmp	r3, #21
 80059c4:	d8f6      	bhi.n	80059b4 <_printf_i+0x28>
 80059c6:	a101      	add	r1, pc, #4	; (adr r1, 80059cc <_printf_i+0x40>)
 80059c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059cc:	08005a25 	.word	0x08005a25
 80059d0:	08005a39 	.word	0x08005a39
 80059d4:	080059b5 	.word	0x080059b5
 80059d8:	080059b5 	.word	0x080059b5
 80059dc:	080059b5 	.word	0x080059b5
 80059e0:	080059b5 	.word	0x080059b5
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	080059b5 	.word	0x080059b5
 80059ec:	080059b5 	.word	0x080059b5
 80059f0:	080059b5 	.word	0x080059b5
 80059f4:	080059b5 	.word	0x080059b5
 80059f8:	08005b3d 	.word	0x08005b3d
 80059fc:	08005a65 	.word	0x08005a65
 8005a00:	08005af7 	.word	0x08005af7
 8005a04:	080059b5 	.word	0x080059b5
 8005a08:	080059b5 	.word	0x080059b5
 8005a0c:	08005b5f 	.word	0x08005b5f
 8005a10:	080059b5 	.word	0x080059b5
 8005a14:	08005a65 	.word	0x08005a65
 8005a18:	080059b5 	.word	0x080059b5
 8005a1c:	080059b5 	.word	0x080059b5
 8005a20:	08005aff 	.word	0x08005aff
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	1d1a      	adds	r2, r3, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	602a      	str	r2, [r5, #0]
 8005a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a34:	2301      	movs	r3, #1
 8005a36:	e09f      	b.n	8005b78 <_printf_i+0x1ec>
 8005a38:	6820      	ldr	r0, [r4, #0]
 8005a3a:	682b      	ldr	r3, [r5, #0]
 8005a3c:	0607      	lsls	r7, r0, #24
 8005a3e:	f103 0104 	add.w	r1, r3, #4
 8005a42:	6029      	str	r1, [r5, #0]
 8005a44:	d501      	bpl.n	8005a4a <_printf_i+0xbe>
 8005a46:	681e      	ldr	r6, [r3, #0]
 8005a48:	e003      	b.n	8005a52 <_printf_i+0xc6>
 8005a4a:	0646      	lsls	r6, r0, #25
 8005a4c:	d5fb      	bpl.n	8005a46 <_printf_i+0xba>
 8005a4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a52:	2e00      	cmp	r6, #0
 8005a54:	da03      	bge.n	8005a5e <_printf_i+0xd2>
 8005a56:	232d      	movs	r3, #45	; 0x2d
 8005a58:	4276      	negs	r6, r6
 8005a5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a5e:	485a      	ldr	r0, [pc, #360]	; (8005bc8 <_printf_i+0x23c>)
 8005a60:	230a      	movs	r3, #10
 8005a62:	e012      	b.n	8005a8a <_printf_i+0xfe>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	6820      	ldr	r0, [r4, #0]
 8005a68:	1d19      	adds	r1, r3, #4
 8005a6a:	6029      	str	r1, [r5, #0]
 8005a6c:	0605      	lsls	r5, r0, #24
 8005a6e:	d501      	bpl.n	8005a74 <_printf_i+0xe8>
 8005a70:	681e      	ldr	r6, [r3, #0]
 8005a72:	e002      	b.n	8005a7a <_printf_i+0xee>
 8005a74:	0641      	lsls	r1, r0, #25
 8005a76:	d5fb      	bpl.n	8005a70 <_printf_i+0xe4>
 8005a78:	881e      	ldrh	r6, [r3, #0]
 8005a7a:	4853      	ldr	r0, [pc, #332]	; (8005bc8 <_printf_i+0x23c>)
 8005a7c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a7e:	bf0c      	ite	eq
 8005a80:	2308      	moveq	r3, #8
 8005a82:	230a      	movne	r3, #10
 8005a84:	2100      	movs	r1, #0
 8005a86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a8a:	6865      	ldr	r5, [r4, #4]
 8005a8c:	60a5      	str	r5, [r4, #8]
 8005a8e:	2d00      	cmp	r5, #0
 8005a90:	bfa2      	ittt	ge
 8005a92:	6821      	ldrge	r1, [r4, #0]
 8005a94:	f021 0104 	bicge.w	r1, r1, #4
 8005a98:	6021      	strge	r1, [r4, #0]
 8005a9a:	b90e      	cbnz	r6, 8005aa0 <_printf_i+0x114>
 8005a9c:	2d00      	cmp	r5, #0
 8005a9e:	d04b      	beq.n	8005b38 <_printf_i+0x1ac>
 8005aa0:	4615      	mov	r5, r2
 8005aa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aa6:	fb03 6711 	mls	r7, r3, r1, r6
 8005aaa:	5dc7      	ldrb	r7, [r0, r7]
 8005aac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ab0:	4637      	mov	r7, r6
 8005ab2:	42bb      	cmp	r3, r7
 8005ab4:	460e      	mov	r6, r1
 8005ab6:	d9f4      	bls.n	8005aa2 <_printf_i+0x116>
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d10b      	bne.n	8005ad4 <_printf_i+0x148>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	07de      	lsls	r6, r3, #31
 8005ac0:	d508      	bpl.n	8005ad4 <_printf_i+0x148>
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	6861      	ldr	r1, [r4, #4]
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	bfde      	ittt	le
 8005aca:	2330      	movle	r3, #48	; 0x30
 8005acc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ad0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ad4:	1b52      	subs	r2, r2, r5
 8005ad6:	6122      	str	r2, [r4, #16]
 8005ad8:	f8cd a000 	str.w	sl, [sp]
 8005adc:	464b      	mov	r3, r9
 8005ade:	aa03      	add	r2, sp, #12
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	f7ff fee4 	bl	80058b0 <_printf_common>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d14a      	bne.n	8005b82 <_printf_i+0x1f6>
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295
 8005af0:	b004      	add	sp, #16
 8005af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	f043 0320 	orr.w	r3, r3, #32
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	4833      	ldr	r0, [pc, #204]	; (8005bcc <_printf_i+0x240>)
 8005b00:	2778      	movs	r7, #120	; 0x78
 8005b02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	6829      	ldr	r1, [r5, #0]
 8005b0a:	061f      	lsls	r7, r3, #24
 8005b0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b10:	d402      	bmi.n	8005b18 <_printf_i+0x18c>
 8005b12:	065f      	lsls	r7, r3, #25
 8005b14:	bf48      	it	mi
 8005b16:	b2b6      	uxthmi	r6, r6
 8005b18:	07df      	lsls	r7, r3, #31
 8005b1a:	bf48      	it	mi
 8005b1c:	f043 0320 	orrmi.w	r3, r3, #32
 8005b20:	6029      	str	r1, [r5, #0]
 8005b22:	bf48      	it	mi
 8005b24:	6023      	strmi	r3, [r4, #0]
 8005b26:	b91e      	cbnz	r6, 8005b30 <_printf_i+0x1a4>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	f023 0320 	bic.w	r3, r3, #32
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	2310      	movs	r3, #16
 8005b32:	e7a7      	b.n	8005a84 <_printf_i+0xf8>
 8005b34:	4824      	ldr	r0, [pc, #144]	; (8005bc8 <_printf_i+0x23c>)
 8005b36:	e7e4      	b.n	8005b02 <_printf_i+0x176>
 8005b38:	4615      	mov	r5, r2
 8005b3a:	e7bd      	b.n	8005ab8 <_printf_i+0x12c>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	6826      	ldr	r6, [r4, #0]
 8005b40:	6961      	ldr	r1, [r4, #20]
 8005b42:	1d18      	adds	r0, r3, #4
 8005b44:	6028      	str	r0, [r5, #0]
 8005b46:	0635      	lsls	r5, r6, #24
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	d501      	bpl.n	8005b50 <_printf_i+0x1c4>
 8005b4c:	6019      	str	r1, [r3, #0]
 8005b4e:	e002      	b.n	8005b56 <_printf_i+0x1ca>
 8005b50:	0670      	lsls	r0, r6, #25
 8005b52:	d5fb      	bpl.n	8005b4c <_printf_i+0x1c0>
 8005b54:	8019      	strh	r1, [r3, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	4615      	mov	r5, r2
 8005b5c:	e7bc      	b.n	8005ad8 <_printf_i+0x14c>
 8005b5e:	682b      	ldr	r3, [r5, #0]
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	602a      	str	r2, [r5, #0]
 8005b64:	681d      	ldr	r5, [r3, #0]
 8005b66:	6862      	ldr	r2, [r4, #4]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f7fa fb38 	bl	80001e0 <memchr>
 8005b70:	b108      	cbz	r0, 8005b76 <_printf_i+0x1ea>
 8005b72:	1b40      	subs	r0, r0, r5
 8005b74:	6060      	str	r0, [r4, #4]
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	6123      	str	r3, [r4, #16]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b80:	e7aa      	b.n	8005ad8 <_printf_i+0x14c>
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	462a      	mov	r2, r5
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	47d0      	blx	sl
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d0ad      	beq.n	8005aec <_printf_i+0x160>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	079b      	lsls	r3, r3, #30
 8005b94:	d413      	bmi.n	8005bbe <_printf_i+0x232>
 8005b96:	68e0      	ldr	r0, [r4, #12]
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	4298      	cmp	r0, r3
 8005b9c:	bfb8      	it	lt
 8005b9e:	4618      	movlt	r0, r3
 8005ba0:	e7a6      	b.n	8005af0 <_printf_i+0x164>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4640      	mov	r0, r8
 8005baa:	47d0      	blx	sl
 8005bac:	3001      	adds	r0, #1
 8005bae:	d09d      	beq.n	8005aec <_printf_i+0x160>
 8005bb0:	3501      	adds	r5, #1
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	9903      	ldr	r1, [sp, #12]
 8005bb6:	1a5b      	subs	r3, r3, r1
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dcf2      	bgt.n	8005ba2 <_printf_i+0x216>
 8005bbc:	e7eb      	b.n	8005b96 <_printf_i+0x20a>
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	f104 0619 	add.w	r6, r4, #25
 8005bc4:	e7f5      	b.n	8005bb2 <_printf_i+0x226>
 8005bc6:	bf00      	nop
 8005bc8:	08008e9a 	.word	0x08008e9a
 8005bcc:	08008eab 	.word	0x08008eab

08005bd0 <std>:
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8005bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bde:	6083      	str	r3, [r0, #8]
 8005be0:	8181      	strh	r1, [r0, #12]
 8005be2:	6643      	str	r3, [r0, #100]	; 0x64
 8005be4:	81c2      	strh	r2, [r0, #14]
 8005be6:	6183      	str	r3, [r0, #24]
 8005be8:	4619      	mov	r1, r3
 8005bea:	2208      	movs	r2, #8
 8005bec:	305c      	adds	r0, #92	; 0x5c
 8005bee:	f000 f906 	bl	8005dfe <memset>
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <std+0x58>)
 8005bf4:	6263      	str	r3, [r4, #36]	; 0x24
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <std+0x5c>)
 8005bf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <std+0x60>)
 8005bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <std+0x64>)
 8005c00:	6323      	str	r3, [r4, #48]	; 0x30
 8005c02:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <std+0x68>)
 8005c04:	6224      	str	r4, [r4, #32]
 8005c06:	429c      	cmp	r4, r3
 8005c08:	d006      	beq.n	8005c18 <std+0x48>
 8005c0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005c0e:	4294      	cmp	r4, r2
 8005c10:	d002      	beq.n	8005c18 <std+0x48>
 8005c12:	33d0      	adds	r3, #208	; 0xd0
 8005c14:	429c      	cmp	r4, r3
 8005c16:	d105      	bne.n	8005c24 <std+0x54>
 8005c18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c20:	f000 b96a 	b.w	8005ef8 <__retarget_lock_init_recursive>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	bf00      	nop
 8005c28:	08005d79 	.word	0x08005d79
 8005c2c:	08005d9b 	.word	0x08005d9b
 8005c30:	08005dd3 	.word	0x08005dd3
 8005c34:	08005df7 	.word	0x08005df7
 8005c38:	20000518 	.word	0x20000518

08005c3c <stdio_exit_handler>:
 8005c3c:	4a02      	ldr	r2, [pc, #8]	; (8005c48 <stdio_exit_handler+0xc>)
 8005c3e:	4903      	ldr	r1, [pc, #12]	; (8005c4c <stdio_exit_handler+0x10>)
 8005c40:	4803      	ldr	r0, [pc, #12]	; (8005c50 <stdio_exit_handler+0x14>)
 8005c42:	f000 b869 	b.w	8005d18 <_fwalk_sglue>
 8005c46:	bf00      	nop
 8005c48:	20000014 	.word	0x20000014
 8005c4c:	08007881 	.word	0x08007881
 8005c50:	20000020 	.word	0x20000020

08005c54 <cleanup_stdio>:
 8005c54:	6841      	ldr	r1, [r0, #4]
 8005c56:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <cleanup_stdio+0x34>)
 8005c58:	4299      	cmp	r1, r3
 8005c5a:	b510      	push	{r4, lr}
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	d001      	beq.n	8005c64 <cleanup_stdio+0x10>
 8005c60:	f001 fe0e 	bl	8007880 <_fflush_r>
 8005c64:	68a1      	ldr	r1, [r4, #8]
 8005c66:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <cleanup_stdio+0x38>)
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d002      	beq.n	8005c72 <cleanup_stdio+0x1e>
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f001 fe07 	bl	8007880 <_fflush_r>
 8005c72:	68e1      	ldr	r1, [r4, #12]
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <cleanup_stdio+0x3c>)
 8005c76:	4299      	cmp	r1, r3
 8005c78:	d004      	beq.n	8005c84 <cleanup_stdio+0x30>
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c80:	f001 bdfe 	b.w	8007880 <_fflush_r>
 8005c84:	bd10      	pop	{r4, pc}
 8005c86:	bf00      	nop
 8005c88:	20000518 	.word	0x20000518
 8005c8c:	20000580 	.word	0x20000580
 8005c90:	200005e8 	.word	0x200005e8

08005c94 <global_stdio_init.part.0>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <global_stdio_init.part.0+0x30>)
 8005c98:	4c0b      	ldr	r4, [pc, #44]	; (8005cc8 <global_stdio_init.part.0+0x34>)
 8005c9a:	4a0c      	ldr	r2, [pc, #48]	; (8005ccc <global_stdio_init.part.0+0x38>)
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2104      	movs	r1, #4
 8005ca4:	f7ff ff94 	bl	8005bd0 <std>
 8005ca8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005cac:	2201      	movs	r2, #1
 8005cae:	2109      	movs	r1, #9
 8005cb0:	f7ff ff8e 	bl	8005bd0 <std>
 8005cb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005cb8:	2202      	movs	r2, #2
 8005cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cbe:	2112      	movs	r1, #18
 8005cc0:	f7ff bf86 	b.w	8005bd0 <std>
 8005cc4:	20000650 	.word	0x20000650
 8005cc8:	20000518 	.word	0x20000518
 8005ccc:	08005c3d 	.word	0x08005c3d

08005cd0 <__sfp_lock_acquire>:
 8005cd0:	4801      	ldr	r0, [pc, #4]	; (8005cd8 <__sfp_lock_acquire+0x8>)
 8005cd2:	f000 b912 	b.w	8005efa <__retarget_lock_acquire_recursive>
 8005cd6:	bf00      	nop
 8005cd8:	20000659 	.word	0x20000659

08005cdc <__sfp_lock_release>:
 8005cdc:	4801      	ldr	r0, [pc, #4]	; (8005ce4 <__sfp_lock_release+0x8>)
 8005cde:	f000 b90d 	b.w	8005efc <__retarget_lock_release_recursive>
 8005ce2:	bf00      	nop
 8005ce4:	20000659 	.word	0x20000659

08005ce8 <__sinit>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	4604      	mov	r4, r0
 8005cec:	f7ff fff0 	bl	8005cd0 <__sfp_lock_acquire>
 8005cf0:	6a23      	ldr	r3, [r4, #32]
 8005cf2:	b11b      	cbz	r3, 8005cfc <__sinit+0x14>
 8005cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf8:	f7ff bff0 	b.w	8005cdc <__sfp_lock_release>
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <__sinit+0x28>)
 8005cfe:	6223      	str	r3, [r4, #32]
 8005d00:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <__sinit+0x2c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f5      	bne.n	8005cf4 <__sinit+0xc>
 8005d08:	f7ff ffc4 	bl	8005c94 <global_stdio_init.part.0>
 8005d0c:	e7f2      	b.n	8005cf4 <__sinit+0xc>
 8005d0e:	bf00      	nop
 8005d10:	08005c55 	.word	0x08005c55
 8005d14:	20000650 	.word	0x20000650

08005d18 <_fwalk_sglue>:
 8005d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	4688      	mov	r8, r1
 8005d20:	4614      	mov	r4, r2
 8005d22:	2600      	movs	r6, #0
 8005d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d28:	f1b9 0901 	subs.w	r9, r9, #1
 8005d2c:	d505      	bpl.n	8005d3a <_fwalk_sglue+0x22>
 8005d2e:	6824      	ldr	r4, [r4, #0]
 8005d30:	2c00      	cmp	r4, #0
 8005d32:	d1f7      	bne.n	8005d24 <_fwalk_sglue+0xc>
 8005d34:	4630      	mov	r0, r6
 8005d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d3a:	89ab      	ldrh	r3, [r5, #12]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d907      	bls.n	8005d50 <_fwalk_sglue+0x38>
 8005d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d44:	3301      	adds	r3, #1
 8005d46:	d003      	beq.n	8005d50 <_fwalk_sglue+0x38>
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	4306      	orrs	r6, r0
 8005d50:	3568      	adds	r5, #104	; 0x68
 8005d52:	e7e9      	b.n	8005d28 <_fwalk_sglue+0x10>

08005d54 <iprintf>:
 8005d54:	b40f      	push	{r0, r1, r2, r3}
 8005d56:	b507      	push	{r0, r1, r2, lr}
 8005d58:	4906      	ldr	r1, [pc, #24]	; (8005d74 <iprintf+0x20>)
 8005d5a:	ab04      	add	r3, sp, #16
 8005d5c:	6808      	ldr	r0, [r1, #0]
 8005d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d62:	6881      	ldr	r1, [r0, #8]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	f001 fbeb 	bl	8007540 <_vfiprintf_r>
 8005d6a:	b003      	add	sp, #12
 8005d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d70:	b004      	add	sp, #16
 8005d72:	4770      	bx	lr
 8005d74:	2000006c 	.word	0x2000006c

08005d78 <__sread>:
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d80:	f000 f86c 	bl	8005e5c <_read_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	bfab      	itete	ge
 8005d88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d8c:	181b      	addge	r3, r3, r0
 8005d8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d92:	bfac      	ite	ge
 8005d94:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d96:	81a3      	strhlt	r3, [r4, #12]
 8005d98:	bd10      	pop	{r4, pc}

08005d9a <__swrite>:
 8005d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9e:	461f      	mov	r7, r3
 8005da0:	898b      	ldrh	r3, [r1, #12]
 8005da2:	05db      	lsls	r3, r3, #23
 8005da4:	4605      	mov	r5, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	4616      	mov	r6, r2
 8005daa:	d505      	bpl.n	8005db8 <__swrite+0x1e>
 8005dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db0:	2302      	movs	r3, #2
 8005db2:	2200      	movs	r2, #0
 8005db4:	f000 f840 	bl	8005e38 <_lseek_r>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	4632      	mov	r2, r6
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	4628      	mov	r0, r5
 8005dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dce:	f000 b857 	b.w	8005e80 <_write_r>

08005dd2 <__sseek>:
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dda:	f000 f82d 	bl	8005e38 <_lseek_r>
 8005dde:	1c43      	adds	r3, r0, #1
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	bf15      	itete	ne
 8005de4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005de6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dee:	81a3      	strheq	r3, [r4, #12]
 8005df0:	bf18      	it	ne
 8005df2:	81a3      	strhne	r3, [r4, #12]
 8005df4:	bd10      	pop	{r4, pc}

08005df6 <__sclose>:
 8005df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfa:	f000 b80d 	b.w	8005e18 <_close_r>

08005dfe <memset>:
 8005dfe:	4402      	add	r2, r0
 8005e00:	4603      	mov	r3, r0
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d100      	bne.n	8005e08 <memset+0xa>
 8005e06:	4770      	bx	lr
 8005e08:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0c:	e7f9      	b.n	8005e02 <memset+0x4>
	...

08005e10 <_localeconv_r>:
 8005e10:	4800      	ldr	r0, [pc, #0]	; (8005e14 <_localeconv_r+0x4>)
 8005e12:	4770      	bx	lr
 8005e14:	20000160 	.word	0x20000160

08005e18 <_close_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4d06      	ldr	r5, [pc, #24]	; (8005e34 <_close_r+0x1c>)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	f7fc fead 	bl	8002b82 <_close>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_close_r+0x1a>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_close_r+0x1a>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20000654 	.word	0x20000654

08005e38 <_lseek_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4d07      	ldr	r5, [pc, #28]	; (8005e58 <_lseek_r+0x20>)
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	4608      	mov	r0, r1
 8005e40:	4611      	mov	r1, r2
 8005e42:	2200      	movs	r2, #0
 8005e44:	602a      	str	r2, [r5, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	f7fc fec2 	bl	8002bd0 <_lseek>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d102      	bne.n	8005e56 <_lseek_r+0x1e>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	b103      	cbz	r3, 8005e56 <_lseek_r+0x1e>
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	20000654 	.word	0x20000654

08005e5c <_read_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4d07      	ldr	r5, [pc, #28]	; (8005e7c <_read_r+0x20>)
 8005e60:	4604      	mov	r4, r0
 8005e62:	4608      	mov	r0, r1
 8005e64:	4611      	mov	r1, r2
 8005e66:	2200      	movs	r2, #0
 8005e68:	602a      	str	r2, [r5, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f7fc fe50 	bl	8002b10 <_read>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_read_r+0x1e>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_read_r+0x1e>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	20000654 	.word	0x20000654

08005e80 <_write_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4d07      	ldr	r5, [pc, #28]	; (8005ea0 <_write_r+0x20>)
 8005e84:	4604      	mov	r4, r0
 8005e86:	4608      	mov	r0, r1
 8005e88:	4611      	mov	r1, r2
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	602a      	str	r2, [r5, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f7fc fe5b 	bl	8002b4a <_write>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d102      	bne.n	8005e9e <_write_r+0x1e>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	b103      	cbz	r3, 8005e9e <_write_r+0x1e>
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	20000654 	.word	0x20000654

08005ea4 <__errno>:
 8005ea4:	4b01      	ldr	r3, [pc, #4]	; (8005eac <__errno+0x8>)
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	2000006c 	.word	0x2000006c

08005eb0 <__libc_init_array>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	4d0d      	ldr	r5, [pc, #52]	; (8005ee8 <__libc_init_array+0x38>)
 8005eb4:	4c0d      	ldr	r4, [pc, #52]	; (8005eec <__libc_init_array+0x3c>)
 8005eb6:	1b64      	subs	r4, r4, r5
 8005eb8:	10a4      	asrs	r4, r4, #2
 8005eba:	2600      	movs	r6, #0
 8005ebc:	42a6      	cmp	r6, r4
 8005ebe:	d109      	bne.n	8005ed4 <__libc_init_array+0x24>
 8005ec0:	4d0b      	ldr	r5, [pc, #44]	; (8005ef0 <__libc_init_array+0x40>)
 8005ec2:	4c0c      	ldr	r4, [pc, #48]	; (8005ef4 <__libc_init_array+0x44>)
 8005ec4:	f002 ff84 	bl	8008dd0 <_init>
 8005ec8:	1b64      	subs	r4, r4, r5
 8005eca:	10a4      	asrs	r4, r4, #2
 8005ecc:	2600      	movs	r6, #0
 8005ece:	42a6      	cmp	r6, r4
 8005ed0:	d105      	bne.n	8005ede <__libc_init_array+0x2e>
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed8:	4798      	blx	r3
 8005eda:	3601      	adds	r6, #1
 8005edc:	e7ee      	b.n	8005ebc <__libc_init_array+0xc>
 8005ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee2:	4798      	blx	r3
 8005ee4:	3601      	adds	r6, #1
 8005ee6:	e7f2      	b.n	8005ece <__libc_init_array+0x1e>
 8005ee8:	080093e0 	.word	0x080093e0
 8005eec:	080093e0 	.word	0x080093e0
 8005ef0:	080093e0 	.word	0x080093e0
 8005ef4:	080093e4 	.word	0x080093e4

08005ef8 <__retarget_lock_init_recursive>:
 8005ef8:	4770      	bx	lr

08005efa <__retarget_lock_acquire_recursive>:
 8005efa:	4770      	bx	lr

08005efc <__retarget_lock_release_recursive>:
 8005efc:	4770      	bx	lr

08005efe <quorem>:
 8005efe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f02:	6903      	ldr	r3, [r0, #16]
 8005f04:	690c      	ldr	r4, [r1, #16]
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	4607      	mov	r7, r0
 8005f0a:	db7e      	blt.n	800600a <quorem+0x10c>
 8005f0c:	3c01      	subs	r4, #1
 8005f0e:	f101 0814 	add.w	r8, r1, #20
 8005f12:	f100 0514 	add.w	r5, r0, #20
 8005f16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f24:	3301      	adds	r3, #1
 8005f26:	429a      	cmp	r2, r3
 8005f28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f30:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f34:	d331      	bcc.n	8005f9a <quorem+0x9c>
 8005f36:	f04f 0e00 	mov.w	lr, #0
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	46ac      	mov	ip, r5
 8005f3e:	46f2      	mov	sl, lr
 8005f40:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f44:	b293      	uxth	r3, r2
 8005f46:	fb06 e303 	mla	r3, r6, r3, lr
 8005f4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f4e:	0c1a      	lsrs	r2, r3, #16
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	ebaa 0303 	sub.w	r3, sl, r3
 8005f56:	f8dc a000 	ldr.w	sl, [ip]
 8005f5a:	fa13 f38a 	uxtah	r3, r3, sl
 8005f5e:	fb06 220e 	mla	r2, r6, lr, r2
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	9b00      	ldr	r3, [sp, #0]
 8005f66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f6a:	b292      	uxth	r2, r2
 8005f6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f74:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f78:	4581      	cmp	r9, r0
 8005f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f7e:	f84c 3b04 	str.w	r3, [ip], #4
 8005f82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f86:	d2db      	bcs.n	8005f40 <quorem+0x42>
 8005f88:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f8c:	b92b      	cbnz	r3, 8005f9a <quorem+0x9c>
 8005f8e:	9b01      	ldr	r3, [sp, #4]
 8005f90:	3b04      	subs	r3, #4
 8005f92:	429d      	cmp	r5, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	d32c      	bcc.n	8005ff2 <quorem+0xf4>
 8005f98:	613c      	str	r4, [r7, #16]
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	f001 f9a6 	bl	80072ec <__mcmp>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	db22      	blt.n	8005fea <quorem+0xec>
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	2000      	movs	r0, #0
 8005faa:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fae:	f8d1 c000 	ldr.w	ip, [r1]
 8005fb2:	b293      	uxth	r3, r2
 8005fb4:	1ac3      	subs	r3, r0, r3
 8005fb6:	0c12      	lsrs	r2, r2, #16
 8005fb8:	fa13 f38c 	uxtah	r3, r3, ip
 8005fbc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005fc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fca:	45c1      	cmp	r9, r8
 8005fcc:	f841 3b04 	str.w	r3, [r1], #4
 8005fd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005fd4:	d2e9      	bcs.n	8005faa <quorem+0xac>
 8005fd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fde:	b922      	cbnz	r2, 8005fea <quorem+0xec>
 8005fe0:	3b04      	subs	r3, #4
 8005fe2:	429d      	cmp	r5, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	d30a      	bcc.n	8005ffe <quorem+0x100>
 8005fe8:	613c      	str	r4, [r7, #16]
 8005fea:	4630      	mov	r0, r6
 8005fec:	b003      	add	sp, #12
 8005fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	d1ce      	bne.n	8005f98 <quorem+0x9a>
 8005ffa:	3c01      	subs	r4, #1
 8005ffc:	e7c9      	b.n	8005f92 <quorem+0x94>
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	3b04      	subs	r3, #4
 8006002:	2a00      	cmp	r2, #0
 8006004:	d1f0      	bne.n	8005fe8 <quorem+0xea>
 8006006:	3c01      	subs	r4, #1
 8006008:	e7eb      	b.n	8005fe2 <quorem+0xe4>
 800600a:	2000      	movs	r0, #0
 800600c:	e7ee      	b.n	8005fec <quorem+0xee>
	...

08006010 <_dtoa_r>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	ed2d 8b04 	vpush	{d8-d9}
 8006018:	69c5      	ldr	r5, [r0, #28]
 800601a:	b093      	sub	sp, #76	; 0x4c
 800601c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006020:	ec57 6b10 	vmov	r6, r7, d0
 8006024:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006028:	9107      	str	r1, [sp, #28]
 800602a:	4604      	mov	r4, r0
 800602c:	920a      	str	r2, [sp, #40]	; 0x28
 800602e:	930d      	str	r3, [sp, #52]	; 0x34
 8006030:	b975      	cbnz	r5, 8006050 <_dtoa_r+0x40>
 8006032:	2010      	movs	r0, #16
 8006034:	f000 fe2a 	bl	8006c8c <malloc>
 8006038:	4602      	mov	r2, r0
 800603a:	61e0      	str	r0, [r4, #28]
 800603c:	b920      	cbnz	r0, 8006048 <_dtoa_r+0x38>
 800603e:	4bae      	ldr	r3, [pc, #696]	; (80062f8 <_dtoa_r+0x2e8>)
 8006040:	21ef      	movs	r1, #239	; 0xef
 8006042:	48ae      	ldr	r0, [pc, #696]	; (80062fc <_dtoa_r+0x2ec>)
 8006044:	f001 fcf8 	bl	8007a38 <__assert_func>
 8006048:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800604c:	6005      	str	r5, [r0, #0]
 800604e:	60c5      	str	r5, [r0, #12]
 8006050:	69e3      	ldr	r3, [r4, #28]
 8006052:	6819      	ldr	r1, [r3, #0]
 8006054:	b151      	cbz	r1, 800606c <_dtoa_r+0x5c>
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	604a      	str	r2, [r1, #4]
 800605a:	2301      	movs	r3, #1
 800605c:	4093      	lsls	r3, r2
 800605e:	608b      	str	r3, [r1, #8]
 8006060:	4620      	mov	r0, r4
 8006062:	f000 ff07 	bl	8006e74 <_Bfree>
 8006066:	69e3      	ldr	r3, [r4, #28]
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	1e3b      	subs	r3, r7, #0
 800606e:	bfbb      	ittet	lt
 8006070:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006074:	9303      	strlt	r3, [sp, #12]
 8006076:	2300      	movge	r3, #0
 8006078:	2201      	movlt	r2, #1
 800607a:	bfac      	ite	ge
 800607c:	f8c8 3000 	strge.w	r3, [r8]
 8006080:	f8c8 2000 	strlt.w	r2, [r8]
 8006084:	4b9e      	ldr	r3, [pc, #632]	; (8006300 <_dtoa_r+0x2f0>)
 8006086:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800608a:	ea33 0308 	bics.w	r3, r3, r8
 800608e:	d11b      	bne.n	80060c8 <_dtoa_r+0xb8>
 8006090:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006092:	f242 730f 	movw	r3, #9999	; 0x270f
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800609c:	4333      	orrs	r3, r6
 800609e:	f000 8593 	beq.w	8006bc8 <_dtoa_r+0xbb8>
 80060a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060a4:	b963      	cbnz	r3, 80060c0 <_dtoa_r+0xb0>
 80060a6:	4b97      	ldr	r3, [pc, #604]	; (8006304 <_dtoa_r+0x2f4>)
 80060a8:	e027      	b.n	80060fa <_dtoa_r+0xea>
 80060aa:	4b97      	ldr	r3, [pc, #604]	; (8006308 <_dtoa_r+0x2f8>)
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	3308      	adds	r3, #8
 80060b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	9800      	ldr	r0, [sp, #0]
 80060b6:	b013      	add	sp, #76	; 0x4c
 80060b8:	ecbd 8b04 	vpop	{d8-d9}
 80060bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c0:	4b90      	ldr	r3, [pc, #576]	; (8006304 <_dtoa_r+0x2f4>)
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	3303      	adds	r3, #3
 80060c6:	e7f3      	b.n	80060b0 <_dtoa_r+0xa0>
 80060c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060cc:	2200      	movs	r2, #0
 80060ce:	ec51 0b17 	vmov	r0, r1, d7
 80060d2:	eeb0 8a47 	vmov.f32	s16, s14
 80060d6:	eef0 8a67 	vmov.f32	s17, s15
 80060da:	2300      	movs	r3, #0
 80060dc:	f7fa fcfc 	bl	8000ad8 <__aeabi_dcmpeq>
 80060e0:	4681      	mov	r9, r0
 80060e2:	b160      	cbz	r0, 80060fe <_dtoa_r+0xee>
 80060e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060e6:	2301      	movs	r3, #1
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8568 	beq.w	8006bc2 <_dtoa_r+0xbb2>
 80060f2:	4b86      	ldr	r3, [pc, #536]	; (800630c <_dtoa_r+0x2fc>)
 80060f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	e7da      	b.n	80060b4 <_dtoa_r+0xa4>
 80060fe:	aa10      	add	r2, sp, #64	; 0x40
 8006100:	a911      	add	r1, sp, #68	; 0x44
 8006102:	4620      	mov	r0, r4
 8006104:	eeb0 0a48 	vmov.f32	s0, s16
 8006108:	eef0 0a68 	vmov.f32	s1, s17
 800610c:	f001 f994 	bl	8007438 <__d2b>
 8006110:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006114:	4682      	mov	sl, r0
 8006116:	2d00      	cmp	r5, #0
 8006118:	d07f      	beq.n	800621a <_dtoa_r+0x20a>
 800611a:	ee18 3a90 	vmov	r3, s17
 800611e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006122:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006126:	ec51 0b18 	vmov	r0, r1, d8
 800612a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800612e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006132:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006136:	4619      	mov	r1, r3
 8006138:	2200      	movs	r2, #0
 800613a:	4b75      	ldr	r3, [pc, #468]	; (8006310 <_dtoa_r+0x300>)
 800613c:	f7fa f8ac 	bl	8000298 <__aeabi_dsub>
 8006140:	a367      	add	r3, pc, #412	; (adr r3, 80062e0 <_dtoa_r+0x2d0>)
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	f7fa fa5f 	bl	8000608 <__aeabi_dmul>
 800614a:	a367      	add	r3, pc, #412	; (adr r3, 80062e8 <_dtoa_r+0x2d8>)
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f7fa f8a4 	bl	800029c <__adddf3>
 8006154:	4606      	mov	r6, r0
 8006156:	4628      	mov	r0, r5
 8006158:	460f      	mov	r7, r1
 800615a:	f7fa f9eb 	bl	8000534 <__aeabi_i2d>
 800615e:	a364      	add	r3, pc, #400	; (adr r3, 80062f0 <_dtoa_r+0x2e0>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f7fa fa50 	bl	8000608 <__aeabi_dmul>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4630      	mov	r0, r6
 800616e:	4639      	mov	r1, r7
 8006170:	f7fa f894 	bl	800029c <__adddf3>
 8006174:	4606      	mov	r6, r0
 8006176:	460f      	mov	r7, r1
 8006178:	f7fa fcf6 	bl	8000b68 <__aeabi_d2iz>
 800617c:	2200      	movs	r2, #0
 800617e:	4683      	mov	fp, r0
 8006180:	2300      	movs	r3, #0
 8006182:	4630      	mov	r0, r6
 8006184:	4639      	mov	r1, r7
 8006186:	f7fa fcb1 	bl	8000aec <__aeabi_dcmplt>
 800618a:	b148      	cbz	r0, 80061a0 <_dtoa_r+0x190>
 800618c:	4658      	mov	r0, fp
 800618e:	f7fa f9d1 	bl	8000534 <__aeabi_i2d>
 8006192:	4632      	mov	r2, r6
 8006194:	463b      	mov	r3, r7
 8006196:	f7fa fc9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800619a:	b908      	cbnz	r0, 80061a0 <_dtoa_r+0x190>
 800619c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061a0:	f1bb 0f16 	cmp.w	fp, #22
 80061a4:	d857      	bhi.n	8006256 <_dtoa_r+0x246>
 80061a6:	4b5b      	ldr	r3, [pc, #364]	; (8006314 <_dtoa_r+0x304>)
 80061a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	ec51 0b18 	vmov	r0, r1, d8
 80061b4:	f7fa fc9a 	bl	8000aec <__aeabi_dcmplt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d04e      	beq.n	800625a <_dtoa_r+0x24a>
 80061bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061c0:	2300      	movs	r3, #0
 80061c2:	930c      	str	r3, [sp, #48]	; 0x30
 80061c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061c6:	1b5b      	subs	r3, r3, r5
 80061c8:	1e5a      	subs	r2, r3, #1
 80061ca:	bf45      	ittet	mi
 80061cc:	f1c3 0301 	rsbmi	r3, r3, #1
 80061d0:	9305      	strmi	r3, [sp, #20]
 80061d2:	2300      	movpl	r3, #0
 80061d4:	2300      	movmi	r3, #0
 80061d6:	9206      	str	r2, [sp, #24]
 80061d8:	bf54      	ite	pl
 80061da:	9305      	strpl	r3, [sp, #20]
 80061dc:	9306      	strmi	r3, [sp, #24]
 80061de:	f1bb 0f00 	cmp.w	fp, #0
 80061e2:	db3c      	blt.n	800625e <_dtoa_r+0x24e>
 80061e4:	9b06      	ldr	r3, [sp, #24]
 80061e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80061ea:	445b      	add	r3, fp
 80061ec:	9306      	str	r3, [sp, #24]
 80061ee:	2300      	movs	r3, #0
 80061f0:	9308      	str	r3, [sp, #32]
 80061f2:	9b07      	ldr	r3, [sp, #28]
 80061f4:	2b09      	cmp	r3, #9
 80061f6:	d868      	bhi.n	80062ca <_dtoa_r+0x2ba>
 80061f8:	2b05      	cmp	r3, #5
 80061fa:	bfc4      	itt	gt
 80061fc:	3b04      	subgt	r3, #4
 80061fe:	9307      	strgt	r3, [sp, #28]
 8006200:	9b07      	ldr	r3, [sp, #28]
 8006202:	f1a3 0302 	sub.w	r3, r3, #2
 8006206:	bfcc      	ite	gt
 8006208:	2500      	movgt	r5, #0
 800620a:	2501      	movle	r5, #1
 800620c:	2b03      	cmp	r3, #3
 800620e:	f200 8085 	bhi.w	800631c <_dtoa_r+0x30c>
 8006212:	e8df f003 	tbb	[pc, r3]
 8006216:	3b2e      	.short	0x3b2e
 8006218:	5839      	.short	0x5839
 800621a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800621e:	441d      	add	r5, r3
 8006220:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006224:	2b20      	cmp	r3, #32
 8006226:	bfc1      	itttt	gt
 8006228:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800622c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006230:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006234:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006238:	bfd6      	itet	le
 800623a:	f1c3 0320 	rsble	r3, r3, #32
 800623e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006242:	fa06 f003 	lslle.w	r0, r6, r3
 8006246:	f7fa f965 	bl	8000514 <__aeabi_ui2d>
 800624a:	2201      	movs	r2, #1
 800624c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006250:	3d01      	subs	r5, #1
 8006252:	920e      	str	r2, [sp, #56]	; 0x38
 8006254:	e76f      	b.n	8006136 <_dtoa_r+0x126>
 8006256:	2301      	movs	r3, #1
 8006258:	e7b3      	b.n	80061c2 <_dtoa_r+0x1b2>
 800625a:	900c      	str	r0, [sp, #48]	; 0x30
 800625c:	e7b2      	b.n	80061c4 <_dtoa_r+0x1b4>
 800625e:	9b05      	ldr	r3, [sp, #20]
 8006260:	eba3 030b 	sub.w	r3, r3, fp
 8006264:	9305      	str	r3, [sp, #20]
 8006266:	f1cb 0300 	rsb	r3, fp, #0
 800626a:	9308      	str	r3, [sp, #32]
 800626c:	2300      	movs	r3, #0
 800626e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006270:	e7bf      	b.n	80061f2 <_dtoa_r+0x1e2>
 8006272:	2300      	movs	r3, #0
 8006274:	9309      	str	r3, [sp, #36]	; 0x24
 8006276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006278:	2b00      	cmp	r3, #0
 800627a:	dc52      	bgt.n	8006322 <_dtoa_r+0x312>
 800627c:	2301      	movs	r3, #1
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	9304      	str	r3, [sp, #16]
 8006282:	461a      	mov	r2, r3
 8006284:	920a      	str	r2, [sp, #40]	; 0x28
 8006286:	e00b      	b.n	80062a0 <_dtoa_r+0x290>
 8006288:	2301      	movs	r3, #1
 800628a:	e7f3      	b.n	8006274 <_dtoa_r+0x264>
 800628c:	2300      	movs	r3, #0
 800628e:	9309      	str	r3, [sp, #36]	; 0x24
 8006290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006292:	445b      	add	r3, fp
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	3301      	adds	r3, #1
 8006298:	2b01      	cmp	r3, #1
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	bfb8      	it	lt
 800629e:	2301      	movlt	r3, #1
 80062a0:	69e0      	ldr	r0, [r4, #28]
 80062a2:	2100      	movs	r1, #0
 80062a4:	2204      	movs	r2, #4
 80062a6:	f102 0614 	add.w	r6, r2, #20
 80062aa:	429e      	cmp	r6, r3
 80062ac:	d93d      	bls.n	800632a <_dtoa_r+0x31a>
 80062ae:	6041      	str	r1, [r0, #4]
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 fd9f 	bl	8006df4 <_Balloc>
 80062b6:	9000      	str	r0, [sp, #0]
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d139      	bne.n	8006330 <_dtoa_r+0x320>
 80062bc:	4b16      	ldr	r3, [pc, #88]	; (8006318 <_dtoa_r+0x308>)
 80062be:	4602      	mov	r2, r0
 80062c0:	f240 11af 	movw	r1, #431	; 0x1af
 80062c4:	e6bd      	b.n	8006042 <_dtoa_r+0x32>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e7e1      	b.n	800628e <_dtoa_r+0x27e>
 80062ca:	2501      	movs	r5, #1
 80062cc:	2300      	movs	r3, #0
 80062ce:	9307      	str	r3, [sp, #28]
 80062d0:	9509      	str	r5, [sp, #36]	; 0x24
 80062d2:	f04f 33ff 	mov.w	r3, #4294967295
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	2200      	movs	r2, #0
 80062dc:	2312      	movs	r3, #18
 80062de:	e7d1      	b.n	8006284 <_dtoa_r+0x274>
 80062e0:	636f4361 	.word	0x636f4361
 80062e4:	3fd287a7 	.word	0x3fd287a7
 80062e8:	8b60c8b3 	.word	0x8b60c8b3
 80062ec:	3fc68a28 	.word	0x3fc68a28
 80062f0:	509f79fb 	.word	0x509f79fb
 80062f4:	3fd34413 	.word	0x3fd34413
 80062f8:	08008ec9 	.word	0x08008ec9
 80062fc:	08008ee0 	.word	0x08008ee0
 8006300:	7ff00000 	.word	0x7ff00000
 8006304:	08008ec5 	.word	0x08008ec5
 8006308:	08008ebc 	.word	0x08008ebc
 800630c:	08008e99 	.word	0x08008e99
 8006310:	3ff80000 	.word	0x3ff80000
 8006314:	08008fd0 	.word	0x08008fd0
 8006318:	08008f38 	.word	0x08008f38
 800631c:	2301      	movs	r3, #1
 800631e:	9309      	str	r3, [sp, #36]	; 0x24
 8006320:	e7d7      	b.n	80062d2 <_dtoa_r+0x2c2>
 8006322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	9304      	str	r3, [sp, #16]
 8006328:	e7ba      	b.n	80062a0 <_dtoa_r+0x290>
 800632a:	3101      	adds	r1, #1
 800632c:	0052      	lsls	r2, r2, #1
 800632e:	e7ba      	b.n	80062a6 <_dtoa_r+0x296>
 8006330:	69e3      	ldr	r3, [r4, #28]
 8006332:	9a00      	ldr	r2, [sp, #0]
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	9b04      	ldr	r3, [sp, #16]
 8006338:	2b0e      	cmp	r3, #14
 800633a:	f200 80a8 	bhi.w	800648e <_dtoa_r+0x47e>
 800633e:	2d00      	cmp	r5, #0
 8006340:	f000 80a5 	beq.w	800648e <_dtoa_r+0x47e>
 8006344:	f1bb 0f00 	cmp.w	fp, #0
 8006348:	dd38      	ble.n	80063bc <_dtoa_r+0x3ac>
 800634a:	4bc0      	ldr	r3, [pc, #768]	; (800664c <_dtoa_r+0x63c>)
 800634c:	f00b 020f 	and.w	r2, fp, #15
 8006350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006354:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006358:	e9d3 6700 	ldrd	r6, r7, [r3]
 800635c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006360:	d019      	beq.n	8006396 <_dtoa_r+0x386>
 8006362:	4bbb      	ldr	r3, [pc, #748]	; (8006650 <_dtoa_r+0x640>)
 8006364:	ec51 0b18 	vmov	r0, r1, d8
 8006368:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800636c:	f7fa fa76 	bl	800085c <__aeabi_ddiv>
 8006370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006374:	f008 080f 	and.w	r8, r8, #15
 8006378:	2503      	movs	r5, #3
 800637a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006650 <_dtoa_r+0x640>
 800637e:	f1b8 0f00 	cmp.w	r8, #0
 8006382:	d10a      	bne.n	800639a <_dtoa_r+0x38a>
 8006384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006388:	4632      	mov	r2, r6
 800638a:	463b      	mov	r3, r7
 800638c:	f7fa fa66 	bl	800085c <__aeabi_ddiv>
 8006390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006394:	e02b      	b.n	80063ee <_dtoa_r+0x3de>
 8006396:	2502      	movs	r5, #2
 8006398:	e7ef      	b.n	800637a <_dtoa_r+0x36a>
 800639a:	f018 0f01 	tst.w	r8, #1
 800639e:	d008      	beq.n	80063b2 <_dtoa_r+0x3a2>
 80063a0:	4630      	mov	r0, r6
 80063a2:	4639      	mov	r1, r7
 80063a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80063a8:	f7fa f92e 	bl	8000608 <__aeabi_dmul>
 80063ac:	3501      	adds	r5, #1
 80063ae:	4606      	mov	r6, r0
 80063b0:	460f      	mov	r7, r1
 80063b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80063b6:	f109 0908 	add.w	r9, r9, #8
 80063ba:	e7e0      	b.n	800637e <_dtoa_r+0x36e>
 80063bc:	f000 809f 	beq.w	80064fe <_dtoa_r+0x4ee>
 80063c0:	f1cb 0600 	rsb	r6, fp, #0
 80063c4:	4ba1      	ldr	r3, [pc, #644]	; (800664c <_dtoa_r+0x63c>)
 80063c6:	4fa2      	ldr	r7, [pc, #648]	; (8006650 <_dtoa_r+0x640>)
 80063c8:	f006 020f 	and.w	r2, r6, #15
 80063cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	ec51 0b18 	vmov	r0, r1, d8
 80063d8:	f7fa f916 	bl	8000608 <__aeabi_dmul>
 80063dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063e0:	1136      	asrs	r6, r6, #4
 80063e2:	2300      	movs	r3, #0
 80063e4:	2502      	movs	r5, #2
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	d17e      	bne.n	80064e8 <_dtoa_r+0x4d8>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1d0      	bne.n	8006390 <_dtoa_r+0x380>
 80063ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8084 	beq.w	8006502 <_dtoa_r+0x4f2>
 80063fa:	4b96      	ldr	r3, [pc, #600]	; (8006654 <_dtoa_r+0x644>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	4640      	mov	r0, r8
 8006400:	4649      	mov	r1, r9
 8006402:	f7fa fb73 	bl	8000aec <__aeabi_dcmplt>
 8006406:	2800      	cmp	r0, #0
 8006408:	d07b      	beq.n	8006502 <_dtoa_r+0x4f2>
 800640a:	9b04      	ldr	r3, [sp, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d078      	beq.n	8006502 <_dtoa_r+0x4f2>
 8006410:	9b01      	ldr	r3, [sp, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	dd39      	ble.n	800648a <_dtoa_r+0x47a>
 8006416:	4b90      	ldr	r3, [pc, #576]	; (8006658 <_dtoa_r+0x648>)
 8006418:	2200      	movs	r2, #0
 800641a:	4640      	mov	r0, r8
 800641c:	4649      	mov	r1, r9
 800641e:	f7fa f8f3 	bl	8000608 <__aeabi_dmul>
 8006422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006426:	9e01      	ldr	r6, [sp, #4]
 8006428:	f10b 37ff 	add.w	r7, fp, #4294967295
 800642c:	3501      	adds	r5, #1
 800642e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006432:	4628      	mov	r0, r5
 8006434:	f7fa f87e 	bl	8000534 <__aeabi_i2d>
 8006438:	4642      	mov	r2, r8
 800643a:	464b      	mov	r3, r9
 800643c:	f7fa f8e4 	bl	8000608 <__aeabi_dmul>
 8006440:	4b86      	ldr	r3, [pc, #536]	; (800665c <_dtoa_r+0x64c>)
 8006442:	2200      	movs	r2, #0
 8006444:	f7f9 ff2a 	bl	800029c <__adddf3>
 8006448:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800644c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006450:	9303      	str	r3, [sp, #12]
 8006452:	2e00      	cmp	r6, #0
 8006454:	d158      	bne.n	8006508 <_dtoa_r+0x4f8>
 8006456:	4b82      	ldr	r3, [pc, #520]	; (8006660 <_dtoa_r+0x650>)
 8006458:	2200      	movs	r2, #0
 800645a:	4640      	mov	r0, r8
 800645c:	4649      	mov	r1, r9
 800645e:	f7f9 ff1b 	bl	8000298 <__aeabi_dsub>
 8006462:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006466:	4680      	mov	r8, r0
 8006468:	4689      	mov	r9, r1
 800646a:	f7fa fb5d 	bl	8000b28 <__aeabi_dcmpgt>
 800646e:	2800      	cmp	r0, #0
 8006470:	f040 8296 	bne.w	80069a0 <_dtoa_r+0x990>
 8006474:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006478:	4640      	mov	r0, r8
 800647a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800647e:	4649      	mov	r1, r9
 8006480:	f7fa fb34 	bl	8000aec <__aeabi_dcmplt>
 8006484:	2800      	cmp	r0, #0
 8006486:	f040 8289 	bne.w	800699c <_dtoa_r+0x98c>
 800648a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800648e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006490:	2b00      	cmp	r3, #0
 8006492:	f2c0 814e 	blt.w	8006732 <_dtoa_r+0x722>
 8006496:	f1bb 0f0e 	cmp.w	fp, #14
 800649a:	f300 814a 	bgt.w	8006732 <_dtoa_r+0x722>
 800649e:	4b6b      	ldr	r3, [pc, #428]	; (800664c <_dtoa_r+0x63c>)
 80064a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80064a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f280 80dc 	bge.w	8006668 <_dtoa_r+0x658>
 80064b0:	9b04      	ldr	r3, [sp, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f300 80d8 	bgt.w	8006668 <_dtoa_r+0x658>
 80064b8:	f040 826f 	bne.w	800699a <_dtoa_r+0x98a>
 80064bc:	4b68      	ldr	r3, [pc, #416]	; (8006660 <_dtoa_r+0x650>)
 80064be:	2200      	movs	r2, #0
 80064c0:	4640      	mov	r0, r8
 80064c2:	4649      	mov	r1, r9
 80064c4:	f7fa f8a0 	bl	8000608 <__aeabi_dmul>
 80064c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064cc:	f7fa fb22 	bl	8000b14 <__aeabi_dcmpge>
 80064d0:	9e04      	ldr	r6, [sp, #16]
 80064d2:	4637      	mov	r7, r6
 80064d4:	2800      	cmp	r0, #0
 80064d6:	f040 8245 	bne.w	8006964 <_dtoa_r+0x954>
 80064da:	9d00      	ldr	r5, [sp, #0]
 80064dc:	2331      	movs	r3, #49	; 0x31
 80064de:	f805 3b01 	strb.w	r3, [r5], #1
 80064e2:	f10b 0b01 	add.w	fp, fp, #1
 80064e6:	e241      	b.n	800696c <_dtoa_r+0x95c>
 80064e8:	07f2      	lsls	r2, r6, #31
 80064ea:	d505      	bpl.n	80064f8 <_dtoa_r+0x4e8>
 80064ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f0:	f7fa f88a 	bl	8000608 <__aeabi_dmul>
 80064f4:	3501      	adds	r5, #1
 80064f6:	2301      	movs	r3, #1
 80064f8:	1076      	asrs	r6, r6, #1
 80064fa:	3708      	adds	r7, #8
 80064fc:	e773      	b.n	80063e6 <_dtoa_r+0x3d6>
 80064fe:	2502      	movs	r5, #2
 8006500:	e775      	b.n	80063ee <_dtoa_r+0x3de>
 8006502:	9e04      	ldr	r6, [sp, #16]
 8006504:	465f      	mov	r7, fp
 8006506:	e792      	b.n	800642e <_dtoa_r+0x41e>
 8006508:	9900      	ldr	r1, [sp, #0]
 800650a:	4b50      	ldr	r3, [pc, #320]	; (800664c <_dtoa_r+0x63c>)
 800650c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006510:	4431      	add	r1, r6
 8006512:	9102      	str	r1, [sp, #8]
 8006514:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006516:	eeb0 9a47 	vmov.f32	s18, s14
 800651a:	eef0 9a67 	vmov.f32	s19, s15
 800651e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006522:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006526:	2900      	cmp	r1, #0
 8006528:	d044      	beq.n	80065b4 <_dtoa_r+0x5a4>
 800652a:	494e      	ldr	r1, [pc, #312]	; (8006664 <_dtoa_r+0x654>)
 800652c:	2000      	movs	r0, #0
 800652e:	f7fa f995 	bl	800085c <__aeabi_ddiv>
 8006532:	ec53 2b19 	vmov	r2, r3, d9
 8006536:	f7f9 feaf 	bl	8000298 <__aeabi_dsub>
 800653a:	9d00      	ldr	r5, [sp, #0]
 800653c:	ec41 0b19 	vmov	d9, r0, r1
 8006540:	4649      	mov	r1, r9
 8006542:	4640      	mov	r0, r8
 8006544:	f7fa fb10 	bl	8000b68 <__aeabi_d2iz>
 8006548:	4606      	mov	r6, r0
 800654a:	f7f9 fff3 	bl	8000534 <__aeabi_i2d>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4640      	mov	r0, r8
 8006554:	4649      	mov	r1, r9
 8006556:	f7f9 fe9f 	bl	8000298 <__aeabi_dsub>
 800655a:	3630      	adds	r6, #48	; 0x30
 800655c:	f805 6b01 	strb.w	r6, [r5], #1
 8006560:	ec53 2b19 	vmov	r2, r3, d9
 8006564:	4680      	mov	r8, r0
 8006566:	4689      	mov	r9, r1
 8006568:	f7fa fac0 	bl	8000aec <__aeabi_dcmplt>
 800656c:	2800      	cmp	r0, #0
 800656e:	d164      	bne.n	800663a <_dtoa_r+0x62a>
 8006570:	4642      	mov	r2, r8
 8006572:	464b      	mov	r3, r9
 8006574:	4937      	ldr	r1, [pc, #220]	; (8006654 <_dtoa_r+0x644>)
 8006576:	2000      	movs	r0, #0
 8006578:	f7f9 fe8e 	bl	8000298 <__aeabi_dsub>
 800657c:	ec53 2b19 	vmov	r2, r3, d9
 8006580:	f7fa fab4 	bl	8000aec <__aeabi_dcmplt>
 8006584:	2800      	cmp	r0, #0
 8006586:	f040 80b6 	bne.w	80066f6 <_dtoa_r+0x6e6>
 800658a:	9b02      	ldr	r3, [sp, #8]
 800658c:	429d      	cmp	r5, r3
 800658e:	f43f af7c 	beq.w	800648a <_dtoa_r+0x47a>
 8006592:	4b31      	ldr	r3, [pc, #196]	; (8006658 <_dtoa_r+0x648>)
 8006594:	ec51 0b19 	vmov	r0, r1, d9
 8006598:	2200      	movs	r2, #0
 800659a:	f7fa f835 	bl	8000608 <__aeabi_dmul>
 800659e:	4b2e      	ldr	r3, [pc, #184]	; (8006658 <_dtoa_r+0x648>)
 80065a0:	ec41 0b19 	vmov	d9, r0, r1
 80065a4:	2200      	movs	r2, #0
 80065a6:	4640      	mov	r0, r8
 80065a8:	4649      	mov	r1, r9
 80065aa:	f7fa f82d 	bl	8000608 <__aeabi_dmul>
 80065ae:	4680      	mov	r8, r0
 80065b0:	4689      	mov	r9, r1
 80065b2:	e7c5      	b.n	8006540 <_dtoa_r+0x530>
 80065b4:	ec51 0b17 	vmov	r0, r1, d7
 80065b8:	f7fa f826 	bl	8000608 <__aeabi_dmul>
 80065bc:	9b02      	ldr	r3, [sp, #8]
 80065be:	9d00      	ldr	r5, [sp, #0]
 80065c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80065c2:	ec41 0b19 	vmov	d9, r0, r1
 80065c6:	4649      	mov	r1, r9
 80065c8:	4640      	mov	r0, r8
 80065ca:	f7fa facd 	bl	8000b68 <__aeabi_d2iz>
 80065ce:	4606      	mov	r6, r0
 80065d0:	f7f9 ffb0 	bl	8000534 <__aeabi_i2d>
 80065d4:	3630      	adds	r6, #48	; 0x30
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4640      	mov	r0, r8
 80065dc:	4649      	mov	r1, r9
 80065de:	f7f9 fe5b 	bl	8000298 <__aeabi_dsub>
 80065e2:	f805 6b01 	strb.w	r6, [r5], #1
 80065e6:	9b02      	ldr	r3, [sp, #8]
 80065e8:	429d      	cmp	r5, r3
 80065ea:	4680      	mov	r8, r0
 80065ec:	4689      	mov	r9, r1
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	d124      	bne.n	800663e <_dtoa_r+0x62e>
 80065f4:	4b1b      	ldr	r3, [pc, #108]	; (8006664 <_dtoa_r+0x654>)
 80065f6:	ec51 0b19 	vmov	r0, r1, d9
 80065fa:	f7f9 fe4f 	bl	800029c <__adddf3>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4640      	mov	r0, r8
 8006604:	4649      	mov	r1, r9
 8006606:	f7fa fa8f 	bl	8000b28 <__aeabi_dcmpgt>
 800660a:	2800      	cmp	r0, #0
 800660c:	d173      	bne.n	80066f6 <_dtoa_r+0x6e6>
 800660e:	ec53 2b19 	vmov	r2, r3, d9
 8006612:	4914      	ldr	r1, [pc, #80]	; (8006664 <_dtoa_r+0x654>)
 8006614:	2000      	movs	r0, #0
 8006616:	f7f9 fe3f 	bl	8000298 <__aeabi_dsub>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4640      	mov	r0, r8
 8006620:	4649      	mov	r1, r9
 8006622:	f7fa fa63 	bl	8000aec <__aeabi_dcmplt>
 8006626:	2800      	cmp	r0, #0
 8006628:	f43f af2f 	beq.w	800648a <_dtoa_r+0x47a>
 800662c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800662e:	1e6b      	subs	r3, r5, #1
 8006630:	930f      	str	r3, [sp, #60]	; 0x3c
 8006632:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006636:	2b30      	cmp	r3, #48	; 0x30
 8006638:	d0f8      	beq.n	800662c <_dtoa_r+0x61c>
 800663a:	46bb      	mov	fp, r7
 800663c:	e04a      	b.n	80066d4 <_dtoa_r+0x6c4>
 800663e:	4b06      	ldr	r3, [pc, #24]	; (8006658 <_dtoa_r+0x648>)
 8006640:	f7f9 ffe2 	bl	8000608 <__aeabi_dmul>
 8006644:	4680      	mov	r8, r0
 8006646:	4689      	mov	r9, r1
 8006648:	e7bd      	b.n	80065c6 <_dtoa_r+0x5b6>
 800664a:	bf00      	nop
 800664c:	08008fd0 	.word	0x08008fd0
 8006650:	08008fa8 	.word	0x08008fa8
 8006654:	3ff00000 	.word	0x3ff00000
 8006658:	40240000 	.word	0x40240000
 800665c:	401c0000 	.word	0x401c0000
 8006660:	40140000 	.word	0x40140000
 8006664:	3fe00000 	.word	0x3fe00000
 8006668:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800666c:	9d00      	ldr	r5, [sp, #0]
 800666e:	4642      	mov	r2, r8
 8006670:	464b      	mov	r3, r9
 8006672:	4630      	mov	r0, r6
 8006674:	4639      	mov	r1, r7
 8006676:	f7fa f8f1 	bl	800085c <__aeabi_ddiv>
 800667a:	f7fa fa75 	bl	8000b68 <__aeabi_d2iz>
 800667e:	9001      	str	r0, [sp, #4]
 8006680:	f7f9 ff58 	bl	8000534 <__aeabi_i2d>
 8006684:	4642      	mov	r2, r8
 8006686:	464b      	mov	r3, r9
 8006688:	f7f9 ffbe 	bl	8000608 <__aeabi_dmul>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4630      	mov	r0, r6
 8006692:	4639      	mov	r1, r7
 8006694:	f7f9 fe00 	bl	8000298 <__aeabi_dsub>
 8006698:	9e01      	ldr	r6, [sp, #4]
 800669a:	9f04      	ldr	r7, [sp, #16]
 800669c:	3630      	adds	r6, #48	; 0x30
 800669e:	f805 6b01 	strb.w	r6, [r5], #1
 80066a2:	9e00      	ldr	r6, [sp, #0]
 80066a4:	1bae      	subs	r6, r5, r6
 80066a6:	42b7      	cmp	r7, r6
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	d134      	bne.n	8006718 <_dtoa_r+0x708>
 80066ae:	f7f9 fdf5 	bl	800029c <__adddf3>
 80066b2:	4642      	mov	r2, r8
 80066b4:	464b      	mov	r3, r9
 80066b6:	4606      	mov	r6, r0
 80066b8:	460f      	mov	r7, r1
 80066ba:	f7fa fa35 	bl	8000b28 <__aeabi_dcmpgt>
 80066be:	b9c8      	cbnz	r0, 80066f4 <_dtoa_r+0x6e4>
 80066c0:	4642      	mov	r2, r8
 80066c2:	464b      	mov	r3, r9
 80066c4:	4630      	mov	r0, r6
 80066c6:	4639      	mov	r1, r7
 80066c8:	f7fa fa06 	bl	8000ad8 <__aeabi_dcmpeq>
 80066cc:	b110      	cbz	r0, 80066d4 <_dtoa_r+0x6c4>
 80066ce:	9b01      	ldr	r3, [sp, #4]
 80066d0:	07db      	lsls	r3, r3, #31
 80066d2:	d40f      	bmi.n	80066f4 <_dtoa_r+0x6e4>
 80066d4:	4651      	mov	r1, sl
 80066d6:	4620      	mov	r0, r4
 80066d8:	f000 fbcc 	bl	8006e74 <_Bfree>
 80066dc:	2300      	movs	r3, #0
 80066de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066e0:	702b      	strb	r3, [r5, #0]
 80066e2:	f10b 0301 	add.w	r3, fp, #1
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f43f ace2 	beq.w	80060b4 <_dtoa_r+0xa4>
 80066f0:	601d      	str	r5, [r3, #0]
 80066f2:	e4df      	b.n	80060b4 <_dtoa_r+0xa4>
 80066f4:	465f      	mov	r7, fp
 80066f6:	462b      	mov	r3, r5
 80066f8:	461d      	mov	r5, r3
 80066fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066fe:	2a39      	cmp	r2, #57	; 0x39
 8006700:	d106      	bne.n	8006710 <_dtoa_r+0x700>
 8006702:	9a00      	ldr	r2, [sp, #0]
 8006704:	429a      	cmp	r2, r3
 8006706:	d1f7      	bne.n	80066f8 <_dtoa_r+0x6e8>
 8006708:	9900      	ldr	r1, [sp, #0]
 800670a:	2230      	movs	r2, #48	; 0x30
 800670c:	3701      	adds	r7, #1
 800670e:	700a      	strb	r2, [r1, #0]
 8006710:	781a      	ldrb	r2, [r3, #0]
 8006712:	3201      	adds	r2, #1
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	e790      	b.n	800663a <_dtoa_r+0x62a>
 8006718:	4ba3      	ldr	r3, [pc, #652]	; (80069a8 <_dtoa_r+0x998>)
 800671a:	2200      	movs	r2, #0
 800671c:	f7f9 ff74 	bl	8000608 <__aeabi_dmul>
 8006720:	2200      	movs	r2, #0
 8006722:	2300      	movs	r3, #0
 8006724:	4606      	mov	r6, r0
 8006726:	460f      	mov	r7, r1
 8006728:	f7fa f9d6 	bl	8000ad8 <__aeabi_dcmpeq>
 800672c:	2800      	cmp	r0, #0
 800672e:	d09e      	beq.n	800666e <_dtoa_r+0x65e>
 8006730:	e7d0      	b.n	80066d4 <_dtoa_r+0x6c4>
 8006732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006734:	2a00      	cmp	r2, #0
 8006736:	f000 80ca 	beq.w	80068ce <_dtoa_r+0x8be>
 800673a:	9a07      	ldr	r2, [sp, #28]
 800673c:	2a01      	cmp	r2, #1
 800673e:	f300 80ad 	bgt.w	800689c <_dtoa_r+0x88c>
 8006742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006744:	2a00      	cmp	r2, #0
 8006746:	f000 80a5 	beq.w	8006894 <_dtoa_r+0x884>
 800674a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800674e:	9e08      	ldr	r6, [sp, #32]
 8006750:	9d05      	ldr	r5, [sp, #20]
 8006752:	9a05      	ldr	r2, [sp, #20]
 8006754:	441a      	add	r2, r3
 8006756:	9205      	str	r2, [sp, #20]
 8006758:	9a06      	ldr	r2, [sp, #24]
 800675a:	2101      	movs	r1, #1
 800675c:	441a      	add	r2, r3
 800675e:	4620      	mov	r0, r4
 8006760:	9206      	str	r2, [sp, #24]
 8006762:	f000 fc3d 	bl	8006fe0 <__i2b>
 8006766:	4607      	mov	r7, r0
 8006768:	b165      	cbz	r5, 8006784 <_dtoa_r+0x774>
 800676a:	9b06      	ldr	r3, [sp, #24]
 800676c:	2b00      	cmp	r3, #0
 800676e:	dd09      	ble.n	8006784 <_dtoa_r+0x774>
 8006770:	42ab      	cmp	r3, r5
 8006772:	9a05      	ldr	r2, [sp, #20]
 8006774:	bfa8      	it	ge
 8006776:	462b      	movge	r3, r5
 8006778:	1ad2      	subs	r2, r2, r3
 800677a:	9205      	str	r2, [sp, #20]
 800677c:	9a06      	ldr	r2, [sp, #24]
 800677e:	1aed      	subs	r5, r5, r3
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	9306      	str	r3, [sp, #24]
 8006784:	9b08      	ldr	r3, [sp, #32]
 8006786:	b1f3      	cbz	r3, 80067c6 <_dtoa_r+0x7b6>
 8006788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 80a3 	beq.w	80068d6 <_dtoa_r+0x8c6>
 8006790:	2e00      	cmp	r6, #0
 8006792:	dd10      	ble.n	80067b6 <_dtoa_r+0x7a6>
 8006794:	4639      	mov	r1, r7
 8006796:	4632      	mov	r2, r6
 8006798:	4620      	mov	r0, r4
 800679a:	f000 fce1 	bl	8007160 <__pow5mult>
 800679e:	4652      	mov	r2, sl
 80067a0:	4601      	mov	r1, r0
 80067a2:	4607      	mov	r7, r0
 80067a4:	4620      	mov	r0, r4
 80067a6:	f000 fc31 	bl	800700c <__multiply>
 80067aa:	4651      	mov	r1, sl
 80067ac:	4680      	mov	r8, r0
 80067ae:	4620      	mov	r0, r4
 80067b0:	f000 fb60 	bl	8006e74 <_Bfree>
 80067b4:	46c2      	mov	sl, r8
 80067b6:	9b08      	ldr	r3, [sp, #32]
 80067b8:	1b9a      	subs	r2, r3, r6
 80067ba:	d004      	beq.n	80067c6 <_dtoa_r+0x7b6>
 80067bc:	4651      	mov	r1, sl
 80067be:	4620      	mov	r0, r4
 80067c0:	f000 fcce 	bl	8007160 <__pow5mult>
 80067c4:	4682      	mov	sl, r0
 80067c6:	2101      	movs	r1, #1
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fc09 	bl	8006fe0 <__i2b>
 80067ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	4606      	mov	r6, r0
 80067d4:	f340 8081 	ble.w	80068da <_dtoa_r+0x8ca>
 80067d8:	461a      	mov	r2, r3
 80067da:	4601      	mov	r1, r0
 80067dc:	4620      	mov	r0, r4
 80067de:	f000 fcbf 	bl	8007160 <__pow5mult>
 80067e2:	9b07      	ldr	r3, [sp, #28]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	4606      	mov	r6, r0
 80067e8:	dd7a      	ble.n	80068e0 <_dtoa_r+0x8d0>
 80067ea:	f04f 0800 	mov.w	r8, #0
 80067ee:	6933      	ldr	r3, [r6, #16]
 80067f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067f4:	6918      	ldr	r0, [r3, #16]
 80067f6:	f000 fba5 	bl	8006f44 <__hi0bits>
 80067fa:	f1c0 0020 	rsb	r0, r0, #32
 80067fe:	9b06      	ldr	r3, [sp, #24]
 8006800:	4418      	add	r0, r3
 8006802:	f010 001f 	ands.w	r0, r0, #31
 8006806:	f000 8094 	beq.w	8006932 <_dtoa_r+0x922>
 800680a:	f1c0 0320 	rsb	r3, r0, #32
 800680e:	2b04      	cmp	r3, #4
 8006810:	f340 8085 	ble.w	800691e <_dtoa_r+0x90e>
 8006814:	9b05      	ldr	r3, [sp, #20]
 8006816:	f1c0 001c 	rsb	r0, r0, #28
 800681a:	4403      	add	r3, r0
 800681c:	9305      	str	r3, [sp, #20]
 800681e:	9b06      	ldr	r3, [sp, #24]
 8006820:	4403      	add	r3, r0
 8006822:	4405      	add	r5, r0
 8006824:	9306      	str	r3, [sp, #24]
 8006826:	9b05      	ldr	r3, [sp, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	dd05      	ble.n	8006838 <_dtoa_r+0x828>
 800682c:	4651      	mov	r1, sl
 800682e:	461a      	mov	r2, r3
 8006830:	4620      	mov	r0, r4
 8006832:	f000 fcef 	bl	8007214 <__lshift>
 8006836:	4682      	mov	sl, r0
 8006838:	9b06      	ldr	r3, [sp, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	dd05      	ble.n	800684a <_dtoa_r+0x83a>
 800683e:	4631      	mov	r1, r6
 8006840:	461a      	mov	r2, r3
 8006842:	4620      	mov	r0, r4
 8006844:	f000 fce6 	bl	8007214 <__lshift>
 8006848:	4606      	mov	r6, r0
 800684a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800684c:	2b00      	cmp	r3, #0
 800684e:	d072      	beq.n	8006936 <_dtoa_r+0x926>
 8006850:	4631      	mov	r1, r6
 8006852:	4650      	mov	r0, sl
 8006854:	f000 fd4a 	bl	80072ec <__mcmp>
 8006858:	2800      	cmp	r0, #0
 800685a:	da6c      	bge.n	8006936 <_dtoa_r+0x926>
 800685c:	2300      	movs	r3, #0
 800685e:	4651      	mov	r1, sl
 8006860:	220a      	movs	r2, #10
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fb28 	bl	8006eb8 <__multadd>
 8006868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800686a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800686e:	4682      	mov	sl, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 81b0 	beq.w	8006bd6 <_dtoa_r+0xbc6>
 8006876:	2300      	movs	r3, #0
 8006878:	4639      	mov	r1, r7
 800687a:	220a      	movs	r2, #10
 800687c:	4620      	mov	r0, r4
 800687e:	f000 fb1b 	bl	8006eb8 <__multadd>
 8006882:	9b01      	ldr	r3, [sp, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	4607      	mov	r7, r0
 8006888:	f300 8096 	bgt.w	80069b8 <_dtoa_r+0x9a8>
 800688c:	9b07      	ldr	r3, [sp, #28]
 800688e:	2b02      	cmp	r3, #2
 8006890:	dc59      	bgt.n	8006946 <_dtoa_r+0x936>
 8006892:	e091      	b.n	80069b8 <_dtoa_r+0x9a8>
 8006894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006896:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800689a:	e758      	b.n	800674e <_dtoa_r+0x73e>
 800689c:	9b04      	ldr	r3, [sp, #16]
 800689e:	1e5e      	subs	r6, r3, #1
 80068a0:	9b08      	ldr	r3, [sp, #32]
 80068a2:	42b3      	cmp	r3, r6
 80068a4:	bfbf      	itttt	lt
 80068a6:	9b08      	ldrlt	r3, [sp, #32]
 80068a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80068aa:	9608      	strlt	r6, [sp, #32]
 80068ac:	1af3      	sublt	r3, r6, r3
 80068ae:	bfb4      	ite	lt
 80068b0:	18d2      	addlt	r2, r2, r3
 80068b2:	1b9e      	subge	r6, r3, r6
 80068b4:	9b04      	ldr	r3, [sp, #16]
 80068b6:	bfbc      	itt	lt
 80068b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80068ba:	2600      	movlt	r6, #0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	bfb7      	itett	lt
 80068c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80068c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80068c8:	1a9d      	sublt	r5, r3, r2
 80068ca:	2300      	movlt	r3, #0
 80068cc:	e741      	b.n	8006752 <_dtoa_r+0x742>
 80068ce:	9e08      	ldr	r6, [sp, #32]
 80068d0:	9d05      	ldr	r5, [sp, #20]
 80068d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80068d4:	e748      	b.n	8006768 <_dtoa_r+0x758>
 80068d6:	9a08      	ldr	r2, [sp, #32]
 80068d8:	e770      	b.n	80067bc <_dtoa_r+0x7ac>
 80068da:	9b07      	ldr	r3, [sp, #28]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	dc19      	bgt.n	8006914 <_dtoa_r+0x904>
 80068e0:	9b02      	ldr	r3, [sp, #8]
 80068e2:	b9bb      	cbnz	r3, 8006914 <_dtoa_r+0x904>
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068ea:	b99b      	cbnz	r3, 8006914 <_dtoa_r+0x904>
 80068ec:	9b03      	ldr	r3, [sp, #12]
 80068ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068f2:	0d1b      	lsrs	r3, r3, #20
 80068f4:	051b      	lsls	r3, r3, #20
 80068f6:	b183      	cbz	r3, 800691a <_dtoa_r+0x90a>
 80068f8:	9b05      	ldr	r3, [sp, #20]
 80068fa:	3301      	adds	r3, #1
 80068fc:	9305      	str	r3, [sp, #20]
 80068fe:	9b06      	ldr	r3, [sp, #24]
 8006900:	3301      	adds	r3, #1
 8006902:	9306      	str	r3, [sp, #24]
 8006904:	f04f 0801 	mov.w	r8, #1
 8006908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800690a:	2b00      	cmp	r3, #0
 800690c:	f47f af6f 	bne.w	80067ee <_dtoa_r+0x7de>
 8006910:	2001      	movs	r0, #1
 8006912:	e774      	b.n	80067fe <_dtoa_r+0x7ee>
 8006914:	f04f 0800 	mov.w	r8, #0
 8006918:	e7f6      	b.n	8006908 <_dtoa_r+0x8f8>
 800691a:	4698      	mov	r8, r3
 800691c:	e7f4      	b.n	8006908 <_dtoa_r+0x8f8>
 800691e:	d082      	beq.n	8006826 <_dtoa_r+0x816>
 8006920:	9a05      	ldr	r2, [sp, #20]
 8006922:	331c      	adds	r3, #28
 8006924:	441a      	add	r2, r3
 8006926:	9205      	str	r2, [sp, #20]
 8006928:	9a06      	ldr	r2, [sp, #24]
 800692a:	441a      	add	r2, r3
 800692c:	441d      	add	r5, r3
 800692e:	9206      	str	r2, [sp, #24]
 8006930:	e779      	b.n	8006826 <_dtoa_r+0x816>
 8006932:	4603      	mov	r3, r0
 8006934:	e7f4      	b.n	8006920 <_dtoa_r+0x910>
 8006936:	9b04      	ldr	r3, [sp, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	dc37      	bgt.n	80069ac <_dtoa_r+0x99c>
 800693c:	9b07      	ldr	r3, [sp, #28]
 800693e:	2b02      	cmp	r3, #2
 8006940:	dd34      	ble.n	80069ac <_dtoa_r+0x99c>
 8006942:	9b04      	ldr	r3, [sp, #16]
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	9b01      	ldr	r3, [sp, #4]
 8006948:	b963      	cbnz	r3, 8006964 <_dtoa_r+0x954>
 800694a:	4631      	mov	r1, r6
 800694c:	2205      	movs	r2, #5
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fab2 	bl	8006eb8 <__multadd>
 8006954:	4601      	mov	r1, r0
 8006956:	4606      	mov	r6, r0
 8006958:	4650      	mov	r0, sl
 800695a:	f000 fcc7 	bl	80072ec <__mcmp>
 800695e:	2800      	cmp	r0, #0
 8006960:	f73f adbb 	bgt.w	80064da <_dtoa_r+0x4ca>
 8006964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006966:	9d00      	ldr	r5, [sp, #0]
 8006968:	ea6f 0b03 	mvn.w	fp, r3
 800696c:	f04f 0800 	mov.w	r8, #0
 8006970:	4631      	mov	r1, r6
 8006972:	4620      	mov	r0, r4
 8006974:	f000 fa7e 	bl	8006e74 <_Bfree>
 8006978:	2f00      	cmp	r7, #0
 800697a:	f43f aeab 	beq.w	80066d4 <_dtoa_r+0x6c4>
 800697e:	f1b8 0f00 	cmp.w	r8, #0
 8006982:	d005      	beq.n	8006990 <_dtoa_r+0x980>
 8006984:	45b8      	cmp	r8, r7
 8006986:	d003      	beq.n	8006990 <_dtoa_r+0x980>
 8006988:	4641      	mov	r1, r8
 800698a:	4620      	mov	r0, r4
 800698c:	f000 fa72 	bl	8006e74 <_Bfree>
 8006990:	4639      	mov	r1, r7
 8006992:	4620      	mov	r0, r4
 8006994:	f000 fa6e 	bl	8006e74 <_Bfree>
 8006998:	e69c      	b.n	80066d4 <_dtoa_r+0x6c4>
 800699a:	2600      	movs	r6, #0
 800699c:	4637      	mov	r7, r6
 800699e:	e7e1      	b.n	8006964 <_dtoa_r+0x954>
 80069a0:	46bb      	mov	fp, r7
 80069a2:	4637      	mov	r7, r6
 80069a4:	e599      	b.n	80064da <_dtoa_r+0x4ca>
 80069a6:	bf00      	nop
 80069a8:	40240000 	.word	0x40240000
 80069ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 80c8 	beq.w	8006b44 <_dtoa_r+0xb34>
 80069b4:	9b04      	ldr	r3, [sp, #16]
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	2d00      	cmp	r5, #0
 80069ba:	dd05      	ble.n	80069c8 <_dtoa_r+0x9b8>
 80069bc:	4639      	mov	r1, r7
 80069be:	462a      	mov	r2, r5
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 fc27 	bl	8007214 <__lshift>
 80069c6:	4607      	mov	r7, r0
 80069c8:	f1b8 0f00 	cmp.w	r8, #0
 80069cc:	d05b      	beq.n	8006a86 <_dtoa_r+0xa76>
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 fa0f 	bl	8006df4 <_Balloc>
 80069d6:	4605      	mov	r5, r0
 80069d8:	b928      	cbnz	r0, 80069e6 <_dtoa_r+0x9d6>
 80069da:	4b83      	ldr	r3, [pc, #524]	; (8006be8 <_dtoa_r+0xbd8>)
 80069dc:	4602      	mov	r2, r0
 80069de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80069e2:	f7ff bb2e 	b.w	8006042 <_dtoa_r+0x32>
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	3202      	adds	r2, #2
 80069ea:	0092      	lsls	r2, r2, #2
 80069ec:	f107 010c 	add.w	r1, r7, #12
 80069f0:	300c      	adds	r0, #12
 80069f2:	f001 f813 	bl	8007a1c <memcpy>
 80069f6:	2201      	movs	r2, #1
 80069f8:	4629      	mov	r1, r5
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 fc0a 	bl	8007214 <__lshift>
 8006a00:	9b00      	ldr	r3, [sp, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	9308      	str	r3, [sp, #32]
 8006a0e:	9b02      	ldr	r3, [sp, #8]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	46b8      	mov	r8, r7
 8006a16:	9306      	str	r3, [sp, #24]
 8006a18:	4607      	mov	r7, r0
 8006a1a:	9b04      	ldr	r3, [sp, #16]
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	4650      	mov	r0, sl
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	f7ff fa6b 	bl	8005efe <quorem>
 8006a28:	4641      	mov	r1, r8
 8006a2a:	9002      	str	r0, [sp, #8]
 8006a2c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a30:	4650      	mov	r0, sl
 8006a32:	f000 fc5b 	bl	80072ec <__mcmp>
 8006a36:	463a      	mov	r2, r7
 8006a38:	9005      	str	r0, [sp, #20]
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 fc71 	bl	8007324 <__mdiff>
 8006a42:	68c2      	ldr	r2, [r0, #12]
 8006a44:	4605      	mov	r5, r0
 8006a46:	bb02      	cbnz	r2, 8006a8a <_dtoa_r+0xa7a>
 8006a48:	4601      	mov	r1, r0
 8006a4a:	4650      	mov	r0, sl
 8006a4c:	f000 fc4e 	bl	80072ec <__mcmp>
 8006a50:	4602      	mov	r2, r0
 8006a52:	4629      	mov	r1, r5
 8006a54:	4620      	mov	r0, r4
 8006a56:	9209      	str	r2, [sp, #36]	; 0x24
 8006a58:	f000 fa0c 	bl	8006e74 <_Bfree>
 8006a5c:	9b07      	ldr	r3, [sp, #28]
 8006a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a60:	9d04      	ldr	r5, [sp, #16]
 8006a62:	ea43 0102 	orr.w	r1, r3, r2
 8006a66:	9b06      	ldr	r3, [sp, #24]
 8006a68:	4319      	orrs	r1, r3
 8006a6a:	d110      	bne.n	8006a8e <_dtoa_r+0xa7e>
 8006a6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a70:	d029      	beq.n	8006ac6 <_dtoa_r+0xab6>
 8006a72:	9b05      	ldr	r3, [sp, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dd02      	ble.n	8006a7e <_dtoa_r+0xa6e>
 8006a78:	9b02      	ldr	r3, [sp, #8]
 8006a7a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a7e:	9b01      	ldr	r3, [sp, #4]
 8006a80:	f883 9000 	strb.w	r9, [r3]
 8006a84:	e774      	b.n	8006970 <_dtoa_r+0x960>
 8006a86:	4638      	mov	r0, r7
 8006a88:	e7ba      	b.n	8006a00 <_dtoa_r+0x9f0>
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	e7e1      	b.n	8006a52 <_dtoa_r+0xa42>
 8006a8e:	9b05      	ldr	r3, [sp, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	db04      	blt.n	8006a9e <_dtoa_r+0xa8e>
 8006a94:	9907      	ldr	r1, [sp, #28]
 8006a96:	430b      	orrs	r3, r1
 8006a98:	9906      	ldr	r1, [sp, #24]
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	d120      	bne.n	8006ae0 <_dtoa_r+0xad0>
 8006a9e:	2a00      	cmp	r2, #0
 8006aa0:	dded      	ble.n	8006a7e <_dtoa_r+0xa6e>
 8006aa2:	4651      	mov	r1, sl
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 fbb4 	bl	8007214 <__lshift>
 8006aac:	4631      	mov	r1, r6
 8006aae:	4682      	mov	sl, r0
 8006ab0:	f000 fc1c 	bl	80072ec <__mcmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	dc03      	bgt.n	8006ac0 <_dtoa_r+0xab0>
 8006ab8:	d1e1      	bne.n	8006a7e <_dtoa_r+0xa6e>
 8006aba:	f019 0f01 	tst.w	r9, #1
 8006abe:	d0de      	beq.n	8006a7e <_dtoa_r+0xa6e>
 8006ac0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ac4:	d1d8      	bne.n	8006a78 <_dtoa_r+0xa68>
 8006ac6:	9a01      	ldr	r2, [sp, #4]
 8006ac8:	2339      	movs	r3, #57	; 0x39
 8006aca:	7013      	strb	r3, [r2, #0]
 8006acc:	462b      	mov	r3, r5
 8006ace:	461d      	mov	r5, r3
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ad6:	2a39      	cmp	r2, #57	; 0x39
 8006ad8:	d06c      	beq.n	8006bb4 <_dtoa_r+0xba4>
 8006ada:	3201      	adds	r2, #1
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	e747      	b.n	8006970 <_dtoa_r+0x960>
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	dd07      	ble.n	8006af4 <_dtoa_r+0xae4>
 8006ae4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ae8:	d0ed      	beq.n	8006ac6 <_dtoa_r+0xab6>
 8006aea:	9a01      	ldr	r2, [sp, #4]
 8006aec:	f109 0301 	add.w	r3, r9, #1
 8006af0:	7013      	strb	r3, [r2, #0]
 8006af2:	e73d      	b.n	8006970 <_dtoa_r+0x960>
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	9a08      	ldr	r2, [sp, #32]
 8006af8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d043      	beq.n	8006b88 <_dtoa_r+0xb78>
 8006b00:	4651      	mov	r1, sl
 8006b02:	2300      	movs	r3, #0
 8006b04:	220a      	movs	r2, #10
 8006b06:	4620      	mov	r0, r4
 8006b08:	f000 f9d6 	bl	8006eb8 <__multadd>
 8006b0c:	45b8      	cmp	r8, r7
 8006b0e:	4682      	mov	sl, r0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	f04f 020a 	mov.w	r2, #10
 8006b18:	4641      	mov	r1, r8
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	d107      	bne.n	8006b2e <_dtoa_r+0xb1e>
 8006b1e:	f000 f9cb 	bl	8006eb8 <__multadd>
 8006b22:	4680      	mov	r8, r0
 8006b24:	4607      	mov	r7, r0
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	9304      	str	r3, [sp, #16]
 8006b2c:	e775      	b.n	8006a1a <_dtoa_r+0xa0a>
 8006b2e:	f000 f9c3 	bl	8006eb8 <__multadd>
 8006b32:	4639      	mov	r1, r7
 8006b34:	4680      	mov	r8, r0
 8006b36:	2300      	movs	r3, #0
 8006b38:	220a      	movs	r2, #10
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 f9bc 	bl	8006eb8 <__multadd>
 8006b40:	4607      	mov	r7, r0
 8006b42:	e7f0      	b.n	8006b26 <_dtoa_r+0xb16>
 8006b44:	9b04      	ldr	r3, [sp, #16]
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	9d00      	ldr	r5, [sp, #0]
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4650      	mov	r0, sl
 8006b4e:	f7ff f9d6 	bl	8005efe <quorem>
 8006b52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b56:	9b00      	ldr	r3, [sp, #0]
 8006b58:	f805 9b01 	strb.w	r9, [r5], #1
 8006b5c:	1aea      	subs	r2, r5, r3
 8006b5e:	9b01      	ldr	r3, [sp, #4]
 8006b60:	4293      	cmp	r3, r2
 8006b62:	dd07      	ble.n	8006b74 <_dtoa_r+0xb64>
 8006b64:	4651      	mov	r1, sl
 8006b66:	2300      	movs	r3, #0
 8006b68:	220a      	movs	r2, #10
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 f9a4 	bl	8006eb8 <__multadd>
 8006b70:	4682      	mov	sl, r0
 8006b72:	e7ea      	b.n	8006b4a <_dtoa_r+0xb3a>
 8006b74:	9b01      	ldr	r3, [sp, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bfc8      	it	gt
 8006b7a:	461d      	movgt	r5, r3
 8006b7c:	9b00      	ldr	r3, [sp, #0]
 8006b7e:	bfd8      	it	le
 8006b80:	2501      	movle	r5, #1
 8006b82:	441d      	add	r5, r3
 8006b84:	f04f 0800 	mov.w	r8, #0
 8006b88:	4651      	mov	r1, sl
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 fb41 	bl	8007214 <__lshift>
 8006b92:	4631      	mov	r1, r6
 8006b94:	4682      	mov	sl, r0
 8006b96:	f000 fba9 	bl	80072ec <__mcmp>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	dc96      	bgt.n	8006acc <_dtoa_r+0xabc>
 8006b9e:	d102      	bne.n	8006ba6 <_dtoa_r+0xb96>
 8006ba0:	f019 0f01 	tst.w	r9, #1
 8006ba4:	d192      	bne.n	8006acc <_dtoa_r+0xabc>
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	461d      	mov	r5, r3
 8006baa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bae:	2a30      	cmp	r2, #48	; 0x30
 8006bb0:	d0fa      	beq.n	8006ba8 <_dtoa_r+0xb98>
 8006bb2:	e6dd      	b.n	8006970 <_dtoa_r+0x960>
 8006bb4:	9a00      	ldr	r2, [sp, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d189      	bne.n	8006ace <_dtoa_r+0xabe>
 8006bba:	f10b 0b01 	add.w	fp, fp, #1
 8006bbe:	2331      	movs	r3, #49	; 0x31
 8006bc0:	e796      	b.n	8006af0 <_dtoa_r+0xae0>
 8006bc2:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <_dtoa_r+0xbdc>)
 8006bc4:	f7ff ba99 	b.w	80060fa <_dtoa_r+0xea>
 8006bc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f47f aa6d 	bne.w	80060aa <_dtoa_r+0x9a>
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <_dtoa_r+0xbe0>)
 8006bd2:	f7ff ba92 	b.w	80060fa <_dtoa_r+0xea>
 8006bd6:	9b01      	ldr	r3, [sp, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	dcb5      	bgt.n	8006b48 <_dtoa_r+0xb38>
 8006bdc:	9b07      	ldr	r3, [sp, #28]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	f73f aeb1 	bgt.w	8006946 <_dtoa_r+0x936>
 8006be4:	e7b0      	b.n	8006b48 <_dtoa_r+0xb38>
 8006be6:	bf00      	nop
 8006be8:	08008f38 	.word	0x08008f38
 8006bec:	08008e98 	.word	0x08008e98
 8006bf0:	08008ebc 	.word	0x08008ebc

08006bf4 <_free_r>:
 8006bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bf6:	2900      	cmp	r1, #0
 8006bf8:	d044      	beq.n	8006c84 <_free_r+0x90>
 8006bfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bfe:	9001      	str	r0, [sp, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f1a1 0404 	sub.w	r4, r1, #4
 8006c06:	bfb8      	it	lt
 8006c08:	18e4      	addlt	r4, r4, r3
 8006c0a:	f000 f8e7 	bl	8006ddc <__malloc_lock>
 8006c0e:	4a1e      	ldr	r2, [pc, #120]	; (8006c88 <_free_r+0x94>)
 8006c10:	9801      	ldr	r0, [sp, #4]
 8006c12:	6813      	ldr	r3, [r2, #0]
 8006c14:	b933      	cbnz	r3, 8006c24 <_free_r+0x30>
 8006c16:	6063      	str	r3, [r4, #4]
 8006c18:	6014      	str	r4, [r2, #0]
 8006c1a:	b003      	add	sp, #12
 8006c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c20:	f000 b8e2 	b.w	8006de8 <__malloc_unlock>
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d908      	bls.n	8006c3a <_free_r+0x46>
 8006c28:	6825      	ldr	r5, [r4, #0]
 8006c2a:	1961      	adds	r1, r4, r5
 8006c2c:	428b      	cmp	r3, r1
 8006c2e:	bf01      	itttt	eq
 8006c30:	6819      	ldreq	r1, [r3, #0]
 8006c32:	685b      	ldreq	r3, [r3, #4]
 8006c34:	1949      	addeq	r1, r1, r5
 8006c36:	6021      	streq	r1, [r4, #0]
 8006c38:	e7ed      	b.n	8006c16 <_free_r+0x22>
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	b10b      	cbz	r3, 8006c44 <_free_r+0x50>
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	d9fa      	bls.n	8006c3a <_free_r+0x46>
 8006c44:	6811      	ldr	r1, [r2, #0]
 8006c46:	1855      	adds	r5, r2, r1
 8006c48:	42a5      	cmp	r5, r4
 8006c4a:	d10b      	bne.n	8006c64 <_free_r+0x70>
 8006c4c:	6824      	ldr	r4, [r4, #0]
 8006c4e:	4421      	add	r1, r4
 8006c50:	1854      	adds	r4, r2, r1
 8006c52:	42a3      	cmp	r3, r4
 8006c54:	6011      	str	r1, [r2, #0]
 8006c56:	d1e0      	bne.n	8006c1a <_free_r+0x26>
 8006c58:	681c      	ldr	r4, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	6053      	str	r3, [r2, #4]
 8006c5e:	440c      	add	r4, r1
 8006c60:	6014      	str	r4, [r2, #0]
 8006c62:	e7da      	b.n	8006c1a <_free_r+0x26>
 8006c64:	d902      	bls.n	8006c6c <_free_r+0x78>
 8006c66:	230c      	movs	r3, #12
 8006c68:	6003      	str	r3, [r0, #0]
 8006c6a:	e7d6      	b.n	8006c1a <_free_r+0x26>
 8006c6c:	6825      	ldr	r5, [r4, #0]
 8006c6e:	1961      	adds	r1, r4, r5
 8006c70:	428b      	cmp	r3, r1
 8006c72:	bf04      	itt	eq
 8006c74:	6819      	ldreq	r1, [r3, #0]
 8006c76:	685b      	ldreq	r3, [r3, #4]
 8006c78:	6063      	str	r3, [r4, #4]
 8006c7a:	bf04      	itt	eq
 8006c7c:	1949      	addeq	r1, r1, r5
 8006c7e:	6021      	streq	r1, [r4, #0]
 8006c80:	6054      	str	r4, [r2, #4]
 8006c82:	e7ca      	b.n	8006c1a <_free_r+0x26>
 8006c84:	b003      	add	sp, #12
 8006c86:	bd30      	pop	{r4, r5, pc}
 8006c88:	2000065c 	.word	0x2000065c

08006c8c <malloc>:
 8006c8c:	4b02      	ldr	r3, [pc, #8]	; (8006c98 <malloc+0xc>)
 8006c8e:	4601      	mov	r1, r0
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	f000 b823 	b.w	8006cdc <_malloc_r>
 8006c96:	bf00      	nop
 8006c98:	2000006c 	.word	0x2000006c

08006c9c <sbrk_aligned>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	4e0e      	ldr	r6, [pc, #56]	; (8006cd8 <sbrk_aligned+0x3c>)
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	6831      	ldr	r1, [r6, #0]
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	b911      	cbnz	r1, 8006cae <sbrk_aligned+0x12>
 8006ca8:	f000 fea8 	bl	80079fc <_sbrk_r>
 8006cac:	6030      	str	r0, [r6, #0]
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f000 fea3 	bl	80079fc <_sbrk_r>
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	d00a      	beq.n	8006cd0 <sbrk_aligned+0x34>
 8006cba:	1cc4      	adds	r4, r0, #3
 8006cbc:	f024 0403 	bic.w	r4, r4, #3
 8006cc0:	42a0      	cmp	r0, r4
 8006cc2:	d007      	beq.n	8006cd4 <sbrk_aligned+0x38>
 8006cc4:	1a21      	subs	r1, r4, r0
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f000 fe98 	bl	80079fc <_sbrk_r>
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d101      	bne.n	8006cd4 <sbrk_aligned+0x38>
 8006cd0:	f04f 34ff 	mov.w	r4, #4294967295
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}
 8006cd8:	20000660 	.word	0x20000660

08006cdc <_malloc_r>:
 8006cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce0:	1ccd      	adds	r5, r1, #3
 8006ce2:	f025 0503 	bic.w	r5, r5, #3
 8006ce6:	3508      	adds	r5, #8
 8006ce8:	2d0c      	cmp	r5, #12
 8006cea:	bf38      	it	cc
 8006cec:	250c      	movcc	r5, #12
 8006cee:	2d00      	cmp	r5, #0
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	db01      	blt.n	8006cf8 <_malloc_r+0x1c>
 8006cf4:	42a9      	cmp	r1, r5
 8006cf6:	d905      	bls.n	8006d04 <_malloc_r+0x28>
 8006cf8:	230c      	movs	r3, #12
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	2600      	movs	r6, #0
 8006cfe:	4630      	mov	r0, r6
 8006d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006dd8 <_malloc_r+0xfc>
 8006d08:	f000 f868 	bl	8006ddc <__malloc_lock>
 8006d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d10:	461c      	mov	r4, r3
 8006d12:	bb5c      	cbnz	r4, 8006d6c <_malloc_r+0x90>
 8006d14:	4629      	mov	r1, r5
 8006d16:	4638      	mov	r0, r7
 8006d18:	f7ff ffc0 	bl	8006c9c <sbrk_aligned>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	4604      	mov	r4, r0
 8006d20:	d155      	bne.n	8006dce <_malloc_r+0xf2>
 8006d22:	f8d8 4000 	ldr.w	r4, [r8]
 8006d26:	4626      	mov	r6, r4
 8006d28:	2e00      	cmp	r6, #0
 8006d2a:	d145      	bne.n	8006db8 <_malloc_r+0xdc>
 8006d2c:	2c00      	cmp	r4, #0
 8006d2e:	d048      	beq.n	8006dc2 <_malloc_r+0xe6>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	4631      	mov	r1, r6
 8006d34:	4638      	mov	r0, r7
 8006d36:	eb04 0903 	add.w	r9, r4, r3
 8006d3a:	f000 fe5f 	bl	80079fc <_sbrk_r>
 8006d3e:	4581      	cmp	r9, r0
 8006d40:	d13f      	bne.n	8006dc2 <_malloc_r+0xe6>
 8006d42:	6821      	ldr	r1, [r4, #0]
 8006d44:	1a6d      	subs	r5, r5, r1
 8006d46:	4629      	mov	r1, r5
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff ffa7 	bl	8006c9c <sbrk_aligned>
 8006d4e:	3001      	adds	r0, #1
 8006d50:	d037      	beq.n	8006dc2 <_malloc_r+0xe6>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	442b      	add	r3, r5
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	f8d8 3000 	ldr.w	r3, [r8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d038      	beq.n	8006dd2 <_malloc_r+0xf6>
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	42a2      	cmp	r2, r4
 8006d64:	d12b      	bne.n	8006dbe <_malloc_r+0xe2>
 8006d66:	2200      	movs	r2, #0
 8006d68:	605a      	str	r2, [r3, #4]
 8006d6a:	e00f      	b.n	8006d8c <_malloc_r+0xb0>
 8006d6c:	6822      	ldr	r2, [r4, #0]
 8006d6e:	1b52      	subs	r2, r2, r5
 8006d70:	d41f      	bmi.n	8006db2 <_malloc_r+0xd6>
 8006d72:	2a0b      	cmp	r2, #11
 8006d74:	d917      	bls.n	8006da6 <_malloc_r+0xca>
 8006d76:	1961      	adds	r1, r4, r5
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	6025      	str	r5, [r4, #0]
 8006d7c:	bf18      	it	ne
 8006d7e:	6059      	strne	r1, [r3, #4]
 8006d80:	6863      	ldr	r3, [r4, #4]
 8006d82:	bf08      	it	eq
 8006d84:	f8c8 1000 	streq.w	r1, [r8]
 8006d88:	5162      	str	r2, [r4, r5]
 8006d8a:	604b      	str	r3, [r1, #4]
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	f104 060b 	add.w	r6, r4, #11
 8006d92:	f000 f829 	bl	8006de8 <__malloc_unlock>
 8006d96:	f026 0607 	bic.w	r6, r6, #7
 8006d9a:	1d23      	adds	r3, r4, #4
 8006d9c:	1af2      	subs	r2, r6, r3
 8006d9e:	d0ae      	beq.n	8006cfe <_malloc_r+0x22>
 8006da0:	1b9b      	subs	r3, r3, r6
 8006da2:	50a3      	str	r3, [r4, r2]
 8006da4:	e7ab      	b.n	8006cfe <_malloc_r+0x22>
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	6862      	ldr	r2, [r4, #4]
 8006daa:	d1dd      	bne.n	8006d68 <_malloc_r+0x8c>
 8006dac:	f8c8 2000 	str.w	r2, [r8]
 8006db0:	e7ec      	b.n	8006d8c <_malloc_r+0xb0>
 8006db2:	4623      	mov	r3, r4
 8006db4:	6864      	ldr	r4, [r4, #4]
 8006db6:	e7ac      	b.n	8006d12 <_malloc_r+0x36>
 8006db8:	4634      	mov	r4, r6
 8006dba:	6876      	ldr	r6, [r6, #4]
 8006dbc:	e7b4      	b.n	8006d28 <_malloc_r+0x4c>
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	e7cc      	b.n	8006d5c <_malloc_r+0x80>
 8006dc2:	230c      	movs	r3, #12
 8006dc4:	603b      	str	r3, [r7, #0]
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f000 f80e 	bl	8006de8 <__malloc_unlock>
 8006dcc:	e797      	b.n	8006cfe <_malloc_r+0x22>
 8006dce:	6025      	str	r5, [r4, #0]
 8006dd0:	e7dc      	b.n	8006d8c <_malloc_r+0xb0>
 8006dd2:	605b      	str	r3, [r3, #4]
 8006dd4:	deff      	udf	#255	; 0xff
 8006dd6:	bf00      	nop
 8006dd8:	2000065c 	.word	0x2000065c

08006ddc <__malloc_lock>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	; (8006de4 <__malloc_lock+0x8>)
 8006dde:	f7ff b88c 	b.w	8005efa <__retarget_lock_acquire_recursive>
 8006de2:	bf00      	nop
 8006de4:	20000658 	.word	0x20000658

08006de8 <__malloc_unlock>:
 8006de8:	4801      	ldr	r0, [pc, #4]	; (8006df0 <__malloc_unlock+0x8>)
 8006dea:	f7ff b887 	b.w	8005efc <__retarget_lock_release_recursive>
 8006dee:	bf00      	nop
 8006df0:	20000658 	.word	0x20000658

08006df4 <_Balloc>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	69c6      	ldr	r6, [r0, #28]
 8006df8:	4604      	mov	r4, r0
 8006dfa:	460d      	mov	r5, r1
 8006dfc:	b976      	cbnz	r6, 8006e1c <_Balloc+0x28>
 8006dfe:	2010      	movs	r0, #16
 8006e00:	f7ff ff44 	bl	8006c8c <malloc>
 8006e04:	4602      	mov	r2, r0
 8006e06:	61e0      	str	r0, [r4, #28]
 8006e08:	b920      	cbnz	r0, 8006e14 <_Balloc+0x20>
 8006e0a:	4b18      	ldr	r3, [pc, #96]	; (8006e6c <_Balloc+0x78>)
 8006e0c:	4818      	ldr	r0, [pc, #96]	; (8006e70 <_Balloc+0x7c>)
 8006e0e:	216b      	movs	r1, #107	; 0x6b
 8006e10:	f000 fe12 	bl	8007a38 <__assert_func>
 8006e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e18:	6006      	str	r6, [r0, #0]
 8006e1a:	60c6      	str	r6, [r0, #12]
 8006e1c:	69e6      	ldr	r6, [r4, #28]
 8006e1e:	68f3      	ldr	r3, [r6, #12]
 8006e20:	b183      	cbz	r3, 8006e44 <_Balloc+0x50>
 8006e22:	69e3      	ldr	r3, [r4, #28]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e2a:	b9b8      	cbnz	r0, 8006e5c <_Balloc+0x68>
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	fa01 f605 	lsl.w	r6, r1, r5
 8006e32:	1d72      	adds	r2, r6, #5
 8006e34:	0092      	lsls	r2, r2, #2
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 fe1c 	bl	8007a74 <_calloc_r>
 8006e3c:	b160      	cbz	r0, 8006e58 <_Balloc+0x64>
 8006e3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e42:	e00e      	b.n	8006e62 <_Balloc+0x6e>
 8006e44:	2221      	movs	r2, #33	; 0x21
 8006e46:	2104      	movs	r1, #4
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 fe13 	bl	8007a74 <_calloc_r>
 8006e4e:	69e3      	ldr	r3, [r4, #28]
 8006e50:	60f0      	str	r0, [r6, #12]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e4      	bne.n	8006e22 <_Balloc+0x2e>
 8006e58:	2000      	movs	r0, #0
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	6802      	ldr	r2, [r0, #0]
 8006e5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e62:	2300      	movs	r3, #0
 8006e64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e68:	e7f7      	b.n	8006e5a <_Balloc+0x66>
 8006e6a:	bf00      	nop
 8006e6c:	08008ec9 	.word	0x08008ec9
 8006e70:	08008f49 	.word	0x08008f49

08006e74 <_Bfree>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	69c6      	ldr	r6, [r0, #28]
 8006e78:	4605      	mov	r5, r0
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	b976      	cbnz	r6, 8006e9c <_Bfree+0x28>
 8006e7e:	2010      	movs	r0, #16
 8006e80:	f7ff ff04 	bl	8006c8c <malloc>
 8006e84:	4602      	mov	r2, r0
 8006e86:	61e8      	str	r0, [r5, #28]
 8006e88:	b920      	cbnz	r0, 8006e94 <_Bfree+0x20>
 8006e8a:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <_Bfree+0x3c>)
 8006e8c:	4809      	ldr	r0, [pc, #36]	; (8006eb4 <_Bfree+0x40>)
 8006e8e:	218f      	movs	r1, #143	; 0x8f
 8006e90:	f000 fdd2 	bl	8007a38 <__assert_func>
 8006e94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e98:	6006      	str	r6, [r0, #0]
 8006e9a:	60c6      	str	r6, [r0, #12]
 8006e9c:	b13c      	cbz	r4, 8006eae <_Bfree+0x3a>
 8006e9e:	69eb      	ldr	r3, [r5, #28]
 8006ea0:	6862      	ldr	r2, [r4, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ea8:	6021      	str	r1, [r4, #0]
 8006eaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	08008ec9 	.word	0x08008ec9
 8006eb4:	08008f49 	.word	0x08008f49

08006eb8 <__multadd>:
 8006eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ebc:	690d      	ldr	r5, [r1, #16]
 8006ebe:	4607      	mov	r7, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	461e      	mov	r6, r3
 8006ec4:	f101 0c14 	add.w	ip, r1, #20
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f8dc 3000 	ldr.w	r3, [ip]
 8006ece:	b299      	uxth	r1, r3
 8006ed0:	fb02 6101 	mla	r1, r2, r1, r6
 8006ed4:	0c1e      	lsrs	r6, r3, #16
 8006ed6:	0c0b      	lsrs	r3, r1, #16
 8006ed8:	fb02 3306 	mla	r3, r2, r6, r3
 8006edc:	b289      	uxth	r1, r1
 8006ede:	3001      	adds	r0, #1
 8006ee0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ee4:	4285      	cmp	r5, r0
 8006ee6:	f84c 1b04 	str.w	r1, [ip], #4
 8006eea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006eee:	dcec      	bgt.n	8006eca <__multadd+0x12>
 8006ef0:	b30e      	cbz	r6, 8006f36 <__multadd+0x7e>
 8006ef2:	68a3      	ldr	r3, [r4, #8]
 8006ef4:	42ab      	cmp	r3, r5
 8006ef6:	dc19      	bgt.n	8006f2c <__multadd+0x74>
 8006ef8:	6861      	ldr	r1, [r4, #4]
 8006efa:	4638      	mov	r0, r7
 8006efc:	3101      	adds	r1, #1
 8006efe:	f7ff ff79 	bl	8006df4 <_Balloc>
 8006f02:	4680      	mov	r8, r0
 8006f04:	b928      	cbnz	r0, 8006f12 <__multadd+0x5a>
 8006f06:	4602      	mov	r2, r0
 8006f08:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <__multadd+0x84>)
 8006f0a:	480d      	ldr	r0, [pc, #52]	; (8006f40 <__multadd+0x88>)
 8006f0c:	21ba      	movs	r1, #186	; 0xba
 8006f0e:	f000 fd93 	bl	8007a38 <__assert_func>
 8006f12:	6922      	ldr	r2, [r4, #16]
 8006f14:	3202      	adds	r2, #2
 8006f16:	f104 010c 	add.w	r1, r4, #12
 8006f1a:	0092      	lsls	r2, r2, #2
 8006f1c:	300c      	adds	r0, #12
 8006f1e:	f000 fd7d 	bl	8007a1c <memcpy>
 8006f22:	4621      	mov	r1, r4
 8006f24:	4638      	mov	r0, r7
 8006f26:	f7ff ffa5 	bl	8006e74 <_Bfree>
 8006f2a:	4644      	mov	r4, r8
 8006f2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f30:	3501      	adds	r5, #1
 8006f32:	615e      	str	r6, [r3, #20]
 8006f34:	6125      	str	r5, [r4, #16]
 8006f36:	4620      	mov	r0, r4
 8006f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f3c:	08008f38 	.word	0x08008f38
 8006f40:	08008f49 	.word	0x08008f49

08006f44 <__hi0bits>:
 8006f44:	0c03      	lsrs	r3, r0, #16
 8006f46:	041b      	lsls	r3, r3, #16
 8006f48:	b9d3      	cbnz	r3, 8006f80 <__hi0bits+0x3c>
 8006f4a:	0400      	lsls	r0, r0, #16
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f52:	bf04      	itt	eq
 8006f54:	0200      	lsleq	r0, r0, #8
 8006f56:	3308      	addeq	r3, #8
 8006f58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f5c:	bf04      	itt	eq
 8006f5e:	0100      	lsleq	r0, r0, #4
 8006f60:	3304      	addeq	r3, #4
 8006f62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f66:	bf04      	itt	eq
 8006f68:	0080      	lsleq	r0, r0, #2
 8006f6a:	3302      	addeq	r3, #2
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	db05      	blt.n	8006f7c <__hi0bits+0x38>
 8006f70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f74:	f103 0301 	add.w	r3, r3, #1
 8006f78:	bf08      	it	eq
 8006f7a:	2320      	moveq	r3, #32
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	4770      	bx	lr
 8006f80:	2300      	movs	r3, #0
 8006f82:	e7e4      	b.n	8006f4e <__hi0bits+0xa>

08006f84 <__lo0bits>:
 8006f84:	6803      	ldr	r3, [r0, #0]
 8006f86:	f013 0207 	ands.w	r2, r3, #7
 8006f8a:	d00c      	beq.n	8006fa6 <__lo0bits+0x22>
 8006f8c:	07d9      	lsls	r1, r3, #31
 8006f8e:	d422      	bmi.n	8006fd6 <__lo0bits+0x52>
 8006f90:	079a      	lsls	r2, r3, #30
 8006f92:	bf49      	itett	mi
 8006f94:	085b      	lsrmi	r3, r3, #1
 8006f96:	089b      	lsrpl	r3, r3, #2
 8006f98:	6003      	strmi	r3, [r0, #0]
 8006f9a:	2201      	movmi	r2, #1
 8006f9c:	bf5c      	itt	pl
 8006f9e:	6003      	strpl	r3, [r0, #0]
 8006fa0:	2202      	movpl	r2, #2
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	4770      	bx	lr
 8006fa6:	b299      	uxth	r1, r3
 8006fa8:	b909      	cbnz	r1, 8006fae <__lo0bits+0x2a>
 8006faa:	0c1b      	lsrs	r3, r3, #16
 8006fac:	2210      	movs	r2, #16
 8006fae:	b2d9      	uxtb	r1, r3
 8006fb0:	b909      	cbnz	r1, 8006fb6 <__lo0bits+0x32>
 8006fb2:	3208      	adds	r2, #8
 8006fb4:	0a1b      	lsrs	r3, r3, #8
 8006fb6:	0719      	lsls	r1, r3, #28
 8006fb8:	bf04      	itt	eq
 8006fba:	091b      	lsreq	r3, r3, #4
 8006fbc:	3204      	addeq	r2, #4
 8006fbe:	0799      	lsls	r1, r3, #30
 8006fc0:	bf04      	itt	eq
 8006fc2:	089b      	lsreq	r3, r3, #2
 8006fc4:	3202      	addeq	r2, #2
 8006fc6:	07d9      	lsls	r1, r3, #31
 8006fc8:	d403      	bmi.n	8006fd2 <__lo0bits+0x4e>
 8006fca:	085b      	lsrs	r3, r3, #1
 8006fcc:	f102 0201 	add.w	r2, r2, #1
 8006fd0:	d003      	beq.n	8006fda <__lo0bits+0x56>
 8006fd2:	6003      	str	r3, [r0, #0]
 8006fd4:	e7e5      	b.n	8006fa2 <__lo0bits+0x1e>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	e7e3      	b.n	8006fa2 <__lo0bits+0x1e>
 8006fda:	2220      	movs	r2, #32
 8006fdc:	e7e1      	b.n	8006fa2 <__lo0bits+0x1e>
	...

08006fe0 <__i2b>:
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	f7ff ff05 	bl	8006df4 <_Balloc>
 8006fea:	4602      	mov	r2, r0
 8006fec:	b928      	cbnz	r0, 8006ffa <__i2b+0x1a>
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <__i2b+0x24>)
 8006ff0:	4805      	ldr	r0, [pc, #20]	; (8007008 <__i2b+0x28>)
 8006ff2:	f240 1145 	movw	r1, #325	; 0x145
 8006ff6:	f000 fd1f 	bl	8007a38 <__assert_func>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	6144      	str	r4, [r0, #20]
 8006ffe:	6103      	str	r3, [r0, #16]
 8007000:	bd10      	pop	{r4, pc}
 8007002:	bf00      	nop
 8007004:	08008f38 	.word	0x08008f38
 8007008:	08008f49 	.word	0x08008f49

0800700c <__multiply>:
 800700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007010:	4691      	mov	r9, r2
 8007012:	690a      	ldr	r2, [r1, #16]
 8007014:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007018:	429a      	cmp	r2, r3
 800701a:	bfb8      	it	lt
 800701c:	460b      	movlt	r3, r1
 800701e:	460c      	mov	r4, r1
 8007020:	bfbc      	itt	lt
 8007022:	464c      	movlt	r4, r9
 8007024:	4699      	movlt	r9, r3
 8007026:	6927      	ldr	r7, [r4, #16]
 8007028:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800702c:	68a3      	ldr	r3, [r4, #8]
 800702e:	6861      	ldr	r1, [r4, #4]
 8007030:	eb07 060a 	add.w	r6, r7, sl
 8007034:	42b3      	cmp	r3, r6
 8007036:	b085      	sub	sp, #20
 8007038:	bfb8      	it	lt
 800703a:	3101      	addlt	r1, #1
 800703c:	f7ff feda 	bl	8006df4 <_Balloc>
 8007040:	b930      	cbnz	r0, 8007050 <__multiply+0x44>
 8007042:	4602      	mov	r2, r0
 8007044:	4b44      	ldr	r3, [pc, #272]	; (8007158 <__multiply+0x14c>)
 8007046:	4845      	ldr	r0, [pc, #276]	; (800715c <__multiply+0x150>)
 8007048:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800704c:	f000 fcf4 	bl	8007a38 <__assert_func>
 8007050:	f100 0514 	add.w	r5, r0, #20
 8007054:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007058:	462b      	mov	r3, r5
 800705a:	2200      	movs	r2, #0
 800705c:	4543      	cmp	r3, r8
 800705e:	d321      	bcc.n	80070a4 <__multiply+0x98>
 8007060:	f104 0314 	add.w	r3, r4, #20
 8007064:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007068:	f109 0314 	add.w	r3, r9, #20
 800706c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007070:	9202      	str	r2, [sp, #8]
 8007072:	1b3a      	subs	r2, r7, r4
 8007074:	3a15      	subs	r2, #21
 8007076:	f022 0203 	bic.w	r2, r2, #3
 800707a:	3204      	adds	r2, #4
 800707c:	f104 0115 	add.w	r1, r4, #21
 8007080:	428f      	cmp	r7, r1
 8007082:	bf38      	it	cc
 8007084:	2204      	movcc	r2, #4
 8007086:	9201      	str	r2, [sp, #4]
 8007088:	9a02      	ldr	r2, [sp, #8]
 800708a:	9303      	str	r3, [sp, #12]
 800708c:	429a      	cmp	r2, r3
 800708e:	d80c      	bhi.n	80070aa <__multiply+0x9e>
 8007090:	2e00      	cmp	r6, #0
 8007092:	dd03      	ble.n	800709c <__multiply+0x90>
 8007094:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007098:	2b00      	cmp	r3, #0
 800709a:	d05b      	beq.n	8007154 <__multiply+0x148>
 800709c:	6106      	str	r6, [r0, #16]
 800709e:	b005      	add	sp, #20
 80070a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a4:	f843 2b04 	str.w	r2, [r3], #4
 80070a8:	e7d8      	b.n	800705c <__multiply+0x50>
 80070aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80070ae:	f1ba 0f00 	cmp.w	sl, #0
 80070b2:	d024      	beq.n	80070fe <__multiply+0xf2>
 80070b4:	f104 0e14 	add.w	lr, r4, #20
 80070b8:	46a9      	mov	r9, r5
 80070ba:	f04f 0c00 	mov.w	ip, #0
 80070be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070c2:	f8d9 1000 	ldr.w	r1, [r9]
 80070c6:	fa1f fb82 	uxth.w	fp, r2
 80070ca:	b289      	uxth	r1, r1
 80070cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80070d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80070d4:	f8d9 2000 	ldr.w	r2, [r9]
 80070d8:	4461      	add	r1, ip
 80070da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070de:	fb0a c20b 	mla	r2, sl, fp, ip
 80070e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070e6:	b289      	uxth	r1, r1
 80070e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070ec:	4577      	cmp	r7, lr
 80070ee:	f849 1b04 	str.w	r1, [r9], #4
 80070f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070f6:	d8e2      	bhi.n	80070be <__multiply+0xb2>
 80070f8:	9a01      	ldr	r2, [sp, #4]
 80070fa:	f845 c002 	str.w	ip, [r5, r2]
 80070fe:	9a03      	ldr	r2, [sp, #12]
 8007100:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007104:	3304      	adds	r3, #4
 8007106:	f1b9 0f00 	cmp.w	r9, #0
 800710a:	d021      	beq.n	8007150 <__multiply+0x144>
 800710c:	6829      	ldr	r1, [r5, #0]
 800710e:	f104 0c14 	add.w	ip, r4, #20
 8007112:	46ae      	mov	lr, r5
 8007114:	f04f 0a00 	mov.w	sl, #0
 8007118:	f8bc b000 	ldrh.w	fp, [ip]
 800711c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007120:	fb09 220b 	mla	r2, r9, fp, r2
 8007124:	4452      	add	r2, sl
 8007126:	b289      	uxth	r1, r1
 8007128:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800712c:	f84e 1b04 	str.w	r1, [lr], #4
 8007130:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007134:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007138:	f8be 1000 	ldrh.w	r1, [lr]
 800713c:	fb09 110a 	mla	r1, r9, sl, r1
 8007140:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007144:	4567      	cmp	r7, ip
 8007146:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800714a:	d8e5      	bhi.n	8007118 <__multiply+0x10c>
 800714c:	9a01      	ldr	r2, [sp, #4]
 800714e:	50a9      	str	r1, [r5, r2]
 8007150:	3504      	adds	r5, #4
 8007152:	e799      	b.n	8007088 <__multiply+0x7c>
 8007154:	3e01      	subs	r6, #1
 8007156:	e79b      	b.n	8007090 <__multiply+0x84>
 8007158:	08008f38 	.word	0x08008f38
 800715c:	08008f49 	.word	0x08008f49

08007160 <__pow5mult>:
 8007160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007164:	4615      	mov	r5, r2
 8007166:	f012 0203 	ands.w	r2, r2, #3
 800716a:	4606      	mov	r6, r0
 800716c:	460f      	mov	r7, r1
 800716e:	d007      	beq.n	8007180 <__pow5mult+0x20>
 8007170:	4c25      	ldr	r4, [pc, #148]	; (8007208 <__pow5mult+0xa8>)
 8007172:	3a01      	subs	r2, #1
 8007174:	2300      	movs	r3, #0
 8007176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800717a:	f7ff fe9d 	bl	8006eb8 <__multadd>
 800717e:	4607      	mov	r7, r0
 8007180:	10ad      	asrs	r5, r5, #2
 8007182:	d03d      	beq.n	8007200 <__pow5mult+0xa0>
 8007184:	69f4      	ldr	r4, [r6, #28]
 8007186:	b97c      	cbnz	r4, 80071a8 <__pow5mult+0x48>
 8007188:	2010      	movs	r0, #16
 800718a:	f7ff fd7f 	bl	8006c8c <malloc>
 800718e:	4602      	mov	r2, r0
 8007190:	61f0      	str	r0, [r6, #28]
 8007192:	b928      	cbnz	r0, 80071a0 <__pow5mult+0x40>
 8007194:	4b1d      	ldr	r3, [pc, #116]	; (800720c <__pow5mult+0xac>)
 8007196:	481e      	ldr	r0, [pc, #120]	; (8007210 <__pow5mult+0xb0>)
 8007198:	f240 11b3 	movw	r1, #435	; 0x1b3
 800719c:	f000 fc4c 	bl	8007a38 <__assert_func>
 80071a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071a4:	6004      	str	r4, [r0, #0]
 80071a6:	60c4      	str	r4, [r0, #12]
 80071a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80071ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071b0:	b94c      	cbnz	r4, 80071c6 <__pow5mult+0x66>
 80071b2:	f240 2171 	movw	r1, #625	; 0x271
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff ff12 	bl	8006fe0 <__i2b>
 80071bc:	2300      	movs	r3, #0
 80071be:	f8c8 0008 	str.w	r0, [r8, #8]
 80071c2:	4604      	mov	r4, r0
 80071c4:	6003      	str	r3, [r0, #0]
 80071c6:	f04f 0900 	mov.w	r9, #0
 80071ca:	07eb      	lsls	r3, r5, #31
 80071cc:	d50a      	bpl.n	80071e4 <__pow5mult+0x84>
 80071ce:	4639      	mov	r1, r7
 80071d0:	4622      	mov	r2, r4
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7ff ff1a 	bl	800700c <__multiply>
 80071d8:	4639      	mov	r1, r7
 80071da:	4680      	mov	r8, r0
 80071dc:	4630      	mov	r0, r6
 80071de:	f7ff fe49 	bl	8006e74 <_Bfree>
 80071e2:	4647      	mov	r7, r8
 80071e4:	106d      	asrs	r5, r5, #1
 80071e6:	d00b      	beq.n	8007200 <__pow5mult+0xa0>
 80071e8:	6820      	ldr	r0, [r4, #0]
 80071ea:	b938      	cbnz	r0, 80071fc <__pow5mult+0x9c>
 80071ec:	4622      	mov	r2, r4
 80071ee:	4621      	mov	r1, r4
 80071f0:	4630      	mov	r0, r6
 80071f2:	f7ff ff0b 	bl	800700c <__multiply>
 80071f6:	6020      	str	r0, [r4, #0]
 80071f8:	f8c0 9000 	str.w	r9, [r0]
 80071fc:	4604      	mov	r4, r0
 80071fe:	e7e4      	b.n	80071ca <__pow5mult+0x6a>
 8007200:	4638      	mov	r0, r7
 8007202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007206:	bf00      	nop
 8007208:	08009098 	.word	0x08009098
 800720c:	08008ec9 	.word	0x08008ec9
 8007210:	08008f49 	.word	0x08008f49

08007214 <__lshift>:
 8007214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007218:	460c      	mov	r4, r1
 800721a:	6849      	ldr	r1, [r1, #4]
 800721c:	6923      	ldr	r3, [r4, #16]
 800721e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007222:	68a3      	ldr	r3, [r4, #8]
 8007224:	4607      	mov	r7, r0
 8007226:	4691      	mov	r9, r2
 8007228:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800722c:	f108 0601 	add.w	r6, r8, #1
 8007230:	42b3      	cmp	r3, r6
 8007232:	db0b      	blt.n	800724c <__lshift+0x38>
 8007234:	4638      	mov	r0, r7
 8007236:	f7ff fddd 	bl	8006df4 <_Balloc>
 800723a:	4605      	mov	r5, r0
 800723c:	b948      	cbnz	r0, 8007252 <__lshift+0x3e>
 800723e:	4602      	mov	r2, r0
 8007240:	4b28      	ldr	r3, [pc, #160]	; (80072e4 <__lshift+0xd0>)
 8007242:	4829      	ldr	r0, [pc, #164]	; (80072e8 <__lshift+0xd4>)
 8007244:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007248:	f000 fbf6 	bl	8007a38 <__assert_func>
 800724c:	3101      	adds	r1, #1
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	e7ee      	b.n	8007230 <__lshift+0x1c>
 8007252:	2300      	movs	r3, #0
 8007254:	f100 0114 	add.w	r1, r0, #20
 8007258:	f100 0210 	add.w	r2, r0, #16
 800725c:	4618      	mov	r0, r3
 800725e:	4553      	cmp	r3, sl
 8007260:	db33      	blt.n	80072ca <__lshift+0xb6>
 8007262:	6920      	ldr	r0, [r4, #16]
 8007264:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007268:	f104 0314 	add.w	r3, r4, #20
 800726c:	f019 091f 	ands.w	r9, r9, #31
 8007270:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007274:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007278:	d02b      	beq.n	80072d2 <__lshift+0xbe>
 800727a:	f1c9 0e20 	rsb	lr, r9, #32
 800727e:	468a      	mov	sl, r1
 8007280:	2200      	movs	r2, #0
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	fa00 f009 	lsl.w	r0, r0, r9
 8007288:	4310      	orrs	r0, r2
 800728a:	f84a 0b04 	str.w	r0, [sl], #4
 800728e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007292:	459c      	cmp	ip, r3
 8007294:	fa22 f20e 	lsr.w	r2, r2, lr
 8007298:	d8f3      	bhi.n	8007282 <__lshift+0x6e>
 800729a:	ebac 0304 	sub.w	r3, ip, r4
 800729e:	3b15      	subs	r3, #21
 80072a0:	f023 0303 	bic.w	r3, r3, #3
 80072a4:	3304      	adds	r3, #4
 80072a6:	f104 0015 	add.w	r0, r4, #21
 80072aa:	4584      	cmp	ip, r0
 80072ac:	bf38      	it	cc
 80072ae:	2304      	movcc	r3, #4
 80072b0:	50ca      	str	r2, [r1, r3]
 80072b2:	b10a      	cbz	r2, 80072b8 <__lshift+0xa4>
 80072b4:	f108 0602 	add.w	r6, r8, #2
 80072b8:	3e01      	subs	r6, #1
 80072ba:	4638      	mov	r0, r7
 80072bc:	612e      	str	r6, [r5, #16]
 80072be:	4621      	mov	r1, r4
 80072c0:	f7ff fdd8 	bl	8006e74 <_Bfree>
 80072c4:	4628      	mov	r0, r5
 80072c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80072ce:	3301      	adds	r3, #1
 80072d0:	e7c5      	b.n	800725e <__lshift+0x4a>
 80072d2:	3904      	subs	r1, #4
 80072d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80072dc:	459c      	cmp	ip, r3
 80072de:	d8f9      	bhi.n	80072d4 <__lshift+0xc0>
 80072e0:	e7ea      	b.n	80072b8 <__lshift+0xa4>
 80072e2:	bf00      	nop
 80072e4:	08008f38 	.word	0x08008f38
 80072e8:	08008f49 	.word	0x08008f49

080072ec <__mcmp>:
 80072ec:	b530      	push	{r4, r5, lr}
 80072ee:	6902      	ldr	r2, [r0, #16]
 80072f0:	690c      	ldr	r4, [r1, #16]
 80072f2:	1b12      	subs	r2, r2, r4
 80072f4:	d10e      	bne.n	8007314 <__mcmp+0x28>
 80072f6:	f100 0314 	add.w	r3, r0, #20
 80072fa:	3114      	adds	r1, #20
 80072fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007300:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007304:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007308:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800730c:	42a5      	cmp	r5, r4
 800730e:	d003      	beq.n	8007318 <__mcmp+0x2c>
 8007310:	d305      	bcc.n	800731e <__mcmp+0x32>
 8007312:	2201      	movs	r2, #1
 8007314:	4610      	mov	r0, r2
 8007316:	bd30      	pop	{r4, r5, pc}
 8007318:	4283      	cmp	r3, r0
 800731a:	d3f3      	bcc.n	8007304 <__mcmp+0x18>
 800731c:	e7fa      	b.n	8007314 <__mcmp+0x28>
 800731e:	f04f 32ff 	mov.w	r2, #4294967295
 8007322:	e7f7      	b.n	8007314 <__mcmp+0x28>

08007324 <__mdiff>:
 8007324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	460c      	mov	r4, r1
 800732a:	4606      	mov	r6, r0
 800732c:	4611      	mov	r1, r2
 800732e:	4620      	mov	r0, r4
 8007330:	4690      	mov	r8, r2
 8007332:	f7ff ffdb 	bl	80072ec <__mcmp>
 8007336:	1e05      	subs	r5, r0, #0
 8007338:	d110      	bne.n	800735c <__mdiff+0x38>
 800733a:	4629      	mov	r1, r5
 800733c:	4630      	mov	r0, r6
 800733e:	f7ff fd59 	bl	8006df4 <_Balloc>
 8007342:	b930      	cbnz	r0, 8007352 <__mdiff+0x2e>
 8007344:	4b3a      	ldr	r3, [pc, #232]	; (8007430 <__mdiff+0x10c>)
 8007346:	4602      	mov	r2, r0
 8007348:	f240 2137 	movw	r1, #567	; 0x237
 800734c:	4839      	ldr	r0, [pc, #228]	; (8007434 <__mdiff+0x110>)
 800734e:	f000 fb73 	bl	8007a38 <__assert_func>
 8007352:	2301      	movs	r3, #1
 8007354:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735c:	bfa4      	itt	ge
 800735e:	4643      	movge	r3, r8
 8007360:	46a0      	movge	r8, r4
 8007362:	4630      	mov	r0, r6
 8007364:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007368:	bfa6      	itte	ge
 800736a:	461c      	movge	r4, r3
 800736c:	2500      	movge	r5, #0
 800736e:	2501      	movlt	r5, #1
 8007370:	f7ff fd40 	bl	8006df4 <_Balloc>
 8007374:	b920      	cbnz	r0, 8007380 <__mdiff+0x5c>
 8007376:	4b2e      	ldr	r3, [pc, #184]	; (8007430 <__mdiff+0x10c>)
 8007378:	4602      	mov	r2, r0
 800737a:	f240 2145 	movw	r1, #581	; 0x245
 800737e:	e7e5      	b.n	800734c <__mdiff+0x28>
 8007380:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007384:	6926      	ldr	r6, [r4, #16]
 8007386:	60c5      	str	r5, [r0, #12]
 8007388:	f104 0914 	add.w	r9, r4, #20
 800738c:	f108 0514 	add.w	r5, r8, #20
 8007390:	f100 0e14 	add.w	lr, r0, #20
 8007394:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007398:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800739c:	f108 0210 	add.w	r2, r8, #16
 80073a0:	46f2      	mov	sl, lr
 80073a2:	2100      	movs	r1, #0
 80073a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80073a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80073ac:	fa11 f88b 	uxtah	r8, r1, fp
 80073b0:	b299      	uxth	r1, r3
 80073b2:	0c1b      	lsrs	r3, r3, #16
 80073b4:	eba8 0801 	sub.w	r8, r8, r1
 80073b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073c0:	fa1f f888 	uxth.w	r8, r8
 80073c4:	1419      	asrs	r1, r3, #16
 80073c6:	454e      	cmp	r6, r9
 80073c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073cc:	f84a 3b04 	str.w	r3, [sl], #4
 80073d0:	d8e8      	bhi.n	80073a4 <__mdiff+0x80>
 80073d2:	1b33      	subs	r3, r6, r4
 80073d4:	3b15      	subs	r3, #21
 80073d6:	f023 0303 	bic.w	r3, r3, #3
 80073da:	3304      	adds	r3, #4
 80073dc:	3415      	adds	r4, #21
 80073de:	42a6      	cmp	r6, r4
 80073e0:	bf38      	it	cc
 80073e2:	2304      	movcc	r3, #4
 80073e4:	441d      	add	r5, r3
 80073e6:	4473      	add	r3, lr
 80073e8:	469e      	mov	lr, r3
 80073ea:	462e      	mov	r6, r5
 80073ec:	4566      	cmp	r6, ip
 80073ee:	d30e      	bcc.n	800740e <__mdiff+0xea>
 80073f0:	f10c 0203 	add.w	r2, ip, #3
 80073f4:	1b52      	subs	r2, r2, r5
 80073f6:	f022 0203 	bic.w	r2, r2, #3
 80073fa:	3d03      	subs	r5, #3
 80073fc:	45ac      	cmp	ip, r5
 80073fe:	bf38      	it	cc
 8007400:	2200      	movcc	r2, #0
 8007402:	4413      	add	r3, r2
 8007404:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007408:	b17a      	cbz	r2, 800742a <__mdiff+0x106>
 800740a:	6107      	str	r7, [r0, #16]
 800740c:	e7a4      	b.n	8007358 <__mdiff+0x34>
 800740e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007412:	fa11 f288 	uxtah	r2, r1, r8
 8007416:	1414      	asrs	r4, r2, #16
 8007418:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800741c:	b292      	uxth	r2, r2
 800741e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007422:	f84e 2b04 	str.w	r2, [lr], #4
 8007426:	1421      	asrs	r1, r4, #16
 8007428:	e7e0      	b.n	80073ec <__mdiff+0xc8>
 800742a:	3f01      	subs	r7, #1
 800742c:	e7ea      	b.n	8007404 <__mdiff+0xe0>
 800742e:	bf00      	nop
 8007430:	08008f38 	.word	0x08008f38
 8007434:	08008f49 	.word	0x08008f49

08007438 <__d2b>:
 8007438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800743c:	460f      	mov	r7, r1
 800743e:	2101      	movs	r1, #1
 8007440:	ec59 8b10 	vmov	r8, r9, d0
 8007444:	4616      	mov	r6, r2
 8007446:	f7ff fcd5 	bl	8006df4 <_Balloc>
 800744a:	4604      	mov	r4, r0
 800744c:	b930      	cbnz	r0, 800745c <__d2b+0x24>
 800744e:	4602      	mov	r2, r0
 8007450:	4b24      	ldr	r3, [pc, #144]	; (80074e4 <__d2b+0xac>)
 8007452:	4825      	ldr	r0, [pc, #148]	; (80074e8 <__d2b+0xb0>)
 8007454:	f240 310f 	movw	r1, #783	; 0x30f
 8007458:	f000 faee 	bl	8007a38 <__assert_func>
 800745c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007464:	bb2d      	cbnz	r5, 80074b2 <__d2b+0x7a>
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	f1b8 0300 	subs.w	r3, r8, #0
 800746c:	d026      	beq.n	80074bc <__d2b+0x84>
 800746e:	4668      	mov	r0, sp
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	f7ff fd87 	bl	8006f84 <__lo0bits>
 8007476:	e9dd 1200 	ldrd	r1, r2, [sp]
 800747a:	b1e8      	cbz	r0, 80074b8 <__d2b+0x80>
 800747c:	f1c0 0320 	rsb	r3, r0, #32
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	430b      	orrs	r3, r1
 8007486:	40c2      	lsrs	r2, r0
 8007488:	6163      	str	r3, [r4, #20]
 800748a:	9201      	str	r2, [sp, #4]
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	61a3      	str	r3, [r4, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	bf14      	ite	ne
 8007494:	2202      	movne	r2, #2
 8007496:	2201      	moveq	r2, #1
 8007498:	6122      	str	r2, [r4, #16]
 800749a:	b1bd      	cbz	r5, 80074cc <__d2b+0x94>
 800749c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074a0:	4405      	add	r5, r0
 80074a2:	603d      	str	r5, [r7, #0]
 80074a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074a8:	6030      	str	r0, [r6, #0]
 80074aa:	4620      	mov	r0, r4
 80074ac:	b003      	add	sp, #12
 80074ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074b6:	e7d6      	b.n	8007466 <__d2b+0x2e>
 80074b8:	6161      	str	r1, [r4, #20]
 80074ba:	e7e7      	b.n	800748c <__d2b+0x54>
 80074bc:	a801      	add	r0, sp, #4
 80074be:	f7ff fd61 	bl	8006f84 <__lo0bits>
 80074c2:	9b01      	ldr	r3, [sp, #4]
 80074c4:	6163      	str	r3, [r4, #20]
 80074c6:	3020      	adds	r0, #32
 80074c8:	2201      	movs	r2, #1
 80074ca:	e7e5      	b.n	8007498 <__d2b+0x60>
 80074cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074d4:	6038      	str	r0, [r7, #0]
 80074d6:	6918      	ldr	r0, [r3, #16]
 80074d8:	f7ff fd34 	bl	8006f44 <__hi0bits>
 80074dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074e0:	e7e2      	b.n	80074a8 <__d2b+0x70>
 80074e2:	bf00      	nop
 80074e4:	08008f38 	.word	0x08008f38
 80074e8:	08008f49 	.word	0x08008f49

080074ec <__sfputc_r>:
 80074ec:	6893      	ldr	r3, [r2, #8]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	b410      	push	{r4}
 80074f4:	6093      	str	r3, [r2, #8]
 80074f6:	da08      	bge.n	800750a <__sfputc_r+0x1e>
 80074f8:	6994      	ldr	r4, [r2, #24]
 80074fa:	42a3      	cmp	r3, r4
 80074fc:	db01      	blt.n	8007502 <__sfputc_r+0x16>
 80074fe:	290a      	cmp	r1, #10
 8007500:	d103      	bne.n	800750a <__sfputc_r+0x1e>
 8007502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007506:	f000 b9e3 	b.w	80078d0 <__swbuf_r>
 800750a:	6813      	ldr	r3, [r2, #0]
 800750c:	1c58      	adds	r0, r3, #1
 800750e:	6010      	str	r0, [r2, #0]
 8007510:	7019      	strb	r1, [r3, #0]
 8007512:	4608      	mov	r0, r1
 8007514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007518:	4770      	bx	lr

0800751a <__sfputs_r>:
 800751a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751c:	4606      	mov	r6, r0
 800751e:	460f      	mov	r7, r1
 8007520:	4614      	mov	r4, r2
 8007522:	18d5      	adds	r5, r2, r3
 8007524:	42ac      	cmp	r4, r5
 8007526:	d101      	bne.n	800752c <__sfputs_r+0x12>
 8007528:	2000      	movs	r0, #0
 800752a:	e007      	b.n	800753c <__sfputs_r+0x22>
 800752c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007530:	463a      	mov	r2, r7
 8007532:	4630      	mov	r0, r6
 8007534:	f7ff ffda 	bl	80074ec <__sfputc_r>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d1f3      	bne.n	8007524 <__sfputs_r+0xa>
 800753c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007540 <_vfiprintf_r>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	460d      	mov	r5, r1
 8007546:	b09d      	sub	sp, #116	; 0x74
 8007548:	4614      	mov	r4, r2
 800754a:	4698      	mov	r8, r3
 800754c:	4606      	mov	r6, r0
 800754e:	b118      	cbz	r0, 8007558 <_vfiprintf_r+0x18>
 8007550:	6a03      	ldr	r3, [r0, #32]
 8007552:	b90b      	cbnz	r3, 8007558 <_vfiprintf_r+0x18>
 8007554:	f7fe fbc8 	bl	8005ce8 <__sinit>
 8007558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800755a:	07d9      	lsls	r1, r3, #31
 800755c:	d405      	bmi.n	800756a <_vfiprintf_r+0x2a>
 800755e:	89ab      	ldrh	r3, [r5, #12]
 8007560:	059a      	lsls	r2, r3, #22
 8007562:	d402      	bmi.n	800756a <_vfiprintf_r+0x2a>
 8007564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007566:	f7fe fcc8 	bl	8005efa <__retarget_lock_acquire_recursive>
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	071b      	lsls	r3, r3, #28
 800756e:	d501      	bpl.n	8007574 <_vfiprintf_r+0x34>
 8007570:	692b      	ldr	r3, [r5, #16]
 8007572:	b99b      	cbnz	r3, 800759c <_vfiprintf_r+0x5c>
 8007574:	4629      	mov	r1, r5
 8007576:	4630      	mov	r0, r6
 8007578:	f000 f9e8 	bl	800794c <__swsetup_r>
 800757c:	b170      	cbz	r0, 800759c <_vfiprintf_r+0x5c>
 800757e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007580:	07dc      	lsls	r4, r3, #31
 8007582:	d504      	bpl.n	800758e <_vfiprintf_r+0x4e>
 8007584:	f04f 30ff 	mov.w	r0, #4294967295
 8007588:	b01d      	add	sp, #116	; 0x74
 800758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758e:	89ab      	ldrh	r3, [r5, #12]
 8007590:	0598      	lsls	r0, r3, #22
 8007592:	d4f7      	bmi.n	8007584 <_vfiprintf_r+0x44>
 8007594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007596:	f7fe fcb1 	bl	8005efc <__retarget_lock_release_recursive>
 800759a:	e7f3      	b.n	8007584 <_vfiprintf_r+0x44>
 800759c:	2300      	movs	r3, #0
 800759e:	9309      	str	r3, [sp, #36]	; 0x24
 80075a0:	2320      	movs	r3, #32
 80075a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075aa:	2330      	movs	r3, #48	; 0x30
 80075ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007760 <_vfiprintf_r+0x220>
 80075b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075b4:	f04f 0901 	mov.w	r9, #1
 80075b8:	4623      	mov	r3, r4
 80075ba:	469a      	mov	sl, r3
 80075bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075c0:	b10a      	cbz	r2, 80075c6 <_vfiprintf_r+0x86>
 80075c2:	2a25      	cmp	r2, #37	; 0x25
 80075c4:	d1f9      	bne.n	80075ba <_vfiprintf_r+0x7a>
 80075c6:	ebba 0b04 	subs.w	fp, sl, r4
 80075ca:	d00b      	beq.n	80075e4 <_vfiprintf_r+0xa4>
 80075cc:	465b      	mov	r3, fp
 80075ce:	4622      	mov	r2, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	4630      	mov	r0, r6
 80075d4:	f7ff ffa1 	bl	800751a <__sfputs_r>
 80075d8:	3001      	adds	r0, #1
 80075da:	f000 80a9 	beq.w	8007730 <_vfiprintf_r+0x1f0>
 80075de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075e0:	445a      	add	r2, fp
 80075e2:	9209      	str	r2, [sp, #36]	; 0x24
 80075e4:	f89a 3000 	ldrb.w	r3, [sl]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 80a1 	beq.w	8007730 <_vfiprintf_r+0x1f0>
 80075ee:	2300      	movs	r3, #0
 80075f0:	f04f 32ff 	mov.w	r2, #4294967295
 80075f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075f8:	f10a 0a01 	add.w	sl, sl, #1
 80075fc:	9304      	str	r3, [sp, #16]
 80075fe:	9307      	str	r3, [sp, #28]
 8007600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007604:	931a      	str	r3, [sp, #104]	; 0x68
 8007606:	4654      	mov	r4, sl
 8007608:	2205      	movs	r2, #5
 800760a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760e:	4854      	ldr	r0, [pc, #336]	; (8007760 <_vfiprintf_r+0x220>)
 8007610:	f7f8 fde6 	bl	80001e0 <memchr>
 8007614:	9a04      	ldr	r2, [sp, #16]
 8007616:	b9d8      	cbnz	r0, 8007650 <_vfiprintf_r+0x110>
 8007618:	06d1      	lsls	r1, r2, #27
 800761a:	bf44      	itt	mi
 800761c:	2320      	movmi	r3, #32
 800761e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007622:	0713      	lsls	r3, r2, #28
 8007624:	bf44      	itt	mi
 8007626:	232b      	movmi	r3, #43	; 0x2b
 8007628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800762c:	f89a 3000 	ldrb.w	r3, [sl]
 8007630:	2b2a      	cmp	r3, #42	; 0x2a
 8007632:	d015      	beq.n	8007660 <_vfiprintf_r+0x120>
 8007634:	9a07      	ldr	r2, [sp, #28]
 8007636:	4654      	mov	r4, sl
 8007638:	2000      	movs	r0, #0
 800763a:	f04f 0c0a 	mov.w	ip, #10
 800763e:	4621      	mov	r1, r4
 8007640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007644:	3b30      	subs	r3, #48	; 0x30
 8007646:	2b09      	cmp	r3, #9
 8007648:	d94d      	bls.n	80076e6 <_vfiprintf_r+0x1a6>
 800764a:	b1b0      	cbz	r0, 800767a <_vfiprintf_r+0x13a>
 800764c:	9207      	str	r2, [sp, #28]
 800764e:	e014      	b.n	800767a <_vfiprintf_r+0x13a>
 8007650:	eba0 0308 	sub.w	r3, r0, r8
 8007654:	fa09 f303 	lsl.w	r3, r9, r3
 8007658:	4313      	orrs	r3, r2
 800765a:	9304      	str	r3, [sp, #16]
 800765c:	46a2      	mov	sl, r4
 800765e:	e7d2      	b.n	8007606 <_vfiprintf_r+0xc6>
 8007660:	9b03      	ldr	r3, [sp, #12]
 8007662:	1d19      	adds	r1, r3, #4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	9103      	str	r1, [sp, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	bfbb      	ittet	lt
 800766c:	425b      	neglt	r3, r3
 800766e:	f042 0202 	orrlt.w	r2, r2, #2
 8007672:	9307      	strge	r3, [sp, #28]
 8007674:	9307      	strlt	r3, [sp, #28]
 8007676:	bfb8      	it	lt
 8007678:	9204      	strlt	r2, [sp, #16]
 800767a:	7823      	ldrb	r3, [r4, #0]
 800767c:	2b2e      	cmp	r3, #46	; 0x2e
 800767e:	d10c      	bne.n	800769a <_vfiprintf_r+0x15a>
 8007680:	7863      	ldrb	r3, [r4, #1]
 8007682:	2b2a      	cmp	r3, #42	; 0x2a
 8007684:	d134      	bne.n	80076f0 <_vfiprintf_r+0x1b0>
 8007686:	9b03      	ldr	r3, [sp, #12]
 8007688:	1d1a      	adds	r2, r3, #4
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	9203      	str	r2, [sp, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	bfb8      	it	lt
 8007692:	f04f 33ff 	movlt.w	r3, #4294967295
 8007696:	3402      	adds	r4, #2
 8007698:	9305      	str	r3, [sp, #20]
 800769a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007770 <_vfiprintf_r+0x230>
 800769e:	7821      	ldrb	r1, [r4, #0]
 80076a0:	2203      	movs	r2, #3
 80076a2:	4650      	mov	r0, sl
 80076a4:	f7f8 fd9c 	bl	80001e0 <memchr>
 80076a8:	b138      	cbz	r0, 80076ba <_vfiprintf_r+0x17a>
 80076aa:	9b04      	ldr	r3, [sp, #16]
 80076ac:	eba0 000a 	sub.w	r0, r0, sl
 80076b0:	2240      	movs	r2, #64	; 0x40
 80076b2:	4082      	lsls	r2, r0
 80076b4:	4313      	orrs	r3, r2
 80076b6:	3401      	adds	r4, #1
 80076b8:	9304      	str	r3, [sp, #16]
 80076ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076be:	4829      	ldr	r0, [pc, #164]	; (8007764 <_vfiprintf_r+0x224>)
 80076c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076c4:	2206      	movs	r2, #6
 80076c6:	f7f8 fd8b 	bl	80001e0 <memchr>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d03f      	beq.n	800774e <_vfiprintf_r+0x20e>
 80076ce:	4b26      	ldr	r3, [pc, #152]	; (8007768 <_vfiprintf_r+0x228>)
 80076d0:	bb1b      	cbnz	r3, 800771a <_vfiprintf_r+0x1da>
 80076d2:	9b03      	ldr	r3, [sp, #12]
 80076d4:	3307      	adds	r3, #7
 80076d6:	f023 0307 	bic.w	r3, r3, #7
 80076da:	3308      	adds	r3, #8
 80076dc:	9303      	str	r3, [sp, #12]
 80076de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e0:	443b      	add	r3, r7
 80076e2:	9309      	str	r3, [sp, #36]	; 0x24
 80076e4:	e768      	b.n	80075b8 <_vfiprintf_r+0x78>
 80076e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ea:	460c      	mov	r4, r1
 80076ec:	2001      	movs	r0, #1
 80076ee:	e7a6      	b.n	800763e <_vfiprintf_r+0xfe>
 80076f0:	2300      	movs	r3, #0
 80076f2:	3401      	adds	r4, #1
 80076f4:	9305      	str	r3, [sp, #20]
 80076f6:	4619      	mov	r1, r3
 80076f8:	f04f 0c0a 	mov.w	ip, #10
 80076fc:	4620      	mov	r0, r4
 80076fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007702:	3a30      	subs	r2, #48	; 0x30
 8007704:	2a09      	cmp	r2, #9
 8007706:	d903      	bls.n	8007710 <_vfiprintf_r+0x1d0>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0c6      	beq.n	800769a <_vfiprintf_r+0x15a>
 800770c:	9105      	str	r1, [sp, #20]
 800770e:	e7c4      	b.n	800769a <_vfiprintf_r+0x15a>
 8007710:	fb0c 2101 	mla	r1, ip, r1, r2
 8007714:	4604      	mov	r4, r0
 8007716:	2301      	movs	r3, #1
 8007718:	e7f0      	b.n	80076fc <_vfiprintf_r+0x1bc>
 800771a:	ab03      	add	r3, sp, #12
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	462a      	mov	r2, r5
 8007720:	4b12      	ldr	r3, [pc, #72]	; (800776c <_vfiprintf_r+0x22c>)
 8007722:	a904      	add	r1, sp, #16
 8007724:	4630      	mov	r0, r6
 8007726:	f7fd fe8d 	bl	8005444 <_printf_float>
 800772a:	4607      	mov	r7, r0
 800772c:	1c78      	adds	r0, r7, #1
 800772e:	d1d6      	bne.n	80076de <_vfiprintf_r+0x19e>
 8007730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007732:	07d9      	lsls	r1, r3, #31
 8007734:	d405      	bmi.n	8007742 <_vfiprintf_r+0x202>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	059a      	lsls	r2, r3, #22
 800773a:	d402      	bmi.n	8007742 <_vfiprintf_r+0x202>
 800773c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800773e:	f7fe fbdd 	bl	8005efc <__retarget_lock_release_recursive>
 8007742:	89ab      	ldrh	r3, [r5, #12]
 8007744:	065b      	lsls	r3, r3, #25
 8007746:	f53f af1d 	bmi.w	8007584 <_vfiprintf_r+0x44>
 800774a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800774c:	e71c      	b.n	8007588 <_vfiprintf_r+0x48>
 800774e:	ab03      	add	r3, sp, #12
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	462a      	mov	r2, r5
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <_vfiprintf_r+0x22c>)
 8007756:	a904      	add	r1, sp, #16
 8007758:	4630      	mov	r0, r6
 800775a:	f7fe f917 	bl	800598c <_printf_i>
 800775e:	e7e4      	b.n	800772a <_vfiprintf_r+0x1ea>
 8007760:	080090a4 	.word	0x080090a4
 8007764:	080090ae 	.word	0x080090ae
 8007768:	08005445 	.word	0x08005445
 800776c:	0800751b 	.word	0x0800751b
 8007770:	080090aa 	.word	0x080090aa

08007774 <__sflush_r>:
 8007774:	898a      	ldrh	r2, [r1, #12]
 8007776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777a:	4605      	mov	r5, r0
 800777c:	0710      	lsls	r0, r2, #28
 800777e:	460c      	mov	r4, r1
 8007780:	d458      	bmi.n	8007834 <__sflush_r+0xc0>
 8007782:	684b      	ldr	r3, [r1, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	dc05      	bgt.n	8007794 <__sflush_r+0x20>
 8007788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	dc02      	bgt.n	8007794 <__sflush_r+0x20>
 800778e:	2000      	movs	r0, #0
 8007790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007796:	2e00      	cmp	r6, #0
 8007798:	d0f9      	beq.n	800778e <__sflush_r+0x1a>
 800779a:	2300      	movs	r3, #0
 800779c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077a0:	682f      	ldr	r7, [r5, #0]
 80077a2:	6a21      	ldr	r1, [r4, #32]
 80077a4:	602b      	str	r3, [r5, #0]
 80077a6:	d032      	beq.n	800780e <__sflush_r+0x9a>
 80077a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	075a      	lsls	r2, r3, #29
 80077ae:	d505      	bpl.n	80077bc <__sflush_r+0x48>
 80077b0:	6863      	ldr	r3, [r4, #4]
 80077b2:	1ac0      	subs	r0, r0, r3
 80077b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077b6:	b10b      	cbz	r3, 80077bc <__sflush_r+0x48>
 80077b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077ba:	1ac0      	subs	r0, r0, r3
 80077bc:	2300      	movs	r3, #0
 80077be:	4602      	mov	r2, r0
 80077c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077c2:	6a21      	ldr	r1, [r4, #32]
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b0      	blx	r6
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	d106      	bne.n	80077dc <__sflush_r+0x68>
 80077ce:	6829      	ldr	r1, [r5, #0]
 80077d0:	291d      	cmp	r1, #29
 80077d2:	d82b      	bhi.n	800782c <__sflush_r+0xb8>
 80077d4:	4a29      	ldr	r2, [pc, #164]	; (800787c <__sflush_r+0x108>)
 80077d6:	410a      	asrs	r2, r1
 80077d8:	07d6      	lsls	r6, r2, #31
 80077da:	d427      	bmi.n	800782c <__sflush_r+0xb8>
 80077dc:	2200      	movs	r2, #0
 80077de:	6062      	str	r2, [r4, #4]
 80077e0:	04d9      	lsls	r1, r3, #19
 80077e2:	6922      	ldr	r2, [r4, #16]
 80077e4:	6022      	str	r2, [r4, #0]
 80077e6:	d504      	bpl.n	80077f2 <__sflush_r+0x7e>
 80077e8:	1c42      	adds	r2, r0, #1
 80077ea:	d101      	bne.n	80077f0 <__sflush_r+0x7c>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b903      	cbnz	r3, 80077f2 <__sflush_r+0x7e>
 80077f0:	6560      	str	r0, [r4, #84]	; 0x54
 80077f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077f4:	602f      	str	r7, [r5, #0]
 80077f6:	2900      	cmp	r1, #0
 80077f8:	d0c9      	beq.n	800778e <__sflush_r+0x1a>
 80077fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077fe:	4299      	cmp	r1, r3
 8007800:	d002      	beq.n	8007808 <__sflush_r+0x94>
 8007802:	4628      	mov	r0, r5
 8007804:	f7ff f9f6 	bl	8006bf4 <_free_r>
 8007808:	2000      	movs	r0, #0
 800780a:	6360      	str	r0, [r4, #52]	; 0x34
 800780c:	e7c0      	b.n	8007790 <__sflush_r+0x1c>
 800780e:	2301      	movs	r3, #1
 8007810:	4628      	mov	r0, r5
 8007812:	47b0      	blx	r6
 8007814:	1c41      	adds	r1, r0, #1
 8007816:	d1c8      	bne.n	80077aa <__sflush_r+0x36>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0c5      	beq.n	80077aa <__sflush_r+0x36>
 800781e:	2b1d      	cmp	r3, #29
 8007820:	d001      	beq.n	8007826 <__sflush_r+0xb2>
 8007822:	2b16      	cmp	r3, #22
 8007824:	d101      	bne.n	800782a <__sflush_r+0xb6>
 8007826:	602f      	str	r7, [r5, #0]
 8007828:	e7b1      	b.n	800778e <__sflush_r+0x1a>
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	e7ad      	b.n	8007790 <__sflush_r+0x1c>
 8007834:	690f      	ldr	r7, [r1, #16]
 8007836:	2f00      	cmp	r7, #0
 8007838:	d0a9      	beq.n	800778e <__sflush_r+0x1a>
 800783a:	0793      	lsls	r3, r2, #30
 800783c:	680e      	ldr	r6, [r1, #0]
 800783e:	bf08      	it	eq
 8007840:	694b      	ldreq	r3, [r1, #20]
 8007842:	600f      	str	r7, [r1, #0]
 8007844:	bf18      	it	ne
 8007846:	2300      	movne	r3, #0
 8007848:	eba6 0807 	sub.w	r8, r6, r7
 800784c:	608b      	str	r3, [r1, #8]
 800784e:	f1b8 0f00 	cmp.w	r8, #0
 8007852:	dd9c      	ble.n	800778e <__sflush_r+0x1a>
 8007854:	6a21      	ldr	r1, [r4, #32]
 8007856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007858:	4643      	mov	r3, r8
 800785a:	463a      	mov	r2, r7
 800785c:	4628      	mov	r0, r5
 800785e:	47b0      	blx	r6
 8007860:	2800      	cmp	r0, #0
 8007862:	dc06      	bgt.n	8007872 <__sflush_r+0xfe>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	e78e      	b.n	8007790 <__sflush_r+0x1c>
 8007872:	4407      	add	r7, r0
 8007874:	eba8 0800 	sub.w	r8, r8, r0
 8007878:	e7e9      	b.n	800784e <__sflush_r+0xda>
 800787a:	bf00      	nop
 800787c:	dfbffffe 	.word	0xdfbffffe

08007880 <_fflush_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	690b      	ldr	r3, [r1, #16]
 8007884:	4605      	mov	r5, r0
 8007886:	460c      	mov	r4, r1
 8007888:	b913      	cbnz	r3, 8007890 <_fflush_r+0x10>
 800788a:	2500      	movs	r5, #0
 800788c:	4628      	mov	r0, r5
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	b118      	cbz	r0, 800789a <_fflush_r+0x1a>
 8007892:	6a03      	ldr	r3, [r0, #32]
 8007894:	b90b      	cbnz	r3, 800789a <_fflush_r+0x1a>
 8007896:	f7fe fa27 	bl	8005ce8 <__sinit>
 800789a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0f3      	beq.n	800788a <_fflush_r+0xa>
 80078a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078a4:	07d0      	lsls	r0, r2, #31
 80078a6:	d404      	bmi.n	80078b2 <_fflush_r+0x32>
 80078a8:	0599      	lsls	r1, r3, #22
 80078aa:	d402      	bmi.n	80078b2 <_fflush_r+0x32>
 80078ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ae:	f7fe fb24 	bl	8005efa <__retarget_lock_acquire_recursive>
 80078b2:	4628      	mov	r0, r5
 80078b4:	4621      	mov	r1, r4
 80078b6:	f7ff ff5d 	bl	8007774 <__sflush_r>
 80078ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078bc:	07da      	lsls	r2, r3, #31
 80078be:	4605      	mov	r5, r0
 80078c0:	d4e4      	bmi.n	800788c <_fflush_r+0xc>
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	059b      	lsls	r3, r3, #22
 80078c6:	d4e1      	bmi.n	800788c <_fflush_r+0xc>
 80078c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ca:	f7fe fb17 	bl	8005efc <__retarget_lock_release_recursive>
 80078ce:	e7dd      	b.n	800788c <_fflush_r+0xc>

080078d0 <__swbuf_r>:
 80078d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d2:	460e      	mov	r6, r1
 80078d4:	4614      	mov	r4, r2
 80078d6:	4605      	mov	r5, r0
 80078d8:	b118      	cbz	r0, 80078e2 <__swbuf_r+0x12>
 80078da:	6a03      	ldr	r3, [r0, #32]
 80078dc:	b90b      	cbnz	r3, 80078e2 <__swbuf_r+0x12>
 80078de:	f7fe fa03 	bl	8005ce8 <__sinit>
 80078e2:	69a3      	ldr	r3, [r4, #24]
 80078e4:	60a3      	str	r3, [r4, #8]
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	071a      	lsls	r2, r3, #28
 80078ea:	d525      	bpl.n	8007938 <__swbuf_r+0x68>
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	b31b      	cbz	r3, 8007938 <__swbuf_r+0x68>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	6922      	ldr	r2, [r4, #16]
 80078f4:	1a98      	subs	r0, r3, r2
 80078f6:	6963      	ldr	r3, [r4, #20]
 80078f8:	b2f6      	uxtb	r6, r6
 80078fa:	4283      	cmp	r3, r0
 80078fc:	4637      	mov	r7, r6
 80078fe:	dc04      	bgt.n	800790a <__swbuf_r+0x3a>
 8007900:	4621      	mov	r1, r4
 8007902:	4628      	mov	r0, r5
 8007904:	f7ff ffbc 	bl	8007880 <_fflush_r>
 8007908:	b9e0      	cbnz	r0, 8007944 <__swbuf_r+0x74>
 800790a:	68a3      	ldr	r3, [r4, #8]
 800790c:	3b01      	subs	r3, #1
 800790e:	60a3      	str	r3, [r4, #8]
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	6022      	str	r2, [r4, #0]
 8007916:	701e      	strb	r6, [r3, #0]
 8007918:	6962      	ldr	r2, [r4, #20]
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	429a      	cmp	r2, r3
 800791e:	d004      	beq.n	800792a <__swbuf_r+0x5a>
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	07db      	lsls	r3, r3, #31
 8007924:	d506      	bpl.n	8007934 <__swbuf_r+0x64>
 8007926:	2e0a      	cmp	r6, #10
 8007928:	d104      	bne.n	8007934 <__swbuf_r+0x64>
 800792a:	4621      	mov	r1, r4
 800792c:	4628      	mov	r0, r5
 800792e:	f7ff ffa7 	bl	8007880 <_fflush_r>
 8007932:	b938      	cbnz	r0, 8007944 <__swbuf_r+0x74>
 8007934:	4638      	mov	r0, r7
 8007936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007938:	4621      	mov	r1, r4
 800793a:	4628      	mov	r0, r5
 800793c:	f000 f806 	bl	800794c <__swsetup_r>
 8007940:	2800      	cmp	r0, #0
 8007942:	d0d5      	beq.n	80078f0 <__swbuf_r+0x20>
 8007944:	f04f 37ff 	mov.w	r7, #4294967295
 8007948:	e7f4      	b.n	8007934 <__swbuf_r+0x64>
	...

0800794c <__swsetup_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4b2a      	ldr	r3, [pc, #168]	; (80079f8 <__swsetup_r+0xac>)
 8007950:	4605      	mov	r5, r0
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	460c      	mov	r4, r1
 8007956:	b118      	cbz	r0, 8007960 <__swsetup_r+0x14>
 8007958:	6a03      	ldr	r3, [r0, #32]
 800795a:	b90b      	cbnz	r3, 8007960 <__swsetup_r+0x14>
 800795c:	f7fe f9c4 	bl	8005ce8 <__sinit>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007966:	0718      	lsls	r0, r3, #28
 8007968:	d422      	bmi.n	80079b0 <__swsetup_r+0x64>
 800796a:	06d9      	lsls	r1, r3, #27
 800796c:	d407      	bmi.n	800797e <__swsetup_r+0x32>
 800796e:	2309      	movs	r3, #9
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	f04f 30ff 	mov.w	r0, #4294967295
 800797c:	e034      	b.n	80079e8 <__swsetup_r+0x9c>
 800797e:	0758      	lsls	r0, r3, #29
 8007980:	d512      	bpl.n	80079a8 <__swsetup_r+0x5c>
 8007982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007984:	b141      	cbz	r1, 8007998 <__swsetup_r+0x4c>
 8007986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800798a:	4299      	cmp	r1, r3
 800798c:	d002      	beq.n	8007994 <__swsetup_r+0x48>
 800798e:	4628      	mov	r0, r5
 8007990:	f7ff f930 	bl	8006bf4 <_free_r>
 8007994:	2300      	movs	r3, #0
 8007996:	6363      	str	r3, [r4, #52]	; 0x34
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800799e:	81a3      	strh	r3, [r4, #12]
 80079a0:	2300      	movs	r3, #0
 80079a2:	6063      	str	r3, [r4, #4]
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	6023      	str	r3, [r4, #0]
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	f043 0308 	orr.w	r3, r3, #8
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	b94b      	cbnz	r3, 80079c8 <__swsetup_r+0x7c>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079be:	d003      	beq.n	80079c8 <__swsetup_r+0x7c>
 80079c0:	4621      	mov	r1, r4
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 f8c4 	bl	8007b50 <__smakebuf_r>
 80079c8:	89a0      	ldrh	r0, [r4, #12]
 80079ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079ce:	f010 0301 	ands.w	r3, r0, #1
 80079d2:	d00a      	beq.n	80079ea <__swsetup_r+0x9e>
 80079d4:	2300      	movs	r3, #0
 80079d6:	60a3      	str	r3, [r4, #8]
 80079d8:	6963      	ldr	r3, [r4, #20]
 80079da:	425b      	negs	r3, r3
 80079dc:	61a3      	str	r3, [r4, #24]
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	b943      	cbnz	r3, 80079f4 <__swsetup_r+0xa8>
 80079e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079e6:	d1c4      	bne.n	8007972 <__swsetup_r+0x26>
 80079e8:	bd38      	pop	{r3, r4, r5, pc}
 80079ea:	0781      	lsls	r1, r0, #30
 80079ec:	bf58      	it	pl
 80079ee:	6963      	ldrpl	r3, [r4, #20]
 80079f0:	60a3      	str	r3, [r4, #8]
 80079f2:	e7f4      	b.n	80079de <__swsetup_r+0x92>
 80079f4:	2000      	movs	r0, #0
 80079f6:	e7f7      	b.n	80079e8 <__swsetup_r+0x9c>
 80079f8:	2000006c 	.word	0x2000006c

080079fc <_sbrk_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4d06      	ldr	r5, [pc, #24]	; (8007a18 <_sbrk_r+0x1c>)
 8007a00:	2300      	movs	r3, #0
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	f7fb f8f0 	bl	8002bec <_sbrk>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_sbrk_r+0x1a>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_sbrk_r+0x1a>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	20000654 	.word	0x20000654

08007a1c <memcpy>:
 8007a1c:	440a      	add	r2, r1
 8007a1e:	4291      	cmp	r1, r2
 8007a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a24:	d100      	bne.n	8007a28 <memcpy+0xc>
 8007a26:	4770      	bx	lr
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a32:	4291      	cmp	r1, r2
 8007a34:	d1f9      	bne.n	8007a2a <memcpy+0xe>
 8007a36:	bd10      	pop	{r4, pc}

08007a38 <__assert_func>:
 8007a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a3a:	4614      	mov	r4, r2
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <__assert_func+0x2c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4605      	mov	r5, r0
 8007a44:	68d8      	ldr	r0, [r3, #12]
 8007a46:	b14c      	cbz	r4, 8007a5c <__assert_func+0x24>
 8007a48:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <__assert_func+0x30>)
 8007a4a:	9100      	str	r1, [sp, #0]
 8007a4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a50:	4906      	ldr	r1, [pc, #24]	; (8007a6c <__assert_func+0x34>)
 8007a52:	462b      	mov	r3, r5
 8007a54:	f000 f844 	bl	8007ae0 <fiprintf>
 8007a58:	f000 f8d8 	bl	8007c0c <abort>
 8007a5c:	4b04      	ldr	r3, [pc, #16]	; (8007a70 <__assert_func+0x38>)
 8007a5e:	461c      	mov	r4, r3
 8007a60:	e7f3      	b.n	8007a4a <__assert_func+0x12>
 8007a62:	bf00      	nop
 8007a64:	2000006c 	.word	0x2000006c
 8007a68:	080090bf 	.word	0x080090bf
 8007a6c:	080090cc 	.word	0x080090cc
 8007a70:	080090fa 	.word	0x080090fa

08007a74 <_calloc_r>:
 8007a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a76:	fba1 2402 	umull	r2, r4, r1, r2
 8007a7a:	b94c      	cbnz	r4, 8007a90 <_calloc_r+0x1c>
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	9201      	str	r2, [sp, #4]
 8007a80:	f7ff f92c 	bl	8006cdc <_malloc_r>
 8007a84:	9a01      	ldr	r2, [sp, #4]
 8007a86:	4605      	mov	r5, r0
 8007a88:	b930      	cbnz	r0, 8007a98 <_calloc_r+0x24>
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	b003      	add	sp, #12
 8007a8e:	bd30      	pop	{r4, r5, pc}
 8007a90:	220c      	movs	r2, #12
 8007a92:	6002      	str	r2, [r0, #0]
 8007a94:	2500      	movs	r5, #0
 8007a96:	e7f8      	b.n	8007a8a <_calloc_r+0x16>
 8007a98:	4621      	mov	r1, r4
 8007a9a:	f7fe f9b0 	bl	8005dfe <memset>
 8007a9e:	e7f4      	b.n	8007a8a <_calloc_r+0x16>

08007aa0 <__ascii_mbtowc>:
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	b901      	cbnz	r1, 8007aa6 <__ascii_mbtowc+0x6>
 8007aa4:	a901      	add	r1, sp, #4
 8007aa6:	b142      	cbz	r2, 8007aba <__ascii_mbtowc+0x1a>
 8007aa8:	b14b      	cbz	r3, 8007abe <__ascii_mbtowc+0x1e>
 8007aaa:	7813      	ldrb	r3, [r2, #0]
 8007aac:	600b      	str	r3, [r1, #0]
 8007aae:	7812      	ldrb	r2, [r2, #0]
 8007ab0:	1e10      	subs	r0, r2, #0
 8007ab2:	bf18      	it	ne
 8007ab4:	2001      	movne	r0, #1
 8007ab6:	b002      	add	sp, #8
 8007ab8:	4770      	bx	lr
 8007aba:	4610      	mov	r0, r2
 8007abc:	e7fb      	b.n	8007ab6 <__ascii_mbtowc+0x16>
 8007abe:	f06f 0001 	mvn.w	r0, #1
 8007ac2:	e7f8      	b.n	8007ab6 <__ascii_mbtowc+0x16>

08007ac4 <__ascii_wctomb>:
 8007ac4:	b149      	cbz	r1, 8007ada <__ascii_wctomb+0x16>
 8007ac6:	2aff      	cmp	r2, #255	; 0xff
 8007ac8:	bf85      	ittet	hi
 8007aca:	238a      	movhi	r3, #138	; 0x8a
 8007acc:	6003      	strhi	r3, [r0, #0]
 8007ace:	700a      	strbls	r2, [r1, #0]
 8007ad0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ad4:	bf98      	it	ls
 8007ad6:	2001      	movls	r0, #1
 8007ad8:	4770      	bx	lr
 8007ada:	4608      	mov	r0, r1
 8007adc:	4770      	bx	lr
	...

08007ae0 <fiprintf>:
 8007ae0:	b40e      	push	{r1, r2, r3}
 8007ae2:	b503      	push	{r0, r1, lr}
 8007ae4:	4601      	mov	r1, r0
 8007ae6:	ab03      	add	r3, sp, #12
 8007ae8:	4805      	ldr	r0, [pc, #20]	; (8007b00 <fiprintf+0x20>)
 8007aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aee:	6800      	ldr	r0, [r0, #0]
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	f7ff fd25 	bl	8007540 <_vfiprintf_r>
 8007af6:	b002      	add	sp, #8
 8007af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007afc:	b003      	add	sp, #12
 8007afe:	4770      	bx	lr
 8007b00:	2000006c 	.word	0x2000006c

08007b04 <__swhatbuf_r>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	460c      	mov	r4, r1
 8007b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0c:	2900      	cmp	r1, #0
 8007b0e:	b096      	sub	sp, #88	; 0x58
 8007b10:	4615      	mov	r5, r2
 8007b12:	461e      	mov	r6, r3
 8007b14:	da0d      	bge.n	8007b32 <__swhatbuf_r+0x2e>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b1c:	f04f 0100 	mov.w	r1, #0
 8007b20:	bf0c      	ite	eq
 8007b22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b26:	2340      	movne	r3, #64	; 0x40
 8007b28:	2000      	movs	r0, #0
 8007b2a:	6031      	str	r1, [r6, #0]
 8007b2c:	602b      	str	r3, [r5, #0]
 8007b2e:	b016      	add	sp, #88	; 0x58
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	466a      	mov	r2, sp
 8007b34:	f000 f848 	bl	8007bc8 <_fstat_r>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	dbec      	blt.n	8007b16 <__swhatbuf_r+0x12>
 8007b3c:	9901      	ldr	r1, [sp, #4]
 8007b3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b46:	4259      	negs	r1, r3
 8007b48:	4159      	adcs	r1, r3
 8007b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b4e:	e7eb      	b.n	8007b28 <__swhatbuf_r+0x24>

08007b50 <__smakebuf_r>:
 8007b50:	898b      	ldrh	r3, [r1, #12]
 8007b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b54:	079d      	lsls	r5, r3, #30
 8007b56:	4606      	mov	r6, r0
 8007b58:	460c      	mov	r4, r1
 8007b5a:	d507      	bpl.n	8007b6c <__smakebuf_r+0x1c>
 8007b5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	6123      	str	r3, [r4, #16]
 8007b64:	2301      	movs	r3, #1
 8007b66:	6163      	str	r3, [r4, #20]
 8007b68:	b002      	add	sp, #8
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	ab01      	add	r3, sp, #4
 8007b6e:	466a      	mov	r2, sp
 8007b70:	f7ff ffc8 	bl	8007b04 <__swhatbuf_r>
 8007b74:	9900      	ldr	r1, [sp, #0]
 8007b76:	4605      	mov	r5, r0
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f7ff f8af 	bl	8006cdc <_malloc_r>
 8007b7e:	b948      	cbnz	r0, 8007b94 <__smakebuf_r+0x44>
 8007b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b84:	059a      	lsls	r2, r3, #22
 8007b86:	d4ef      	bmi.n	8007b68 <__smakebuf_r+0x18>
 8007b88:	f023 0303 	bic.w	r3, r3, #3
 8007b8c:	f043 0302 	orr.w	r3, r3, #2
 8007b90:	81a3      	strh	r3, [r4, #12]
 8007b92:	e7e3      	b.n	8007b5c <__smakebuf_r+0xc>
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	6020      	str	r0, [r4, #0]
 8007b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	9b00      	ldr	r3, [sp, #0]
 8007ba0:	6163      	str	r3, [r4, #20]
 8007ba2:	9b01      	ldr	r3, [sp, #4]
 8007ba4:	6120      	str	r0, [r4, #16]
 8007ba6:	b15b      	cbz	r3, 8007bc0 <__smakebuf_r+0x70>
 8007ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bac:	4630      	mov	r0, r6
 8007bae:	f000 f81d 	bl	8007bec <_isatty_r>
 8007bb2:	b128      	cbz	r0, 8007bc0 <__smakebuf_r+0x70>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	f023 0303 	bic.w	r3, r3, #3
 8007bba:	f043 0301 	orr.w	r3, r3, #1
 8007bbe:	81a3      	strh	r3, [r4, #12]
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	431d      	orrs	r5, r3
 8007bc4:	81a5      	strh	r5, [r4, #12]
 8007bc6:	e7cf      	b.n	8007b68 <__smakebuf_r+0x18>

08007bc8 <_fstat_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d07      	ldr	r5, [pc, #28]	; (8007be8 <_fstat_r+0x20>)
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	602b      	str	r3, [r5, #0]
 8007bd6:	f7fa ffe0 	bl	8002b9a <_fstat>
 8007bda:	1c43      	adds	r3, r0, #1
 8007bdc:	d102      	bne.n	8007be4 <_fstat_r+0x1c>
 8007bde:	682b      	ldr	r3, [r5, #0]
 8007be0:	b103      	cbz	r3, 8007be4 <_fstat_r+0x1c>
 8007be2:	6023      	str	r3, [r4, #0]
 8007be4:	bd38      	pop	{r3, r4, r5, pc}
 8007be6:	bf00      	nop
 8007be8:	20000654 	.word	0x20000654

08007bec <_isatty_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d06      	ldr	r5, [pc, #24]	; (8007c08 <_isatty_r+0x1c>)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	602b      	str	r3, [r5, #0]
 8007bf8:	f7fa ffdf 	bl	8002bba <_isatty>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d102      	bne.n	8007c06 <_isatty_r+0x1a>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	b103      	cbz	r3, 8007c06 <_isatty_r+0x1a>
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	20000654 	.word	0x20000654

08007c0c <abort>:
 8007c0c:	b508      	push	{r3, lr}
 8007c0e:	2006      	movs	r0, #6
 8007c10:	f000 f82c 	bl	8007c6c <raise>
 8007c14:	2001      	movs	r0, #1
 8007c16:	f7fa ff71 	bl	8002afc <_exit>

08007c1a <_raise_r>:
 8007c1a:	291f      	cmp	r1, #31
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4604      	mov	r4, r0
 8007c20:	460d      	mov	r5, r1
 8007c22:	d904      	bls.n	8007c2e <_raise_r+0x14>
 8007c24:	2316      	movs	r3, #22
 8007c26:	6003      	str	r3, [r0, #0]
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	bd38      	pop	{r3, r4, r5, pc}
 8007c2e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007c30:	b112      	cbz	r2, 8007c38 <_raise_r+0x1e>
 8007c32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c36:	b94b      	cbnz	r3, 8007c4c <_raise_r+0x32>
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 f831 	bl	8007ca0 <_getpid_r>
 8007c3e:	462a      	mov	r2, r5
 8007c40:	4601      	mov	r1, r0
 8007c42:	4620      	mov	r0, r4
 8007c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c48:	f000 b818 	b.w	8007c7c <_kill_r>
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d00a      	beq.n	8007c66 <_raise_r+0x4c>
 8007c50:	1c59      	adds	r1, r3, #1
 8007c52:	d103      	bne.n	8007c5c <_raise_r+0x42>
 8007c54:	2316      	movs	r3, #22
 8007c56:	6003      	str	r3, [r0, #0]
 8007c58:	2001      	movs	r0, #1
 8007c5a:	e7e7      	b.n	8007c2c <_raise_r+0x12>
 8007c5c:	2400      	movs	r4, #0
 8007c5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c62:	4628      	mov	r0, r5
 8007c64:	4798      	blx	r3
 8007c66:	2000      	movs	r0, #0
 8007c68:	e7e0      	b.n	8007c2c <_raise_r+0x12>
	...

08007c6c <raise>:
 8007c6c:	4b02      	ldr	r3, [pc, #8]	; (8007c78 <raise+0xc>)
 8007c6e:	4601      	mov	r1, r0
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	f7ff bfd2 	b.w	8007c1a <_raise_r>
 8007c76:	bf00      	nop
 8007c78:	2000006c 	.word	0x2000006c

08007c7c <_kill_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d07      	ldr	r5, [pc, #28]	; (8007c9c <_kill_r+0x20>)
 8007c80:	2300      	movs	r3, #0
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	4611      	mov	r1, r2
 8007c88:	602b      	str	r3, [r5, #0]
 8007c8a:	f7fa ff27 	bl	8002adc <_kill>
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	d102      	bne.n	8007c98 <_kill_r+0x1c>
 8007c92:	682b      	ldr	r3, [r5, #0]
 8007c94:	b103      	cbz	r3, 8007c98 <_kill_r+0x1c>
 8007c96:	6023      	str	r3, [r4, #0]
 8007c98:	bd38      	pop	{r3, r4, r5, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000654 	.word	0x20000654

08007ca0 <_getpid_r>:
 8007ca0:	f7fa bf14 	b.w	8002acc <_getpid>
 8007ca4:	0000      	movs	r0, r0
	...

08007ca8 <cos>:
 8007ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007caa:	ec53 2b10 	vmov	r2, r3, d0
 8007cae:	4826      	ldr	r0, [pc, #152]	; (8007d48 <cos+0xa0>)
 8007cb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007cb4:	4281      	cmp	r1, r0
 8007cb6:	dc06      	bgt.n	8007cc6 <cos+0x1e>
 8007cb8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007d40 <cos+0x98>
 8007cbc:	b005      	add	sp, #20
 8007cbe:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cc2:	f000 b89d 	b.w	8007e00 <__kernel_cos>
 8007cc6:	4821      	ldr	r0, [pc, #132]	; (8007d4c <cos+0xa4>)
 8007cc8:	4281      	cmp	r1, r0
 8007cca:	dd09      	ble.n	8007ce0 <cos+0x38>
 8007ccc:	ee10 0a10 	vmov	r0, s0
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	f7f8 fae1 	bl	8000298 <__aeabi_dsub>
 8007cd6:	ec41 0b10 	vmov	d0, r0, r1
 8007cda:	b005      	add	sp, #20
 8007cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ce0:	4668      	mov	r0, sp
 8007ce2:	f000 fa15 	bl	8008110 <__ieee754_rem_pio2>
 8007ce6:	f000 0003 	and.w	r0, r0, #3
 8007cea:	2801      	cmp	r0, #1
 8007cec:	d00b      	beq.n	8007d06 <cos+0x5e>
 8007cee:	2802      	cmp	r0, #2
 8007cf0:	d016      	beq.n	8007d20 <cos+0x78>
 8007cf2:	b9e0      	cbnz	r0, 8007d2e <cos+0x86>
 8007cf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cf8:	ed9d 0b00 	vldr	d0, [sp]
 8007cfc:	f000 f880 	bl	8007e00 <__kernel_cos>
 8007d00:	ec51 0b10 	vmov	r0, r1, d0
 8007d04:	e7e7      	b.n	8007cd6 <cos+0x2e>
 8007d06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d0a:	ed9d 0b00 	vldr	d0, [sp]
 8007d0e:	f000 f93f 	bl	8007f90 <__kernel_sin>
 8007d12:	ec53 2b10 	vmov	r2, r3, d0
 8007d16:	ee10 0a10 	vmov	r0, s0
 8007d1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007d1e:	e7da      	b.n	8007cd6 <cos+0x2e>
 8007d20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d24:	ed9d 0b00 	vldr	d0, [sp]
 8007d28:	f000 f86a 	bl	8007e00 <__kernel_cos>
 8007d2c:	e7f1      	b.n	8007d12 <cos+0x6a>
 8007d2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d32:	ed9d 0b00 	vldr	d0, [sp]
 8007d36:	2001      	movs	r0, #1
 8007d38:	f000 f92a 	bl	8007f90 <__kernel_sin>
 8007d3c:	e7e0      	b.n	8007d00 <cos+0x58>
 8007d3e:	bf00      	nop
	...
 8007d48:	3fe921fb 	.word	0x3fe921fb
 8007d4c:	7fefffff 	.word	0x7fefffff

08007d50 <sin>:
 8007d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d52:	ec53 2b10 	vmov	r2, r3, d0
 8007d56:	4828      	ldr	r0, [pc, #160]	; (8007df8 <sin+0xa8>)
 8007d58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d5c:	4281      	cmp	r1, r0
 8007d5e:	dc07      	bgt.n	8007d70 <sin+0x20>
 8007d60:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007df0 <sin+0xa0>
 8007d64:	2000      	movs	r0, #0
 8007d66:	b005      	add	sp, #20
 8007d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d6c:	f000 b910 	b.w	8007f90 <__kernel_sin>
 8007d70:	4822      	ldr	r0, [pc, #136]	; (8007dfc <sin+0xac>)
 8007d72:	4281      	cmp	r1, r0
 8007d74:	dd09      	ble.n	8007d8a <sin+0x3a>
 8007d76:	ee10 0a10 	vmov	r0, s0
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	f7f8 fa8c 	bl	8000298 <__aeabi_dsub>
 8007d80:	ec41 0b10 	vmov	d0, r0, r1
 8007d84:	b005      	add	sp, #20
 8007d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d8a:	4668      	mov	r0, sp
 8007d8c:	f000 f9c0 	bl	8008110 <__ieee754_rem_pio2>
 8007d90:	f000 0003 	and.w	r0, r0, #3
 8007d94:	2801      	cmp	r0, #1
 8007d96:	d00c      	beq.n	8007db2 <sin+0x62>
 8007d98:	2802      	cmp	r0, #2
 8007d9a:	d011      	beq.n	8007dc0 <sin+0x70>
 8007d9c:	b9f0      	cbnz	r0, 8007ddc <sin+0x8c>
 8007d9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007da2:	ed9d 0b00 	vldr	d0, [sp]
 8007da6:	2001      	movs	r0, #1
 8007da8:	f000 f8f2 	bl	8007f90 <__kernel_sin>
 8007dac:	ec51 0b10 	vmov	r0, r1, d0
 8007db0:	e7e6      	b.n	8007d80 <sin+0x30>
 8007db2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007db6:	ed9d 0b00 	vldr	d0, [sp]
 8007dba:	f000 f821 	bl	8007e00 <__kernel_cos>
 8007dbe:	e7f5      	b.n	8007dac <sin+0x5c>
 8007dc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007dc4:	ed9d 0b00 	vldr	d0, [sp]
 8007dc8:	2001      	movs	r0, #1
 8007dca:	f000 f8e1 	bl	8007f90 <__kernel_sin>
 8007dce:	ec53 2b10 	vmov	r2, r3, d0
 8007dd2:	ee10 0a10 	vmov	r0, s0
 8007dd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007dda:	e7d1      	b.n	8007d80 <sin+0x30>
 8007ddc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007de0:	ed9d 0b00 	vldr	d0, [sp]
 8007de4:	f000 f80c 	bl	8007e00 <__kernel_cos>
 8007de8:	e7f1      	b.n	8007dce <sin+0x7e>
 8007dea:	bf00      	nop
 8007dec:	f3af 8000 	nop.w
	...
 8007df8:	3fe921fb 	.word	0x3fe921fb
 8007dfc:	7fefffff 	.word	0x7fefffff

08007e00 <__kernel_cos>:
 8007e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	ec57 6b10 	vmov	r6, r7, d0
 8007e08:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007e0c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007e10:	ed8d 1b00 	vstr	d1, [sp]
 8007e14:	da07      	bge.n	8007e26 <__kernel_cos+0x26>
 8007e16:	ee10 0a10 	vmov	r0, s0
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fea4 	bl	8000b68 <__aeabi_d2iz>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f000 8088 	beq.w	8007f36 <__kernel_cos+0x136>
 8007e26:	4632      	mov	r2, r6
 8007e28:	463b      	mov	r3, r7
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	f7f8 fbeb 	bl	8000608 <__aeabi_dmul>
 8007e32:	4b51      	ldr	r3, [pc, #324]	; (8007f78 <__kernel_cos+0x178>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	460d      	mov	r5, r1
 8007e3a:	f7f8 fbe5 	bl	8000608 <__aeabi_dmul>
 8007e3e:	a340      	add	r3, pc, #256	; (adr r3, 8007f40 <__kernel_cos+0x140>)
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	4682      	mov	sl, r0
 8007e46:	468b      	mov	fp, r1
 8007e48:	4620      	mov	r0, r4
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	f7f8 fbdc 	bl	8000608 <__aeabi_dmul>
 8007e50:	a33d      	add	r3, pc, #244	; (adr r3, 8007f48 <__kernel_cos+0x148>)
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f7f8 fa21 	bl	800029c <__adddf3>
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	f7f8 fbd3 	bl	8000608 <__aeabi_dmul>
 8007e62:	a33b      	add	r3, pc, #236	; (adr r3, 8007f50 <__kernel_cos+0x150>)
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f7f8 fa16 	bl	8000298 <__aeabi_dsub>
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	462b      	mov	r3, r5
 8007e70:	f7f8 fbca 	bl	8000608 <__aeabi_dmul>
 8007e74:	a338      	add	r3, pc, #224	; (adr r3, 8007f58 <__kernel_cos+0x158>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	f7f8 fa0f 	bl	800029c <__adddf3>
 8007e7e:	4622      	mov	r2, r4
 8007e80:	462b      	mov	r3, r5
 8007e82:	f7f8 fbc1 	bl	8000608 <__aeabi_dmul>
 8007e86:	a336      	add	r3, pc, #216	; (adr r3, 8007f60 <__kernel_cos+0x160>)
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	f7f8 fa04 	bl	8000298 <__aeabi_dsub>
 8007e90:	4622      	mov	r2, r4
 8007e92:	462b      	mov	r3, r5
 8007e94:	f7f8 fbb8 	bl	8000608 <__aeabi_dmul>
 8007e98:	a333      	add	r3, pc, #204	; (adr r3, 8007f68 <__kernel_cos+0x168>)
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	f7f8 f9fd 	bl	800029c <__adddf3>
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	462b      	mov	r3, r5
 8007ea6:	f7f8 fbaf 	bl	8000608 <__aeabi_dmul>
 8007eaa:	4622      	mov	r2, r4
 8007eac:	462b      	mov	r3, r5
 8007eae:	f7f8 fbab 	bl	8000608 <__aeabi_dmul>
 8007eb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	460d      	mov	r5, r1
 8007eba:	4630      	mov	r0, r6
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	f7f8 fba3 	bl	8000608 <__aeabi_dmul>
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f7f8 f9e5 	bl	8000298 <__aeabi_dsub>
 8007ece:	4b2b      	ldr	r3, [pc, #172]	; (8007f7c <__kernel_cos+0x17c>)
 8007ed0:	4598      	cmp	r8, r3
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	460f      	mov	r7, r1
 8007ed6:	dc10      	bgt.n	8007efa <__kernel_cos+0xfa>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4650      	mov	r0, sl
 8007ede:	4659      	mov	r1, fp
 8007ee0:	f7f8 f9da 	bl	8000298 <__aeabi_dsub>
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4926      	ldr	r1, [pc, #152]	; (8007f80 <__kernel_cos+0x180>)
 8007ee8:	4602      	mov	r2, r0
 8007eea:	2000      	movs	r0, #0
 8007eec:	f7f8 f9d4 	bl	8000298 <__aeabi_dsub>
 8007ef0:	ec41 0b10 	vmov	d0, r0, r1
 8007ef4:	b003      	add	sp, #12
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efa:	4b22      	ldr	r3, [pc, #136]	; (8007f84 <__kernel_cos+0x184>)
 8007efc:	4920      	ldr	r1, [pc, #128]	; (8007f80 <__kernel_cos+0x180>)
 8007efe:	4598      	cmp	r8, r3
 8007f00:	bfcc      	ite	gt
 8007f02:	4d21      	ldrgt	r5, [pc, #132]	; (8007f88 <__kernel_cos+0x188>)
 8007f04:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007f08:	2400      	movs	r4, #0
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	2000      	movs	r0, #0
 8007f10:	f7f8 f9c2 	bl	8000298 <__aeabi_dsub>
 8007f14:	4622      	mov	r2, r4
 8007f16:	4680      	mov	r8, r0
 8007f18:	4689      	mov	r9, r1
 8007f1a:	462b      	mov	r3, r5
 8007f1c:	4650      	mov	r0, sl
 8007f1e:	4659      	mov	r1, fp
 8007f20:	f7f8 f9ba 	bl	8000298 <__aeabi_dsub>
 8007f24:	4632      	mov	r2, r6
 8007f26:	463b      	mov	r3, r7
 8007f28:	f7f8 f9b6 	bl	8000298 <__aeabi_dsub>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4640      	mov	r0, r8
 8007f32:	4649      	mov	r1, r9
 8007f34:	e7da      	b.n	8007eec <__kernel_cos+0xec>
 8007f36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007f70 <__kernel_cos+0x170>
 8007f3a:	e7db      	b.n	8007ef4 <__kernel_cos+0xf4>
 8007f3c:	f3af 8000 	nop.w
 8007f40:	be8838d4 	.word	0xbe8838d4
 8007f44:	bda8fae9 	.word	0xbda8fae9
 8007f48:	bdb4b1c4 	.word	0xbdb4b1c4
 8007f4c:	3e21ee9e 	.word	0x3e21ee9e
 8007f50:	809c52ad 	.word	0x809c52ad
 8007f54:	3e927e4f 	.word	0x3e927e4f
 8007f58:	19cb1590 	.word	0x19cb1590
 8007f5c:	3efa01a0 	.word	0x3efa01a0
 8007f60:	16c15177 	.word	0x16c15177
 8007f64:	3f56c16c 	.word	0x3f56c16c
 8007f68:	5555554c 	.word	0x5555554c
 8007f6c:	3fa55555 	.word	0x3fa55555
 8007f70:	00000000 	.word	0x00000000
 8007f74:	3ff00000 	.word	0x3ff00000
 8007f78:	3fe00000 	.word	0x3fe00000
 8007f7c:	3fd33332 	.word	0x3fd33332
 8007f80:	3ff00000 	.word	0x3ff00000
 8007f84:	3fe90000 	.word	0x3fe90000
 8007f88:	3fd20000 	.word	0x3fd20000
 8007f8c:	00000000 	.word	0x00000000

08007f90 <__kernel_sin>:
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	ed2d 8b04 	vpush	{d8-d9}
 8007f98:	eeb0 8a41 	vmov.f32	s16, s2
 8007f9c:	eef0 8a61 	vmov.f32	s17, s3
 8007fa0:	ec55 4b10 	vmov	r4, r5, d0
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007faa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007fae:	9001      	str	r0, [sp, #4]
 8007fb0:	da06      	bge.n	8007fc0 <__kernel_sin+0x30>
 8007fb2:	ee10 0a10 	vmov	r0, s0
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	f7f8 fdd6 	bl	8000b68 <__aeabi_d2iz>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d051      	beq.n	8008064 <__kernel_sin+0xd4>
 8007fc0:	4622      	mov	r2, r4
 8007fc2:	462b      	mov	r3, r5
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 fb1e 	bl	8000608 <__aeabi_dmul>
 8007fcc:	4682      	mov	sl, r0
 8007fce:	468b      	mov	fp, r1
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 fb16 	bl	8000608 <__aeabi_dmul>
 8007fdc:	a341      	add	r3, pc, #260	; (adr r3, 80080e4 <__kernel_sin+0x154>)
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	4680      	mov	r8, r0
 8007fe4:	4689      	mov	r9, r1
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	4659      	mov	r1, fp
 8007fea:	f7f8 fb0d 	bl	8000608 <__aeabi_dmul>
 8007fee:	a33f      	add	r3, pc, #252	; (adr r3, 80080ec <__kernel_sin+0x15c>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	f7f8 f950 	bl	8000298 <__aeabi_dsub>
 8007ff8:	4652      	mov	r2, sl
 8007ffa:	465b      	mov	r3, fp
 8007ffc:	f7f8 fb04 	bl	8000608 <__aeabi_dmul>
 8008000:	a33c      	add	r3, pc, #240	; (adr r3, 80080f4 <__kernel_sin+0x164>)
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	f7f8 f949 	bl	800029c <__adddf3>
 800800a:	4652      	mov	r2, sl
 800800c:	465b      	mov	r3, fp
 800800e:	f7f8 fafb 	bl	8000608 <__aeabi_dmul>
 8008012:	a33a      	add	r3, pc, #232	; (adr r3, 80080fc <__kernel_sin+0x16c>)
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f7f8 f93e 	bl	8000298 <__aeabi_dsub>
 800801c:	4652      	mov	r2, sl
 800801e:	465b      	mov	r3, fp
 8008020:	f7f8 faf2 	bl	8000608 <__aeabi_dmul>
 8008024:	a337      	add	r3, pc, #220	; (adr r3, 8008104 <__kernel_sin+0x174>)
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	f7f8 f937 	bl	800029c <__adddf3>
 800802e:	9b01      	ldr	r3, [sp, #4]
 8008030:	4606      	mov	r6, r0
 8008032:	460f      	mov	r7, r1
 8008034:	b9eb      	cbnz	r3, 8008072 <__kernel_sin+0xe2>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4650      	mov	r0, sl
 800803c:	4659      	mov	r1, fp
 800803e:	f7f8 fae3 	bl	8000608 <__aeabi_dmul>
 8008042:	a325      	add	r3, pc, #148	; (adr r3, 80080d8 <__kernel_sin+0x148>)
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f7f8 f926 	bl	8000298 <__aeabi_dsub>
 800804c:	4642      	mov	r2, r8
 800804e:	464b      	mov	r3, r9
 8008050:	f7f8 fada 	bl	8000608 <__aeabi_dmul>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4620      	mov	r0, r4
 800805a:	4629      	mov	r1, r5
 800805c:	f7f8 f91e 	bl	800029c <__adddf3>
 8008060:	4604      	mov	r4, r0
 8008062:	460d      	mov	r5, r1
 8008064:	ec45 4b10 	vmov	d0, r4, r5
 8008068:	b003      	add	sp, #12
 800806a:	ecbd 8b04 	vpop	{d8-d9}
 800806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008072:	4b1b      	ldr	r3, [pc, #108]	; (80080e0 <__kernel_sin+0x150>)
 8008074:	ec51 0b18 	vmov	r0, r1, d8
 8008078:	2200      	movs	r2, #0
 800807a:	f7f8 fac5 	bl	8000608 <__aeabi_dmul>
 800807e:	4632      	mov	r2, r6
 8008080:	ec41 0b19 	vmov	d9, r0, r1
 8008084:	463b      	mov	r3, r7
 8008086:	4640      	mov	r0, r8
 8008088:	4649      	mov	r1, r9
 800808a:	f7f8 fabd 	bl	8000608 <__aeabi_dmul>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	ec51 0b19 	vmov	r0, r1, d9
 8008096:	f7f8 f8ff 	bl	8000298 <__aeabi_dsub>
 800809a:	4652      	mov	r2, sl
 800809c:	465b      	mov	r3, fp
 800809e:	f7f8 fab3 	bl	8000608 <__aeabi_dmul>
 80080a2:	ec53 2b18 	vmov	r2, r3, d8
 80080a6:	f7f8 f8f7 	bl	8000298 <__aeabi_dsub>
 80080aa:	a30b      	add	r3, pc, #44	; (adr r3, 80080d8 <__kernel_sin+0x148>)
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	4606      	mov	r6, r0
 80080b2:	460f      	mov	r7, r1
 80080b4:	4640      	mov	r0, r8
 80080b6:	4649      	mov	r1, r9
 80080b8:	f7f8 faa6 	bl	8000608 <__aeabi_dmul>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 f8ea 	bl	800029c <__adddf3>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4620      	mov	r0, r4
 80080ce:	4629      	mov	r1, r5
 80080d0:	f7f8 f8e2 	bl	8000298 <__aeabi_dsub>
 80080d4:	e7c4      	b.n	8008060 <__kernel_sin+0xd0>
 80080d6:	bf00      	nop
 80080d8:	55555549 	.word	0x55555549
 80080dc:	3fc55555 	.word	0x3fc55555
 80080e0:	3fe00000 	.word	0x3fe00000
 80080e4:	5acfd57c 	.word	0x5acfd57c
 80080e8:	3de5d93a 	.word	0x3de5d93a
 80080ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80080f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80080f4:	57b1fe7d 	.word	0x57b1fe7d
 80080f8:	3ec71de3 	.word	0x3ec71de3
 80080fc:	19c161d5 	.word	0x19c161d5
 8008100:	3f2a01a0 	.word	0x3f2a01a0
 8008104:	1110f8a6 	.word	0x1110f8a6
 8008108:	3f811111 	.word	0x3f811111
 800810c:	00000000 	.word	0x00000000

08008110 <__ieee754_rem_pio2>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	ed2d 8b02 	vpush	{d8}
 8008118:	ec55 4b10 	vmov	r4, r5, d0
 800811c:	4bca      	ldr	r3, [pc, #808]	; (8008448 <__ieee754_rem_pio2+0x338>)
 800811e:	b08b      	sub	sp, #44	; 0x2c
 8008120:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008124:	4598      	cmp	r8, r3
 8008126:	4682      	mov	sl, r0
 8008128:	9502      	str	r5, [sp, #8]
 800812a:	dc08      	bgt.n	800813e <__ieee754_rem_pio2+0x2e>
 800812c:	2200      	movs	r2, #0
 800812e:	2300      	movs	r3, #0
 8008130:	ed80 0b00 	vstr	d0, [r0]
 8008134:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008138:	f04f 0b00 	mov.w	fp, #0
 800813c:	e028      	b.n	8008190 <__ieee754_rem_pio2+0x80>
 800813e:	4bc3      	ldr	r3, [pc, #780]	; (800844c <__ieee754_rem_pio2+0x33c>)
 8008140:	4598      	cmp	r8, r3
 8008142:	dc78      	bgt.n	8008236 <__ieee754_rem_pio2+0x126>
 8008144:	9b02      	ldr	r3, [sp, #8]
 8008146:	4ec2      	ldr	r6, [pc, #776]	; (8008450 <__ieee754_rem_pio2+0x340>)
 8008148:	2b00      	cmp	r3, #0
 800814a:	ee10 0a10 	vmov	r0, s0
 800814e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008410 <__ieee754_rem_pio2+0x300>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	4629      	mov	r1, r5
 8008156:	dd39      	ble.n	80081cc <__ieee754_rem_pio2+0xbc>
 8008158:	f7f8 f89e 	bl	8000298 <__aeabi_dsub>
 800815c:	45b0      	cmp	r8, r6
 800815e:	4604      	mov	r4, r0
 8008160:	460d      	mov	r5, r1
 8008162:	d01b      	beq.n	800819c <__ieee754_rem_pio2+0x8c>
 8008164:	a3ac      	add	r3, pc, #688	; (adr r3, 8008418 <__ieee754_rem_pio2+0x308>)
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f7f8 f895 	bl	8000298 <__aeabi_dsub>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	e9ca 2300 	strd	r2, r3, [sl]
 8008176:	4620      	mov	r0, r4
 8008178:	4629      	mov	r1, r5
 800817a:	f7f8 f88d 	bl	8000298 <__aeabi_dsub>
 800817e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008418 <__ieee754_rem_pio2+0x308>)
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	f7f8 f888 	bl	8000298 <__aeabi_dsub>
 8008188:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800818c:	f04f 0b01 	mov.w	fp, #1
 8008190:	4658      	mov	r0, fp
 8008192:	b00b      	add	sp, #44	; 0x2c
 8008194:	ecbd 8b02 	vpop	{d8}
 8008198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008420 <__ieee754_rem_pio2+0x310>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f7f8 f879 	bl	8000298 <__aeabi_dsub>
 80081a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008428 <__ieee754_rem_pio2+0x318>)
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	4604      	mov	r4, r0
 80081ae:	460d      	mov	r5, r1
 80081b0:	f7f8 f872 	bl	8000298 <__aeabi_dsub>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	e9ca 2300 	strd	r2, r3, [sl]
 80081bc:	4620      	mov	r0, r4
 80081be:	4629      	mov	r1, r5
 80081c0:	f7f8 f86a 	bl	8000298 <__aeabi_dsub>
 80081c4:	a398      	add	r3, pc, #608	; (adr r3, 8008428 <__ieee754_rem_pio2+0x318>)
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	e7db      	b.n	8008184 <__ieee754_rem_pio2+0x74>
 80081cc:	f7f8 f866 	bl	800029c <__adddf3>
 80081d0:	45b0      	cmp	r8, r6
 80081d2:	4604      	mov	r4, r0
 80081d4:	460d      	mov	r5, r1
 80081d6:	d016      	beq.n	8008206 <__ieee754_rem_pio2+0xf6>
 80081d8:	a38f      	add	r3, pc, #572	; (adr r3, 8008418 <__ieee754_rem_pio2+0x308>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	f7f8 f85d 	bl	800029c <__adddf3>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	e9ca 2300 	strd	r2, r3, [sl]
 80081ea:	4620      	mov	r0, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	f7f8 f853 	bl	8000298 <__aeabi_dsub>
 80081f2:	a389      	add	r3, pc, #548	; (adr r3, 8008418 <__ieee754_rem_pio2+0x308>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f8 f850 	bl	800029c <__adddf3>
 80081fc:	f04f 3bff 	mov.w	fp, #4294967295
 8008200:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008204:	e7c4      	b.n	8008190 <__ieee754_rem_pio2+0x80>
 8008206:	a386      	add	r3, pc, #536	; (adr r3, 8008420 <__ieee754_rem_pio2+0x310>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f7f8 f846 	bl	800029c <__adddf3>
 8008210:	a385      	add	r3, pc, #532	; (adr r3, 8008428 <__ieee754_rem_pio2+0x318>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	4604      	mov	r4, r0
 8008218:	460d      	mov	r5, r1
 800821a:	f7f8 f83f 	bl	800029c <__adddf3>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	e9ca 2300 	strd	r2, r3, [sl]
 8008226:	4620      	mov	r0, r4
 8008228:	4629      	mov	r1, r5
 800822a:	f7f8 f835 	bl	8000298 <__aeabi_dsub>
 800822e:	a37e      	add	r3, pc, #504	; (adr r3, 8008428 <__ieee754_rem_pio2+0x318>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	e7e0      	b.n	80081f8 <__ieee754_rem_pio2+0xe8>
 8008236:	4b87      	ldr	r3, [pc, #540]	; (8008454 <__ieee754_rem_pio2+0x344>)
 8008238:	4598      	cmp	r8, r3
 800823a:	f300 80d8 	bgt.w	80083ee <__ieee754_rem_pio2+0x2de>
 800823e:	f000 f96d 	bl	800851c <fabs>
 8008242:	ec55 4b10 	vmov	r4, r5, d0
 8008246:	ee10 0a10 	vmov	r0, s0
 800824a:	a379      	add	r3, pc, #484	; (adr r3, 8008430 <__ieee754_rem_pio2+0x320>)
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	4629      	mov	r1, r5
 8008252:	f7f8 f9d9 	bl	8000608 <__aeabi_dmul>
 8008256:	4b80      	ldr	r3, [pc, #512]	; (8008458 <__ieee754_rem_pio2+0x348>)
 8008258:	2200      	movs	r2, #0
 800825a:	f7f8 f81f 	bl	800029c <__adddf3>
 800825e:	f7f8 fc83 	bl	8000b68 <__aeabi_d2iz>
 8008262:	4683      	mov	fp, r0
 8008264:	f7f8 f966 	bl	8000534 <__aeabi_i2d>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	ec43 2b18 	vmov	d8, r2, r3
 8008270:	a367      	add	r3, pc, #412	; (adr r3, 8008410 <__ieee754_rem_pio2+0x300>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f7f8 f9c7 	bl	8000608 <__aeabi_dmul>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4620      	mov	r0, r4
 8008280:	4629      	mov	r1, r5
 8008282:	f7f8 f809 	bl	8000298 <__aeabi_dsub>
 8008286:	a364      	add	r3, pc, #400	; (adr r3, 8008418 <__ieee754_rem_pio2+0x308>)
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	4606      	mov	r6, r0
 800828e:	460f      	mov	r7, r1
 8008290:	ec51 0b18 	vmov	r0, r1, d8
 8008294:	f7f8 f9b8 	bl	8000608 <__aeabi_dmul>
 8008298:	f1bb 0f1f 	cmp.w	fp, #31
 800829c:	4604      	mov	r4, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	dc0d      	bgt.n	80082be <__ieee754_rem_pio2+0x1ae>
 80082a2:	4b6e      	ldr	r3, [pc, #440]	; (800845c <__ieee754_rem_pio2+0x34c>)
 80082a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80082a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ac:	4543      	cmp	r3, r8
 80082ae:	d006      	beq.n	80082be <__ieee754_rem_pio2+0x1ae>
 80082b0:	4622      	mov	r2, r4
 80082b2:	462b      	mov	r3, r5
 80082b4:	4630      	mov	r0, r6
 80082b6:	4639      	mov	r1, r7
 80082b8:	f7f7 ffee 	bl	8000298 <__aeabi_dsub>
 80082bc:	e00e      	b.n	80082dc <__ieee754_rem_pio2+0x1cc>
 80082be:	462b      	mov	r3, r5
 80082c0:	4622      	mov	r2, r4
 80082c2:	4630      	mov	r0, r6
 80082c4:	4639      	mov	r1, r7
 80082c6:	f7f7 ffe7 	bl	8000298 <__aeabi_dsub>
 80082ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80082ce:	9303      	str	r3, [sp, #12]
 80082d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80082d4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80082d8:	2b10      	cmp	r3, #16
 80082da:	dc02      	bgt.n	80082e2 <__ieee754_rem_pio2+0x1d2>
 80082dc:	e9ca 0100 	strd	r0, r1, [sl]
 80082e0:	e039      	b.n	8008356 <__ieee754_rem_pio2+0x246>
 80082e2:	a34f      	add	r3, pc, #316	; (adr r3, 8008420 <__ieee754_rem_pio2+0x310>)
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	ec51 0b18 	vmov	r0, r1, d8
 80082ec:	f7f8 f98c 	bl	8000608 <__aeabi_dmul>
 80082f0:	4604      	mov	r4, r0
 80082f2:	460d      	mov	r5, r1
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4630      	mov	r0, r6
 80082fa:	4639      	mov	r1, r7
 80082fc:	f7f7 ffcc 	bl	8000298 <__aeabi_dsub>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4680      	mov	r8, r0
 8008306:	4689      	mov	r9, r1
 8008308:	4630      	mov	r0, r6
 800830a:	4639      	mov	r1, r7
 800830c:	f7f7 ffc4 	bl	8000298 <__aeabi_dsub>
 8008310:	4622      	mov	r2, r4
 8008312:	462b      	mov	r3, r5
 8008314:	f7f7 ffc0 	bl	8000298 <__aeabi_dsub>
 8008318:	a343      	add	r3, pc, #268	; (adr r3, 8008428 <__ieee754_rem_pio2+0x318>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	4604      	mov	r4, r0
 8008320:	460d      	mov	r5, r1
 8008322:	ec51 0b18 	vmov	r0, r1, d8
 8008326:	f7f8 f96f 	bl	8000608 <__aeabi_dmul>
 800832a:	4622      	mov	r2, r4
 800832c:	462b      	mov	r3, r5
 800832e:	f7f7 ffb3 	bl	8000298 <__aeabi_dsub>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4604      	mov	r4, r0
 8008338:	460d      	mov	r5, r1
 800833a:	4640      	mov	r0, r8
 800833c:	4649      	mov	r1, r9
 800833e:	f7f7 ffab 	bl	8000298 <__aeabi_dsub>
 8008342:	9a03      	ldr	r2, [sp, #12]
 8008344:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b31      	cmp	r3, #49	; 0x31
 800834c:	dc24      	bgt.n	8008398 <__ieee754_rem_pio2+0x288>
 800834e:	e9ca 0100 	strd	r0, r1, [sl]
 8008352:	4646      	mov	r6, r8
 8008354:	464f      	mov	r7, r9
 8008356:	e9da 8900 	ldrd	r8, r9, [sl]
 800835a:	4630      	mov	r0, r6
 800835c:	4642      	mov	r2, r8
 800835e:	464b      	mov	r3, r9
 8008360:	4639      	mov	r1, r7
 8008362:	f7f7 ff99 	bl	8000298 <__aeabi_dsub>
 8008366:	462b      	mov	r3, r5
 8008368:	4622      	mov	r2, r4
 800836a:	f7f7 ff95 	bl	8000298 <__aeabi_dsub>
 800836e:	9b02      	ldr	r3, [sp, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008376:	f6bf af0b 	bge.w	8008190 <__ieee754_rem_pio2+0x80>
 800837a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800837e:	f8ca 3004 	str.w	r3, [sl, #4]
 8008382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008386:	f8ca 8000 	str.w	r8, [sl]
 800838a:	f8ca 0008 	str.w	r0, [sl, #8]
 800838e:	f8ca 300c 	str.w	r3, [sl, #12]
 8008392:	f1cb 0b00 	rsb	fp, fp, #0
 8008396:	e6fb      	b.n	8008190 <__ieee754_rem_pio2+0x80>
 8008398:	a327      	add	r3, pc, #156	; (adr r3, 8008438 <__ieee754_rem_pio2+0x328>)
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	ec51 0b18 	vmov	r0, r1, d8
 80083a2:	f7f8 f931 	bl	8000608 <__aeabi_dmul>
 80083a6:	4604      	mov	r4, r0
 80083a8:	460d      	mov	r5, r1
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4640      	mov	r0, r8
 80083b0:	4649      	mov	r1, r9
 80083b2:	f7f7 ff71 	bl	8000298 <__aeabi_dsub>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4606      	mov	r6, r0
 80083bc:	460f      	mov	r7, r1
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f7 ff69 	bl	8000298 <__aeabi_dsub>
 80083c6:	4622      	mov	r2, r4
 80083c8:	462b      	mov	r3, r5
 80083ca:	f7f7 ff65 	bl	8000298 <__aeabi_dsub>
 80083ce:	a31c      	add	r3, pc, #112	; (adr r3, 8008440 <__ieee754_rem_pio2+0x330>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	4604      	mov	r4, r0
 80083d6:	460d      	mov	r5, r1
 80083d8:	ec51 0b18 	vmov	r0, r1, d8
 80083dc:	f7f8 f914 	bl	8000608 <__aeabi_dmul>
 80083e0:	4622      	mov	r2, r4
 80083e2:	462b      	mov	r3, r5
 80083e4:	f7f7 ff58 	bl	8000298 <__aeabi_dsub>
 80083e8:	4604      	mov	r4, r0
 80083ea:	460d      	mov	r5, r1
 80083ec:	e760      	b.n	80082b0 <__ieee754_rem_pio2+0x1a0>
 80083ee:	4b1c      	ldr	r3, [pc, #112]	; (8008460 <__ieee754_rem_pio2+0x350>)
 80083f0:	4598      	cmp	r8, r3
 80083f2:	dd37      	ble.n	8008464 <__ieee754_rem_pio2+0x354>
 80083f4:	ee10 2a10 	vmov	r2, s0
 80083f8:	462b      	mov	r3, r5
 80083fa:	4620      	mov	r0, r4
 80083fc:	4629      	mov	r1, r5
 80083fe:	f7f7 ff4b 	bl	8000298 <__aeabi_dsub>
 8008402:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008406:	e9ca 0100 	strd	r0, r1, [sl]
 800840a:	e695      	b.n	8008138 <__ieee754_rem_pio2+0x28>
 800840c:	f3af 8000 	nop.w
 8008410:	54400000 	.word	0x54400000
 8008414:	3ff921fb 	.word	0x3ff921fb
 8008418:	1a626331 	.word	0x1a626331
 800841c:	3dd0b461 	.word	0x3dd0b461
 8008420:	1a600000 	.word	0x1a600000
 8008424:	3dd0b461 	.word	0x3dd0b461
 8008428:	2e037073 	.word	0x2e037073
 800842c:	3ba3198a 	.word	0x3ba3198a
 8008430:	6dc9c883 	.word	0x6dc9c883
 8008434:	3fe45f30 	.word	0x3fe45f30
 8008438:	2e000000 	.word	0x2e000000
 800843c:	3ba3198a 	.word	0x3ba3198a
 8008440:	252049c1 	.word	0x252049c1
 8008444:	397b839a 	.word	0x397b839a
 8008448:	3fe921fb 	.word	0x3fe921fb
 800844c:	4002d97b 	.word	0x4002d97b
 8008450:	3ff921fb 	.word	0x3ff921fb
 8008454:	413921fb 	.word	0x413921fb
 8008458:	3fe00000 	.word	0x3fe00000
 800845c:	080091fc 	.word	0x080091fc
 8008460:	7fefffff 	.word	0x7fefffff
 8008464:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008468:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800846c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008470:	4620      	mov	r0, r4
 8008472:	460d      	mov	r5, r1
 8008474:	f7f8 fb78 	bl	8000b68 <__aeabi_d2iz>
 8008478:	f7f8 f85c 	bl	8000534 <__aeabi_i2d>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4620      	mov	r0, r4
 8008482:	4629      	mov	r1, r5
 8008484:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008488:	f7f7 ff06 	bl	8000298 <__aeabi_dsub>
 800848c:	4b21      	ldr	r3, [pc, #132]	; (8008514 <__ieee754_rem_pio2+0x404>)
 800848e:	2200      	movs	r2, #0
 8008490:	f7f8 f8ba 	bl	8000608 <__aeabi_dmul>
 8008494:	460d      	mov	r5, r1
 8008496:	4604      	mov	r4, r0
 8008498:	f7f8 fb66 	bl	8000b68 <__aeabi_d2iz>
 800849c:	f7f8 f84a 	bl	8000534 <__aeabi_i2d>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4620      	mov	r0, r4
 80084a6:	4629      	mov	r1, r5
 80084a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084ac:	f7f7 fef4 	bl	8000298 <__aeabi_dsub>
 80084b0:	4b18      	ldr	r3, [pc, #96]	; (8008514 <__ieee754_rem_pio2+0x404>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	f7f8 f8a8 	bl	8000608 <__aeabi_dmul>
 80084b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80084bc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80084c0:	2703      	movs	r7, #3
 80084c2:	2400      	movs	r4, #0
 80084c4:	2500      	movs	r5, #0
 80084c6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80084ca:	4622      	mov	r2, r4
 80084cc:	462b      	mov	r3, r5
 80084ce:	46b9      	mov	r9, r7
 80084d0:	3f01      	subs	r7, #1
 80084d2:	f7f8 fb01 	bl	8000ad8 <__aeabi_dcmpeq>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d1f5      	bne.n	80084c6 <__ieee754_rem_pio2+0x3b6>
 80084da:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <__ieee754_rem_pio2+0x408>)
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	2302      	movs	r3, #2
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	4632      	mov	r2, r6
 80084e4:	464b      	mov	r3, r9
 80084e6:	4651      	mov	r1, sl
 80084e8:	a804      	add	r0, sp, #16
 80084ea:	f000 f821 	bl	8008530 <__kernel_rem_pio2>
 80084ee:	9b02      	ldr	r3, [sp, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	4683      	mov	fp, r0
 80084f4:	f6bf ae4c 	bge.w	8008190 <__ieee754_rem_pio2+0x80>
 80084f8:	e9da 2100 	ldrd	r2, r1, [sl]
 80084fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008500:	e9ca 2300 	strd	r2, r3, [sl]
 8008504:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008508:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800850c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008510:	e73f      	b.n	8008392 <__ieee754_rem_pio2+0x282>
 8008512:	bf00      	nop
 8008514:	41700000 	.word	0x41700000
 8008518:	0800927c 	.word	0x0800927c

0800851c <fabs>:
 800851c:	ec51 0b10 	vmov	r0, r1, d0
 8008520:	ee10 2a10 	vmov	r2, s0
 8008524:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008528:	ec43 2b10 	vmov	d0, r2, r3
 800852c:	4770      	bx	lr
	...

08008530 <__kernel_rem_pio2>:
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	ed2d 8b02 	vpush	{d8}
 8008538:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800853c:	f112 0f14 	cmn.w	r2, #20
 8008540:	9306      	str	r3, [sp, #24]
 8008542:	9104      	str	r1, [sp, #16]
 8008544:	4bc2      	ldr	r3, [pc, #776]	; (8008850 <__kernel_rem_pio2+0x320>)
 8008546:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008548:	9009      	str	r0, [sp, #36]	; 0x24
 800854a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	9b06      	ldr	r3, [sp, #24]
 8008552:	f103 33ff 	add.w	r3, r3, #4294967295
 8008556:	bfa8      	it	ge
 8008558:	1ed4      	subge	r4, r2, #3
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	bfb2      	itee	lt
 800855e:	2400      	movlt	r4, #0
 8008560:	2318      	movge	r3, #24
 8008562:	fb94 f4f3 	sdivge	r4, r4, r3
 8008566:	f06f 0317 	mvn.w	r3, #23
 800856a:	fb04 3303 	mla	r3, r4, r3, r3
 800856e:	eb03 0a02 	add.w	sl, r3, r2
 8008572:	9b00      	ldr	r3, [sp, #0]
 8008574:	9a05      	ldr	r2, [sp, #20]
 8008576:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008840 <__kernel_rem_pio2+0x310>
 800857a:	eb03 0802 	add.w	r8, r3, r2
 800857e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008580:	1aa7      	subs	r7, r4, r2
 8008582:	ae20      	add	r6, sp, #128	; 0x80
 8008584:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008588:	2500      	movs	r5, #0
 800858a:	4545      	cmp	r5, r8
 800858c:	dd13      	ble.n	80085b6 <__kernel_rem_pio2+0x86>
 800858e:	9b06      	ldr	r3, [sp, #24]
 8008590:	aa20      	add	r2, sp, #128	; 0x80
 8008592:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008596:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800859a:	f04f 0800 	mov.w	r8, #0
 800859e:	9b00      	ldr	r3, [sp, #0]
 80085a0:	4598      	cmp	r8, r3
 80085a2:	dc31      	bgt.n	8008608 <__kernel_rem_pio2+0xd8>
 80085a4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008840 <__kernel_rem_pio2+0x310>
 80085a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80085ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085b0:	462f      	mov	r7, r5
 80085b2:	2600      	movs	r6, #0
 80085b4:	e01b      	b.n	80085ee <__kernel_rem_pio2+0xbe>
 80085b6:	42ef      	cmn	r7, r5
 80085b8:	d407      	bmi.n	80085ca <__kernel_rem_pio2+0x9a>
 80085ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80085be:	f7f7 ffb9 	bl	8000534 <__aeabi_i2d>
 80085c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80085c6:	3501      	adds	r5, #1
 80085c8:	e7df      	b.n	800858a <__kernel_rem_pio2+0x5a>
 80085ca:	ec51 0b18 	vmov	r0, r1, d8
 80085ce:	e7f8      	b.n	80085c2 <__kernel_rem_pio2+0x92>
 80085d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80085d8:	f7f8 f816 	bl	8000608 <__aeabi_dmul>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085e4:	f7f7 fe5a 	bl	800029c <__adddf3>
 80085e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ec:	3601      	adds	r6, #1
 80085ee:	9b05      	ldr	r3, [sp, #20]
 80085f0:	429e      	cmp	r6, r3
 80085f2:	f1a7 0708 	sub.w	r7, r7, #8
 80085f6:	ddeb      	ble.n	80085d0 <__kernel_rem_pio2+0xa0>
 80085f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085fc:	f108 0801 	add.w	r8, r8, #1
 8008600:	ecab 7b02 	vstmia	fp!, {d7}
 8008604:	3508      	adds	r5, #8
 8008606:	e7ca      	b.n	800859e <__kernel_rem_pio2+0x6e>
 8008608:	9b00      	ldr	r3, [sp, #0]
 800860a:	aa0c      	add	r2, sp, #48	; 0x30
 800860c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008610:	930b      	str	r3, [sp, #44]	; 0x2c
 8008612:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008614:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008618:	9c00      	ldr	r4, [sp, #0]
 800861a:	930a      	str	r3, [sp, #40]	; 0x28
 800861c:	00e3      	lsls	r3, r4, #3
 800861e:	9308      	str	r3, [sp, #32]
 8008620:	ab98      	add	r3, sp, #608	; 0x260
 8008622:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008626:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800862a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800862e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008630:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008634:	46c3      	mov	fp, r8
 8008636:	46a1      	mov	r9, r4
 8008638:	f1b9 0f00 	cmp.w	r9, #0
 800863c:	f1a5 0508 	sub.w	r5, r5, #8
 8008640:	dc77      	bgt.n	8008732 <__kernel_rem_pio2+0x202>
 8008642:	ec47 6b10 	vmov	d0, r6, r7
 8008646:	4650      	mov	r0, sl
 8008648:	f000 fac2 	bl	8008bd0 <scalbn>
 800864c:	ec57 6b10 	vmov	r6, r7, d0
 8008650:	2200      	movs	r2, #0
 8008652:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008656:	ee10 0a10 	vmov	r0, s0
 800865a:	4639      	mov	r1, r7
 800865c:	f7f7 ffd4 	bl	8000608 <__aeabi_dmul>
 8008660:	ec41 0b10 	vmov	d0, r0, r1
 8008664:	f000 fb34 	bl	8008cd0 <floor>
 8008668:	4b7a      	ldr	r3, [pc, #488]	; (8008854 <__kernel_rem_pio2+0x324>)
 800866a:	ec51 0b10 	vmov	r0, r1, d0
 800866e:	2200      	movs	r2, #0
 8008670:	f7f7 ffca 	bl	8000608 <__aeabi_dmul>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4630      	mov	r0, r6
 800867a:	4639      	mov	r1, r7
 800867c:	f7f7 fe0c 	bl	8000298 <__aeabi_dsub>
 8008680:	460f      	mov	r7, r1
 8008682:	4606      	mov	r6, r0
 8008684:	f7f8 fa70 	bl	8000b68 <__aeabi_d2iz>
 8008688:	9002      	str	r0, [sp, #8]
 800868a:	f7f7 ff53 	bl	8000534 <__aeabi_i2d>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4630      	mov	r0, r6
 8008694:	4639      	mov	r1, r7
 8008696:	f7f7 fdff 	bl	8000298 <__aeabi_dsub>
 800869a:	f1ba 0f00 	cmp.w	sl, #0
 800869e:	4606      	mov	r6, r0
 80086a0:	460f      	mov	r7, r1
 80086a2:	dd6d      	ble.n	8008780 <__kernel_rem_pio2+0x250>
 80086a4:	1e61      	subs	r1, r4, #1
 80086a6:	ab0c      	add	r3, sp, #48	; 0x30
 80086a8:	9d02      	ldr	r5, [sp, #8]
 80086aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80086ae:	f1ca 0018 	rsb	r0, sl, #24
 80086b2:	fa43 f200 	asr.w	r2, r3, r0
 80086b6:	4415      	add	r5, r2
 80086b8:	4082      	lsls	r2, r0
 80086ba:	1a9b      	subs	r3, r3, r2
 80086bc:	aa0c      	add	r2, sp, #48	; 0x30
 80086be:	9502      	str	r5, [sp, #8]
 80086c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80086c4:	f1ca 0217 	rsb	r2, sl, #23
 80086c8:	fa43 fb02 	asr.w	fp, r3, r2
 80086cc:	f1bb 0f00 	cmp.w	fp, #0
 80086d0:	dd65      	ble.n	800879e <__kernel_rem_pio2+0x26e>
 80086d2:	9b02      	ldr	r3, [sp, #8]
 80086d4:	2200      	movs	r2, #0
 80086d6:	3301      	adds	r3, #1
 80086d8:	9302      	str	r3, [sp, #8]
 80086da:	4615      	mov	r5, r2
 80086dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80086e0:	4294      	cmp	r4, r2
 80086e2:	f300 809f 	bgt.w	8008824 <__kernel_rem_pio2+0x2f4>
 80086e6:	f1ba 0f00 	cmp.w	sl, #0
 80086ea:	dd07      	ble.n	80086fc <__kernel_rem_pio2+0x1cc>
 80086ec:	f1ba 0f01 	cmp.w	sl, #1
 80086f0:	f000 80c1 	beq.w	8008876 <__kernel_rem_pio2+0x346>
 80086f4:	f1ba 0f02 	cmp.w	sl, #2
 80086f8:	f000 80c7 	beq.w	800888a <__kernel_rem_pio2+0x35a>
 80086fc:	f1bb 0f02 	cmp.w	fp, #2
 8008700:	d14d      	bne.n	800879e <__kernel_rem_pio2+0x26e>
 8008702:	4632      	mov	r2, r6
 8008704:	463b      	mov	r3, r7
 8008706:	4954      	ldr	r1, [pc, #336]	; (8008858 <__kernel_rem_pio2+0x328>)
 8008708:	2000      	movs	r0, #0
 800870a:	f7f7 fdc5 	bl	8000298 <__aeabi_dsub>
 800870e:	4606      	mov	r6, r0
 8008710:	460f      	mov	r7, r1
 8008712:	2d00      	cmp	r5, #0
 8008714:	d043      	beq.n	800879e <__kernel_rem_pio2+0x26e>
 8008716:	4650      	mov	r0, sl
 8008718:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008848 <__kernel_rem_pio2+0x318>
 800871c:	f000 fa58 	bl	8008bd0 <scalbn>
 8008720:	4630      	mov	r0, r6
 8008722:	4639      	mov	r1, r7
 8008724:	ec53 2b10 	vmov	r2, r3, d0
 8008728:	f7f7 fdb6 	bl	8000298 <__aeabi_dsub>
 800872c:	4606      	mov	r6, r0
 800872e:	460f      	mov	r7, r1
 8008730:	e035      	b.n	800879e <__kernel_rem_pio2+0x26e>
 8008732:	4b4a      	ldr	r3, [pc, #296]	; (800885c <__kernel_rem_pio2+0x32c>)
 8008734:	2200      	movs	r2, #0
 8008736:	4630      	mov	r0, r6
 8008738:	4639      	mov	r1, r7
 800873a:	f7f7 ff65 	bl	8000608 <__aeabi_dmul>
 800873e:	f7f8 fa13 	bl	8000b68 <__aeabi_d2iz>
 8008742:	f7f7 fef7 	bl	8000534 <__aeabi_i2d>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	ec43 2b18 	vmov	d8, r2, r3
 800874e:	4b44      	ldr	r3, [pc, #272]	; (8008860 <__kernel_rem_pio2+0x330>)
 8008750:	2200      	movs	r2, #0
 8008752:	f7f7 ff59 	bl	8000608 <__aeabi_dmul>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4630      	mov	r0, r6
 800875c:	4639      	mov	r1, r7
 800875e:	f7f7 fd9b 	bl	8000298 <__aeabi_dsub>
 8008762:	f7f8 fa01 	bl	8000b68 <__aeabi_d2iz>
 8008766:	e9d5 2300 	ldrd	r2, r3, [r5]
 800876a:	f84b 0b04 	str.w	r0, [fp], #4
 800876e:	ec51 0b18 	vmov	r0, r1, d8
 8008772:	f7f7 fd93 	bl	800029c <__adddf3>
 8008776:	f109 39ff 	add.w	r9, r9, #4294967295
 800877a:	4606      	mov	r6, r0
 800877c:	460f      	mov	r7, r1
 800877e:	e75b      	b.n	8008638 <__kernel_rem_pio2+0x108>
 8008780:	d106      	bne.n	8008790 <__kernel_rem_pio2+0x260>
 8008782:	1e63      	subs	r3, r4, #1
 8008784:	aa0c      	add	r2, sp, #48	; 0x30
 8008786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800878a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800878e:	e79d      	b.n	80086cc <__kernel_rem_pio2+0x19c>
 8008790:	4b34      	ldr	r3, [pc, #208]	; (8008864 <__kernel_rem_pio2+0x334>)
 8008792:	2200      	movs	r2, #0
 8008794:	f7f8 f9be 	bl	8000b14 <__aeabi_dcmpge>
 8008798:	2800      	cmp	r0, #0
 800879a:	d140      	bne.n	800881e <__kernel_rem_pio2+0x2ee>
 800879c:	4683      	mov	fp, r0
 800879e:	2200      	movs	r2, #0
 80087a0:	2300      	movs	r3, #0
 80087a2:	4630      	mov	r0, r6
 80087a4:	4639      	mov	r1, r7
 80087a6:	f7f8 f997 	bl	8000ad8 <__aeabi_dcmpeq>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	f000 80c1 	beq.w	8008932 <__kernel_rem_pio2+0x402>
 80087b0:	1e65      	subs	r5, r4, #1
 80087b2:	462b      	mov	r3, r5
 80087b4:	2200      	movs	r2, #0
 80087b6:	9900      	ldr	r1, [sp, #0]
 80087b8:	428b      	cmp	r3, r1
 80087ba:	da6d      	bge.n	8008898 <__kernel_rem_pio2+0x368>
 80087bc:	2a00      	cmp	r2, #0
 80087be:	f000 808a 	beq.w	80088d6 <__kernel_rem_pio2+0x3a6>
 80087c2:	ab0c      	add	r3, sp, #48	; 0x30
 80087c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80087c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 80ae 	beq.w	800892e <__kernel_rem_pio2+0x3fe>
 80087d2:	4650      	mov	r0, sl
 80087d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008848 <__kernel_rem_pio2+0x318>
 80087d8:	f000 f9fa 	bl	8008bd0 <scalbn>
 80087dc:	1c6b      	adds	r3, r5, #1
 80087de:	00da      	lsls	r2, r3, #3
 80087e0:	9205      	str	r2, [sp, #20]
 80087e2:	ec57 6b10 	vmov	r6, r7, d0
 80087e6:	aa70      	add	r2, sp, #448	; 0x1c0
 80087e8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800885c <__kernel_rem_pio2+0x32c>
 80087ec:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80087f0:	462c      	mov	r4, r5
 80087f2:	f04f 0800 	mov.w	r8, #0
 80087f6:	2c00      	cmp	r4, #0
 80087f8:	f280 80d4 	bge.w	80089a4 <__kernel_rem_pio2+0x474>
 80087fc:	462c      	mov	r4, r5
 80087fe:	2c00      	cmp	r4, #0
 8008800:	f2c0 8102 	blt.w	8008a08 <__kernel_rem_pio2+0x4d8>
 8008804:	4b18      	ldr	r3, [pc, #96]	; (8008868 <__kernel_rem_pio2+0x338>)
 8008806:	461e      	mov	r6, r3
 8008808:	ab70      	add	r3, sp, #448	; 0x1c0
 800880a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800880e:	1b2b      	subs	r3, r5, r4
 8008810:	f04f 0900 	mov.w	r9, #0
 8008814:	f04f 0a00 	mov.w	sl, #0
 8008818:	2700      	movs	r7, #0
 800881a:	9306      	str	r3, [sp, #24]
 800881c:	e0e6      	b.n	80089ec <__kernel_rem_pio2+0x4bc>
 800881e:	f04f 0b02 	mov.w	fp, #2
 8008822:	e756      	b.n	80086d2 <__kernel_rem_pio2+0x1a2>
 8008824:	f8d8 3000 	ldr.w	r3, [r8]
 8008828:	bb05      	cbnz	r5, 800886c <__kernel_rem_pio2+0x33c>
 800882a:	b123      	cbz	r3, 8008836 <__kernel_rem_pio2+0x306>
 800882c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008830:	f8c8 3000 	str.w	r3, [r8]
 8008834:	2301      	movs	r3, #1
 8008836:	3201      	adds	r2, #1
 8008838:	f108 0804 	add.w	r8, r8, #4
 800883c:	461d      	mov	r5, r3
 800883e:	e74f      	b.n	80086e0 <__kernel_rem_pio2+0x1b0>
	...
 800884c:	3ff00000 	.word	0x3ff00000
 8008850:	080093c8 	.word	0x080093c8
 8008854:	40200000 	.word	0x40200000
 8008858:	3ff00000 	.word	0x3ff00000
 800885c:	3e700000 	.word	0x3e700000
 8008860:	41700000 	.word	0x41700000
 8008864:	3fe00000 	.word	0x3fe00000
 8008868:	08009388 	.word	0x08009388
 800886c:	1acb      	subs	r3, r1, r3
 800886e:	f8c8 3000 	str.w	r3, [r8]
 8008872:	462b      	mov	r3, r5
 8008874:	e7df      	b.n	8008836 <__kernel_rem_pio2+0x306>
 8008876:	1e62      	subs	r2, r4, #1
 8008878:	ab0c      	add	r3, sp, #48	; 0x30
 800887a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008882:	a90c      	add	r1, sp, #48	; 0x30
 8008884:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008888:	e738      	b.n	80086fc <__kernel_rem_pio2+0x1cc>
 800888a:	1e62      	subs	r2, r4, #1
 800888c:	ab0c      	add	r3, sp, #48	; 0x30
 800888e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008892:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008896:	e7f4      	b.n	8008882 <__kernel_rem_pio2+0x352>
 8008898:	a90c      	add	r1, sp, #48	; 0x30
 800889a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800889e:	3b01      	subs	r3, #1
 80088a0:	430a      	orrs	r2, r1
 80088a2:	e788      	b.n	80087b6 <__kernel_rem_pio2+0x286>
 80088a4:	3301      	adds	r3, #1
 80088a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80088aa:	2900      	cmp	r1, #0
 80088ac:	d0fa      	beq.n	80088a4 <__kernel_rem_pio2+0x374>
 80088ae:	9a08      	ldr	r2, [sp, #32]
 80088b0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80088b4:	446a      	add	r2, sp
 80088b6:	3a98      	subs	r2, #152	; 0x98
 80088b8:	9208      	str	r2, [sp, #32]
 80088ba:	9a06      	ldr	r2, [sp, #24]
 80088bc:	a920      	add	r1, sp, #128	; 0x80
 80088be:	18a2      	adds	r2, r4, r2
 80088c0:	18e3      	adds	r3, r4, r3
 80088c2:	f104 0801 	add.w	r8, r4, #1
 80088c6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80088ca:	9302      	str	r3, [sp, #8]
 80088cc:	9b02      	ldr	r3, [sp, #8]
 80088ce:	4543      	cmp	r3, r8
 80088d0:	da04      	bge.n	80088dc <__kernel_rem_pio2+0x3ac>
 80088d2:	461c      	mov	r4, r3
 80088d4:	e6a2      	b.n	800861c <__kernel_rem_pio2+0xec>
 80088d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088d8:	2301      	movs	r3, #1
 80088da:	e7e4      	b.n	80088a6 <__kernel_rem_pio2+0x376>
 80088dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088de:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80088e2:	f7f7 fe27 	bl	8000534 <__aeabi_i2d>
 80088e6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80088ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ec:	46ab      	mov	fp, r5
 80088ee:	461c      	mov	r4, r3
 80088f0:	f04f 0900 	mov.w	r9, #0
 80088f4:	2600      	movs	r6, #0
 80088f6:	2700      	movs	r7, #0
 80088f8:	9b05      	ldr	r3, [sp, #20]
 80088fa:	4599      	cmp	r9, r3
 80088fc:	dd06      	ble.n	800890c <__kernel_rem_pio2+0x3dc>
 80088fe:	9b08      	ldr	r3, [sp, #32]
 8008900:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008904:	f108 0801 	add.w	r8, r8, #1
 8008908:	9308      	str	r3, [sp, #32]
 800890a:	e7df      	b.n	80088cc <__kernel_rem_pio2+0x39c>
 800890c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008910:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008914:	f7f7 fe78 	bl	8000608 <__aeabi_dmul>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	4630      	mov	r0, r6
 800891e:	4639      	mov	r1, r7
 8008920:	f7f7 fcbc 	bl	800029c <__adddf3>
 8008924:	f109 0901 	add.w	r9, r9, #1
 8008928:	4606      	mov	r6, r0
 800892a:	460f      	mov	r7, r1
 800892c:	e7e4      	b.n	80088f8 <__kernel_rem_pio2+0x3c8>
 800892e:	3d01      	subs	r5, #1
 8008930:	e747      	b.n	80087c2 <__kernel_rem_pio2+0x292>
 8008932:	ec47 6b10 	vmov	d0, r6, r7
 8008936:	f1ca 0000 	rsb	r0, sl, #0
 800893a:	f000 f949 	bl	8008bd0 <scalbn>
 800893e:	ec57 6b10 	vmov	r6, r7, d0
 8008942:	4ba0      	ldr	r3, [pc, #640]	; (8008bc4 <__kernel_rem_pio2+0x694>)
 8008944:	ee10 0a10 	vmov	r0, s0
 8008948:	2200      	movs	r2, #0
 800894a:	4639      	mov	r1, r7
 800894c:	f7f8 f8e2 	bl	8000b14 <__aeabi_dcmpge>
 8008950:	b1f8      	cbz	r0, 8008992 <__kernel_rem_pio2+0x462>
 8008952:	4b9d      	ldr	r3, [pc, #628]	; (8008bc8 <__kernel_rem_pio2+0x698>)
 8008954:	2200      	movs	r2, #0
 8008956:	4630      	mov	r0, r6
 8008958:	4639      	mov	r1, r7
 800895a:	f7f7 fe55 	bl	8000608 <__aeabi_dmul>
 800895e:	f7f8 f903 	bl	8000b68 <__aeabi_d2iz>
 8008962:	4680      	mov	r8, r0
 8008964:	f7f7 fde6 	bl	8000534 <__aeabi_i2d>
 8008968:	4b96      	ldr	r3, [pc, #600]	; (8008bc4 <__kernel_rem_pio2+0x694>)
 800896a:	2200      	movs	r2, #0
 800896c:	f7f7 fe4c 	bl	8000608 <__aeabi_dmul>
 8008970:	460b      	mov	r3, r1
 8008972:	4602      	mov	r2, r0
 8008974:	4639      	mov	r1, r7
 8008976:	4630      	mov	r0, r6
 8008978:	f7f7 fc8e 	bl	8000298 <__aeabi_dsub>
 800897c:	f7f8 f8f4 	bl	8000b68 <__aeabi_d2iz>
 8008980:	1c65      	adds	r5, r4, #1
 8008982:	ab0c      	add	r3, sp, #48	; 0x30
 8008984:	f10a 0a18 	add.w	sl, sl, #24
 8008988:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800898c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008990:	e71f      	b.n	80087d2 <__kernel_rem_pio2+0x2a2>
 8008992:	4630      	mov	r0, r6
 8008994:	4639      	mov	r1, r7
 8008996:	f7f8 f8e7 	bl	8000b68 <__aeabi_d2iz>
 800899a:	ab0c      	add	r3, sp, #48	; 0x30
 800899c:	4625      	mov	r5, r4
 800899e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80089a2:	e716      	b.n	80087d2 <__kernel_rem_pio2+0x2a2>
 80089a4:	ab0c      	add	r3, sp, #48	; 0x30
 80089a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80089aa:	f7f7 fdc3 	bl	8000534 <__aeabi_i2d>
 80089ae:	4632      	mov	r2, r6
 80089b0:	463b      	mov	r3, r7
 80089b2:	f7f7 fe29 	bl	8000608 <__aeabi_dmul>
 80089b6:	4642      	mov	r2, r8
 80089b8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80089bc:	464b      	mov	r3, r9
 80089be:	4630      	mov	r0, r6
 80089c0:	4639      	mov	r1, r7
 80089c2:	f7f7 fe21 	bl	8000608 <__aeabi_dmul>
 80089c6:	3c01      	subs	r4, #1
 80089c8:	4606      	mov	r6, r0
 80089ca:	460f      	mov	r7, r1
 80089cc:	e713      	b.n	80087f6 <__kernel_rem_pio2+0x2c6>
 80089ce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80089d2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80089d6:	f7f7 fe17 	bl	8000608 <__aeabi_dmul>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4648      	mov	r0, r9
 80089e0:	4651      	mov	r1, sl
 80089e2:	f7f7 fc5b 	bl	800029c <__adddf3>
 80089e6:	3701      	adds	r7, #1
 80089e8:	4681      	mov	r9, r0
 80089ea:	468a      	mov	sl, r1
 80089ec:	9b00      	ldr	r3, [sp, #0]
 80089ee:	429f      	cmp	r7, r3
 80089f0:	dc02      	bgt.n	80089f8 <__kernel_rem_pio2+0x4c8>
 80089f2:	9b06      	ldr	r3, [sp, #24]
 80089f4:	429f      	cmp	r7, r3
 80089f6:	ddea      	ble.n	80089ce <__kernel_rem_pio2+0x49e>
 80089f8:	9a06      	ldr	r2, [sp, #24]
 80089fa:	ab48      	add	r3, sp, #288	; 0x120
 80089fc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008a00:	e9c6 9a00 	strd	r9, sl, [r6]
 8008a04:	3c01      	subs	r4, #1
 8008a06:	e6fa      	b.n	80087fe <__kernel_rem_pio2+0x2ce>
 8008a08:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	dc0b      	bgt.n	8008a26 <__kernel_rem_pio2+0x4f6>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dc39      	bgt.n	8008a86 <__kernel_rem_pio2+0x556>
 8008a12:	d05d      	beq.n	8008ad0 <__kernel_rem_pio2+0x5a0>
 8008a14:	9b02      	ldr	r3, [sp, #8]
 8008a16:	f003 0007 	and.w	r0, r3, #7
 8008a1a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008a1e:	ecbd 8b02 	vpop	{d8}
 8008a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a26:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d1f3      	bne.n	8008a14 <__kernel_rem_pio2+0x4e4>
 8008a2c:	9b05      	ldr	r3, [sp, #20]
 8008a2e:	9500      	str	r5, [sp, #0]
 8008a30:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008a34:	eb0d 0403 	add.w	r4, sp, r3
 8008a38:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008a3c:	46a2      	mov	sl, r4
 8008a3e:	9b00      	ldr	r3, [sp, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f1aa 0a08 	sub.w	sl, sl, #8
 8008a46:	dc69      	bgt.n	8008b1c <__kernel_rem_pio2+0x5ec>
 8008a48:	46aa      	mov	sl, r5
 8008a4a:	f1ba 0f01 	cmp.w	sl, #1
 8008a4e:	f1a4 0408 	sub.w	r4, r4, #8
 8008a52:	f300 8083 	bgt.w	8008b5c <__kernel_rem_pio2+0x62c>
 8008a56:	9c05      	ldr	r4, [sp, #20]
 8008a58:	ab48      	add	r3, sp, #288	; 0x120
 8008a5a:	441c      	add	r4, r3
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	2100      	movs	r1, #0
 8008a60:	2d01      	cmp	r5, #1
 8008a62:	f300 809a 	bgt.w	8008b9a <__kernel_rem_pio2+0x66a>
 8008a66:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008a6a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008a6e:	f1bb 0f00 	cmp.w	fp, #0
 8008a72:	f040 8098 	bne.w	8008ba6 <__kernel_rem_pio2+0x676>
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	e9c3 7800 	strd	r7, r8, [r3]
 8008a7c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008a80:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008a84:	e7c6      	b.n	8008a14 <__kernel_rem_pio2+0x4e4>
 8008a86:	9e05      	ldr	r6, [sp, #20]
 8008a88:	ab48      	add	r3, sp, #288	; 0x120
 8008a8a:	441e      	add	r6, r3
 8008a8c:	462c      	mov	r4, r5
 8008a8e:	2000      	movs	r0, #0
 8008a90:	2100      	movs	r1, #0
 8008a92:	2c00      	cmp	r4, #0
 8008a94:	da33      	bge.n	8008afe <__kernel_rem_pio2+0x5ce>
 8008a96:	f1bb 0f00 	cmp.w	fp, #0
 8008a9a:	d036      	beq.n	8008b0a <__kernel_rem_pio2+0x5da>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008aa2:	9c04      	ldr	r4, [sp, #16]
 8008aa4:	e9c4 2300 	strd	r2, r3, [r4]
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008ab0:	f7f7 fbf2 	bl	8000298 <__aeabi_dsub>
 8008ab4:	ae4a      	add	r6, sp, #296	; 0x128
 8008ab6:	2401      	movs	r4, #1
 8008ab8:	42a5      	cmp	r5, r4
 8008aba:	da29      	bge.n	8008b10 <__kernel_rem_pio2+0x5e0>
 8008abc:	f1bb 0f00 	cmp.w	fp, #0
 8008ac0:	d002      	beq.n	8008ac8 <__kernel_rem_pio2+0x598>
 8008ac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	9b04      	ldr	r3, [sp, #16]
 8008aca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008ace:	e7a1      	b.n	8008a14 <__kernel_rem_pio2+0x4e4>
 8008ad0:	9c05      	ldr	r4, [sp, #20]
 8008ad2:	ab48      	add	r3, sp, #288	; 0x120
 8008ad4:	441c      	add	r4, r3
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	2100      	movs	r1, #0
 8008ada:	2d00      	cmp	r5, #0
 8008adc:	da09      	bge.n	8008af2 <__kernel_rem_pio2+0x5c2>
 8008ade:	f1bb 0f00 	cmp.w	fp, #0
 8008ae2:	d002      	beq.n	8008aea <__kernel_rem_pio2+0x5ba>
 8008ae4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ae8:	4619      	mov	r1, r3
 8008aea:	9b04      	ldr	r3, [sp, #16]
 8008aec:	e9c3 0100 	strd	r0, r1, [r3]
 8008af0:	e790      	b.n	8008a14 <__kernel_rem_pio2+0x4e4>
 8008af2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008af6:	f7f7 fbd1 	bl	800029c <__adddf3>
 8008afa:	3d01      	subs	r5, #1
 8008afc:	e7ed      	b.n	8008ada <__kernel_rem_pio2+0x5aa>
 8008afe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008b02:	f7f7 fbcb 	bl	800029c <__adddf3>
 8008b06:	3c01      	subs	r4, #1
 8008b08:	e7c3      	b.n	8008a92 <__kernel_rem_pio2+0x562>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	e7c8      	b.n	8008aa2 <__kernel_rem_pio2+0x572>
 8008b10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008b14:	f7f7 fbc2 	bl	800029c <__adddf3>
 8008b18:	3401      	adds	r4, #1
 8008b1a:	e7cd      	b.n	8008ab8 <__kernel_rem_pio2+0x588>
 8008b1c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008b24:	9b00      	ldr	r3, [sp, #0]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	4632      	mov	r2, r6
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	4640      	mov	r0, r8
 8008b30:	4649      	mov	r1, r9
 8008b32:	f7f7 fbb3 	bl	800029c <__adddf3>
 8008b36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4649      	mov	r1, r9
 8008b42:	f7f7 fba9 	bl	8000298 <__aeabi_dsub>
 8008b46:	4632      	mov	r2, r6
 8008b48:	463b      	mov	r3, r7
 8008b4a:	f7f7 fba7 	bl	800029c <__adddf3>
 8008b4e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008b52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b56:	ed8a 7b00 	vstr	d7, [sl]
 8008b5a:	e770      	b.n	8008a3e <__kernel_rem_pio2+0x50e>
 8008b5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008b60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008b64:	4640      	mov	r0, r8
 8008b66:	4632      	mov	r2, r6
 8008b68:	463b      	mov	r3, r7
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	f7f7 fb96 	bl	800029c <__adddf3>
 8008b70:	e9cd 0100 	strd	r0, r1, [sp]
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4640      	mov	r0, r8
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	f7f7 fb8c 	bl	8000298 <__aeabi_dsub>
 8008b80:	4632      	mov	r2, r6
 8008b82:	463b      	mov	r3, r7
 8008b84:	f7f7 fb8a 	bl	800029c <__adddf3>
 8008b88:	ed9d 7b00 	vldr	d7, [sp]
 8008b8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b90:	ed84 7b00 	vstr	d7, [r4]
 8008b94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b98:	e757      	b.n	8008a4a <__kernel_rem_pio2+0x51a>
 8008b9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008b9e:	f7f7 fb7d 	bl	800029c <__adddf3>
 8008ba2:	3d01      	subs	r5, #1
 8008ba4:	e75c      	b.n	8008a60 <__kernel_rem_pio2+0x530>
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	9a04      	ldr	r2, [sp, #16]
 8008baa:	601f      	str	r7, [r3, #0]
 8008bac:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008bb0:	605c      	str	r4, [r3, #4]
 8008bb2:	609d      	str	r5, [r3, #8]
 8008bb4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008bb8:	60d3      	str	r3, [r2, #12]
 8008bba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bbe:	6110      	str	r0, [r2, #16]
 8008bc0:	6153      	str	r3, [r2, #20]
 8008bc2:	e727      	b.n	8008a14 <__kernel_rem_pio2+0x4e4>
 8008bc4:	41700000 	.word	0x41700000
 8008bc8:	3e700000 	.word	0x3e700000
 8008bcc:	00000000 	.word	0x00000000

08008bd0 <scalbn>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	ec55 4b10 	vmov	r4, r5, d0
 8008bd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008bda:	4606      	mov	r6, r0
 8008bdc:	462b      	mov	r3, r5
 8008bde:	b999      	cbnz	r1, 8008c08 <scalbn+0x38>
 8008be0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008be4:	4323      	orrs	r3, r4
 8008be6:	d03f      	beq.n	8008c68 <scalbn+0x98>
 8008be8:	4b35      	ldr	r3, [pc, #212]	; (8008cc0 <scalbn+0xf0>)
 8008bea:	4629      	mov	r1, r5
 8008bec:	ee10 0a10 	vmov	r0, s0
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f7f7 fd09 	bl	8000608 <__aeabi_dmul>
 8008bf6:	4b33      	ldr	r3, [pc, #204]	; (8008cc4 <scalbn+0xf4>)
 8008bf8:	429e      	cmp	r6, r3
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	460d      	mov	r5, r1
 8008bfe:	da10      	bge.n	8008c22 <scalbn+0x52>
 8008c00:	a327      	add	r3, pc, #156	; (adr r3, 8008ca0 <scalbn+0xd0>)
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	e01f      	b.n	8008c48 <scalbn+0x78>
 8008c08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008c0c:	4291      	cmp	r1, r2
 8008c0e:	d10c      	bne.n	8008c2a <scalbn+0x5a>
 8008c10:	ee10 2a10 	vmov	r2, s0
 8008c14:	4620      	mov	r0, r4
 8008c16:	4629      	mov	r1, r5
 8008c18:	f7f7 fb40 	bl	800029c <__adddf3>
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	460d      	mov	r5, r1
 8008c20:	e022      	b.n	8008c68 <scalbn+0x98>
 8008c22:	460b      	mov	r3, r1
 8008c24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008c28:	3936      	subs	r1, #54	; 0x36
 8008c2a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008c2e:	4296      	cmp	r6, r2
 8008c30:	dd0d      	ble.n	8008c4e <scalbn+0x7e>
 8008c32:	2d00      	cmp	r5, #0
 8008c34:	a11c      	add	r1, pc, #112	; (adr r1, 8008ca8 <scalbn+0xd8>)
 8008c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c3a:	da02      	bge.n	8008c42 <scalbn+0x72>
 8008c3c:	a11c      	add	r1, pc, #112	; (adr r1, 8008cb0 <scalbn+0xe0>)
 8008c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c42:	a319      	add	r3, pc, #100	; (adr r3, 8008ca8 <scalbn+0xd8>)
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f7f7 fcde 	bl	8000608 <__aeabi_dmul>
 8008c4c:	e7e6      	b.n	8008c1c <scalbn+0x4c>
 8008c4e:	1872      	adds	r2, r6, r1
 8008c50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008c54:	428a      	cmp	r2, r1
 8008c56:	dcec      	bgt.n	8008c32 <scalbn+0x62>
 8008c58:	2a00      	cmp	r2, #0
 8008c5a:	dd08      	ble.n	8008c6e <scalbn+0x9e>
 8008c5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008c68:	ec45 4b10 	vmov	d0, r4, r5
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
 8008c6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008c72:	da08      	bge.n	8008c86 <scalbn+0xb6>
 8008c74:	2d00      	cmp	r5, #0
 8008c76:	a10a      	add	r1, pc, #40	; (adr r1, 8008ca0 <scalbn+0xd0>)
 8008c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c7c:	dac0      	bge.n	8008c00 <scalbn+0x30>
 8008c7e:	a10e      	add	r1, pc, #56	; (adr r1, 8008cb8 <scalbn+0xe8>)
 8008c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c84:	e7bc      	b.n	8008c00 <scalbn+0x30>
 8008c86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c8a:	3236      	adds	r2, #54	; 0x36
 8008c8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008c94:	4620      	mov	r0, r4
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <scalbn+0xf8>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	e7d5      	b.n	8008c48 <scalbn+0x78>
 8008c9c:	f3af 8000 	nop.w
 8008ca0:	c2f8f359 	.word	0xc2f8f359
 8008ca4:	01a56e1f 	.word	0x01a56e1f
 8008ca8:	8800759c 	.word	0x8800759c
 8008cac:	7e37e43c 	.word	0x7e37e43c
 8008cb0:	8800759c 	.word	0x8800759c
 8008cb4:	fe37e43c 	.word	0xfe37e43c
 8008cb8:	c2f8f359 	.word	0xc2f8f359
 8008cbc:	81a56e1f 	.word	0x81a56e1f
 8008cc0:	43500000 	.word	0x43500000
 8008cc4:	ffff3cb0 	.word	0xffff3cb0
 8008cc8:	3c900000 	.word	0x3c900000
 8008ccc:	00000000 	.word	0x00000000

08008cd0 <floor>:
 8008cd0:	ec51 0b10 	vmov	r0, r1, d0
 8008cd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cdc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008ce0:	2e13      	cmp	r6, #19
 8008ce2:	ee10 5a10 	vmov	r5, s0
 8008ce6:	ee10 8a10 	vmov	r8, s0
 8008cea:	460c      	mov	r4, r1
 8008cec:	dc31      	bgt.n	8008d52 <floor+0x82>
 8008cee:	2e00      	cmp	r6, #0
 8008cf0:	da14      	bge.n	8008d1c <floor+0x4c>
 8008cf2:	a333      	add	r3, pc, #204	; (adr r3, 8008dc0 <floor+0xf0>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f7f7 fad0 	bl	800029c <__adddf3>
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f7f7 ff12 	bl	8000b28 <__aeabi_dcmpgt>
 8008d04:	b138      	cbz	r0, 8008d16 <floor+0x46>
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	da53      	bge.n	8008db2 <floor+0xe2>
 8008d0a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008d0e:	4325      	orrs	r5, r4
 8008d10:	d052      	beq.n	8008db8 <floor+0xe8>
 8008d12:	4c2d      	ldr	r4, [pc, #180]	; (8008dc8 <floor+0xf8>)
 8008d14:	2500      	movs	r5, #0
 8008d16:	4621      	mov	r1, r4
 8008d18:	4628      	mov	r0, r5
 8008d1a:	e024      	b.n	8008d66 <floor+0x96>
 8008d1c:	4f2b      	ldr	r7, [pc, #172]	; (8008dcc <floor+0xfc>)
 8008d1e:	4137      	asrs	r7, r6
 8008d20:	ea01 0307 	and.w	r3, r1, r7
 8008d24:	4303      	orrs	r3, r0
 8008d26:	d01e      	beq.n	8008d66 <floor+0x96>
 8008d28:	a325      	add	r3, pc, #148	; (adr r3, 8008dc0 <floor+0xf0>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	f7f7 fab5 	bl	800029c <__adddf3>
 8008d32:	2200      	movs	r2, #0
 8008d34:	2300      	movs	r3, #0
 8008d36:	f7f7 fef7 	bl	8000b28 <__aeabi_dcmpgt>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d0eb      	beq.n	8008d16 <floor+0x46>
 8008d3e:	2c00      	cmp	r4, #0
 8008d40:	bfbe      	ittt	lt
 8008d42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008d46:	4133      	asrlt	r3, r6
 8008d48:	18e4      	addlt	r4, r4, r3
 8008d4a:	ea24 0407 	bic.w	r4, r4, r7
 8008d4e:	2500      	movs	r5, #0
 8008d50:	e7e1      	b.n	8008d16 <floor+0x46>
 8008d52:	2e33      	cmp	r6, #51	; 0x33
 8008d54:	dd0b      	ble.n	8008d6e <floor+0x9e>
 8008d56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008d5a:	d104      	bne.n	8008d66 <floor+0x96>
 8008d5c:	ee10 2a10 	vmov	r2, s0
 8008d60:	460b      	mov	r3, r1
 8008d62:	f7f7 fa9b 	bl	800029c <__adddf3>
 8008d66:	ec41 0b10 	vmov	d0, r0, r1
 8008d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008d72:	f04f 37ff 	mov.w	r7, #4294967295
 8008d76:	40df      	lsrs	r7, r3
 8008d78:	4238      	tst	r0, r7
 8008d7a:	d0f4      	beq.n	8008d66 <floor+0x96>
 8008d7c:	a310      	add	r3, pc, #64	; (adr r3, 8008dc0 <floor+0xf0>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	f7f7 fa8b 	bl	800029c <__adddf3>
 8008d86:	2200      	movs	r2, #0
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f7f7 fecd 	bl	8000b28 <__aeabi_dcmpgt>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d0c1      	beq.n	8008d16 <floor+0x46>
 8008d92:	2c00      	cmp	r4, #0
 8008d94:	da0a      	bge.n	8008dac <floor+0xdc>
 8008d96:	2e14      	cmp	r6, #20
 8008d98:	d101      	bne.n	8008d9e <floor+0xce>
 8008d9a:	3401      	adds	r4, #1
 8008d9c:	e006      	b.n	8008dac <floor+0xdc>
 8008d9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008da2:	2301      	movs	r3, #1
 8008da4:	40b3      	lsls	r3, r6
 8008da6:	441d      	add	r5, r3
 8008da8:	45a8      	cmp	r8, r5
 8008daa:	d8f6      	bhi.n	8008d9a <floor+0xca>
 8008dac:	ea25 0507 	bic.w	r5, r5, r7
 8008db0:	e7b1      	b.n	8008d16 <floor+0x46>
 8008db2:	2500      	movs	r5, #0
 8008db4:	462c      	mov	r4, r5
 8008db6:	e7ae      	b.n	8008d16 <floor+0x46>
 8008db8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008dbc:	e7ab      	b.n	8008d16 <floor+0x46>
 8008dbe:	bf00      	nop
 8008dc0:	8800759c 	.word	0x8800759c
 8008dc4:	7e37e43c 	.word	0x7e37e43c
 8008dc8:	bff00000 	.word	0xbff00000
 8008dcc:	000fffff 	.word	0x000fffff

08008dd0 <_init>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	bf00      	nop
 8008dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd6:	bc08      	pop	{r3}
 8008dd8:	469e      	mov	lr, r3
 8008dda:	4770      	bx	lr

08008ddc <_fini>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr
