
motor MERC2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800b288  0800b288  0001b288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6cc  0800b6cc  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6cc  0800b6cc  0001b6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6d4  0800b6d4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6d4  0800b6d4  0001b6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6d8  0800b6d8  0001b6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b6dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e0c  200001f8  0800b8d4  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005004  0800b8d4  00025004  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a50e  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004048  00000000  00000000  0003a779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001162  00000000  00000000  0003fe48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ad07  00000000  00000000  00040faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b84e  00000000  00000000  0005bcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b403  00000000  00000000  000774ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006dec  00000000  00000000  00112904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001196f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b270 	.word	0x0800b270

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800b270 	.word	0x0800b270

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	0000      	movs	r0, r0
	...

08000ef8 <get_rpm>:
	double rpm;
	uint16_t cnt=0;
	uint16_t preCnt=0;
	int loop=0;
	bool flag_rot;
double get_rpm(int motor){
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	const uint32_t timeout = 100U *osKernelGetSysTimerFreq()/1000000u * 200;
 8000f00:	f004 fec2 	bl	8005c88 <osKernelGetSysTimerFreq>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2264      	movs	r2, #100	; 0x64
 8000f08:	fb02 f303 	mul.w	r3, r2, r3
 8000f0c:	4a6c      	ldr	r2, [pc, #432]	; (80010c0 <get_rpm+0x1c8>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	0c9b      	lsrs	r3, r3, #18
 8000f14:	22c8      	movs	r2, #200	; 0xc8
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	60fb      	str	r3, [r7, #12]
//	reset_tick();

	switch (motor){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d029      	beq.n	8000f76 <get_rpm+0x7e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	dc36      	bgt.n	8000f96 <get_rpm+0x9e>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d003      	beq.n	8000f36 <get_rpm+0x3e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d010      	beq.n	8000f56 <get_rpm+0x5e>
 8000f34:	e02f      	b.n	8000f96 <get_rpm+0x9e>
		case MOTOR_1:
			__HAL_TIM_SET_COUNTER(&htim1, (flag_rot_1)?65535:0);
 8000f36:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <get_rpm+0x1cc>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <get_rpm+0x4c>
 8000f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f42:	e000      	b.n	8000f46 <get_rpm+0x4e>
 8000f44:	2200      	movs	r2, #0
 8000f46:	4b60      	ldr	r3, [pc, #384]	; (80010c8 <get_rpm+0x1d0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_1;
 8000f4c:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <get_rpm+0x1cc>)
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <get_rpm+0x1d4>)
 8000f52:	701a      	strb	r2, [r3, #0]
			break;
 8000f54:	e01f      	b.n	8000f96 <get_rpm+0x9e>
		case MOTOR_2:
			__HAL_TIM_SET_COUNTER(&htim3, (flag_rot_2)?65535:0);
 8000f56:	4b5e      	ldr	r3, [pc, #376]	; (80010d0 <get_rpm+0x1d8>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <get_rpm+0x6c>
 8000f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f62:	e000      	b.n	8000f66 <get_rpm+0x6e>
 8000f64:	2200      	movs	r2, #0
 8000f66:	4b5b      	ldr	r3, [pc, #364]	; (80010d4 <get_rpm+0x1dc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_2;
 8000f6c:	4b58      	ldr	r3, [pc, #352]	; (80010d0 <get_rpm+0x1d8>)
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	4b56      	ldr	r3, [pc, #344]	; (80010cc <get_rpm+0x1d4>)
 8000f72:	701a      	strb	r2, [r3, #0]
			break;
 8000f74:	e00f      	b.n	8000f96 <get_rpm+0x9e>
		case MOTOR_3:
			__HAL_TIM_SET_COUNTER(&htim4, (flag_rot_3)?65535:0);
 8000f76:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <get_rpm+0x1e0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <get_rpm+0x8c>
 8000f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f82:	e000      	b.n	8000f86 <get_rpm+0x8e>
 8000f84:	2200      	movs	r2, #0
 8000f86:	4b55      	ldr	r3, [pc, #340]	; (80010dc <get_rpm+0x1e4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_3;
 8000f8c:	4b52      	ldr	r3, [pc, #328]	; (80010d8 <get_rpm+0x1e0>)
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <get_rpm+0x1d4>)
 8000f92:	701a      	strb	r2, [r3, #0]
			break;
 8000f94:	bf00      	nop
	}
	ResetLoop(flag_rot);
 8000f96:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <get_rpm+0x1d4>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f8de 	bl	800115c <ResetLoop>
	volatile uint32_t a=osKernelGetSysTimerCount();
 8000fa0:	f004 fe38 	bl	8005c14 <osKernelGetSysTimerCount>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60bb      	str	r3, [r7, #8]
	while(osKernelGetSysTimerCount()- a <= timeout){
 8000fa8:	e029      	b.n	8000ffe <get_rpm+0x106>
		switch (motor){
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d017      	beq.n	8000fe0 <get_rpm+0xe8>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	dc1b      	bgt.n	8000fee <get_rpm+0xf6>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d003      	beq.n	8000fc4 <get_rpm+0xcc>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d007      	beq.n	8000fd2 <get_rpm+0xda>
 8000fc2:	e014      	b.n	8000fee <get_rpm+0xf6>
			case MOTOR_1:
				cnt = __HAL_TIM_GET_COUNTER(&htim1);
 8000fc4:	4b40      	ldr	r3, [pc, #256]	; (80010c8 <get_rpm+0x1d0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <get_rpm+0x1e8>)
 8000fce:	801a      	strh	r2, [r3, #0]
				break;
 8000fd0:	e00d      	b.n	8000fee <get_rpm+0xf6>

			case MOTOR_2:
				cnt = __HAL_TIM_GET_COUNTER(&htim3);
 8000fd2:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <get_rpm+0x1dc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <get_rpm+0x1e8>)
 8000fdc:	801a      	strh	r2, [r3, #0]
				break;
 8000fde:	e006      	b.n	8000fee <get_rpm+0xf6>

			case MOTOR_3:
				cnt = __HAL_TIM_GET_COUNTER(&htim4);
 8000fe0:	4b3e      	ldr	r3, [pc, #248]	; (80010dc <get_rpm+0x1e4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <get_rpm+0x1e8>)
 8000fea:	801a      	strh	r2, [r3, #0]
				break;
 8000fec:	bf00      	nop
		}
		CountLoop(cnt, flag_rot);
 8000fee:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <get_rpm+0x1e8>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	4a36      	ldr	r2, [pc, #216]	; (80010cc <get_rpm+0x1d4>)
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f87b 	bl	80010f4 <CountLoop>
	while(osKernelGetSysTimerCount()- a <= timeout){
 8000ffe:	f004 fe09 	bl	8005c14 <osKernelGetSysTimerCount>
 8001002:	4602      	mov	r2, r0
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	429a      	cmp	r2, r3
 800100c:	d2cd      	bcs.n	8000faa <get_rpm+0xb2>
	}
	rpm= ((double)loop*65000+((flag_rot)?(double)(65535-cnt):(double)cnt))/47000*50*60;
 800100e:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <get_rpm+0x1ec>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa8e 	bl	8000534 <__aeabi_i2d>
 8001018:	a325      	add	r3, pc, #148	; (adr r3, 80010b0 <get_rpm+0x1b8>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff faf3 	bl	8000608 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4614      	mov	r4, r2
 8001028:	461d      	mov	r5, r3
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <get_rpm+0x1d4>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d008      	beq.n	8001044 <get_rpm+0x14c>
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <get_rpm+0x1e8>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800103a:	33ff      	adds	r3, #255	; 0xff
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa79 	bl	8000534 <__aeabi_i2d>
 8001042:	e004      	b.n	800104e <get_rpm+0x156>
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <get_rpm+0x1e8>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa63 	bl	8000514 <__aeabi_ui2d>
 800104e:	4622      	mov	r2, r4
 8001050:	462b      	mov	r3, r5
 8001052:	f7ff f923 	bl	800029c <__adddf3>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	a316      	add	r3, pc, #88	; (adr r3, 80010b8 <get_rpm+0x1c0>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fbfa 	bl	800085c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <get_rpm+0x1f0>)
 8001076:	f7ff fac7 	bl	8000608 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <get_rpm+0x1f4>)
 8001088:	f7ff fabe 	bl	8000608 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4917      	ldr	r1, [pc, #92]	; (80010f0 <get_rpm+0x1f8>)
 8001092:	e9c1 2300 	strd	r2, r3, [r1]

	return rpm;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <get_rpm+0x1f8>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	ec43 2b17 	vmov	d7, r2, r3
}
 80010a0:	eeb0 0a47 	vmov.f32	s0, s14
 80010a4:	eef0 0a67 	vmov.f32	s1, s15
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bdb0      	pop	{r4, r5, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	00000000 	.word	0x00000000
 80010b4:	40efbd00 	.word	0x40efbd00
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40e6f300 	.word	0x40e6f300
 80010c0:	431bde83 	.word	0x431bde83
 80010c4:	20000461 	.word	0x20000461
 80010c8:	20000238 	.word	0x20000238
 80010cc:	20000228 	.word	0x20000228
 80010d0:	20000462 	.word	0x20000462
 80010d4:	200002c8 	.word	0x200002c8
 80010d8:	20000463 	.word	0x20000463
 80010dc:	20000310 	.word	0x20000310
 80010e0:	20000220 	.word	0x20000220
 80010e4:	20000224 	.word	0x20000224
 80010e8:	40490000 	.word	0x40490000
 80010ec:	404e0000 	.word	0x404e0000
 80010f0:	20000218 	.word	0x20000218

080010f4 <CountLoop>:
void CountLoop(uint16_t cnt, bool flag){
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	460a      	mov	r2, r1
 80010fe:	80fb      	strh	r3, [r7, #6]
 8001100:	4613      	mov	r3, r2
 8001102:	717b      	strb	r3, [r7, #5]
	if (!flag){
 8001104:	797b      	ldrb	r3, [r7, #5]
 8001106:	f083 0301 	eor.w	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00d      	beq.n	800112c <CountLoop+0x38>
		if(cnt<preCnt){ //working as MOTOR1=RESET, MOTOR2=RESET, MOTOR3=RESET
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <CountLoop+0x60>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	88fa      	ldrh	r2, [r7, #6]
 8001116:	429a      	cmp	r2, r3
 8001118:	d204      	bcs.n	8001124 <CountLoop+0x30>
			loop++;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <CountLoop+0x64>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <CountLoop+0x64>)
 8001122:	6013      	str	r3, [r2, #0]
		}
		preCnt=cnt;
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <CountLoop+0x60>)
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	8013      	strh	r3, [r2, #0]
		if(cnt>preCnt){	//
			loop++;
		}
		preCnt=cnt;
	}
}
 800112a:	e00c      	b.n	8001146 <CountLoop+0x52>
		if(cnt>preCnt){	//
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <CountLoop+0x60>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	88fa      	ldrh	r2, [r7, #6]
 8001132:	429a      	cmp	r2, r3
 8001134:	d904      	bls.n	8001140 <CountLoop+0x4c>
			loop++;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <CountLoop+0x64>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <CountLoop+0x64>)
 800113e:	6013      	str	r3, [r2, #0]
		preCnt=cnt;
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <CountLoop+0x60>)
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	8013      	strh	r3, [r2, #0]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000222 	.word	0x20000222
 8001158:	20000224 	.word	0x20000224

0800115c <ResetLoop>:
void ResetLoop(bool flag){
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	if(!flag){
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f083 0301 	eor.w	r3, r3, #1
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <ResetLoop+0x24>
		loop=0;
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <ResetLoop+0x40>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
		preCnt=0;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <ResetLoop+0x44>)
 800117a:	2200      	movs	r2, #0
 800117c:	801a      	strh	r2, [r3, #0]
	}else{
		loop=0;
		preCnt=65535;
	}
}
 800117e:	e006      	b.n	800118e <ResetLoop+0x32>
		loop=0;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <ResetLoop+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
		preCnt=65535;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <ResetLoop+0x44>)
 8001188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800118c:	801a      	strh	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000224 	.word	0x20000224
 80011a0:	20000222 	.word	0x20000222

080011a4 <systick_init_ms>:
#include "stm32f4xx_it.h"

volatile uint64_t ms,rms;
//volatile uint64_t millis_count = 0;
void systick_init_ms(uint32_t frequency) /*Frequency in MHz*/
	{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	; 0x50
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop

	    // Disable interrupts
	    __disable_irq();

	    // Initialize TIM10 peripheral
	    htim10.Instance = TIM10;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <systick_init_ms+0x68>)
 80011b2:	60bb      	str	r3, [r7, #8]
	    htim10.Init.Prescaler = HAL_RCC_GetPCLK1Freq() / 1000000 - 1; // Assuming PCLK1 frequency in MHz
 80011b4:	f002 fa40 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a15      	ldr	r2, [pc, #84]	; (8001210 <systick_init_ms+0x6c>)
 80011bc:	fba2 2303 	umull	r2, r3, r2, r3
 80011c0:	0c9b      	lsrs	r3, r3, #18
 80011c2:	3b01      	subs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
	    htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
	    htim10.Init.Period = (1000000 / frequency) - 1; // Frequency in Hz
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <systick_init_ms+0x70>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	3b01      	subs	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
	    htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
	    HAL_TIM_Base_Init(&htim10);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 fa84 	bl	80036ec <HAL_TIM_Base_Init>

	    // Enable TIM10 interrupts
	    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0); // Set priority as needed
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	2019      	movs	r0, #25
 80011ea:	f001 fb5b 	bl	80028a4 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011ee:	2019      	movs	r0, #25
 80011f0:	f001 fb74 	bl	80028dc <HAL_NVIC_EnableIRQ>

	    // Start TIM10 counter
	    HAL_TIM_Base_Start_IT(&htim10);
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 fac7 	bl	800378c <HAL_TIM_Base_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 80011fe:	b662      	cpsie	i
}
 8001200:	bf00      	nop

	    // Re-enable interrupts
	    __enable_irq();
}
 8001202:	bf00      	nop
 8001204:	3750      	adds	r7, #80	; 0x50
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40014400 	.word	0x40014400
 8001210:	431bde83 	.word	0x431bde83
 8001214:	000f4240 	.word	0x000f4240

08001218 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001220:	1d39      	adds	r1, r7, #4
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	2201      	movs	r2, #1
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <__io_putchar+0x20>)
 800122a:	f003 fb9b 	bl	8004964 <HAL_UART_Transmit>
  return ch;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000358 	.word	0x20000358

0800123c <HAL_UART_RxCpltCallback>:
	pid.target_val_1=V1;
	pid.target_val_2=V2;
	pid.target_val_3=V3;
	PID_init(&pid);
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART6){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a08      	ldr	r2, [pc, #32]	; (800126c <HAL_UART_RxCpltCallback+0x30>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10a      	bne.n	8001264 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart2,&rx_data,sizeof(rx_data), 100);
 800124e:	2364      	movs	r3, #100	; 0x64
 8001250:	2201      	movs	r2, #1
 8001252:	4907      	ldr	r1, [pc, #28]	; (8001270 <HAL_UART_RxCpltCallback+0x34>)
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <HAL_UART_RxCpltCallback+0x38>)
 8001256:	f003 fb85 	bl	8004964 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 800125a:	2201      	movs	r2, #1
 800125c:	4904      	ldr	r1, [pc, #16]	; (8001270 <HAL_UART_RxCpltCallback+0x34>)
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <HAL_UART_RxCpltCallback+0x3c>)
 8001260:	f003 fca2 	bl	8004ba8 <HAL_UART_Receive_IT>
	}
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40011400 	.word	0x40011400
 8001270:	20000460 	.word	0x20000460
 8001274:	20000358 	.word	0x20000358
 8001278:	200003a0 	.word	0x200003a0

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f001 fa16 	bl	80026b0 <HAL_Init>
  /* USER CODE BEGIN Init */
  //init_State();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f892 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 fad6 	bl	8001838 <MX_GPIO_Init>
  MX_TIM3_Init();
 800128c:	f000 f9d8 	bl	8001640 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001290:	f000 f94c 	bl	800152c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001294:	f000 f8f2 	bl	800147c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001298:	f000 fa7a 	bl	8001790 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800129c:	f000 fa24 	bl	80016e8 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 80012a0:	f000 faa0 	bl	80017e4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  memset(buffer, 0, sizeof(buffer));
 80012a4:	2232      	movs	r2, #50	; 0x32
 80012a6:	2100      	movs	r1, #0
 80012a8:	482f      	ldr	r0, [pc, #188]	; (8001368 <main+0xec>)
 80012aa:	f008 f88c 	bl	80093c6 <memset>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 80012ae:	4b2f      	ldr	r3, [pc, #188]	; (800136c <main+0xf0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <main+0xf0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0220 	orr.w	r2, r2, #32
 80012bc:	60da      	str	r2, [r3, #12]

  systick_init_ms(8000000);
 80012be:	482c      	ldr	r0, [pc, #176]	; (8001370 <main+0xf4>)
 80012c0:	f7ff ff70 	bl	80011a4 <systick_init_ms>
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 100);
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <main+0xf8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2264      	movs	r2, #100	; 0x64
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, 100); //motor 2
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <main+0xf8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2264      	movs	r2, #100	; 0x64
 80012d2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 100); //motor 3
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <main+0xf8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2264      	movs	r2, #100	; 0x64
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e2:	4825      	ldr	r0, [pc, #148]	; (8001378 <main+0xfc>)
 80012e4:	f001 fd1e 	bl	8002d24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2104      	movs	r1, #4
 80012ec:	4823      	ldr	r0, [pc, #140]	; (800137c <main+0x100>)
 80012ee:	f001 fd19 	bl	8002d24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2102      	movs	r1, #2
 80012f6:	4821      	ldr	r0, [pc, #132]	; (800137c <main+0x100>)
 80012f8:	f001 fd14 	bl	8002d24 <HAL_GPIO_WritePin>


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012fc:	2100      	movs	r1, #0
 80012fe:	481d      	ldr	r0, [pc, #116]	; (8001374 <main+0xf8>)
 8001300:	f002 fb00 	bl	8003904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001304:	2104      	movs	r1, #4
 8001306:	481b      	ldr	r0, [pc, #108]	; (8001374 <main+0xf8>)
 8001308:	f002 fafc 	bl	8003904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800130c:	2108      	movs	r1, #8
 800130e:	4819      	ldr	r0, [pc, #100]	; (8001374 <main+0xf8>)
 8001310:	f002 faf8 	bl	8003904 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001314:	2104      	movs	r1, #4
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <main+0x104>)
 8001318:	f002 fc4a 	bl	8003bb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800131c:	2104      	movs	r1, #4
 800131e:	4819      	ldr	r0, [pc, #100]	; (8001384 <main+0x108>)
 8001320:	f002 fc46 	bl	8003bb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001324:	2104      	movs	r1, #4
 8001326:	4818      	ldr	r0, [pc, #96]	; (8001388 <main+0x10c>)
 8001328:	f002 fc42 	bl	8003bb0 <HAL_TIM_Encoder_Start>
//

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800132c:	f004 fbfc 	bl	8005b28 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of button */
  buttonHandle = osMessageQueueNew (10, sizeof(char), &button_attributes);
 8001330:	4a16      	ldr	r2, [pc, #88]	; (800138c <main+0x110>)
 8001332:	2101      	movs	r1, #1
 8001334:	200a      	movs	r0, #10
 8001336:	f004 fd60 	bl	8005dfa <osMessageQueueNew>
 800133a:	4603      	mov	r3, r0
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <main+0x114>)
 800133e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CONTROL */
  CONTROLHandle = osThreadNew(StartControl, NULL, &CONTROL_attributes);
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <main+0x118>)
 8001342:	2100      	movs	r1, #0
 8001344:	4814      	ldr	r0, [pc, #80]	; (8001398 <main+0x11c>)
 8001346:	f004 fcab 	bl	8005ca0 <osThreadNew>
 800134a:	4603      	mov	r3, r0
 800134c:	4a13      	ldr	r2, [pc, #76]	; (800139c <main+0x120>)
 800134e:	6013      	str	r3, [r2, #0]

  /* creation of PID */
  PIDHandle = osThreadNew(StartPID, NULL, &PID_attributes);
 8001350:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <main+0x124>)
 8001352:	2100      	movs	r1, #0
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <main+0x128>)
 8001356:	f004 fca3 	bl	8005ca0 <osThreadNew>
 800135a:	4603      	mov	r3, r0
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <main+0x12c>)
 800135e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001360:	f004 fc06 	bl	8005b70 <osKernelStart>
   * max is 1m/s
   */
//  HAL_Delay(1000);
//  Robot_Move(1, 225, 0);

  while (1)
 8001364:	e7fe      	b.n	8001364 <main+0xe8>
 8001366:	bf00      	nop
 8001368:	20000464 	.word	0x20000464
 800136c:	200003a0 	.word	0x200003a0
 8001370:	007a1200 	.word	0x007a1200
 8001374:	20000280 	.word	0x20000280
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	20000238 	.word	0x20000238
 8001384:	200002c8 	.word	0x200002c8
 8001388:	20000310 	.word	0x20000310
 800138c:	0800b32c 	.word	0x0800b32c
 8001390:	200003f0 	.word	0x200003f0
 8001394:	0800b2e4 	.word	0x0800b2e4
 8001398:	08001925 	.word	0x08001925
 800139c:	200003e8 	.word	0x200003e8
 80013a0:	0800b308 	.word	0x0800b308
 80013a4:	08001935 	.word	0x08001935
 80013a8:	200003ec 	.word	0x200003ec

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b094      	sub	sp, #80	; 0x50
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2230      	movs	r2, #48	; 0x30
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f008 f803 	bl	80093c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <SystemClock_Config+0xc8>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	4a26      	ldr	r2, [pc, #152]	; (8001474 <SystemClock_Config+0xc8>)
 80013da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <SystemClock_Config+0xc8>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <SystemClock_Config+0xcc>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a20      	ldr	r2, [pc, #128]	; (8001478 <SystemClock_Config+0xcc>)
 80013f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <SystemClock_Config+0xcc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001408:	2302      	movs	r3, #2
 800140a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800140c:	2301      	movs	r3, #1
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001410:	2310      	movs	r3, #16
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001414:	2302      	movs	r3, #2
 8001416:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001418:	2300      	movs	r3, #0
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800141c:	2308      	movs	r3, #8
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001420:	2340      	movs	r3, #64	; 0x40
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001424:	2302      	movs	r3, #2
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001428:	2304      	movs	r3, #4
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fc91 	bl	8002d58 <HAL_RCC_OscConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800143c:	f000 fb20 	bl	8001a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001440:	230f      	movs	r3, #15
 8001442:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001444:	2302      	movs	r3, #2
 8001446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001448:	23a0      	movs	r3, #160	; 0xa0
 800144a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fef3 	bl	8003248 <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001468:	f000 fb0a 	bl	8001a80 <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	3750      	adds	r7, #80	; 0x50
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2224      	movs	r2, #36	; 0x24
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f007 ff9b 	bl	80093c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <MX_TIM1_Init+0xa8>)
 800149a:	4a23      	ldr	r2, [pc, #140]	; (8001528 <MX_TIM1_Init+0xac>)
 800149c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <MX_TIM1_Init+0xa8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <MX_TIM1_Init+0xa8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <MX_TIM1_Init+0xa8>)
 80014ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <MX_TIM1_Init+0xa8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_TIM1_Init+0xa8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <MX_TIM1_Init+0xa8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014c4:	2303      	movs	r3, #3
 80014c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014cc:	2301      	movs	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014dc:	2301      	movs	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_TIM1_Init+0xa8>)
 80014f0:	f002 fab8 	bl	8003a64 <HAL_TIM_Encoder_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014fa:	f000 fac1 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_TIM1_Init+0xa8>)
 800150c:	f003 f958 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001516:	f000 fab3 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	; 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000238 	.word	0x20000238
 8001528:	40010000 	.word	0x40010000

0800152c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	; 0x38
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155c:	4b37      	ldr	r3, [pc, #220]	; (800163c <MX_TIM2_Init+0x110>)
 800155e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001562:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8001564:	4b35      	ldr	r3, [pc, #212]	; (800163c <MX_TIM2_Init+0x110>)
 8001566:	2207      	movs	r2, #7
 8001568:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b34      	ldr	r3, [pc, #208]	; (800163c <MX_TIM2_Init+0x110>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001570:	4b32      	ldr	r3, [pc, #200]	; (800163c <MX_TIM2_Init+0x110>)
 8001572:	2263      	movs	r2, #99	; 0x63
 8001574:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b31      	ldr	r3, [pc, #196]	; (800163c <MX_TIM2_Init+0x110>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <MX_TIM2_Init+0x110>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001582:	482e      	ldr	r0, [pc, #184]	; (800163c <MX_TIM2_Init+0x110>)
 8001584:	f002 f8b2 	bl	80036ec <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800158e:	f000 fa77 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159c:	4619      	mov	r1, r3
 800159e:	4827      	ldr	r0, [pc, #156]	; (800163c <MX_TIM2_Init+0x110>)
 80015a0:	f002 fd46 	bl	8004030 <HAL_TIM_ConfigClockSource>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80015aa:	f000 fa69 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ae:	4823      	ldr	r0, [pc, #140]	; (800163c <MX_TIM2_Init+0x110>)
 80015b0:	f002 f94e 	bl	8003850 <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80015ba:	f000 fa61 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	4619      	mov	r1, r3
 80015cc:	481b      	ldr	r0, [pc, #108]	; (800163c <MX_TIM2_Init+0x110>)
 80015ce:	f003 f8f7 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80015d8:	f000 fa52 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015dc:	2360      	movs	r3, #96	; 0x60
 80015de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4812      	ldr	r0, [pc, #72]	; (800163c <MX_TIM2_Init+0x110>)
 80015f4:	f002 fc5a 	bl	8003eac <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80015fe:	f000 fa3f 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2204      	movs	r2, #4
 8001606:	4619      	mov	r1, r3
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <MX_TIM2_Init+0x110>)
 800160a:	f002 fc4f 	bl	8003eac <HAL_TIM_PWM_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001614:	f000 fa34 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2208      	movs	r2, #8
 800161c:	4619      	mov	r1, r3
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <MX_TIM2_Init+0x110>)
 8001620:	f002 fc44 	bl	8003eac <HAL_TIM_PWM_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800162a:	f000 fa29 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800162e:	4803      	ldr	r0, [pc, #12]	; (800163c <MX_TIM2_Init+0x110>)
 8001630:	f000 fd96 	bl	8002160 <HAL_TIM_MspPostInit>

}
 8001634:	bf00      	nop
 8001636:	3738      	adds	r7, #56	; 0x38
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000280 	.word	0x20000280

08001640 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	2224      	movs	r2, #36	; 0x24
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f007 feb9 	bl	80093c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <MX_TIM3_Init+0xa0>)
 800165e:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <MX_TIM3_Init+0xa4>)
 8001660:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <MX_TIM3_Init+0xa0>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <MX_TIM3_Init+0xa0>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_TIM3_Init+0xa0>)
 8001670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001674:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_TIM3_Init+0xa0>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_TIM3_Init+0xa0>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001682:	2303      	movs	r3, #3
 8001684:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800168a:	2301      	movs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800169a:	2301      	movs	r3, #1
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	4619      	mov	r1, r3
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <MX_TIM3_Init+0xa0>)
 80016ae:	f002 f9d9 	bl	8003a64 <HAL_TIM_Encoder_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016b8:	f000 f9e2 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_TIM3_Init+0xa0>)
 80016ca:	f003 f879 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80016d4:	f000 f9d4 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	3730      	adds	r7, #48	; 0x30
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200002c8 	.word	0x200002c8
 80016e4:	40000400 	.word	0x40000400

080016e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 fe65 	bl	80093c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001706:	4a21      	ldr	r2, [pc, #132]	; (800178c <MX_TIM4_Init+0xa4>)
 8001708:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <MX_TIM4_Init+0xa0>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800172a:	2303      	movs	r3, #3
 800172c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001742:	2301      	movs	r3, #1
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001756:	f002 f985 	bl	8003a64 <HAL_TIM_Encoder_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001760:	f000 f98e 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_TIM4_Init+0xa0>)
 8001772:	f003 f825 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800177c:	f000 f980 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000310 	.word	0x20000310
 800178c:	40000800 	.word	0x40000800

08001790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <MX_USART2_UART_Init+0x50>)
 8001798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 800179c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017b6:	220c      	movs	r2, #12
 80017b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017c8:	f003 f87c 	bl	80048c4 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017d2:	f000 f955 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000358 	.word	0x20000358
 80017e0:	40004400 	.word	0x40004400

080017e4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART6_UART_Init+0x4c>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <MX_USART6_UART_Init+0x50>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_USART6_UART_Init+0x4c>)
 80017f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART6_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART6_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART6_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART6_UART_Init+0x4c>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART6_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART6_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART6_UART_Init+0x4c>)
 800181c:	f003 f852 	bl	80048c4 <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001826:	f000 f92b 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200003a0 	.word	0x200003a0
 8001834:	40011400 	.word	0x40011400

08001838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <MX_GPIO_Init+0xe0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a30      	ldr	r2, [pc, #192]	; (8001918 <MX_GPIO_Init+0xe0>)
 8001858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <MX_GPIO_Init+0xe0>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <MX_GPIO_Init+0xe0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a29      	ldr	r2, [pc, #164]	; (8001918 <MX_GPIO_Init+0xe0>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <MX_GPIO_Init+0xe0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <MX_GPIO_Init+0xe0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a22      	ldr	r2, [pc, #136]	; (8001918 <MX_GPIO_Init+0xe0>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <MX_GPIO_Init+0xe0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_GPIO_Init+0xe0>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <MX_GPIO_Init+0xe0>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_GPIO_Init+0xe0>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIRECTION_3_Pin|DIRECTION_2_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2106      	movs	r1, #6
 80018c2:	4816      	ldr	r0, [pc, #88]	; (800191c <MX_GPIO_Init+0xe4>)
 80018c4:	f001 fa2e 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ce:	4814      	ldr	r0, [pc, #80]	; (8001920 <MX_GPIO_Init+0xe8>)
 80018d0:	f001 fa28 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIRECTION_3_Pin DIRECTION_2_Pin */
  GPIO_InitStruct.Pin = DIRECTION_3_Pin|DIRECTION_2_Pin;
 80018d4:	2306      	movs	r3, #6
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <MX_GPIO_Init+0xe4>)
 80018ec:	f001 f896 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECTION_1_Pin */
  GPIO_InitStruct.Pin = DIRECTION_1_Pin;
 80018f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION_1_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_GPIO_Init+0xe8>)
 800190a:	f001 f887 	bl	8002a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40020400 	.word	0x40020400
 8001920:	40020000 	.word	0x40020000

08001924 <StartControl>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
//		default:
////			printf("ghet anh");
//			break;
//		}
//	}
    osDelay(100);
 800192c:	2064      	movs	r0, #100	; 0x64
 800192e:	f004 fa49 	bl	8005dc4 <osDelay>
 8001932:	e7fb      	b.n	800192c <StartControl+0x8>

08001934 <StartPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPID */
void StartPID(void *argument)
{
 8001934:	b5b0      	push	{r4, r5, r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af04      	add	r7, sp, #16
 800193a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  	printf("V1= %.2f rpm \t V2= %.2f rpm \t V3= %.2f rpm \r\n", V1,V2,V3);

	  	rpm_1=get_rpm(MOTOR_1);
 800193c:	2001      	movs	r0, #1
 800193e:	f7ff fadb 	bl	8000ef8 <get_rpm>
 8001942:	eeb0 7a40 	vmov.f32	s14, s0
 8001946:	eef0 7a60 	vmov.f32	s15, s1
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <StartPID+0x10c>)
 800194c:	ed83 7b00 	vstr	d7, [r3]
	  	rpm_2=get_rpm(MOTOR_2);
 8001950:	2002      	movs	r0, #2
 8001952:	f7ff fad1 	bl	8000ef8 <get_rpm>
 8001956:	eeb0 7a40 	vmov.f32	s14, s0
 800195a:	eef0 7a60 	vmov.f32	s15, s1
 800195e:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <StartPID+0x110>)
 8001960:	ed83 7b00 	vstr	d7, [r3]
	  	rpm_3=get_rpm(MOTOR_3);
 8001964:	2003      	movs	r0, #3
 8001966:	f7ff fac7 	bl	8000ef8 <get_rpm>
 800196a:	eeb0 7a40 	vmov.f32	s14, s0
 800196e:	eef0 7a60 	vmov.f32	s15, s1
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <StartPID+0x114>)
 8001974:	ed83 7b00 	vstr	d7, [r3]

	  	out_1=PID_Calculation(MOTOR_1, rpm_1);
 8001978:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <StartPID+0x10c>)
 800197a:	ed93 7b00 	vldr	d7, [r3]
 800197e:	eeb0 0a47 	vmov.f32	s0, s14
 8001982:	eef0 0a67 	vmov.f32	s1, s15
 8001986:	2001      	movs	r0, #1
 8001988:	f000 f9ec 	bl	8001d64 <PID_Calculation>
 800198c:	eeb0 7a40 	vmov.f32	s14, s0
 8001990:	eef0 7a60 	vmov.f32	s15, s1
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <StartPID+0x118>)
 8001996:	ed83 7b00 	vstr	d7, [r3]
	  	out_2=PID_Calculation(MOTOR_2, rpm_2);
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <StartPID+0x110>)
 800199c:	ed93 7b00 	vldr	d7, [r3]
 80019a0:	eeb0 0a47 	vmov.f32	s0, s14
 80019a4:	eef0 0a67 	vmov.f32	s1, s15
 80019a8:	2002      	movs	r0, #2
 80019aa:	f000 f9db 	bl	8001d64 <PID_Calculation>
 80019ae:	eeb0 7a40 	vmov.f32	s14, s0
 80019b2:	eef0 7a60 	vmov.f32	s15, s1
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <StartPID+0x11c>)
 80019b8:	ed83 7b00 	vstr	d7, [r3]
	  	out_3=PID_Calculation(MOTOR_3, rpm_3);
 80019bc:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <StartPID+0x114>)
 80019be:	ed93 7b00 	vldr	d7, [r3]
 80019c2:	eeb0 0a47 	vmov.f32	s0, s14
 80019c6:	eef0 0a67 	vmov.f32	s1, s15
 80019ca:	2003      	movs	r0, #3
 80019cc:	f000 f9ca 	bl	8001d64 <PID_Calculation>
 80019d0:	eeb0 7a40 	vmov.f32	s14, s0
 80019d4:	eef0 7a60 	vmov.f32	s15, s1
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <StartPID+0x120>)
 80019da:	ed83 7b00 	vstr	d7, [r3]

	  	set_duty_cycle(MOTOR_1, out_1);
 80019de:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <StartPID+0x118>)
 80019e0:	ed93 7b00 	vldr	d7, [r3]
 80019e4:	eeb0 0a47 	vmov.f32	s0, s14
 80019e8:	eef0 0a67 	vmov.f32	s1, s15
 80019ec:	2001      	movs	r0, #1
 80019ee:	f000 f84d 	bl	8001a8c <set_duty_cycle>
	  	set_duty_cycle(MOTOR_2, out_2);
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <StartPID+0x11c>)
 80019f4:	ed93 7b00 	vldr	d7, [r3]
 80019f8:	eeb0 0a47 	vmov.f32	s0, s14
 80019fc:	eef0 0a67 	vmov.f32	s1, s15
 8001a00:	2002      	movs	r0, #2
 8001a02:	f000 f843 	bl	8001a8c <set_duty_cycle>
	  	set_duty_cycle(MOTOR_3, out_3);
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <StartPID+0x120>)
 8001a08:	ed93 7b00 	vldr	d7, [r3]
 8001a0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a10:	eef0 0a67 	vmov.f32	s1, s15
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 f839 	bl	8001a8c <set_duty_cycle>

//	  	printf("out_1: %f \t out_2: %f \t out_3: %f \r \n",out_1,out_2,out_3);
	  	printf("rpm_1: %.2f \t rpm_2: %.2f \t rpm_3: %.2f \r \n \r\n", rpm_1, rpm_2, rpm_3);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <StartPID+0x10c>)
 8001a1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <StartPID+0x110>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <StartPID+0x114>)
 8001a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a30:	e9cd 2300 	strd	r2, r3, [sp]
 8001a34:	4622      	mov	r2, r4
 8001a36:	462b      	mov	r3, r5
 8001a38:	4807      	ldr	r0, [pc, #28]	; (8001a58 <StartPID+0x124>)
 8001a3a:	f007 fc6f 	bl	800931c <iprintf>
	  	rpm_1=get_rpm(MOTOR_1);
 8001a3e:	e77d      	b.n	800193c <StartPID+0x8>
 8001a40:	20000448 	.word	0x20000448
 8001a44:	20000450 	.word	0x20000450
 8001a48:	20000458 	.word	0x20000458
 8001a4c:	20000430 	.word	0x20000430
 8001a50:	20000438 	.word	0x20000438
 8001a54:	20000440 	.word	0x20000440
 8001a58:	0800b29c 	.word	0x0800b29c

08001a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a6e:	f000 fe41 	bl	80026f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40014400 	.word	0x40014400

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <Error_Handler+0x8>
	...

08001a8c <set_duty_cycle>:
}
double rpm_to_duty(double rpm){
	double duty=(98.15-0.6*rpm);
	return duty;
}
void set_duty_cycle(int motor, double out){
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	ed87 0b00 	vstr	d0, [r7]
	double prev_duty;
	if(motor==MOTOR_1){
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d105      	bne.n	8001aaa <set_duty_cycle+0x1e>
		prev_duty=prev_duty_1;
 8001a9e:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <set_duty_cycle+0x124>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001aa8:	e010      	b.n	8001acc <set_duty_cycle+0x40>
	}
	else if(motor==MOTOR_2){
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d105      	bne.n	8001abc <set_duty_cycle+0x30>
		prev_duty=prev_duty_2;
 8001ab0:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <set_duty_cycle+0x128>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001aba:	e007      	b.n	8001acc <set_duty_cycle+0x40>
	}
	else if(motor==MOTOR_3){
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d104      	bne.n	8001acc <set_duty_cycle+0x40>
		prev_duty=prev_duty_3;
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <set_duty_cycle+0x12c>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
//	double duty = rpm_to_duty(rpm,out)-out;

	duty=prev_duty-out;
 8001acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ad0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ad4:	f7fe fbe0 	bl	8000298 <__aeabi_dsub>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4937      	ldr	r1, [pc, #220]	; (8001bbc <set_duty_cycle+0x130>)
 8001ade:	e9c1 2300 	strd	r2, r3, [r1]
	if(duty>100){duty=100;}
 8001ae2:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <set_duty_cycle+0x130>)
 8001ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <set_duty_cycle+0x134>)
 8001aee:	f7ff f81b 	bl	8000b28 <__aeabi_dcmpgt>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <set_duty_cycle+0x78>
 8001af8:	4930      	ldr	r1, [pc, #192]	; (8001bbc <set_duty_cycle+0x130>)
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <set_duty_cycle+0x134>)
 8001b00:	e9c1 2300 	strd	r2, r3, [r1]
	if(duty<0){duty=0;}
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <set_duty_cycle+0x130>)
 8001b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	f7fe ffeb 	bl	8000aec <__aeabi_dcmplt>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <set_duty_cycle+0x9e>
 8001b1c:	4927      	ldr	r1, [pc, #156]	; (8001bbc <set_duty_cycle+0x130>)
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9c1 2300 	strd	r2, r3, [r1]

	if(motor==MOTOR_1){
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d111      	bne.n	8001b54 <set_duty_cycle+0xc8>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, duty);
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <set_duty_cycle+0x130>)
 8001b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b36:	4923      	ldr	r1, [pc, #140]	; (8001bc4 <set_duty_cycle+0x138>)
 8001b38:	680c      	ldr	r4, [r1, #0]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f83b 	bl	8000bb8 <__aeabi_d2uiz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	6363      	str	r3, [r4, #52]	; 0x34
		prev_duty_1=duty;
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <set_duty_cycle+0x130>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <set_duty_cycle+0x124>)
 8001b4e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	else if(motor==MOTOR_3){
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, duty);
		prev_duty_3=duty;
	}
}
 8001b52:	e028      	b.n	8001ba6 <set_duty_cycle+0x11a>
	else if(motor==MOTOR_2){
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d111      	bne.n	8001b7e <set_duty_cycle+0xf2>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, duty);
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <set_duty_cycle+0x130>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	4918      	ldr	r1, [pc, #96]	; (8001bc4 <set_duty_cycle+0x138>)
 8001b62:	680c      	ldr	r4, [r1, #0]
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff f826 	bl	8000bb8 <__aeabi_d2uiz>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	63a3      	str	r3, [r4, #56]	; 0x38
		prev_duty_2=duty;
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <set_duty_cycle+0x130>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	490f      	ldr	r1, [pc, #60]	; (8001bb4 <set_duty_cycle+0x128>)
 8001b78:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001b7c:	e013      	b.n	8001ba6 <set_duty_cycle+0x11a>
	else if(motor==MOTOR_3){
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d110      	bne.n	8001ba6 <set_duty_cycle+0x11a>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, duty);
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <set_duty_cycle+0x130>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <set_duty_cycle+0x138>)
 8001b8c:	680c      	ldr	r4, [r1, #0]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	f7ff f811 	bl	8000bb8 <__aeabi_d2uiz>
 8001b96:	4603      	mov	r3, r0
 8001b98:	63e3      	str	r3, [r4, #60]	; 0x3c
		prev_duty_3=duty;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <set_duty_cycle+0x130>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	4905      	ldr	r1, [pc, #20]	; (8001bb8 <set_duty_cycle+0x12c>)
 8001ba2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001ba6:	bf00      	nop
 8001ba8:	371c      	adds	r7, #28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000010 	.word	0x20000010
 8001bbc:	20000018 	.word	0x20000018
 8001bc0:	40590000 	.word	0x40590000
 8001bc4:	20000280 	.word	0x20000280

08001bc8 <update_motor_values>:
	target_val_1=par->target_val_1;
	target_val_2=par->target_val_2;
	target_val_3=par->target_val_3;
}

double update_motor_values(double target_val, double actual_val, double prev_actual_val) {
 8001bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	ed87 0b04 	vstr	d0, [r7, #16]
 8001bd4:	ed87 1b02 	vstr	d1, [r7, #8]
 8001bd8:	ed87 2b00 	vstr	d2, [r7]

	if(target_val==0){
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001be8:	f7fe ff76 	bl	8000ad8 <__aeabi_dcmpeq>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <update_motor_values+0x3a>
		actual_val=-100;
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	4b54      	ldr	r3, [pc, #336]	; (8001d48 <update_motor_values+0x180>)
 8001bf8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		return actual_val;
 8001bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c00:	e097      	b.n	8001d32 <update_motor_values+0x16a>
	}
	err=target_val-actual_val;
 8001c02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c0a:	f7fe fb45 	bl	8000298 <__aeabi_dsub>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	494e      	ldr	r1, [pc, #312]	; (8001d4c <update_motor_values+0x184>)
 8001c14:	e9c1 2300 	strd	r2, r3, [r1]
	actual_val = prev_actual_val + pid.Kp*(err - err_next)
 8001c18:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <update_motor_values+0x188>)
 8001c1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001c1e:	4b4b      	ldr	r3, [pc, #300]	; (8001d4c <update_motor_values+0x184>)
 8001c20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c24:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <update_motor_values+0x18c>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	f7fe fb35 	bl	8000298 <__aeabi_dsub>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4620      	mov	r0, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	f7fe fce7 	bl	8000608 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c46:	f7fe fb29 	bl	800029c <__adddf3>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4614      	mov	r4, r2
 8001c50:	461d      	mov	r5, r3
				  + pid.Ki*err
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <update_motor_values+0x188>)
 8001c54:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c58:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <update_motor_values+0x184>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	f7fe fcd3 	bl	8000608 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4620      	mov	r0, r4
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f7fe fb17 	bl	800029c <__adddf3>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4692      	mov	sl, r2
 8001c74:	469b      	mov	fp, r3
				  + pid.Kd*(err - 2 * err_next + err_last);
 8001c76:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <update_motor_values+0x188>)
 8001c78:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001c7c:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <update_motor_values+0x184>)
 8001c7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <update_motor_values+0x18c>)
 8001c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	f7fe fb06 	bl	800029c <__adddf3>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4640      	mov	r0, r8
 8001c96:	4649      	mov	r1, r9
 8001c98:	f7fe fafe 	bl	8000298 <__aeabi_dsub>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <update_motor_values+0x190>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe faf7 	bl	800029c <__adddf3>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe fca7 	bl	8000608 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
	actual_val = prev_actual_val + pid.Kp*(err - err_next)
 8001cbe:	4650      	mov	r0, sl
 8001cc0:	4659      	mov	r1, fp
 8001cc2:	f7fe faeb 	bl	800029c <__adddf3>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	e9c7 2302 	strd	r2, r3, [r7, #8]
	err_last = err_next;
 8001cce:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <update_motor_values+0x18c>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	4920      	ldr	r1, [pc, #128]	; (8001d58 <update_motor_values+0x190>)
 8001cd6:	e9c1 2300 	strd	r2, r3, [r1]
	err_next = err;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <update_motor_values+0x184>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	491c      	ldr	r1, [pc, #112]	; (8001d54 <update_motor_values+0x18c>)
 8001ce2:	e9c1 2300 	strd	r2, r3, [r1]
	actual_val=(actual_val>10)?10:actual_val;
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <update_motor_values+0x194>)
 8001cec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cf0:	f7fe ff1a 	bl	8000b28 <__aeabi_dcmpgt>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <update_motor_values+0x13a>
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <update_motor_values+0x194>)
 8001d00:	e001      	b.n	8001d06 <update_motor_values+0x13e>
 8001d02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d06:	e9c7 2302 	strd	r2, r3, [r7, #8]
	actual_val=(actual_val<-10)?-10:actual_val;
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <update_motor_values+0x198>)
 8001d10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d14:	f7fe feea 	bl	8000aec <__aeabi_dcmplt>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <update_motor_values+0x15e>
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <update_motor_values+0x198>)
 8001d24:	e001      	b.n	8001d2a <update_motor_values+0x162>
 8001d26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d2a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return actual_val;
 8001d2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001d32:	ec43 2b17 	vmov	d7, r2, r3
 8001d36:	eeb0 0a47 	vmov.f32	s0, s14
 8001d3a:	eef0 0a67 	vmov.f32	s1, s15
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d46:	bf00      	nop
 8001d48:	c0590000 	.word	0xc0590000
 8001d4c:	200004b8 	.word	0x200004b8
 8001d50:	200003f8 	.word	0x200003f8
 8001d54:	200004f8 	.word	0x200004f8
 8001d58:	200004d8 	.word	0x200004d8
 8001d5c:	40240000 	.word	0x40240000
 8001d60:	c0240000 	.word	0xc0240000

08001d64 <PID_Calculation>:
double PID_Calculation(int motor, double actual_val){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	ed87 0b00 	vstr	d0, [r7]

	switch(motor) {
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d074      	beq.n	8001e60 <PID_Calculation+0xfc>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	f300 80a3 	bgt.w	8001ec4 <PID_Calculation+0x160>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d003      	beq.n	8001d8c <PID_Calculation+0x28>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d038      	beq.n	8001dfc <PID_Calculation+0x98>
 8001d8a:	e09b      	b.n	8001ec4 <PID_Calculation+0x160>
	    case MOTOR_1:
			err_last=err_last_1;
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <PID_Calculation+0x178>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	4953      	ldr	r1, [pc, #332]	; (8001ee0 <PID_Calculation+0x17c>)
 8001d94:	e9c1 2300 	strd	r2, r3, [r1]
			err_next=err_next_1;
 8001d98:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <PID_Calculation+0x180>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	4952      	ldr	r1, [pc, #328]	; (8001ee8 <PID_Calculation+0x184>)
 8001da0:	e9c1 2300 	strd	r2, r3, [r1]
			prev_actual_val=pre_actual_val_1;
 8001da4:	4b51      	ldr	r3, [pc, #324]	; (8001eec <PID_Calculation+0x188>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	4951      	ldr	r1, [pc, #324]	; (8001ef0 <PID_Calculation+0x18c>)
 8001dac:	e9c1 2300 	strd	r2, r3, [r1]

			actual_val=update_motor_values(target_val_1, actual_val, pre_actual_val_1);
 8001db0:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <PID_Calculation+0x190>)
 8001db2:	ed93 7b00 	vldr	d7, [r3]
 8001db6:	4b4d      	ldr	r3, [pc, #308]	; (8001eec <PID_Calculation+0x188>)
 8001db8:	ed93 6b00 	vldr	d6, [r3]
 8001dbc:	eeb0 2a46 	vmov.f32	s4, s12
 8001dc0:	eef0 2a66 	vmov.f32	s5, s13
 8001dc4:	ed97 1b00 	vldr	d1, [r7]
 8001dc8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dcc:	eef0 0a67 	vmov.f32	s1, s15
 8001dd0:	f7ff fefa 	bl	8001bc8 <update_motor_values>
 8001dd4:	ed87 0b00 	vstr	d0, [r7]

			pre_actual_val_1=actual_val;
 8001dd8:	4944      	ldr	r1, [pc, #272]	; (8001eec <PID_Calculation+0x188>)
 8001dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dde:	e9c1 2300 	strd	r2, r3, [r1]
			err_last_1=err_last;
 8001de2:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <PID_Calculation+0x17c>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	493c      	ldr	r1, [pc, #240]	; (8001edc <PID_Calculation+0x178>)
 8001dea:	e9c1 2300 	strd	r2, r3, [r1]
			err_next_1=err_next;
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <PID_Calculation+0x184>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	493b      	ldr	r1, [pc, #236]	; (8001ee4 <PID_Calculation+0x180>)
 8001df6:	e9c1 2300 	strd	r2, r3, [r1]

	        break;
 8001dfa:	e063      	b.n	8001ec4 <PID_Calculation+0x160>
	    case MOTOR_2:
			err_last=err_last_2;
 8001dfc:	4b3e      	ldr	r3, [pc, #248]	; (8001ef8 <PID_Calculation+0x194>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	4937      	ldr	r1, [pc, #220]	; (8001ee0 <PID_Calculation+0x17c>)
 8001e04:	e9c1 2300 	strd	r2, r3, [r1]
			err_next=err_next_2;
 8001e08:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <PID_Calculation+0x198>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	4936      	ldr	r1, [pc, #216]	; (8001ee8 <PID_Calculation+0x184>)
 8001e10:	e9c1 2300 	strd	r2, r3, [r1]

			actual_val=update_motor_values(target_val_2, actual_val, pre_actual_val_2);
 8001e14:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <PID_Calculation+0x19c>)
 8001e16:	ed93 7b00 	vldr	d7, [r3]
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <PID_Calculation+0x1a0>)
 8001e1c:	ed93 6b00 	vldr	d6, [r3]
 8001e20:	eeb0 2a46 	vmov.f32	s4, s12
 8001e24:	eef0 2a66 	vmov.f32	s5, s13
 8001e28:	ed97 1b00 	vldr	d1, [r7]
 8001e2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e30:	eef0 0a67 	vmov.f32	s1, s15
 8001e34:	f7ff fec8 	bl	8001bc8 <update_motor_values>
 8001e38:	ed87 0b00 	vstr	d0, [r7]

			pre_actual_val_2=actual_val;
 8001e3c:	4931      	ldr	r1, [pc, #196]	; (8001f04 <PID_Calculation+0x1a0>)
 8001e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e42:	e9c1 2300 	strd	r2, r3, [r1]
			err_last_2=err_last;
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <PID_Calculation+0x17c>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	492a      	ldr	r1, [pc, #168]	; (8001ef8 <PID_Calculation+0x194>)
 8001e4e:	e9c1 2300 	strd	r2, r3, [r1]
			err_next_2=err_next;
 8001e52:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <PID_Calculation+0x184>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	4928      	ldr	r1, [pc, #160]	; (8001efc <PID_Calculation+0x198>)
 8001e5a:	e9c1 2300 	strd	r2, r3, [r1]

	        break;
 8001e5e:	e031      	b.n	8001ec4 <PID_Calculation+0x160>
	    case MOTOR_3:
			err_last=err_last_3;
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <PID_Calculation+0x1a4>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	491e      	ldr	r1, [pc, #120]	; (8001ee0 <PID_Calculation+0x17c>)
 8001e68:	e9c1 2300 	strd	r2, r3, [r1]
			err_next=err_next_3;
 8001e6c:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <PID_Calculation+0x1a8>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	491d      	ldr	r1, [pc, #116]	; (8001ee8 <PID_Calculation+0x184>)
 8001e74:	e9c1 2300 	strd	r2, r3, [r1]

			actual_val=update_motor_values(target_val_3, actual_val, pre_actual_val_3);
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <PID_Calculation+0x1ac>)
 8001e7a:	ed93 7b00 	vldr	d7, [r3]
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <PID_Calculation+0x1b0>)
 8001e80:	ed93 6b00 	vldr	d6, [r3]
 8001e84:	eeb0 2a46 	vmov.f32	s4, s12
 8001e88:	eef0 2a66 	vmov.f32	s5, s13
 8001e8c:	ed97 1b00 	vldr	d1, [r7]
 8001e90:	eeb0 0a47 	vmov.f32	s0, s14
 8001e94:	eef0 0a67 	vmov.f32	s1, s15
 8001e98:	f7ff fe96 	bl	8001bc8 <update_motor_values>
 8001e9c:	ed87 0b00 	vstr	d0, [r7]

			pre_actual_val_3=actual_val;
 8001ea0:	491c      	ldr	r1, [pc, #112]	; (8001f14 <PID_Calculation+0x1b0>)
 8001ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ea6:	e9c1 2300 	strd	r2, r3, [r1]
			err_last_3=err_last;
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <PID_Calculation+0x17c>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	4915      	ldr	r1, [pc, #84]	; (8001f08 <PID_Calculation+0x1a4>)
 8001eb2:	e9c1 2300 	strd	r2, r3, [r1]
			err_next_3=err_next;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <PID_Calculation+0x184>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	4913      	ldr	r1, [pc, #76]	; (8001f0c <PID_Calculation+0x1a8>)
 8001ebe:	e9c1 2300 	strd	r2, r3, [r1]

	        break;
 8001ec2:	bf00      	nop
	}
	return actual_val;
 8001ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ec8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ecc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ed0:	eef0 0a67 	vmov.f32	s1, s15
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200004c0 	.word	0x200004c0
 8001ee0:	200004d8 	.word	0x200004d8
 8001ee4:	200004e0 	.word	0x200004e0
 8001ee8:	200004f8 	.word	0x200004f8
 8001eec:	20000500 	.word	0x20000500
 8001ef0:	200004b0 	.word	0x200004b0
 8001ef4:	20000498 	.word	0x20000498
 8001ef8:	200004c8 	.word	0x200004c8
 8001efc:	200004e8 	.word	0x200004e8
 8001f00:	200004a0 	.word	0x200004a0
 8001f04:	20000508 	.word	0x20000508
 8001f08:	200004d0 	.word	0x200004d0
 8001f0c:	200004f0 	.word	0x200004f0
 8001f10:	200004a8 	.word	0x200004a8
 8001f14:	20000510 	.word	0x20000510

08001f18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_MspInit+0x54>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <HAL_MspInit+0x54>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_MspInit+0x54>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_MspInit+0x54>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_MspInit+0x54>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_MspInit+0x54>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	210f      	movs	r1, #15
 8001f5a:	f06f 0001 	mvn.w	r0, #1
 8001f5e:	f000 fca1 	bl	80028a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08e      	sub	sp, #56	; 0x38
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a5e      	ldr	r2, [pc, #376]	; (8002108 <HAL_TIM_Encoder_MspInit+0x198>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d135      	bne.n	8001ffe <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
 8001f96:	4b5d      	ldr	r3, [pc, #372]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	4a5c      	ldr	r2, [pc, #368]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa2:	4b5a      	ldr	r3, [pc, #360]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	4b56      	ldr	r3, [pc, #344]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a55      	ldr	r2, [pc, #340]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	484a      	ldr	r0, [pc, #296]	; (8002110 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001fe8:	f000 fd18 	bl	8002a1c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	210f      	movs	r1, #15
 8001ff0:	2019      	movs	r0, #25
 8001ff2:	f000 fc57 	bl	80028a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ff6:	2019      	movs	r0, #25
 8001ff8:	f000 fc70 	bl	80028dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ffc:	e080      	b.n	8002100 <HAL_TIM_Encoder_MspInit+0x190>
  else if(htim_encoder->Instance==TIM3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a44      	ldr	r2, [pc, #272]	; (8002114 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d14a      	bne.n	800209e <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	4a3e      	ldr	r2, [pc, #248]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	6413      	str	r3, [r2, #64]	; 0x40
 8002018:	4b3c      	ldr	r3, [pc, #240]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	4b38      	ldr	r3, [pc, #224]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4a37      	ldr	r2, [pc, #220]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6313      	str	r3, [r2, #48]	; 0x30
 8002034:	4b35      	ldr	r3, [pc, #212]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	4b31      	ldr	r3, [pc, #196]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	4a30      	ldr	r2, [pc, #192]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	6313      	str	r3, [r2, #48]	; 0x30
 8002050:	4b2e      	ldr	r3, [pc, #184]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800205c:	2340      	movs	r3, #64	; 0x40
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800206c:	2302      	movs	r3, #2
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	4619      	mov	r1, r3
 8002076:	4826      	ldr	r0, [pc, #152]	; (8002110 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8002078:	f000 fcd0 	bl	8002a1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800207c:	2320      	movs	r3, #32
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800208c:	2302      	movs	r3, #2
 800208e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	4619      	mov	r1, r3
 8002096:	4820      	ldr	r0, [pc, #128]	; (8002118 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8002098:	f000 fcc0 	bl	8002a1c <HAL_GPIO_Init>
}
 800209c:	e030      	b.n	8002100 <HAL_TIM_Encoder_MspInit+0x190>
  else if(htim_encoder->Instance==TIM4)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_TIM_Encoder_MspInit+0x1ac>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d12b      	bne.n	8002100 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	4a16      	ldr	r2, [pc, #88]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6413      	str	r3, [r2, #64]	; 0x40
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	6313      	str	r3, [r2, #48]	; 0x30
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e0:	23c0      	movs	r3, #192	; 0xc0
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020f0:	2302      	movs	r3, #2
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f8:	4619      	mov	r1, r3
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <HAL_TIM_Encoder_MspInit+0x1a8>)
 80020fc:	f000 fc8e 	bl	8002a1c <HAL_GPIO_Init>
}
 8002100:	bf00      	nop
 8002102:	3738      	adds	r7, #56	; 0x38
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40010000 	.word	0x40010000
 800210c:	40023800 	.word	0x40023800
 8002110:	40020000 	.word	0x40020000
 8002114:	40000400 	.word	0x40000400
 8002118:	40020400 	.word	0x40020400
 800211c:	40000800 	.word	0x40000800

08002120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002130:	d10d      	bne.n	800214e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_TIM_Base_MspInit+0x3c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <HAL_TIM_Base_MspInit+0x3c>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_TIM_Base_MspInit+0x3c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d13c      	bne.n	80021fc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <HAL_TIM_MspPostInit+0xa4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_TIM_MspPostInit+0xa4>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_TIM_MspPostInit+0xa4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_TIM_MspPostInit+0xa4>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a17      	ldr	r2, [pc, #92]	; (8002204 <HAL_TIM_MspPostInit+0xa4>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_TIM_MspPostInit+0xa4>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ba:	2303      	movs	r3, #3
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021ca:	2301      	movs	r3, #1
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <HAL_TIM_MspPostInit+0xa8>)
 80021d6:	f000 fc21 	bl	8002a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021ec:	2301      	movs	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <HAL_TIM_MspPostInit+0xac>)
 80021f8:	f000 fc10 	bl	8002a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021fc:	bf00      	nop
 80021fe:	3728      	adds	r7, #40	; 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	40020000 	.word	0x40020000
 800220c:	40020400 	.word	0x40020400

08002210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a36      	ldr	r2, [pc, #216]	; (8002308 <HAL_UART_MspInit+0xf8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12c      	bne.n	800228c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	4b35      	ldr	r3, [pc, #212]	; (800230c <HAL_UART_MspInit+0xfc>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a34      	ldr	r2, [pc, #208]	; (800230c <HAL_UART_MspInit+0xfc>)
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b32      	ldr	r3, [pc, #200]	; (800230c <HAL_UART_MspInit+0xfc>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_UART_MspInit+0xfc>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a2d      	ldr	r2, [pc, #180]	; (800230c <HAL_UART_MspInit+0xfc>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_UART_MspInit+0xfc>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800226a:	230c      	movs	r3, #12
 800226c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800227a:	2307      	movs	r3, #7
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	f107 031c 	add.w	r3, r7, #28
 8002282:	4619      	mov	r1, r3
 8002284:	4822      	ldr	r0, [pc, #136]	; (8002310 <HAL_UART_MspInit+0x100>)
 8002286:	f000 fbc9 	bl	8002a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800228a:	e038      	b.n	80022fe <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a20      	ldr	r2, [pc, #128]	; (8002314 <HAL_UART_MspInit+0x104>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d133      	bne.n	80022fe <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_UART_MspInit+0xfc>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_UART_MspInit+0xfc>)
 80022a0:	f043 0320 	orr.w	r3, r3, #32
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_UART_MspInit+0xfc>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_UART_MspInit+0xfc>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a14      	ldr	r2, [pc, #80]	; (800230c <HAL_UART_MspInit+0xfc>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_UART_MspInit+0xfc>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ce:	23c0      	movs	r3, #192	; 0xc0
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80022de:	2308      	movs	r3, #8
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	480b      	ldr	r0, [pc, #44]	; (8002318 <HAL_UART_MspInit+0x108>)
 80022ea:	f000 fb97 	bl	8002a1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2105      	movs	r1, #5
 80022f2:	2047      	movs	r0, #71	; 0x47
 80022f4:	f000 fad6 	bl	80028a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80022f8:	2047      	movs	r0, #71	; 0x47
 80022fa:	f000 faef 	bl	80028dc <HAL_NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3730      	adds	r7, #48	; 0x30
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40004400 	.word	0x40004400
 800230c:	40023800 	.word	0x40023800
 8002310:	40020000 	.word	0x40020000
 8002314:	40011400 	.word	0x40011400
 8002318:	40020800 	.word	0x40020800

0800231c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <HAL_InitTick+0xd0>)
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	4a2d      	ldr	r2, [pc, #180]	; (80023ec <HAL_InitTick+0xd0>)
 8002336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233a:	6453      	str	r3, [r2, #68]	; 0x44
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_InitTick+0xd0>)
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002348:	f107 020c 	add.w	r2, r7, #12
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f001 f998 	bl	8003688 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002358:	f001 f982 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 800235c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <HAL_InitTick+0xd4>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0c9b      	lsrs	r3, r3, #18
 8002368:	3b01      	subs	r3, #1
 800236a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_InitTick+0xd8>)
 800236e:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <HAL_InitTick+0xdc>)
 8002370:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_InitTick+0xd8>)
 8002374:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002378:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800237a:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <HAL_InitTick+0xd8>)
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_InitTick+0xd8>)
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_InitTick+0xd8>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_InitTick+0xd8>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8002392:	4818      	ldr	r0, [pc, #96]	; (80023f4 <HAL_InitTick+0xd8>)
 8002394:	f001 f9aa 	bl	80036ec <HAL_TIM_Base_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800239e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11b      	bne.n	80023de <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80023a6:	4813      	ldr	r0, [pc, #76]	; (80023f4 <HAL_InitTick+0xd8>)
 80023a8:	f001 f9f0 	bl	800378c <HAL_TIM_Base_Start_IT>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80023b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d111      	bne.n	80023de <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023ba:	2019      	movs	r0, #25
 80023bc:	f000 fa8e 	bl	80028dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b0f      	cmp	r3, #15
 80023c4:	d808      	bhi.n	80023d8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80023c6:	2200      	movs	r2, #0
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	2019      	movs	r0, #25
 80023cc:	f000 fa6a 	bl	80028a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_InitTick+0xe0>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e002      	b.n	80023de <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80023de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3730      	adds	r7, #48	; 0x30
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	431bde83 	.word	0x431bde83
 80023f4:	20000518 	.word	0x20000518
 80023f8:	40014400 	.word	0x40014400
 80023fc:	20000024 	.word	0x20000024

08002400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002404:	e7fe      	b.n	8002404 <NMI_Handler+0x4>

08002406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <HardFault_Handler+0x4>

0800240c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <MemManage_Handler+0x4>

08002412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <BusFault_Handler+0x4>

08002418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <UsageFault_Handler+0x4>

0800241e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	ms++;
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	1c50      	adds	r0, r2, #1
 8002438:	f143 0100 	adc.w	r1, r3, #0
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <TIM1_UP_TIM10_IRQHandler+0x28>)
 800243e:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 8002444:	f001 fc42 	bl	8003ccc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <TIM1_UP_TIM10_IRQHandler+0x30>)
 800244a:	f001 fc3f 	bl	8003ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000230 	.word	0x20000230
 8002458:	20000238 	.word	0x20000238
 800245c:	20000518 	.word	0x20000518

08002460 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	MSGQUEUE_OBJ_t msg;
	msg.buffer_index=0;
 8002466:	2300      	movs	r3, #0
 8002468:	717b      	strb	r3, [r7, #5]

	HAL_UART_Receive(&huart6, (uint8_t*)&msg.buffer[msg.buffer_index++], 1, 10);
 800246a:	797b      	ldrb	r3, [r7, #5]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	717a      	strb	r2, [r7, #5]
 8002472:	461a      	mov	r2, r3
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	1899      	adds	r1, r3, r2
 8002478:	230a      	movs	r3, #10
 800247a:	2201      	movs	r2, #1
 800247c:	4809      	ldr	r0, [pc, #36]	; (80024a4 <USART6_IRQHandler+0x44>)
 800247e:	f002 fafc 	bl	8004a7a <HAL_UART_Receive>
	osMessageQueuePut(buttonHandle, &msg, 0, 0);
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <USART6_IRQHandler+0x48>)
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	1d39      	adds	r1, r7, #4
 8002488:	2300      	movs	r3, #0
 800248a:	2200      	movs	r2, #0
 800248c:	f003 fd28 	bl	8005ee0 <osMessageQueuePut>
 8002490:	2300      	movs	r3, #0
 8002492:	713b      	strb	r3, [r7, #4]

	memset(msg.buffer, 0, sizeof(msg.buffer));
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002494:	4803      	ldr	r0, [pc, #12]	; (80024a4 <USART6_IRQHandler+0x44>)
 8002496:	f002 fbad 	bl	8004bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200003a0 	.word	0x200003a0
 80024a8:	200003f0 	.word	0x200003f0

080024ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return 1;
 80024b0:	2301      	movs	r3, #1
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_kill>:

int _kill(int pid, int sig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024c6:	f006 ffd1 	bl	800946c <__errno>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2216      	movs	r2, #22
 80024ce:	601a      	str	r2, [r3, #0]
  return -1;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_exit>:

void _exit (int status)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffe7 	bl	80024bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ee:	e7fe      	b.n	80024ee <_exit+0x12>

080024f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e00a      	b.n	8002518 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002502:	f3af 8000 	nop.w
 8002506:	4601      	mov	r1, r0
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf0      	blt.n	8002502 <_read+0x12>
  }

  return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e009      	b.n	8002550 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fe67 	bl	8001218 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	dbf1      	blt.n	800253c <_write+0x12>
  }
  return len;
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_close>:

int _close(int file)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258a:	605a      	str	r2, [r3, #4]
  return 0;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_isatty>:

int _isatty(int file)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <_sbrk+0x5c>)
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <_sbrk+0x60>)
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <_sbrk+0x64>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <_sbrk+0x68>)
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d207      	bcs.n	800260c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025fc:	f006 ff36 	bl	800946c <__errno>
 8002600:	4603      	mov	r3, r0
 8002602:	220c      	movs	r2, #12
 8002604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	e009      	b.n	8002620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <_sbrk+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	4a05      	ldr	r2, [pc, #20]	; (8002630 <_sbrk+0x64>)
 800261c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20020000 	.word	0x20020000
 800262c:	00000400 	.word	0x00000400
 8002630:	20000560 	.word	0x20000560
 8002634:	20005008 	.word	0x20005008

08002638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <SystemInit+0x20>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	4a05      	ldr	r2, [pc, #20]	; (8002658 <SystemInit+0x20>)
 8002644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800265c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002694 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002660:	f7ff ffea 	bl	8002638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002666:	490d      	ldr	r1, [pc, #52]	; (800269c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800267c:	4c0a      	ldr	r4, [pc, #40]	; (80026a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800268a:	f006 fef5 	bl	8009478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800268e:	f7fe fdf5 	bl	800127c <main>
  bx  lr    
 8002692:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800269c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80026a0:	0800b6dc 	.word	0x0800b6dc
  ldr r2, =_sbss
 80026a4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80026a8:	20005004 	.word	0x20005004

080026ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026ac:	e7fe      	b.n	80026ac <ADC_IRQHandler>
	...

080026b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <HAL_Init+0x40>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <HAL_Init+0x40>)
 80026ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_Init+0x40>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_Init+0x40>)
 80026c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <HAL_Init+0x40>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <HAL_Init+0x40>)
 80026d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d8:	2003      	movs	r0, #3
 80026da:	f000 f8d8 	bl	800288e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026de:	200f      	movs	r0, #15
 80026e0:	f7ff fe1c 	bl	800231c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e4:	f7ff fc18 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023c00 	.word	0x40023c00

080026f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_IncTick+0x20>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x24>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4413      	add	r3, r2
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_IncTick+0x24>)
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000028 	.word	0x20000028
 8002718:	20000564 	.word	0x20000564

0800271c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return uwTick;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_GetTick+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000564 	.word	0x20000564

08002734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800275c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002766:	4a04      	ldr	r2, [pc, #16]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60d3      	str	r3, [r2, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <__NVIC_GetPriorityGrouping+0x18>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	db0b      	blt.n	80027c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4907      	ldr	r1, [pc, #28]	; (80027d0 <__NVIC_EnableIRQ+0x38>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2001      	movs	r0, #1
 80027ba:	fa00 f202 	lsl.w	r2, r0, r2
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	; (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ff4c 	bl	8002734 <__NVIC_SetPriorityGrouping>
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b6:	f7ff ff61 	bl	800277c <__NVIC_GetPriorityGrouping>
 80028ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	6978      	ldr	r0, [r7, #20]
 80028c2:	f7ff ffb1 	bl	8002828 <NVIC_EncodePriority>
 80028c6:	4602      	mov	r2, r0
 80028c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff80 	bl	80027d4 <__NVIC_SetPriority>
}
 80028d4:	bf00      	nop
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff54 	bl	8002798 <__NVIC_EnableIRQ>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002906:	f7ff ff09 	bl	800271c <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d008      	beq.n	800292a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e052      	b.n	80029d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0216 	bic.w	r2, r2, #22
 8002938:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002948:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <HAL_DMA_Abort+0x62>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0208 	bic.w	r2, r2, #8
 8002968:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297a:	e013      	b.n	80029a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800297c:	f7ff fece 	bl	800271c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b05      	cmp	r3, #5
 8002988:	d90c      	bls.n	80029a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2203      	movs	r2, #3
 8002994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e015      	b.n	80029d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e4      	bne.n	800297c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	223f      	movs	r2, #63	; 0x3f
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d004      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00c      	b.n	8002a10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2205      	movs	r2, #5
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	e159      	b.n	8002cec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	f040 8148 	bne.w	8002ce6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d005      	beq.n	8002a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d130      	bne.n	8002ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 0201 	and.w	r2, r3, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d017      	beq.n	8002b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d123      	bne.n	8002b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	08da      	lsrs	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3208      	adds	r2, #8
 8002b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	220f      	movs	r2, #15
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	08da      	lsrs	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3208      	adds	r2, #8
 8002b5a:	69b9      	ldr	r1, [r7, #24]
 8002b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0203 	and.w	r2, r3, #3
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a2 	beq.w	8002ce6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a56      	ldr	r2, [pc, #344]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b54      	ldr	r3, [pc, #336]	; (8002d04 <HAL_GPIO_Init+0x2e8>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bbe:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <HAL_GPIO_Init+0x2ec>)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a49      	ldr	r2, [pc, #292]	; (8002d0c <HAL_GPIO_Init+0x2f0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_GPIO_Init+0x202>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a48      	ldr	r2, [pc, #288]	; (8002d10 <HAL_GPIO_Init+0x2f4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x1fe>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a47      	ldr	r2, [pc, #284]	; (8002d14 <HAL_GPIO_Init+0x2f8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x1fa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a46      	ldr	r2, [pc, #280]	; (8002d18 <HAL_GPIO_Init+0x2fc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x1f6>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a45      	ldr	r2, [pc, #276]	; (8002d1c <HAL_GPIO_Init+0x300>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x1f2>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c0e:	2307      	movs	r3, #7
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x204>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c30:	4935      	ldr	r1, [pc, #212]	; (8002d08 <HAL_GPIO_Init+0x2ec>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c62:	4a2f      	ldr	r2, [pc, #188]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c68:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c8c:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c92:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb6:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce0:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_GPIO_Init+0x304>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	f67f aea2 	bls.w	8002a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	; 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
 8002d30:	4613      	mov	r3, r2
 8002d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d34:	787b      	ldrb	r3, [r7, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d40:	e003      	b.n	8002d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d42:	887b      	ldrh	r3, [r7, #2]
 8002d44:	041a      	lsls	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	619a      	str	r2, [r3, #24]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e267      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d075      	beq.n	8002e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d76:	4b88      	ldr	r3, [pc, #544]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d00c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d82:	4b85      	ldr	r3, [pc, #532]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d112      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8e:	4b82      	ldr	r3, [pc, #520]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9a:	d10b      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	4b7e      	ldr	r3, [pc, #504]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d05b      	beq.n	8002e60 <HAL_RCC_OscConfig+0x108>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d157      	bne.n	8002e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e242      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_OscConfig+0x74>
 8002dbe:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a75      	ldr	r2, [pc, #468]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e01d      	b.n	8002e08 <HAL_RCC_OscConfig+0xb0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x98>
 8002dd6:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6f      	ldr	r2, [pc, #444]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b6d      	ldr	r3, [pc, #436]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6c      	ldr	r2, [pc, #432]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0xb0>
 8002df0:	4b69      	ldr	r3, [pc, #420]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a68      	ldr	r2, [pc, #416]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b66      	ldr	r3, [pc, #408]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a65      	ldr	r2, [pc, #404]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7ff fc84 	bl	800271c <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e18:	f7ff fc80 	bl	800271c <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e207      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0xc0>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7ff fc70 	bl	800271c <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e40:	f7ff fc6c 	bl	800271c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1f3      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0xe8>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d063      	beq.n	8002f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7a:	4b47      	ldr	r3, [pc, #284]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d11c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e86:	4b44      	ldr	r3, [pc, #272]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d116      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	4b41      	ldr	r3, [pc, #260]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_RCC_OscConfig+0x152>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e1c7      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4937      	ldr	r1, [pc, #220]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	e03a      	b.n	8002f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec8:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <HAL_RCC_OscConfig+0x244>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7ff fc25 	bl	800271c <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7ff fc21 	bl	800271c <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e1a8      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4925      	ldr	r1, [pc, #148]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
 8002f08:	e015      	b.n	8002f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <HAL_RCC_OscConfig+0x244>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7ff fc04 	bl	800271c <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f18:	f7ff fc00 	bl	800271c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e187      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d036      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_RCC_OscConfig+0x248>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7ff fbe4 	bl	800271c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f58:	f7ff fbe0 	bl	800271c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e167      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x200>
 8002f76:	e01b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_OscConfig+0x248>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7ff fbcd 	bl	800271c <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	e00e      	b.n	8002fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f86:	f7ff fbc9 	bl	800271c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d907      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e150      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	42470000 	.word	0x42470000
 8002fa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	4b88      	ldr	r3, [pc, #544]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ea      	bne.n	8002f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8097 	beq.w	80030ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc2:	4b81      	ldr	r3, [pc, #516]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	4b7d      	ldr	r3, [pc, #500]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a7c      	ldr	r2, [pc, #496]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fde:	4b7a      	ldr	r3, [pc, #488]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b77      	ldr	r3, [pc, #476]	; (80031cc <HAL_RCC_OscConfig+0x474>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d118      	bne.n	800302c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffa:	4b74      	ldr	r3, [pc, #464]	; (80031cc <HAL_RCC_OscConfig+0x474>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a73      	ldr	r2, [pc, #460]	; (80031cc <HAL_RCC_OscConfig+0x474>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003006:	f7ff fb89 	bl	800271c <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7ff fb85 	bl	800271c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e10c      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	4b6a      	ldr	r3, [pc, #424]	; (80031cc <HAL_RCC_OscConfig+0x474>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d106      	bne.n	8003042 <HAL_RCC_OscConfig+0x2ea>
 8003034:	4b64      	ldr	r3, [pc, #400]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4a63      	ldr	r2, [pc, #396]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6713      	str	r3, [r2, #112]	; 0x70
 8003040:	e01c      	b.n	800307c <HAL_RCC_OscConfig+0x324>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b05      	cmp	r3, #5
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x30c>
 800304a:	4b5f      	ldr	r3, [pc, #380]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	4a5e      	ldr	r2, [pc, #376]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
 8003056:	4b5c      	ldr	r3, [pc, #368]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	4a5b      	ldr	r2, [pc, #364]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6713      	str	r3, [r2, #112]	; 0x70
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0x324>
 8003064:	4b58      	ldr	r3, [pc, #352]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a57      	ldr	r2, [pc, #348]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
 8003070:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4a54      	ldr	r2, [pc, #336]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003076:	f023 0304 	bic.w	r3, r3, #4
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d015      	beq.n	80030b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7ff fb4a 	bl	800271c <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7ff fb46 	bl	800271c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0cb      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	4b49      	ldr	r3, [pc, #292]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0ee      	beq.n	800308c <HAL_RCC_OscConfig+0x334>
 80030ae:	e014      	b.n	80030da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7ff fb34 	bl	800271c <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7ff fb30 	bl	800271c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0b5      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ce:	4b3e      	ldr	r3, [pc, #248]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ee      	bne.n	80030b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	4a38      	ldr	r2, [pc, #224]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80a1 	beq.w	8003238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030f6:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d05c      	beq.n	80031bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d141      	bne.n	800318e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310a:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_RCC_OscConfig+0x478>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7ff fb04 	bl	800271c <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003118:	f7ff fb00 	bl	800271c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e087      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	019b      	lsls	r3, r3, #6
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	3b01      	subs	r3, #1
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	491b      	ldr	r1, [pc, #108]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_RCC_OscConfig+0x478>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7ff fad9 	bl	800271c <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316e:	f7ff fad5 	bl	800271c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e05c      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x416>
 800318c:	e054      	b.n	8003238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <HAL_RCC_OscConfig+0x478>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7ff fac2 	bl	800271c <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319c:	f7ff fabe 	bl	800271c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e045      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_RCC_OscConfig+0x470>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x444>
 80031ba:	e03d      	b.n	8003238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d107      	bne.n	80031d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e038      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40007000 	.word	0x40007000
 80031d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_RCC_OscConfig+0x4ec>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d028      	beq.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d121      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d11a      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003204:	4013      	ands	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800320a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800320c:	4293      	cmp	r3, r2
 800320e:	d111      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	3b01      	subs	r3, #1
 800321e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d107      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0cc      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b68      	ldr	r3, [pc, #416]	; (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d90c      	bls.n	8003284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b65      	ldr	r3, [pc, #404]	; (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b63      	ldr	r3, [pc, #396]	; (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0b8      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800329c:	4b59      	ldr	r3, [pc, #356]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a58      	ldr	r2, [pc, #352]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b4:	4b53      	ldr	r3, [pc, #332]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a52      	ldr	r2, [pc, #328]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c0:	4b50      	ldr	r3, [pc, #320]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	494d      	ldr	r1, [pc, #308]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d044      	beq.n	8003368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d119      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e07f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d003      	beq.n	8003306 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003302:	2b03      	cmp	r3, #3
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e06f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003316:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e067      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003326:	4b37      	ldr	r3, [pc, #220]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4934      	ldr	r1, [pc, #208]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003338:	f7ff f9f0 	bl	800271c <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7ff f9ec 	bl	800271c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e04f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 020c 	and.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	429a      	cmp	r2, r3
 8003366:	d1eb      	bne.n	8003340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b25      	ldr	r3, [pc, #148]	; (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d20c      	bcs.n	8003390 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e032      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800339c:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4916      	ldr	r1, [pc, #88]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	490e      	ldr	r1, [pc, #56]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ce:	f000 f821 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80033d2:	4602      	mov	r2, r0
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	490a      	ldr	r1, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	5ccb      	ldrb	r3, [r1, r3]
 80033e2:	fa22 f303 	lsr.w	r3, r2, r3
 80033e6:	4a09      	ldr	r2, [pc, #36]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe ff94 	bl	800231c <HAL_InitTick>

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023c00 	.word	0x40023c00
 8003404:	40023800 	.word	0x40023800
 8003408:	0800b344 	.word	0x0800b344
 800340c:	20000020 	.word	0x20000020
 8003410:	20000024 	.word	0x20000024

08003414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003418:	b094      	sub	sp, #80	; 0x50
 800341a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	647b      	str	r3, [r7, #68]	; 0x44
 8003420:	2300      	movs	r3, #0
 8003422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003424:	2300      	movs	r3, #0
 8003426:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800342c:	4b79      	ldr	r3, [pc, #484]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d00d      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x40>
 8003438:	2b08      	cmp	r3, #8
 800343a:	f200 80e1 	bhi.w	8003600 <HAL_RCC_GetSysClockFreq+0x1ec>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x34>
 8003442:	2b04      	cmp	r3, #4
 8003444:	d003      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x3a>
 8003446:	e0db      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b73      	ldr	r3, [pc, #460]	; (8003618 <HAL_RCC_GetSysClockFreq+0x204>)
 800344a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800344c:	e0db      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800344e:	4b73      	ldr	r3, [pc, #460]	; (800361c <HAL_RCC_GetSysClockFreq+0x208>)
 8003450:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003452:	e0d8      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003454:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800345c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800345e:	4b6d      	ldr	r3, [pc, #436]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346a:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	099b      	lsrs	r3, r3, #6
 8003470:	2200      	movs	r2, #0
 8003472:	63bb      	str	r3, [r7, #56]	; 0x38
 8003474:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347c:	633b      	str	r3, [r7, #48]	; 0x30
 800347e:	2300      	movs	r3, #0
 8003480:	637b      	str	r3, [r7, #52]	; 0x34
 8003482:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003486:	4622      	mov	r2, r4
 8003488:	462b      	mov	r3, r5
 800348a:	f04f 0000 	mov.w	r0, #0
 800348e:	f04f 0100 	mov.w	r1, #0
 8003492:	0159      	lsls	r1, r3, #5
 8003494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003498:	0150      	lsls	r0, r2, #5
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4621      	mov	r1, r4
 80034a0:	1a51      	subs	r1, r2, r1
 80034a2:	6139      	str	r1, [r7, #16]
 80034a4:	4629      	mov	r1, r5
 80034a6:	eb63 0301 	sbc.w	r3, r3, r1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b8:	4659      	mov	r1, fp
 80034ba:	018b      	lsls	r3, r1, #6
 80034bc:	4651      	mov	r1, sl
 80034be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034c2:	4651      	mov	r1, sl
 80034c4:	018a      	lsls	r2, r1, #6
 80034c6:	4651      	mov	r1, sl
 80034c8:	ebb2 0801 	subs.w	r8, r2, r1
 80034cc:	4659      	mov	r1, fp
 80034ce:	eb63 0901 	sbc.w	r9, r3, r1
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034e6:	4690      	mov	r8, r2
 80034e8:	4699      	mov	r9, r3
 80034ea:	4623      	mov	r3, r4
 80034ec:	eb18 0303 	adds.w	r3, r8, r3
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	462b      	mov	r3, r5
 80034f4:	eb49 0303 	adc.w	r3, r9, r3
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003506:	4629      	mov	r1, r5
 8003508:	024b      	lsls	r3, r1, #9
 800350a:	4621      	mov	r1, r4
 800350c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003510:	4621      	mov	r1, r4
 8003512:	024a      	lsls	r2, r1, #9
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	2200      	movs	r2, #0
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
 800351e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003524:	f7fd fb68 	bl	8000bf8 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4613      	mov	r3, r2
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003530:	e058      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b38      	ldr	r3, [pc, #224]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	2200      	movs	r2, #0
 800353a:	4618      	mov	r0, r3
 800353c:	4611      	mov	r1, r2
 800353e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	2300      	movs	r3, #0
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
 8003548:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	f04f 0000 	mov.w	r0, #0
 8003554:	f04f 0100 	mov.w	r1, #0
 8003558:	0159      	lsls	r1, r3, #5
 800355a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355e:	0150      	lsls	r0, r2, #5
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4641      	mov	r1, r8
 8003566:	ebb2 0a01 	subs.w	sl, r2, r1
 800356a:	4649      	mov	r1, r9
 800356c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800357c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003580:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003584:	ebb2 040a 	subs.w	r4, r2, sl
 8003588:	eb63 050b 	sbc.w	r5, r3, fp
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	00eb      	lsls	r3, r5, #3
 8003596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800359a:	00e2      	lsls	r2, r4, #3
 800359c:	4614      	mov	r4, r2
 800359e:	461d      	mov	r5, r3
 80035a0:	4643      	mov	r3, r8
 80035a2:	18e3      	adds	r3, r4, r3
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	464b      	mov	r3, r9
 80035a8:	eb45 0303 	adc.w	r3, r5, r3
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ba:	4629      	mov	r1, r5
 80035bc:	028b      	lsls	r3, r1, #10
 80035be:	4621      	mov	r1, r4
 80035c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c4:	4621      	mov	r1, r4
 80035c6:	028a      	lsls	r2, r1, #10
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ce:	2200      	movs	r2, #0
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	61fa      	str	r2, [r7, #28]
 80035d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d8:	f7fd fb0e 	bl	8000bf8 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4613      	mov	r3, r2
 80035e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	3301      	adds	r3, #1
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetSysClockFreq+0x204>)
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003608:	4618      	mov	r0, r3
 800360a:	3750      	adds	r7, #80	; 0x50
 800360c:	46bd      	mov	sp, r7
 800360e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	00f42400 	.word	0x00f42400
 800361c:	007a1200 	.word	0x007a1200

08003620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_RCC_GetHCLKFreq+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000020 	.word	0x20000020

08003638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800363c:	f7ff fff0 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0a9b      	lsrs	r3, r3, #10
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	; (800365c <HAL_RCC_GetPCLK1Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	0800b354 	.word	0x0800b354

08003660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003664:	f7ff ffdc 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	0b5b      	lsrs	r3, r3, #13
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4903      	ldr	r1, [pc, #12]	; (8003684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40023800 	.word	0x40023800
 8003684:	0800b354 	.word	0x0800b354

08003688 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	220f      	movs	r2, #15
 8003696:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_RCC_GetClockConfig+0x5c>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0203 	and.w	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <HAL_RCC_GetClockConfig+0x5c>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_RCC_GetClockConfig+0x5c>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_GetClockConfig+0x5c>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	08db      	lsrs	r3, r3, #3
 80036c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_RCC_GetClockConfig+0x60>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0207 	and.w	r2, r3, #7
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40023c00 	.word	0x40023c00

080036ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e041      	b.n	8003782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fd04 	bl	8002120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	4619      	mov	r1, r3
 800372a:	4610      	mov	r0, r2
 800372c:	f000 fd70 	bl	8004210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	d001      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e044      	b.n	800382e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1e      	ldr	r2, [pc, #120]	; (800383c <HAL_TIM_Base_Start_IT+0xb0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d018      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x6c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ce:	d013      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x6c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1a      	ldr	r2, [pc, #104]	; (8003840 <HAL_TIM_Base_Start_IT+0xb4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00e      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x6c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_TIM_Base_Start_IT+0xb8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x6c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a17      	ldr	r2, [pc, #92]	; (8003848 <HAL_TIM_Base_Start_IT+0xbc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x6c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a16      	ldr	r2, [pc, #88]	; (800384c <HAL_TIM_Base_Start_IT+0xc0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d111      	bne.n	800381c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b06      	cmp	r3, #6
 8003808:	d010      	beq.n	800382c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381a:	e007      	b.n	800382c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40014000 	.word	0x40014000

08003850 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e041      	b.n	80038e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f839 	bl	80038ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f000 fcbe 	bl	8004210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <HAL_TIM_PWM_Start+0x24>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e022      	b.n	800396e <HAL_TIM_PWM_Start+0x6a>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b04      	cmp	r3, #4
 800392c:	d109      	bne.n	8003942 <HAL_TIM_PWM_Start+0x3e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	e015      	b.n	800396e <HAL_TIM_PWM_Start+0x6a>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d109      	bne.n	800395c <HAL_TIM_PWM_Start+0x58>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e008      	b.n	800396e <HAL_TIM_PWM_Start+0x6a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e068      	b.n	8003a48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <HAL_TIM_PWM_Start+0x82>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003984:	e013      	b.n	80039ae <HAL_TIM_PWM_Start+0xaa>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b04      	cmp	r3, #4
 800398a:	d104      	bne.n	8003996 <HAL_TIM_PWM_Start+0x92>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003994:	e00b      	b.n	80039ae <HAL_TIM_PWM_Start+0xaa>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_PWM_Start+0xa2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a4:	e003      	b.n	80039ae <HAL_TIM_PWM_Start+0xaa>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2201      	movs	r2, #1
 80039b4:	6839      	ldr	r1, [r7, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fedc 	bl	8004774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <HAL_TIM_PWM_Start+0x14c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d107      	bne.n	80039d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <HAL_TIM_PWM_Start+0x14c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d018      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x10e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d013      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x10e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_TIM_PWM_Start+0x150>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00e      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x10e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a17      	ldr	r2, [pc, #92]	; (8003a58 <HAL_TIM_PWM_Start+0x154>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d009      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x10e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a16      	ldr	r2, [pc, #88]	; (8003a5c <HAL_TIM_PWM_Start+0x158>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x10e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <HAL_TIM_PWM_Start+0x15c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d111      	bne.n	8003a36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b06      	cmp	r3, #6
 8003a22:	d010      	beq.n	8003a46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a34:	e007      	b.n	8003a46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40010000 	.word	0x40010000
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800
 8003a5c:	40000c00 	.word	0x40000c00
 8003a60:	40014000 	.word	0x40014000

08003a64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e097      	b.n	8003ba8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d106      	bne.n	8003a92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7fe fa6f 	bl	8001f70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aa8:	f023 0307 	bic.w	r3, r3, #7
 8003aac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f000 fba9 	bl	8004210 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae6:	f023 0303 	bic.w	r3, r3, #3
 8003aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	4313      	orrs	r3, r2
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b04:	f023 030c 	bic.w	r3, r3, #12
 8003b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	4313      	orrs	r3, r2
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	011a      	lsls	r2, r3, #4
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	031b      	lsls	r3, r3, #12
 8003b34:	4313      	orrs	r3, r2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003b4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	4313      	orrs	r3, r2
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d110      	bne.n	8003c02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d102      	bne.n	8003bec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003be6:	7b7b      	ldrb	r3, [r7, #13]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d001      	beq.n	8003bf0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e069      	b.n	8003cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c00:	e031      	b.n	8003c66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d110      	bne.n	8003c2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c08:	7bbb      	ldrb	r3, [r7, #14]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d102      	bne.n	8003c14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c0e:	7b3b      	ldrb	r3, [r7, #12]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d001      	beq.n	8003c18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e055      	b.n	8003cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c28:	e01d      	b.n	8003c66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d108      	bne.n	8003c42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c30:	7bbb      	ldrb	r3, [r7, #14]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d105      	bne.n	8003c42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c36:	7b7b      	ldrb	r3, [r7, #13]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d102      	bne.n	8003c42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c3c:	7b3b      	ldrb	r3, [r7, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d001      	beq.n	8003c46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e03e      	b.n	8003cc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_TIM_Encoder_Start+0xc4>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d008      	beq.n	8003c84 <HAL_TIM_Encoder_Start+0xd4>
 8003c72:	e00f      	b.n	8003c94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fd79 	bl	8004774 <TIM_CCxChannelCmd>
      break;
 8003c82:	e016      	b.n	8003cb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	2104      	movs	r1, #4
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fd71 	bl	8004774 <TIM_CCxChannelCmd>
      break;
 8003c92:	e00e      	b.n	8003cb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fd69 	bl	8004774 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	2104      	movs	r1, #4
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fd62 	bl	8004774 <TIM_CCxChannelCmd>
      break;
 8003cb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0201 	orr.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d020      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01b      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0202 	mvn.w	r2, #2
 8003d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa5b 	bl	80041d2 <HAL_TIM_IC_CaptureCallback>
 8003d1c:	e005      	b.n	8003d2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa4d 	bl	80041be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fa5e 	bl	80041e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d020      	beq.n	8003d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01b      	beq.n	8003d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0204 	mvn.w	r2, #4
 8003d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa35 	bl	80041d2 <HAL_TIM_IC_CaptureCallback>
 8003d68:	e005      	b.n	8003d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa27 	bl	80041be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fa38 	bl	80041e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d020      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01b      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0208 	mvn.w	r2, #8
 8003d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa0f 	bl	80041d2 <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa01 	bl	80041be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fa12 	bl	80041e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d020      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01b      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0210 	mvn.w	r2, #16
 8003de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2208      	movs	r2, #8
 8003dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f9e9 	bl	80041d2 <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f9db 	bl	80041be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f9ec 	bl	80041e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00c      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0201 	mvn.w	r2, #1
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fd fe12 	bl	8001a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00c      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fd2a 	bl	80048b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00c      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9bd 	bl	80041fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00c      	beq.n	8003ea4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0220 	mvn.w	r2, #32
 8003e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fcfc 	bl	800489c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e0ae      	b.n	8004028 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	f200 809f 	bhi.w	8004018 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003eda:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003f15 	.word	0x08003f15
 8003ee4:	08004019 	.word	0x08004019
 8003ee8:	08004019 	.word	0x08004019
 8003eec:	08004019 	.word	0x08004019
 8003ef0:	08003f55 	.word	0x08003f55
 8003ef4:	08004019 	.word	0x08004019
 8003ef8:	08004019 	.word	0x08004019
 8003efc:	08004019 	.word	0x08004019
 8003f00:	08003f97 	.word	0x08003f97
 8003f04:	08004019 	.word	0x08004019
 8003f08:	08004019 	.word	0x08004019
 8003f0c:	08004019 	.word	0x08004019
 8003f10:	08003fd7 	.word	0x08003fd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fa04 	bl	8004328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0208 	orr.w	r2, r2, #8
 8003f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0204 	bic.w	r2, r2, #4
 8003f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6999      	ldr	r1, [r3, #24]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	619a      	str	r2, [r3, #24]
      break;
 8003f52:	e064      	b.n	800401e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fa4a 	bl	80043f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6999      	ldr	r1, [r3, #24]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	021a      	lsls	r2, r3, #8
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	619a      	str	r2, [r3, #24]
      break;
 8003f94:	e043      	b.n	800401e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fa95 	bl	80044cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0208 	orr.w	r2, r2, #8
 8003fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0204 	bic.w	r2, r2, #4
 8003fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69d9      	ldr	r1, [r3, #28]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	61da      	str	r2, [r3, #28]
      break;
 8003fd4:	e023      	b.n	800401e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fadf 	bl	80045a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69d9      	ldr	r1, [r3, #28]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	021a      	lsls	r2, r3, #8
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	61da      	str	r2, [r3, #28]
      break;
 8004016:	e002      	b.n	800401e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	75fb      	strb	r3, [r7, #23]
      break;
 800401c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004026:	7dfb      	ldrb	r3, [r7, #23]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_TIM_ConfigClockSource+0x1c>
 8004048:	2302      	movs	r3, #2
 800404a:	e0b4      	b.n	80041b6 <HAL_TIM_ConfigClockSource+0x186>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800406a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004084:	d03e      	beq.n	8004104 <HAL_TIM_ConfigClockSource+0xd4>
 8004086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408a:	f200 8087 	bhi.w	800419c <HAL_TIM_ConfigClockSource+0x16c>
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004092:	f000 8086 	beq.w	80041a2 <HAL_TIM_ConfigClockSource+0x172>
 8004096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409a:	d87f      	bhi.n	800419c <HAL_TIM_ConfigClockSource+0x16c>
 800409c:	2b70      	cmp	r3, #112	; 0x70
 800409e:	d01a      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0xa6>
 80040a0:	2b70      	cmp	r3, #112	; 0x70
 80040a2:	d87b      	bhi.n	800419c <HAL_TIM_ConfigClockSource+0x16c>
 80040a4:	2b60      	cmp	r3, #96	; 0x60
 80040a6:	d050      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x11a>
 80040a8:	2b60      	cmp	r3, #96	; 0x60
 80040aa:	d877      	bhi.n	800419c <HAL_TIM_ConfigClockSource+0x16c>
 80040ac:	2b50      	cmp	r3, #80	; 0x50
 80040ae:	d03c      	beq.n	800412a <HAL_TIM_ConfigClockSource+0xfa>
 80040b0:	2b50      	cmp	r3, #80	; 0x50
 80040b2:	d873      	bhi.n	800419c <HAL_TIM_ConfigClockSource+0x16c>
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	d058      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x13a>
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d86f      	bhi.n	800419c <HAL_TIM_ConfigClockSource+0x16c>
 80040bc:	2b30      	cmp	r3, #48	; 0x30
 80040be:	d064      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x15a>
 80040c0:	2b30      	cmp	r3, #48	; 0x30
 80040c2:	d86b      	bhi.n	800419c <HAL_TIM_ConfigClockSource+0x16c>
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d060      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x15a>
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	d867      	bhi.n	800419c <HAL_TIM_ConfigClockSource+0x16c>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d05c      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x15a>
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d05a      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x15a>
 80040d4:	e062      	b.n	800419c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040e6:	f000 fb25 	bl	8004734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	609a      	str	r2, [r3, #8]
      break;
 8004102:	e04f      	b.n	80041a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004114:	f000 fb0e 	bl	8004734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004126:	609a      	str	r2, [r3, #8]
      break;
 8004128:	e03c      	b.n	80041a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004136:	461a      	mov	r2, r3
 8004138:	f000 fa82 	bl	8004640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2150      	movs	r1, #80	; 0x50
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fadb 	bl	80046fe <TIM_ITRx_SetConfig>
      break;
 8004148:	e02c      	b.n	80041a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004156:	461a      	mov	r2, r3
 8004158:	f000 faa1 	bl	800469e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2160      	movs	r1, #96	; 0x60
 8004162:	4618      	mov	r0, r3
 8004164:	f000 facb 	bl	80046fe <TIM_ITRx_SetConfig>
      break;
 8004168:	e01c      	b.n	80041a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004176:	461a      	mov	r2, r3
 8004178:	f000 fa62 	bl	8004640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2140      	movs	r1, #64	; 0x40
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fabb 	bl	80046fe <TIM_ITRx_SetConfig>
      break;
 8004188:	e00c      	b.n	80041a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f000 fab2 	bl	80046fe <TIM_ITRx_SetConfig>
      break;
 800419a:	e003      	b.n	80041a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      break;
 80041a0:	e000      	b.n	80041a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a3a      	ldr	r2, [pc, #232]	; (800430c <TIM_Base_SetConfig+0xfc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00f      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d00b      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a37      	ldr	r2, [pc, #220]	; (8004310 <TIM_Base_SetConfig+0x100>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a36      	ldr	r2, [pc, #216]	; (8004314 <TIM_Base_SetConfig+0x104>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_Base_SetConfig+0x38>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a35      	ldr	r2, [pc, #212]	; (8004318 <TIM_Base_SetConfig+0x108>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2b      	ldr	r2, [pc, #172]	; (800430c <TIM_Base_SetConfig+0xfc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01b      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004268:	d017      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a28      	ldr	r2, [pc, #160]	; (8004310 <TIM_Base_SetConfig+0x100>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a27      	ldr	r2, [pc, #156]	; (8004314 <TIM_Base_SetConfig+0x104>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00f      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a26      	ldr	r2, [pc, #152]	; (8004318 <TIM_Base_SetConfig+0x108>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00b      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a25      	ldr	r2, [pc, #148]	; (800431c <TIM_Base_SetConfig+0x10c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a24      	ldr	r2, [pc, #144]	; (8004320 <TIM_Base_SetConfig+0x110>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_Base_SetConfig+0x8a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a23      	ldr	r2, [pc, #140]	; (8004324 <TIM_Base_SetConfig+0x114>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0e      	ldr	r2, [pc, #56]	; (800430c <TIM_Base_SetConfig+0xfc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d103      	bne.n	80042e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d105      	bne.n	80042fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f023 0201 	bic.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	611a      	str	r2, [r3, #16]
  }
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40010000 	.word	0x40010000
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40000c00 	.word	0x40000c00
 800431c:	40014000 	.word	0x40014000
 8004320:	40014400 	.word	0x40014400
 8004324:	40014800 	.word	0x40014800

08004328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f023 0201 	bic.w	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f023 0302 	bic.w	r3, r3, #2
 8004370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a1c      	ldr	r2, [pc, #112]	; (80043f0 <TIM_OC1_SetConfig+0xc8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10c      	bne.n	800439e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0308 	bic.w	r3, r3, #8
 800438a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 0304 	bic.w	r3, r3, #4
 800439c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a13      	ldr	r2, [pc, #76]	; (80043f0 <TIM_OC1_SetConfig+0xc8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d111      	bne.n	80043ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	621a      	str	r2, [r3, #32]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	40010000 	.word	0x40010000

080043f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f023 0210 	bic.w	r2, r3, #16
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0320 	bic.w	r3, r3, #32
 800443e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a1e      	ldr	r2, [pc, #120]	; (80044c8 <TIM_OC2_SetConfig+0xd4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d10d      	bne.n	8004470 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800445a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800446e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <TIM_OC2_SetConfig+0xd4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d113      	bne.n	80044a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800447e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000

080044cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <TIM_OC3_SetConfig+0xd0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10d      	bne.n	8004546 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a14      	ldr	r2, [pc, #80]	; (800459c <TIM_OC3_SetConfig+0xd0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d113      	bne.n	8004576 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800455c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	621a      	str	r2, [r3, #32]
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40010000 	.word	0x40010000

080045a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	031b      	lsls	r3, r3, #12
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a10      	ldr	r2, [pc, #64]	; (800463c <TIM_OC4_SetConfig+0x9c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d109      	bne.n	8004614 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	019b      	lsls	r3, r3, #6
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000

08004640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f023 0201 	bic.w	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800466a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f023 030a 	bic.w	r3, r3, #10
 800467c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800469e:	b480      	push	{r7}
 80046a0:	b087      	sub	sp, #28
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f023 0210 	bic.w	r2, r3, #16
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	031b      	lsls	r3, r3, #12
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046fe:	b480      	push	{r7}
 8004700:	b085      	sub	sp, #20
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004714:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	f043 0307 	orr.w	r3, r3, #7
 8004720:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	609a      	str	r2, [r3, #8]
}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	021a      	lsls	r2, r3, #8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	431a      	orrs	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4313      	orrs	r3, r2
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2201      	movs	r2, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1a      	ldr	r2, [r3, #32]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	43db      	mvns	r3, r3
 8004796:	401a      	ands	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	431a      	orrs	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e050      	b.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1c      	ldr	r2, [pc, #112]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d018      	beq.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d013      	beq.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a18      	ldr	r2, [pc, #96]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00e      	beq.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a16      	ldr	r2, [pc, #88]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d009      	beq.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d004      	beq.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a13      	ldr	r2, [pc, #76]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d10c      	bne.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	4313      	orrs	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40014000 	.word	0x40014000

0800489c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e042      	b.n	800495c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd fc90 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2224      	movs	r2, #36	; 0x24
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fe55 	bl	80055b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800491c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800492c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	; 0x28
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b20      	cmp	r3, #32
 8004982:	d175      	bne.n	8004a70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_UART_Transmit+0x2c>
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e06e      	b.n	8004a72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2221      	movs	r2, #33	; 0x21
 800499e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049a2:	f7fd febb 	bl	800271c <HAL_GetTick>
 80049a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	88fa      	ldrh	r2, [r7, #6]
 80049b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049bc:	d108      	bne.n	80049d0 <HAL_UART_Transmit+0x6c>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	e003      	b.n	80049d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049d8:	e02e      	b.n	8004a38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2180      	movs	r1, #128	; 0x80
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fbb7 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e03a      	b.n	8004a72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10b      	bne.n	8004a1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	3302      	adds	r3, #2
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e007      	b.n	8004a2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	781a      	ldrb	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	3301      	adds	r3, #1
 8004a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1cb      	bne.n	80049da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2140      	movs	r1, #64	; 0x40
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fb83 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e006      	b.n	8004a72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e000      	b.n	8004a72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
  }
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3720      	adds	r7, #32
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b08a      	sub	sp, #40	; 0x28
 8004a7e:	af02      	add	r7, sp, #8
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	f040 8081 	bne.w	8004b9e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_UART_Receive+0x2e>
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e079      	b.n	8004ba0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2222      	movs	r2, #34	; 0x22
 8004ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ac0:	f7fd fe2c 	bl	800271c <HAL_GetTick>
 8004ac4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	88fa      	ldrh	r2, [r7, #6]
 8004aca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	88fa      	ldrh	r2, [r7, #6]
 8004ad0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ada:	d108      	bne.n	8004aee <HAL_UART_Receive+0x74>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	e003      	b.n	8004af6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004af6:	e047      	b.n	8004b88 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	2120      	movs	r1, #32
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fb28 	bl	8005158 <UART_WaitOnFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e042      	b.n	8004ba0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10c      	bne.n	8004b3a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	3302      	adds	r3, #2
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e01f      	b.n	8004b7a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b42:	d007      	beq.n	8004b54 <HAL_UART_Receive+0xda>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <HAL_UART_Receive+0xe8>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e008      	b.n	8004b74 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	3301      	adds	r3, #1
 8004b78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1b2      	bne.n	8004af8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e000      	b.n	8004ba0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
  }
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3720      	adds	r7, #32
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d112      	bne.n	8004be8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <HAL_UART_Receive_IT+0x26>
 8004bc8:	88fb      	ldrh	r3, [r7, #6]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e00b      	b.n	8004bea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 fb13 	bl	800520a <UART_Start_Receive_IT>
 8004be4:	4603      	mov	r3, r0
 8004be6:	e000      	b.n	8004bea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004be8:	2302      	movs	r3, #2
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b0ba      	sub	sp, #232	; 0xe8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10f      	bne.n	8004c5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_UART_IRQHandler+0x66>
 8004c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fbf2 	bl	800543c <UART_Receive_IT>
      return;
 8004c58:	e25b      	b.n	8005112 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80de 	beq.w	8004e20 <HAL_UART_IRQHandler+0x22c>
 8004c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80d1 	beq.w	8004e20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xae>
 8004c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f043 0201 	orr.w	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <HAL_UART_IRQHandler+0xd2>
 8004cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbe:	f043 0202 	orr.w	r2, r3, #2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_UART_IRQHandler+0xf6>
 8004cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	f043 0204 	orr.w	r2, r3, #4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d011      	beq.n	8004d1a <HAL_UART_IRQHandler+0x126>
 8004cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d105      	bne.n	8004d0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	f043 0208 	orr.w	r2, r3, #8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 81f2 	beq.w	8005108 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_UART_IRQHandler+0x14e>
 8004d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fb7d 	bl	800543c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_UART_IRQHandler+0x17a>
 8004d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d04f      	beq.n	8004e0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa85 	bl	800527e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d141      	bne.n	8004e06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3314      	adds	r3, #20
 8004daa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1d9      	bne.n	8004d82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d013      	beq.n	8004dfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dda:	4a7e      	ldr	r2, [pc, #504]	; (8004fd4 <HAL_UART_IRQHandler+0x3e0>)
 8004ddc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fd fdf8 	bl	80029d8 <HAL_DMA_Abort_IT>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d016      	beq.n	8004e1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	e00e      	b.n	8004e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f994 	bl	800512c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	e00a      	b.n	8004e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f990 	bl	800512c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	e006      	b.n	8004e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f98c 	bl	800512c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004e1a:	e175      	b.n	8005108 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1c:	bf00      	nop
    return;
 8004e1e:	e173      	b.n	8005108 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	f040 814f 	bne.w	80050c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8148 	beq.w	80050c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8141 	beq.w	80050c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e46:	2300      	movs	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	f040 80b6 	bne.w	8004fd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8145 	beq.w	800510c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	f080 813e 	bcs.w	800510c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea2:	f000 8088 	beq.w	8004fb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ed2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1d9      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3314      	adds	r3, #20
 8004f12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e1      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3314      	adds	r3, #20
 8004f34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3314      	adds	r3, #20
 8004f4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e3      	bne.n	8004f2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f86:	f023 0310 	bic.w	r3, r3, #16
 8004f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	330c      	adds	r3, #12
 8004f94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f98:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e3      	bne.n	8004f74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fd fca1 	bl	80028f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f8b7 	bl	8005140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fd2:	e09b      	b.n	800510c <HAL_UART_IRQHandler+0x518>
 8004fd4:	08005345 	.word	0x08005345
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 808e 	beq.w	8005110 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8089 	beq.w	8005110 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800500e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005010:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005014:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005022:	647a      	str	r2, [r7, #68]	; 0x44
 8005024:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e3      	bne.n	8004ffe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3314      	adds	r3, #20
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	623b      	str	r3, [r7, #32]
   return(result);
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800505a:	633a      	str	r2, [r7, #48]	; 0x30
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e3      	bne.n	8005036 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	60fb      	str	r3, [r7, #12]
   return(result);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0310 	bic.w	r3, r3, #16
 8005092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050a0:	61fa      	str	r2, [r7, #28]
 80050a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	69b9      	ldr	r1, [r7, #24]
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	617b      	str	r3, [r7, #20]
   return(result);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e3      	bne.n	800507c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f83d 	bl	8005140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050c6:	e023      	b.n	8005110 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d009      	beq.n	80050e8 <HAL_UART_IRQHandler+0x4f4>
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f943 	bl	800536c <UART_Transmit_IT>
    return;
 80050e6:	e014      	b.n	8005112 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00e      	beq.n	8005112 <HAL_UART_IRQHandler+0x51e>
 80050f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f983 	bl	800540c <UART_EndTransmit_IT>
    return;
 8005106:	e004      	b.n	8005112 <HAL_UART_IRQHandler+0x51e>
    return;
 8005108:	bf00      	nop
 800510a:	e002      	b.n	8005112 <HAL_UART_IRQHandler+0x51e>
      return;
 800510c:	bf00      	nop
 800510e:	e000      	b.n	8005112 <HAL_UART_IRQHandler+0x51e>
      return;
 8005110:	bf00      	nop
  }
}
 8005112:	37e8      	adds	r7, #232	; 0xe8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005168:	e03b      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d037      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005172:	f7fd fad3 	bl	800271c <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	6a3a      	ldr	r2, [r7, #32]
 800517e:	429a      	cmp	r2, r3
 8005180:	d302      	bcc.n	8005188 <UART_WaitOnFlagUntilTimeout+0x30>
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e03a      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d023      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b80      	cmp	r3, #128	; 0x80
 800519e:	d020      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d01d      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d116      	bne.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 f857 	bl	800527e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2208      	movs	r2, #8
 80051d4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e00f      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4013      	ands	r3, r2
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d0b4      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	4613      	mov	r3, r2
 8005216:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2222      	movs	r2, #34	; 0x22
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800524e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0220 	orr.w	r2, r2, #32
 800526e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800527e:	b480      	push	{r7}
 8005280:	b095      	sub	sp, #84	; 0x54
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	330c      	adds	r3, #12
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800529c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	330c      	adds	r3, #12
 80052a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052a6:	643a      	str	r2, [r7, #64]	; 0x40
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e5      	bne.n	8005286 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3314      	adds	r3, #20
 80052c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f023 0301 	bic.w	r3, r3, #1
 80052d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3314      	adds	r3, #20
 80052d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e5      	bne.n	80052ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d119      	bne.n	800532a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	330c      	adds	r3, #12
 80052fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	60bb      	str	r3, [r7, #8]
   return(result);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f023 0310 	bic.w	r3, r3, #16
 800530c:	647b      	str	r3, [r7, #68]	; 0x44
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005316:	61ba      	str	r2, [r7, #24]
 8005318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	6979      	ldr	r1, [r7, #20]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	613b      	str	r3, [r7, #16]
   return(result);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e5      	bne.n	80052f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005338:	bf00      	nop
 800533a:	3754      	adds	r7, #84	; 0x54
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff fee4 	bl	800512c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b21      	cmp	r3, #33	; 0x21
 800537e:	d13e      	bne.n	80053fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005388:	d114      	bne.n	80053b4 <UART_Transmit_IT+0x48>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d110      	bne.n	80053b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	1c9a      	adds	r2, r3, #2
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	621a      	str	r2, [r3, #32]
 80053b2:	e008      	b.n	80053c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	1c59      	adds	r1, r3, #1
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6211      	str	r1, [r2, #32]
 80053be:	781a      	ldrb	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4619      	mov	r1, r3
 80053d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10f      	bne.n	80053fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005422:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff fe73 	bl	8005118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	; 0x30
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b22      	cmp	r3, #34	; 0x22
 800544e:	f040 80ae 	bne.w	80055ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545a:	d117      	bne.n	800548c <UART_Receive_IT+0x50>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d113      	bne.n	800548c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	b29b      	uxth	r3, r3
 8005476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547a:	b29a      	uxth	r2, r3
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	1c9a      	adds	r2, r3, #2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	629a      	str	r2, [r3, #40]	; 0x28
 800548a:	e026      	b.n	80054da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005492:	2300      	movs	r3, #0
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	d007      	beq.n	80054b0 <UART_Receive_IT+0x74>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <UART_Receive_IT+0x82>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	701a      	strb	r2, [r3, #0]
 80054bc:	e008      	b.n	80054d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	4619      	mov	r1, r3
 80054e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d15d      	bne.n	80055aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0220 	bic.w	r2, r2, #32
 80054fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800550c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	2b01      	cmp	r3, #1
 8005532:	d135      	bne.n	80055a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	330c      	adds	r3, #12
 8005540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	613b      	str	r3, [r7, #16]
   return(result);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f023 0310 	bic.w	r3, r3, #16
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555a:	623a      	str	r2, [r7, #32]
 800555c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	69f9      	ldr	r1, [r7, #28]
 8005560:	6a3a      	ldr	r2, [r7, #32]
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	61bb      	str	r3, [r7, #24]
   return(result);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e5      	bne.n	800553a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b10      	cmp	r3, #16
 800557a:	d10a      	bne.n	8005592 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fdd1 	bl	8005140 <HAL_UARTEx_RxEventCallback>
 800559e:	e002      	b.n	80055a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fb fe4b 	bl	800123c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e002      	b.n	80055b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e000      	b.n	80055b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80055ae:	2302      	movs	r3, #2
  }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3730      	adds	r7, #48	; 0x30
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055bc:	b0c0      	sub	sp, #256	; 0x100
 80055be:	af00      	add	r7, sp, #0
 80055c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	68d9      	ldr	r1, [r3, #12]
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	ea40 0301 	orr.w	r3, r0, r1
 80055e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005610:	f021 010c 	bic.w	r1, r1, #12
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800561e:	430b      	orrs	r3, r1
 8005620:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	6999      	ldr	r1, [r3, #24]
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	ea40 0301 	orr.w	r3, r0, r1
 800563e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b8f      	ldr	r3, [pc, #572]	; (8005884 <UART_SetConfig+0x2cc>)
 8005648:	429a      	cmp	r2, r3
 800564a:	d005      	beq.n	8005658 <UART_SetConfig+0xa0>
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b8d      	ldr	r3, [pc, #564]	; (8005888 <UART_SetConfig+0x2d0>)
 8005654:	429a      	cmp	r2, r3
 8005656:	d104      	bne.n	8005662 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005658:	f7fe f802 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 800565c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005660:	e003      	b.n	800566a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005662:	f7fd ffe9 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8005666:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005674:	f040 810c 	bne.w	8005890 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800567c:	2200      	movs	r2, #0
 800567e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005682:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005686:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	1891      	adds	r1, r2, r2
 8005690:	65b9      	str	r1, [r7, #88]	; 0x58
 8005692:	415b      	adcs	r3, r3
 8005694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800569a:	4621      	mov	r1, r4
 800569c:	eb12 0801 	adds.w	r8, r2, r1
 80056a0:	4629      	mov	r1, r5
 80056a2:	eb43 0901 	adc.w	r9, r3, r1
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ba:	4690      	mov	r8, r2
 80056bc:	4699      	mov	r9, r3
 80056be:	4623      	mov	r3, r4
 80056c0:	eb18 0303 	adds.w	r3, r8, r3
 80056c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056c8:	462b      	mov	r3, r5
 80056ca:	eb49 0303 	adc.w	r3, r9, r3
 80056ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056e6:	460b      	mov	r3, r1
 80056e8:	18db      	adds	r3, r3, r3
 80056ea:	653b      	str	r3, [r7, #80]	; 0x50
 80056ec:	4613      	mov	r3, r2
 80056ee:	eb42 0303 	adc.w	r3, r2, r3
 80056f2:	657b      	str	r3, [r7, #84]	; 0x54
 80056f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056fc:	f7fb fa7c 	bl	8000bf8 <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4b61      	ldr	r3, [pc, #388]	; (800588c <UART_SetConfig+0x2d4>)
 8005706:	fba3 2302 	umull	r2, r3, r3, r2
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	011c      	lsls	r4, r3, #4
 800570e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005712:	2200      	movs	r2, #0
 8005714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005718:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800571c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005720:	4642      	mov	r2, r8
 8005722:	464b      	mov	r3, r9
 8005724:	1891      	adds	r1, r2, r2
 8005726:	64b9      	str	r1, [r7, #72]	; 0x48
 8005728:	415b      	adcs	r3, r3
 800572a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800572c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005730:	4641      	mov	r1, r8
 8005732:	eb12 0a01 	adds.w	sl, r2, r1
 8005736:	4649      	mov	r1, r9
 8005738:	eb43 0b01 	adc.w	fp, r3, r1
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005748:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800574c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005750:	4692      	mov	sl, r2
 8005752:	469b      	mov	fp, r3
 8005754:	4643      	mov	r3, r8
 8005756:	eb1a 0303 	adds.w	r3, sl, r3
 800575a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800575e:	464b      	mov	r3, r9
 8005760:	eb4b 0303 	adc.w	r3, fp, r3
 8005764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005774:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005778:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800577c:	460b      	mov	r3, r1
 800577e:	18db      	adds	r3, r3, r3
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
 8005782:	4613      	mov	r3, r2
 8005784:	eb42 0303 	adc.w	r3, r2, r3
 8005788:	647b      	str	r3, [r7, #68]	; 0x44
 800578a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800578e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005792:	f7fb fa31 	bl	8000bf8 <__aeabi_uldivmod>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4611      	mov	r1, r2
 800579c:	4b3b      	ldr	r3, [pc, #236]	; (800588c <UART_SetConfig+0x2d4>)
 800579e:	fba3 2301 	umull	r2, r3, r3, r1
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	2264      	movs	r2, #100	; 0x64
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	1acb      	subs	r3, r1, r3
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057b2:	4b36      	ldr	r3, [pc, #216]	; (800588c <UART_SetConfig+0x2d4>)
 80057b4:	fba3 2302 	umull	r2, r3, r3, r2
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057c0:	441c      	add	r4, r3
 80057c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	1891      	adds	r1, r2, r2
 80057da:	63b9      	str	r1, [r7, #56]	; 0x38
 80057dc:	415b      	adcs	r3, r3
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057e4:	4641      	mov	r1, r8
 80057e6:	1851      	adds	r1, r2, r1
 80057e8:	6339      	str	r1, [r7, #48]	; 0x30
 80057ea:	4649      	mov	r1, r9
 80057ec:	414b      	adcs	r3, r1
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057fc:	4659      	mov	r1, fp
 80057fe:	00cb      	lsls	r3, r1, #3
 8005800:	4651      	mov	r1, sl
 8005802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005806:	4651      	mov	r1, sl
 8005808:	00ca      	lsls	r2, r1, #3
 800580a:	4610      	mov	r0, r2
 800580c:	4619      	mov	r1, r3
 800580e:	4603      	mov	r3, r0
 8005810:	4642      	mov	r2, r8
 8005812:	189b      	adds	r3, r3, r2
 8005814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005818:	464b      	mov	r3, r9
 800581a:	460a      	mov	r2, r1
 800581c:	eb42 0303 	adc.w	r3, r2, r3
 8005820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005830:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005834:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005838:	460b      	mov	r3, r1
 800583a:	18db      	adds	r3, r3, r3
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
 800583e:	4613      	mov	r3, r2
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800584a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800584e:	f7fb f9d3 	bl	8000bf8 <__aeabi_uldivmod>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <UART_SetConfig+0x2d4>)
 8005858:	fba3 1302 	umull	r1, r3, r3, r2
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	2164      	movs	r1, #100	; 0x64
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	3332      	adds	r3, #50	; 0x32
 800586a:	4a08      	ldr	r2, [pc, #32]	; (800588c <UART_SetConfig+0x2d4>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	f003 0207 	and.w	r2, r3, #7
 8005876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4422      	add	r2, r4
 800587e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005880:	e106      	b.n	8005a90 <UART_SetConfig+0x4d8>
 8005882:	bf00      	nop
 8005884:	40011000 	.word	0x40011000
 8005888:	40011400 	.word	0x40011400
 800588c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005894:	2200      	movs	r2, #0
 8005896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800589a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800589e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058a2:	4642      	mov	r2, r8
 80058a4:	464b      	mov	r3, r9
 80058a6:	1891      	adds	r1, r2, r2
 80058a8:	6239      	str	r1, [r7, #32]
 80058aa:	415b      	adcs	r3, r3
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058b2:	4641      	mov	r1, r8
 80058b4:	1854      	adds	r4, r2, r1
 80058b6:	4649      	mov	r1, r9
 80058b8:	eb43 0501 	adc.w	r5, r3, r1
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	00eb      	lsls	r3, r5, #3
 80058c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ca:	00e2      	lsls	r2, r4, #3
 80058cc:	4614      	mov	r4, r2
 80058ce:	461d      	mov	r5, r3
 80058d0:	4643      	mov	r3, r8
 80058d2:	18e3      	adds	r3, r4, r3
 80058d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058d8:	464b      	mov	r3, r9
 80058da:	eb45 0303 	adc.w	r3, r5, r3
 80058de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058fe:	4629      	mov	r1, r5
 8005900:	008b      	lsls	r3, r1, #2
 8005902:	4621      	mov	r1, r4
 8005904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005908:	4621      	mov	r1, r4
 800590a:	008a      	lsls	r2, r1, #2
 800590c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005910:	f7fb f972 	bl	8000bf8 <__aeabi_uldivmod>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4b60      	ldr	r3, [pc, #384]	; (8005a9c <UART_SetConfig+0x4e4>)
 800591a:	fba3 2302 	umull	r2, r3, r3, r2
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	011c      	lsls	r4, r3, #4
 8005922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005926:	2200      	movs	r2, #0
 8005928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800592c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005930:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	1891      	adds	r1, r2, r2
 800593a:	61b9      	str	r1, [r7, #24]
 800593c:	415b      	adcs	r3, r3
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005944:	4641      	mov	r1, r8
 8005946:	1851      	adds	r1, r2, r1
 8005948:	6139      	str	r1, [r7, #16]
 800594a:	4649      	mov	r1, r9
 800594c:	414b      	adcs	r3, r1
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800595c:	4659      	mov	r1, fp
 800595e:	00cb      	lsls	r3, r1, #3
 8005960:	4651      	mov	r1, sl
 8005962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005966:	4651      	mov	r1, sl
 8005968:	00ca      	lsls	r2, r1, #3
 800596a:	4610      	mov	r0, r2
 800596c:	4619      	mov	r1, r3
 800596e:	4603      	mov	r3, r0
 8005970:	4642      	mov	r2, r8
 8005972:	189b      	adds	r3, r3, r2
 8005974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005978:	464b      	mov	r3, r9
 800597a:	460a      	mov	r2, r1
 800597c:	eb42 0303 	adc.w	r3, r2, r3
 8005980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	67bb      	str	r3, [r7, #120]	; 0x78
 800598e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800599c:	4649      	mov	r1, r9
 800599e:	008b      	lsls	r3, r1, #2
 80059a0:	4641      	mov	r1, r8
 80059a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a6:	4641      	mov	r1, r8
 80059a8:	008a      	lsls	r2, r1, #2
 80059aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059ae:	f7fb f923 	bl	8000bf8 <__aeabi_uldivmod>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4611      	mov	r1, r2
 80059b8:	4b38      	ldr	r3, [pc, #224]	; (8005a9c <UART_SetConfig+0x4e4>)
 80059ba:	fba3 2301 	umull	r2, r3, r3, r1
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	2264      	movs	r2, #100	; 0x64
 80059c2:	fb02 f303 	mul.w	r3, r2, r3
 80059c6:	1acb      	subs	r3, r1, r3
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	3332      	adds	r3, #50	; 0x32
 80059cc:	4a33      	ldr	r2, [pc, #204]	; (8005a9c <UART_SetConfig+0x4e4>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d8:	441c      	add	r4, r3
 80059da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059de:	2200      	movs	r2, #0
 80059e0:	673b      	str	r3, [r7, #112]	; 0x70
 80059e2:	677a      	str	r2, [r7, #116]	; 0x74
 80059e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059e8:	4642      	mov	r2, r8
 80059ea:	464b      	mov	r3, r9
 80059ec:	1891      	adds	r1, r2, r2
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	415b      	adcs	r3, r3
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059f8:	4641      	mov	r1, r8
 80059fa:	1851      	adds	r1, r2, r1
 80059fc:	6039      	str	r1, [r7, #0]
 80059fe:	4649      	mov	r1, r9
 8005a00:	414b      	adcs	r3, r1
 8005a02:	607b      	str	r3, [r7, #4]
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a10:	4659      	mov	r1, fp
 8005a12:	00cb      	lsls	r3, r1, #3
 8005a14:	4651      	mov	r1, sl
 8005a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a1a:	4651      	mov	r1, sl
 8005a1c:	00ca      	lsls	r2, r1, #3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	4619      	mov	r1, r3
 8005a22:	4603      	mov	r3, r0
 8005a24:	4642      	mov	r2, r8
 8005a26:	189b      	adds	r3, r3, r2
 8005a28:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	460a      	mov	r2, r1
 8005a2e:	eb42 0303 	adc.w	r3, r2, r3
 8005a32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a3e:	667a      	str	r2, [r7, #100]	; 0x64
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	008b      	lsls	r3, r1, #2
 8005a50:	4641      	mov	r1, r8
 8005a52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a56:	4641      	mov	r1, r8
 8005a58:	008a      	lsls	r2, r1, #2
 8005a5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a5e:	f7fb f8cb 	bl	8000bf8 <__aeabi_uldivmod>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <UART_SetConfig+0x4e4>)
 8005a68:	fba3 1302 	umull	r1, r3, r3, r2
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	2164      	movs	r1, #100	; 0x64
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	3332      	adds	r3, #50	; 0x32
 8005a7a:	4a08      	ldr	r2, [pc, #32]	; (8005a9c <UART_SetConfig+0x4e4>)
 8005a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a80:	095b      	lsrs	r3, r3, #5
 8005a82:	f003 020f 	and.w	r2, r3, #15
 8005a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4422      	add	r2, r4
 8005a8e:	609a      	str	r2, [r3, #8]
}
 8005a90:	bf00      	nop
 8005a92:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a96:	46bd      	mov	sp, r7
 8005a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a9c:	51eb851f 	.word	0x51eb851f

08005aa0 <__NVIC_SetPriority>:
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	6039      	str	r1, [r7, #0]
 8005aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	db0a      	blt.n	8005aca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	490c      	ldr	r1, [pc, #48]	; (8005aec <__NVIC_SetPriority+0x4c>)
 8005aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005abe:	0112      	lsls	r2, r2, #4
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ac8:	e00a      	b.n	8005ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	4908      	ldr	r1, [pc, #32]	; (8005af0 <__NVIC_SetPriority+0x50>)
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	3b04      	subs	r3, #4
 8005ad8:	0112      	lsls	r2, r2, #4
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	440b      	add	r3, r1
 8005ade:	761a      	strb	r2, [r3, #24]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	e000e100 	.word	0xe000e100
 8005af0:	e000ed00 	.word	0xe000ed00

08005af4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005af8:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <SysTick_Handler+0x1c>)
 8005afa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005afc:	f001 fe7c 	bl	80077f8 <xTaskGetSchedulerState>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d001      	beq.n	8005b0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b06:	f002 fc67 	bl	80083d8 <xPortSysTickHandler>
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	e000e010 	.word	0xe000e010

08005b14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b18:	2100      	movs	r1, #0
 8005b1a:	f06f 0004 	mvn.w	r0, #4
 8005b1e:	f7ff ffbf 	bl	8005aa0 <__NVIC_SetPriority>
#endif
}
 8005b22:	bf00      	nop
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b2e:	f3ef 8305 	mrs	r3, IPSR
 8005b32:	603b      	str	r3, [r7, #0]
  return(result);
 8005b34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b3a:	f06f 0305 	mvn.w	r3, #5
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	e00c      	b.n	8005b5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b42:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <osKernelInitialize+0x44>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d105      	bne.n	8005b56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b4a:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <osKernelInitialize+0x44>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	e002      	b.n	8005b5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b56:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b5c:	687b      	ldr	r3, [r7, #4]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000568 	.word	0x20000568

08005b70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b76:	f3ef 8305 	mrs	r3, IPSR
 8005b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b82:	f06f 0305 	mvn.w	r3, #5
 8005b86:	607b      	str	r3, [r7, #4]
 8005b88:	e010      	b.n	8005bac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <osKernelStart+0x48>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d109      	bne.n	8005ba6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b92:	f7ff ffbf 	bl	8005b14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b96:	4b08      	ldr	r3, [pc, #32]	; (8005bb8 <osKernelStart+0x48>)
 8005b98:	2202      	movs	r2, #2
 8005b9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b9c:	f001 f9e4 	bl	8006f68 <vTaskStartScheduler>
      stat = osOK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	607b      	str	r3, [r7, #4]
 8005ba4:	e002      	b.n	8005bac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8005baa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bac:	687b      	ldr	r3, [r7, #4]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000568 	.word	0x20000568

08005bbc <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <OS_Tick_GetCount+0x20>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 8005bc8:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <OS_Tick_GetCount+0x20>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	1ad3      	subs	r3, r2, r3
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	e000e010 	.word	0xe000e010

08005be0 <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 8005be4:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <OS_Tick_GetOverflow+0x18>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	0c1b      	lsrs	r3, r3, #16
 8005bea:	f003 0301 	and.w	r3, r3, #1
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	e000e010 	.word	0xe000e010

08005bfc <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <OS_Tick_GetInterval+0x14>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	3301      	adds	r3, #1
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	e000e010 	.word	0xe000e010

08005c14 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c20:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d105      	bne.n	8005c32 <osKernelGetSysTimerCount+0x1e>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c26:	f3ef 8311 	mrs	r3, BASEPRI
 8005c2a:	607b      	str	r3, [r7, #4]
  return(result);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <osKernelGetSysTimerCount+0x22>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <osKernelGetSysTimerCount+0x24>
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c3a:	b672      	cpsid	i
}
 8005c3c:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 8005c3e:	f001 faa5 	bl	800718c <xTaskGetTickCount>
 8005c42:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 8005c44:	f7ff ffba 	bl	8005bbc <OS_Tick_GetCount>
 8005c48:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 8005c4a:	f7ff ffc9 	bl	8005be0 <OS_Tick_GetOverflow>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 8005c54:	f7ff ffb2 	bl	8005bbc <OS_Tick_GetCount>
 8005c58:	6138      	str	r0, [r7, #16]
    ticks++;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 8005c60:	f7ff ffcc 	bl	8005bfc <OS_Tick_GetInterval>
 8005c64:	4602      	mov	r2, r0
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	fb02 f303 	mul.w	r3, r2, r3
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4413      	add	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 8005c78:	b662      	cpsie	i
}
 8005c7a:	bf00      	nop
    __enable_irq();
  }

  return (val);
 8005c7c:	693b      	ldr	r3, [r7, #16]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <osKernelGetSysTimerFreq>:

uint32_t osKernelGetSysTimerFreq (void) {
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 8005c8c:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <osKernelGetSysTimerFreq+0x14>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	20000020 	.word	0x20000020

08005ca0 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08e      	sub	sp, #56	; 0x38
 8005ca4:	af04      	add	r7, sp, #16
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb0:	f3ef 8305 	mrs	r3, IPSR
 8005cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8005cb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d17e      	bne.n	8005dba <osThreadNew+0x11a>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d07b      	beq.n	8005dba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005cc6:	2318      	movs	r3, #24
 8005cc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005cce:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d045      	beq.n	8005d66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <osThreadNew+0x48>
        name = attr->name;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <osThreadNew+0x6e>
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	2b38      	cmp	r3, #56	; 0x38
 8005d00:	d805      	bhi.n	8005d0e <osThreadNew+0x6e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <osThreadNew+0x72>
        return (NULL);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e054      	b.n	8005dbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	089b      	lsrs	r3, r3, #2
 8005d20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00e      	beq.n	8005d48 <osThreadNew+0xa8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	2b5b      	cmp	r3, #91	; 0x5b
 8005d30:	d90a      	bls.n	8005d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d006      	beq.n	8005d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <osThreadNew+0xa8>
        mem = 1;
 8005d42:	2301      	movs	r3, #1
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	e010      	b.n	8005d6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10c      	bne.n	8005d6a <osThreadNew+0xca>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d108      	bne.n	8005d6a <osThreadNew+0xca>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d104      	bne.n	8005d6a <osThreadNew+0xca>
          mem = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e001      	b.n	8005d6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d110      	bne.n	8005d92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d78:	9202      	str	r2, [sp, #8]
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6a3a      	ldr	r2, [r7, #32]
 8005d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 ff18 	bl	8006bbc <xTaskCreateStatic>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	e013      	b.n	8005dba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d110      	bne.n	8005dba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f107 0310 	add.w	r3, r7, #16
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 ff63 	bl	8006c76 <xTaskCreate>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d001      	beq.n	8005dba <osThreadNew+0x11a>
            hTask = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005dba:	693b      	ldr	r3, [r7, #16]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3728      	adds	r7, #40	; 0x28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dcc:	f3ef 8305 	mrs	r3, IPSR
 8005dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <osDelay+0x1c>
    stat = osErrorISR;
 8005dd8:	f06f 0305 	mvn.w	r3, #5
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e007      	b.n	8005df0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f001 f888 	bl	8006f00 <vTaskDelay>
    }
  }

  return (stat);
 8005df0:	68fb      	ldr	r3, [r7, #12]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b08a      	sub	sp, #40	; 0x28
 8005dfe:	af02      	add	r7, sp, #8
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e0a:	f3ef 8305 	mrs	r3, IPSR
 8005e0e:	613b      	str	r3, [r7, #16]
  return(result);
 8005e10:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d15f      	bne.n	8005ed6 <osMessageQueueNew+0xdc>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d05c      	beq.n	8005ed6 <osMessageQueueNew+0xdc>
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d059      	beq.n	8005ed6 <osMessageQueueNew+0xdc>
    mem = -1;
 8005e22:	f04f 33ff 	mov.w	r3, #4294967295
 8005e26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d029      	beq.n	8005e82 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d012      	beq.n	8005e5c <osMessageQueueNew+0x62>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2b4f      	cmp	r3, #79	; 0x4f
 8005e3c:	d90e      	bls.n	8005e5c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	fb01 f303 	mul.w	r3, r1, r3
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <osMessageQueueNew+0x62>
        mem = 1;
 8005e56:	2301      	movs	r3, #1
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	e014      	b.n	8005e86 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d110      	bne.n	8005e86 <osMessageQueueNew+0x8c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10c      	bne.n	8005e86 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d108      	bne.n	8005e86 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d104      	bne.n	8005e86 <osMessageQueueNew+0x8c>
          mem = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e001      	b.n	8005e86 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d10b      	bne.n	8005ea4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2100      	movs	r1, #0
 8005e96:	9100      	str	r1, [sp, #0]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f9d0 	bl	8006240 <xQueueGenericCreateStatic>
 8005ea0:	61f8      	str	r0, [r7, #28]
 8005ea2:	e008      	b.n	8005eb6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d105      	bne.n	8005eb6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005eaa:	2200      	movs	r2, #0
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 fa3e 	bl	8006330 <xQueueGenericCreate>
 8005eb4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00c      	beq.n	8005ed6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <osMessageQueueNew+0xd0>
        name = attr->name;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e001      	b.n	8005ece <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005ece:	6979      	ldr	r1, [r7, #20]
 8005ed0:	69f8      	ldr	r0, [r7, #28]
 8005ed2:	f000 fe15 	bl	8006b00 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005ed6:	69fb      	ldr	r3, [r7, #28]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ef8:	f3ef 8305 	mrs	r3, IPSR
 8005efc:	617b      	str	r3, [r7, #20]
  return(result);
 8005efe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d028      	beq.n	8005f56 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <osMessageQueuePut+0x36>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <osMessageQueuePut+0x36>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005f16:	f06f 0303 	mvn.w	r3, #3
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	e038      	b.n	8005f90 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005f22:	f107 0210 	add.w	r2, r7, #16
 8005f26:	2300      	movs	r3, #0
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	69b8      	ldr	r0, [r7, #24]
 8005f2c:	f000 fb5c 	bl	80065e8 <xQueueGenericSendFromISR>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d003      	beq.n	8005f3e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005f36:	f06f 0302 	mvn.w	r3, #2
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	e028      	b.n	8005f90 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d025      	beq.n	8005f90 <osMessageQueuePut+0xb0>
 8005f44:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <osMessageQueuePut+0xbc>)
 8005f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	e01c      	b.n	8005f90 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <osMessageQueuePut+0x82>
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d103      	bne.n	8005f6a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005f62:	f06f 0303 	mvn.w	r3, #3
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	e012      	b.n	8005f90 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	69b8      	ldr	r0, [r7, #24]
 8005f72:	f000 fa3b 	bl	80063ec <xQueueGenericSend>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d009      	beq.n	8005f90 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005f82:	f06f 0301 	mvn.w	r3, #1
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	e002      	b.n	8005f90 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005f8a:	f06f 0302 	mvn.w	r3, #2
 8005f8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005f90:	69fb      	ldr	r3, [r7, #28]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4a07      	ldr	r2, [pc, #28]	; (8005fcc <vApplicationGetIdleTaskMemory+0x2c>)
 8005fb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4a06      	ldr	r2, [pc, #24]	; (8005fd0 <vApplicationGetIdleTaskMemory+0x30>)
 8005fb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2280      	movs	r2, #128	; 0x80
 8005fbc:	601a      	str	r2, [r3, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	2000056c 	.word	0x2000056c
 8005fd0:	200005c8 	.word	0x200005c8

08005fd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4a07      	ldr	r2, [pc, #28]	; (8006000 <vApplicationGetTimerTaskMemory+0x2c>)
 8005fe4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4a06      	ldr	r2, [pc, #24]	; (8006004 <vApplicationGetTimerTaskMemory+0x30>)
 8005fea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ff2:	601a      	str	r2, [r3, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	200007c8 	.word	0x200007c8
 8006004:	20000824 	.word	0x20000824

08006008 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f103 0208 	add.w	r2, r3, #8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f04f 32ff 	mov.w	r2, #4294967295
 8006020:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f103 0208 	add.w	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f103 0208 	add.w	r2, r3, #8
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006062:	b480      	push	{r7}
 8006064:	b085      	sub	sp, #20
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d103      	bne.n	80060ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e00c      	b.n	80060e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3308      	adds	r3, #8
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e002      	b.n	80060d8 <vListInsert+0x2e>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d2f6      	bcs.n	80060d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	601a      	str	r2, [r3, #0]
}
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6892      	ldr	r2, [r2, #8]
 8006132:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6852      	ldr	r2, [r2, #4]
 800613c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d103      	bne.n	8006150 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	1e5a      	subs	r2, r3, #1
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800619a:	f002 f88b 	bl	80082b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061aa:	fb01 f303 	mul.w	r3, r1, r3
 80061ae:	441a      	add	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ca:	3b01      	subs	r3, #1
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061d0:	fb01 f303 	mul.w	r3, r1, r3
 80061d4:	441a      	add	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	22ff      	movs	r2, #255	; 0xff
 80061de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	22ff      	movs	r2, #255	; 0xff
 80061e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d114      	bne.n	800621a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01a      	beq.n	800622e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3310      	adds	r3, #16
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 f93d 	bl	800747c <xTaskRemoveFromEventList>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d012      	beq.n	800622e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <xQueueGenericReset+0xcc>)
 800620a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	e009      	b.n	800622e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3310      	adds	r3, #16
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff fef2 	bl	8006008 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3324      	adds	r3, #36	; 0x24
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff feed 	bl	8006008 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800622e:	f002 f871 	bl	8008314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006232:	2301      	movs	r3, #1
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08e      	sub	sp, #56	; 0x38
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <xQueueGenericCreateStatic+0x52>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <xQueueGenericCreateStatic+0x56>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <xQueueGenericCreateStatic+0x58>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	623b      	str	r3, [r7, #32]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <xQueueGenericCreateStatic+0x7e>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <xQueueGenericCreateStatic+0x82>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <xQueueGenericCreateStatic+0x84>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	61fb      	str	r3, [r7, #28]
}
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062de:	2350      	movs	r3, #80	; 0x50
 80062e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b50      	cmp	r3, #80	; 0x50
 80062e6:	d00a      	beq.n	80062fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	61bb      	str	r3, [r7, #24]
}
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006312:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	4613      	mov	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f83f 	bl	80063a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006328:	4618      	mov	r0, r3
 800632a:	3730      	adds	r7, #48	; 0x30
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	; 0x28
 8006334:	af02      	add	r7, sp, #8
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	4613      	mov	r3, r2
 800633c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	613b      	str	r3, [r7, #16]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	fb02 f303 	mul.w	r3, r2, r3
 8006362:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	3350      	adds	r3, #80	; 0x50
 8006368:	4618      	mov	r0, r3
 800636a:	f002 f8c5 	bl	80084f8 <pvPortMalloc>
 800636e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d011      	beq.n	800639a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	3350      	adds	r3, #80	; 0x50
 800637e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006388:	79fa      	ldrb	r2, [r7, #7]
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	4613      	mov	r3, r2
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 f805 	bl	80063a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800639a:	69bb      	ldr	r3, [r7, #24]
	}
 800639c:	4618      	mov	r0, r3
 800639e:	3720      	adds	r7, #32
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d103      	bne.n	80063c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e002      	b.n	80063c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063d2:	2101      	movs	r1, #1
 80063d4:	69b8      	ldr	r0, [r7, #24]
 80063d6:	f7ff fecb 	bl	8006170 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	78fa      	ldrb	r2, [r7, #3]
 80063de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08e      	sub	sp, #56	; 0x38
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063fa:	2300      	movs	r3, #0
 80063fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xQueueGenericSend+0x32>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d103      	bne.n	800642c <xQueueGenericSend+0x40>
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <xQueueGenericSend+0x44>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <xQueueGenericSend+0x46>
 8006430:	2300      	movs	r3, #0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10a      	bne.n	800644c <xQueueGenericSend+0x60>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006448:	bf00      	nop
 800644a:	e7fe      	b.n	800644a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d103      	bne.n	800645a <xQueueGenericSend+0x6e>
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <xQueueGenericSend+0x72>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <xQueueGenericSend+0x74>
 800645e:	2300      	movs	r3, #0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <xQueueGenericSend+0x8e>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	623b      	str	r3, [r7, #32]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800647a:	f001 f9bd 	bl	80077f8 <xTaskGetSchedulerState>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d102      	bne.n	800648a <xQueueGenericSend+0x9e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <xQueueGenericSend+0xa2>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <xQueueGenericSend+0xa4>
 800648e:	2300      	movs	r3, #0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10a      	bne.n	80064aa <xQueueGenericSend+0xbe>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	61fb      	str	r3, [r7, #28]
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064aa:	f001 ff03 	bl	80082b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d302      	bcc.n	80064c0 <xQueueGenericSend+0xd4>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d129      	bne.n	8006514 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064c6:	f000 fa0b 	bl	80068e0 <prvCopyDataToQueue>
 80064ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d010      	beq.n	80064f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	3324      	adds	r3, #36	; 0x24
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 ffcf 	bl	800747c <xTaskRemoveFromEventList>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d013      	beq.n	800650c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064e4:	4b3f      	ldr	r3, [pc, #252]	; (80065e4 <xQueueGenericSend+0x1f8>)
 80064e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	e00a      	b.n	800650c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d007      	beq.n	800650c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064fc:	4b39      	ldr	r3, [pc, #228]	; (80065e4 <xQueueGenericSend+0x1f8>)
 80064fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800650c:	f001 ff02 	bl	8008314 <vPortExitCritical>
				return pdPASS;
 8006510:	2301      	movs	r3, #1
 8006512:	e063      	b.n	80065dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d103      	bne.n	8006522 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800651a:	f001 fefb 	bl	8008314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800651e:	2300      	movs	r3, #0
 8006520:	e05c      	b.n	80065dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006524:	2b00      	cmp	r3, #0
 8006526:	d106      	bne.n	8006536 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006528:	f107 0314 	add.w	r3, r7, #20
 800652c:	4618      	mov	r0, r3
 800652e:	f001 f809 	bl	8007544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006532:	2301      	movs	r3, #1
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006536:	f001 feed 	bl	8008314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800653a:	f000 fd7b 	bl	8007034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800653e:	f001 feb9 	bl	80082b4 <vPortEnterCritical>
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006548:	b25b      	sxtb	r3, r3
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d103      	bne.n	8006558 <xQueueGenericSend+0x16c>
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800655e:	b25b      	sxtb	r3, r3
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d103      	bne.n	800656e <xQueueGenericSend+0x182>
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800656e:	f001 fed1 	bl	8008314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006572:	1d3a      	adds	r2, r7, #4
 8006574:	f107 0314 	add.w	r3, r7, #20
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fff8 	bl	8007570 <xTaskCheckForTimeOut>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d124      	bne.n	80065d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006588:	f000 faa2 	bl	8006ad0 <prvIsQueueFull>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d018      	beq.n	80065c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	3310      	adds	r3, #16
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f000 ff1e 	bl	80073dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065a2:	f000 fa2d 	bl	8006a00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065a6:	f000 fd53 	bl	8007050 <xTaskResumeAll>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f47f af7c 	bne.w	80064aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80065b2:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <xQueueGenericSend+0x1f8>)
 80065b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	e772      	b.n	80064aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065c6:	f000 fa1b 	bl	8006a00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065ca:	f000 fd41 	bl	8007050 <xTaskResumeAll>
 80065ce:	e76c      	b.n	80064aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065d2:	f000 fa15 	bl	8006a00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065d6:	f000 fd3b 	bl	8007050 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3738      	adds	r7, #56	; 0x38
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	e000ed04 	.word	0xe000ed04

080065e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b090      	sub	sp, #64	; 0x40
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d103      	bne.n	8006624 <xQueueGenericSendFromISR+0x3c>
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <xQueueGenericSendFromISR+0x40>
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <xQueueGenericSendFromISR+0x42>
 8006628:	2300      	movs	r3, #0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10a      	bne.n	8006644 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d103      	bne.n	8006652 <xQueueGenericSendFromISR+0x6a>
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <xQueueGenericSendFromISR+0x6e>
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <xQueueGenericSendFromISR+0x70>
 8006656:	2300      	movs	r3, #0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	623b      	str	r3, [r7, #32]
}
 800666e:	bf00      	nop
 8006670:	e7fe      	b.n	8006670 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006672:	f001 ff01 	bl	8008478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006676:	f3ef 8211 	mrs	r2, BASEPRI
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	61fa      	str	r2, [r7, #28]
 800668c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800668e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669a:	429a      	cmp	r2, r3
 800669c:	d302      	bcc.n	80066a4 <xQueueGenericSendFromISR+0xbc>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d12f      	bne.n	8006704 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066ba:	f000 f911 	bl	80068e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80066c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c6:	d112      	bne.n	80066ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d016      	beq.n	80066fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	3324      	adds	r3, #36	; 0x24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fed1 	bl	800747c <xTaskRemoveFromEventList>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00e      	beq.n	80066fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	e007      	b.n	80066fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066f2:	3301      	adds	r3, #1
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	b25a      	sxtb	r2, r3
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80066fe:	2301      	movs	r3, #1
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006702:	e001      	b.n	8006708 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006704:	2300      	movs	r3, #0
 8006706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006712:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006716:	4618      	mov	r0, r3
 8006718:	3740      	adds	r7, #64	; 0x40
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
	...

08006720 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08c      	sub	sp, #48	; 0x30
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800672c:	2300      	movs	r3, #0
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10a      	bne.n	8006750 <xQueueReceive+0x30>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	623b      	str	r3, [r7, #32]
}
 800674c:	bf00      	nop
 800674e:	e7fe      	b.n	800674e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d103      	bne.n	800675e <xQueueReceive+0x3e>
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <xQueueReceive+0x42>
 800675e:	2301      	movs	r3, #1
 8006760:	e000      	b.n	8006764 <xQueueReceive+0x44>
 8006762:	2300      	movs	r3, #0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <xQueueReceive+0x5e>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	61fb      	str	r3, [r7, #28]
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800677e:	f001 f83b 	bl	80077f8 <xTaskGetSchedulerState>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <xQueueReceive+0x6e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <xQueueReceive+0x72>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <xQueueReceive+0x74>
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <xQueueReceive+0x8e>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	61bb      	str	r3, [r7, #24]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ae:	f001 fd81 	bl	80082b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01f      	beq.n	80067fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c2:	f000 f8f7 	bl	80069b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	1e5a      	subs	r2, r3, #1
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00f      	beq.n	80067f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	3310      	adds	r3, #16
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fe4e 	bl	800747c <xTaskRemoveFromEventList>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067e6:	4b3d      	ldr	r3, [pc, #244]	; (80068dc <xQueueReceive+0x1bc>)
 80067e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067f6:	f001 fd8d 	bl	8008314 <vPortExitCritical>
				return pdPASS;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e069      	b.n	80068d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d103      	bne.n	800680c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006804:	f001 fd86 	bl	8008314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006808:	2300      	movs	r3, #0
 800680a:	e062      	b.n	80068d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006812:	f107 0310 	add.w	r3, r7, #16
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fe94 	bl	8007544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800681c:	2301      	movs	r3, #1
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006820:	f001 fd78 	bl	8008314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006824:	f000 fc06 	bl	8007034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006828:	f001 fd44 	bl	80082b4 <vPortEnterCritical>
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006832:	b25b      	sxtb	r3, r3
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006838:	d103      	bne.n	8006842 <xQueueReceive+0x122>
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006848:	b25b      	sxtb	r3, r3
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684e:	d103      	bne.n	8006858 <xQueueReceive+0x138>
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006858:	f001 fd5c 	bl	8008314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800685c:	1d3a      	adds	r2, r7, #4
 800685e:	f107 0310 	add.w	r3, r7, #16
 8006862:	4611      	mov	r1, r2
 8006864:	4618      	mov	r0, r3
 8006866:	f000 fe83 	bl	8007570 <xTaskCheckForTimeOut>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d123      	bne.n	80068b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006872:	f000 f917 	bl	8006aa4 <prvIsQueueEmpty>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d017      	beq.n	80068ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	3324      	adds	r3, #36	; 0x24
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	4611      	mov	r1, r2
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fda9 	bl	80073dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800688a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800688c:	f000 f8b8 	bl	8006a00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006890:	f000 fbde 	bl	8007050 <xTaskResumeAll>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d189      	bne.n	80067ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <xQueueReceive+0x1bc>)
 800689c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	e780      	b.n	80067ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ae:	f000 f8a7 	bl	8006a00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068b2:	f000 fbcd 	bl	8007050 <xTaskResumeAll>
 80068b6:	e77a      	b.n	80067ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ba:	f000 f8a1 	bl	8006a00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068be:	f000 fbc7 	bl	8007050 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c4:	f000 f8ee 	bl	8006aa4 <prvIsQueueEmpty>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f43f af6f 	beq.w	80067ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3730      	adds	r7, #48	; 0x30
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	e000ed04 	.word	0xe000ed04

080068e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10d      	bne.n	800691a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d14d      	bne.n	80069a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	4618      	mov	r0, r3
 800690c:	f000 ff92 	bl	8007834 <xTaskPriorityDisinherit>
 8006910:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	609a      	str	r2, [r3, #8]
 8006918:	e043      	b.n	80069a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d119      	bne.n	8006954 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6858      	ldr	r0, [r3, #4]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	461a      	mov	r2, r3
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	f002 fdcb 	bl	80094c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	441a      	add	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	429a      	cmp	r2, r3
 8006948:	d32b      	bcc.n	80069a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	e026      	b.n	80069a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68d8      	ldr	r0, [r3, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695c:	461a      	mov	r2, r3
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	f002 fdb1 	bl	80094c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696c:	425b      	negs	r3, r3
 800696e:	441a      	add	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d207      	bcs.n	8006990 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	425b      	negs	r3, r3
 800698a:	441a      	add	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d105      	bne.n	80069a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	3b01      	subs	r3, #1
 80069a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069aa:	697b      	ldr	r3, [r7, #20]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d018      	beq.n	80069f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	441a      	add	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d303      	bcc.n	80069e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68d9      	ldr	r1, [r3, #12]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	461a      	mov	r2, r3
 80069f2:	6838      	ldr	r0, [r7, #0]
 80069f4:	f002 fd67 	bl	80094c6 <memcpy>
	}
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a08:	f001 fc54 	bl	80082b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a14:	e011      	b.n	8006a3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d012      	beq.n	8006a44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3324      	adds	r3, #36	; 0x24
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fd2a 	bl	800747c <xTaskRemoveFromEventList>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a2e:	f000 fe01 	bl	8007634 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dce9      	bgt.n	8006a16 <prvUnlockQueue+0x16>
 8006a42:	e000      	b.n	8006a46 <prvUnlockQueue+0x46>
					break;
 8006a44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	22ff      	movs	r2, #255	; 0xff
 8006a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a4e:	f001 fc61 	bl	8008314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a52:	f001 fc2f 	bl	80082b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a5e:	e011      	b.n	8006a84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d012      	beq.n	8006a8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3310      	adds	r3, #16
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fd05 	bl	800747c <xTaskRemoveFromEventList>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a78:	f000 fddc 	bl	8007634 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	dce9      	bgt.n	8006a60 <prvUnlockQueue+0x60>
 8006a8c:	e000      	b.n	8006a90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	22ff      	movs	r2, #255	; 0xff
 8006a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a98:	f001 fc3c 	bl	8008314 <vPortExitCritical>
}
 8006a9c:	bf00      	nop
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006aac:	f001 fc02 	bl	80082b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d102      	bne.n	8006abe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	e001      	b.n	8006ac2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ac2:	f001 fc27 	bl	8008314 <vPortExitCritical>

	return xReturn;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad8:	f001 fbec 	bl	80082b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d102      	bne.n	8006aee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e001      	b.n	8006af2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006af2:	f001 fc0f 	bl	8008314 <vPortExitCritical>

	return xReturn;
 8006af6:	68fb      	ldr	r3, [r7, #12]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	e014      	b.n	8006b3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b10:	4a0f      	ldr	r2, [pc, #60]	; (8006b50 <vQueueAddToRegistry+0x50>)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b1c:	490c      	ldr	r1, [pc, #48]	; (8006b50 <vQueueAddToRegistry+0x50>)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b26:	4a0a      	ldr	r2, [pc, #40]	; (8006b50 <vQueueAddToRegistry+0x50>)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b32:	e006      	b.n	8006b42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3301      	adds	r3, #1
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b07      	cmp	r3, #7
 8006b3e:	d9e7      	bls.n	8006b10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20000c24 	.word	0x20000c24

08006b54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b64:	f001 fba6 	bl	80082b4 <vPortEnterCritical>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b6e:	b25b      	sxtb	r3, r3
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d103      	bne.n	8006b7e <vQueueWaitForMessageRestricted+0x2a>
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b84:	b25b      	sxtb	r3, r3
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d103      	bne.n	8006b94 <vQueueWaitForMessageRestricted+0x40>
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b94:	f001 fbbe 	bl	8008314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	3324      	adds	r3, #36	; 0x24
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fc3b 	bl	8007424 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bae:	6978      	ldr	r0, [r7, #20]
 8006bb0:	f7ff ff26 	bl	8006a00 <prvUnlockQueue>
	}
 8006bb4:	bf00      	nop
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08e      	sub	sp, #56	; 0x38
 8006bc0:	af04      	add	r7, sp, #16
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	623b      	str	r3, [r7, #32]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <xTaskCreateStatic+0x46>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	61fb      	str	r3, [r7, #28]
}
 8006bfe:	bf00      	nop
 8006c00:	e7fe      	b.n	8006c00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c02:	235c      	movs	r3, #92	; 0x5c
 8006c04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b5c      	cmp	r3, #92	; 0x5c
 8006c0a:	d00a      	beq.n	8006c22 <xTaskCreateStatic+0x66>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	61bb      	str	r3, [r7, #24]
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d01e      	beq.n	8006c68 <xTaskCreateStatic+0xac>
 8006c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01b      	beq.n	8006c68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c42:	2300      	movs	r3, #0
 8006c44:	9303      	str	r3, [sp, #12]
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	9302      	str	r3, [sp, #8]
 8006c4a:	f107 0314 	add.w	r3, r7, #20
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 f850 	bl	8006d00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c62:	f000 f8dd 	bl	8006e20 <prvAddNewTaskToReadyList>
 8006c66:	e001      	b.n	8006c6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c6c:	697b      	ldr	r3, [r7, #20]
	}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3728      	adds	r7, #40	; 0x28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b08c      	sub	sp, #48	; 0x30
 8006c7a:	af04      	add	r7, sp, #16
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	603b      	str	r3, [r7, #0]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c86:	88fb      	ldrh	r3, [r7, #6]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 fc34 	bl	80084f8 <pvPortMalloc>
 8006c90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00e      	beq.n	8006cb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c98:	205c      	movs	r0, #92	; 0x5c
 8006c9a:	f001 fc2d 	bl	80084f8 <pvPortMalloc>
 8006c9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
 8006cac:	e005      	b.n	8006cba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cae:	6978      	ldr	r0, [r7, #20]
 8006cb0:	f001 fcee 	bl	8008690 <vPortFree>
 8006cb4:	e001      	b.n	8006cba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d017      	beq.n	8006cf0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cc8:	88fa      	ldrh	r2, [r7, #6]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9303      	str	r3, [sp, #12]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	9302      	str	r3, [sp, #8]
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 f80e 	bl	8006d00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ce4:	69f8      	ldr	r0, [r7, #28]
 8006ce6:	f000 f89b 	bl	8006e20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cea:	2301      	movs	r3, #1
 8006cec:	61bb      	str	r3, [r7, #24]
 8006cee:	e002      	b.n	8006cf6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cf6:	69bb      	ldr	r3, [r7, #24]
	}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	461a      	mov	r2, r3
 8006d18:	21a5      	movs	r1, #165	; 0xa5
 8006d1a:	f002 fb54 	bl	80093c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	f023 0307 	bic.w	r3, r3, #7
 8006d36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	617b      	str	r3, [r7, #20]
}
 8006d54:	bf00      	nop
 8006d56:	e7fe      	b.n	8006d56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d01f      	beq.n	8006d9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
 8006d62:	e012      	b.n	8006d8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	4413      	add	r3, r2
 8006d6a:	7819      	ldrb	r1, [r3, #0]
 8006d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	4413      	add	r3, r2
 8006d72:	3334      	adds	r3, #52	; 0x34
 8006d74:	460a      	mov	r2, r1
 8006d76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d006      	beq.n	8006d92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	3301      	adds	r3, #1
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	2b0f      	cmp	r3, #15
 8006d8e:	d9e9      	bls.n	8006d64 <prvInitialiseNewTask+0x64>
 8006d90:	e000      	b.n	8006d94 <prvInitialiseNewTask+0x94>
			{
				break;
 8006d92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d9c:	e003      	b.n	8006da6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	2b37      	cmp	r3, #55	; 0x37
 8006daa:	d901      	bls.n	8006db0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006dac:	2337      	movs	r3, #55	; 0x37
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff f93e 	bl	8006048 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	3318      	adds	r3, #24
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff f939 	bl	8006048 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	2200      	movs	r2, #0
 8006df0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	68f9      	ldr	r1, [r7, #12]
 8006dfe:	69b8      	ldr	r0, [r7, #24]
 8006e00:	f001 f928 	bl	8008054 <pxPortInitialiseStack>
 8006e04:	4602      	mov	r2, r0
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e16:	bf00      	nop
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e28:	f001 fa44 	bl	80082b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e2c:	4b2d      	ldr	r3, [pc, #180]	; (8006ee4 <prvAddNewTaskToReadyList+0xc4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3301      	adds	r3, #1
 8006e32:	4a2c      	ldr	r2, [pc, #176]	; (8006ee4 <prvAddNewTaskToReadyList+0xc4>)
 8006e34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e36:	4b2c      	ldr	r3, [pc, #176]	; (8006ee8 <prvAddNewTaskToReadyList+0xc8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ee8 <prvAddNewTaskToReadyList+0xc8>)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e44:	4b27      	ldr	r3, [pc, #156]	; (8006ee4 <prvAddNewTaskToReadyList+0xc4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d110      	bne.n	8006e6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e4c:	f000 fc16 	bl	800767c <prvInitialiseTaskLists>
 8006e50:	e00d      	b.n	8006e6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e52:	4b26      	ldr	r3, [pc, #152]	; (8006eec <prvAddNewTaskToReadyList+0xcc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e5a:	4b23      	ldr	r3, [pc, #140]	; (8006ee8 <prvAddNewTaskToReadyList+0xc8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d802      	bhi.n	8006e6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e68:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <prvAddNewTaskToReadyList+0xc8>)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e6e:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <prvAddNewTaskToReadyList+0xd0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3301      	adds	r3, #1
 8006e74:	4a1e      	ldr	r2, [pc, #120]	; (8006ef0 <prvAddNewTaskToReadyList+0xd0>)
 8006e76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e78:	4b1d      	ldr	r3, [pc, #116]	; (8006ef0 <prvAddNewTaskToReadyList+0xd0>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e84:	4b1b      	ldr	r3, [pc, #108]	; (8006ef4 <prvAddNewTaskToReadyList+0xd4>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d903      	bls.n	8006e94 <prvAddNewTaskToReadyList+0x74>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	4a18      	ldr	r2, [pc, #96]	; (8006ef4 <prvAddNewTaskToReadyList+0xd4>)
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <prvAddNewTaskToReadyList+0xd8>)
 8006ea2:	441a      	add	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4610      	mov	r0, r2
 8006eac:	f7ff f8d9 	bl	8006062 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006eb0:	f001 fa30 	bl	8008314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006eb4:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <prvAddNewTaskToReadyList+0xcc>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00e      	beq.n	8006eda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <prvAddNewTaskToReadyList+0xc8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d207      	bcs.n	8006eda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006eca:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <prvAddNewTaskToReadyList+0xdc>)
 8006ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20001138 	.word	0x20001138
 8006ee8:	20000c64 	.word	0x20000c64
 8006eec:	20001144 	.word	0x20001144
 8006ef0:	20001154 	.word	0x20001154
 8006ef4:	20001140 	.word	0x20001140
 8006ef8:	20000c68 	.word	0x20000c68
 8006efc:	e000ed04 	.word	0xe000ed04

08006f00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d017      	beq.n	8006f42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <vTaskDelay+0x60>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <vTaskDelay+0x30>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	60bb      	str	r3, [r7, #8]
}
 8006f2c:	bf00      	nop
 8006f2e:	e7fe      	b.n	8006f2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f30:	f000 f880 	bl	8007034 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f34:	2100      	movs	r1, #0
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fcea 	bl	8007910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f3c:	f000 f888 	bl	8007050 <xTaskResumeAll>
 8006f40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d107      	bne.n	8006f58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f48:	4b06      	ldr	r3, [pc, #24]	; (8006f64 <vTaskDelay+0x64>)
 8006f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f58:	bf00      	nop
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20001160 	.word	0x20001160
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f76:	463a      	mov	r2, r7
 8006f78:	1d39      	adds	r1, r7, #4
 8006f7a:	f107 0308 	add.w	r3, r7, #8
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff f80e 	bl	8005fa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	9202      	str	r2, [sp, #8]
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	2300      	movs	r3, #0
 8006f94:	460a      	mov	r2, r1
 8006f96:	4921      	ldr	r1, [pc, #132]	; (800701c <vTaskStartScheduler+0xb4>)
 8006f98:	4821      	ldr	r0, [pc, #132]	; (8007020 <vTaskStartScheduler+0xb8>)
 8006f9a:	f7ff fe0f 	bl	8006bbc <xTaskCreateStatic>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4a20      	ldr	r2, [pc, #128]	; (8007024 <vTaskStartScheduler+0xbc>)
 8006fa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fa4:	4b1f      	ldr	r3, [pc, #124]	; (8007024 <vTaskStartScheduler+0xbc>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fac:	2301      	movs	r3, #1
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	e001      	b.n	8006fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d102      	bne.n	8006fc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006fbc:	f000 fcfc 	bl	80079b8 <xTimerCreateTimerTask>
 8006fc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d116      	bne.n	8006ff6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	613b      	str	r3, [r7, #16]
}
 8006fda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fdc:	4b12      	ldr	r3, [pc, #72]	; (8007028 <vTaskStartScheduler+0xc0>)
 8006fde:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fe4:	4b11      	ldr	r3, [pc, #68]	; (800702c <vTaskStartScheduler+0xc4>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fea:	4b11      	ldr	r3, [pc, #68]	; (8007030 <vTaskStartScheduler+0xc8>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ff0:	f001 f8be 	bl	8008170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ff4:	e00e      	b.n	8007014 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d10a      	bne.n	8007014 <vTaskStartScheduler+0xac>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	60fb      	str	r3, [r7, #12]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <vTaskStartScheduler+0xaa>
}
 8007014:	bf00      	nop
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	0800b2cc 	.word	0x0800b2cc
 8007020:	0800764d 	.word	0x0800764d
 8007024:	2000115c 	.word	0x2000115c
 8007028:	20001158 	.word	0x20001158
 800702c:	20001144 	.word	0x20001144
 8007030:	2000113c 	.word	0x2000113c

08007034 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007038:	4b04      	ldr	r3, [pc, #16]	; (800704c <vTaskSuspendAll+0x18>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3301      	adds	r3, #1
 800703e:	4a03      	ldr	r2, [pc, #12]	; (800704c <vTaskSuspendAll+0x18>)
 8007040:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007042:	bf00      	nop
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	20001160 	.word	0x20001160

08007050 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800705a:	2300      	movs	r3, #0
 800705c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800705e:	4b42      	ldr	r3, [pc, #264]	; (8007168 <xTaskResumeAll+0x118>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10a      	bne.n	800707c <xTaskResumeAll+0x2c>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	603b      	str	r3, [r7, #0]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800707c:	f001 f91a 	bl	80082b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007080:	4b39      	ldr	r3, [pc, #228]	; (8007168 <xTaskResumeAll+0x118>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3b01      	subs	r3, #1
 8007086:	4a38      	ldr	r2, [pc, #224]	; (8007168 <xTaskResumeAll+0x118>)
 8007088:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800708a:	4b37      	ldr	r3, [pc, #220]	; (8007168 <xTaskResumeAll+0x118>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d162      	bne.n	8007158 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007092:	4b36      	ldr	r3, [pc, #216]	; (800716c <xTaskResumeAll+0x11c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d05e      	beq.n	8007158 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800709a:	e02f      	b.n	80070fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709c:	4b34      	ldr	r3, [pc, #208]	; (8007170 <xTaskResumeAll+0x120>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3318      	adds	r3, #24
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff f837 	bl	800611c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff f832 	bl	800611c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070bc:	4b2d      	ldr	r3, [pc, #180]	; (8007174 <xTaskResumeAll+0x124>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d903      	bls.n	80070cc <xTaskResumeAll+0x7c>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	4a2a      	ldr	r2, [pc, #168]	; (8007174 <xTaskResumeAll+0x124>)
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4a27      	ldr	r2, [pc, #156]	; (8007178 <xTaskResumeAll+0x128>)
 80070da:	441a      	add	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f7fe ffbd 	bl	8006062 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ec:	4b23      	ldr	r3, [pc, #140]	; (800717c <xTaskResumeAll+0x12c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d302      	bcc.n	80070fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80070f6:	4b22      	ldr	r3, [pc, #136]	; (8007180 <xTaskResumeAll+0x130>)
 80070f8:	2201      	movs	r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070fc:	4b1c      	ldr	r3, [pc, #112]	; (8007170 <xTaskResumeAll+0x120>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1cb      	bne.n	800709c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800710a:	f000 fb55 	bl	80077b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800710e:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <xTaskResumeAll+0x134>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d010      	beq.n	800713c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800711a:	f000 f847 	bl	80071ac <xTaskIncrementTick>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007124:	4b16      	ldr	r3, [pc, #88]	; (8007180 <xTaskResumeAll+0x130>)
 8007126:	2201      	movs	r2, #1
 8007128:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3b01      	subs	r3, #1
 800712e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f1      	bne.n	800711a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007136:	4b13      	ldr	r3, [pc, #76]	; (8007184 <xTaskResumeAll+0x134>)
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800713c:	4b10      	ldr	r3, [pc, #64]	; (8007180 <xTaskResumeAll+0x130>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d009      	beq.n	8007158 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007144:	2301      	movs	r3, #1
 8007146:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <xTaskResumeAll+0x138>)
 800714a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007158:	f001 f8dc 	bl	8008314 <vPortExitCritical>

	return xAlreadyYielded;
 800715c:	68bb      	ldr	r3, [r7, #8]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20001160 	.word	0x20001160
 800716c:	20001138 	.word	0x20001138
 8007170:	200010f8 	.word	0x200010f8
 8007174:	20001140 	.word	0x20001140
 8007178:	20000c68 	.word	0x20000c68
 800717c:	20000c64 	.word	0x20000c64
 8007180:	2000114c 	.word	0x2000114c
 8007184:	20001148 	.word	0x20001148
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007192:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <xTaskGetTickCount+0x1c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007198:	687b      	ldr	r3, [r7, #4]
}
 800719a:	4618      	mov	r0, r3
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	2000113c 	.word	0x2000113c

080071ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b6:	4b4f      	ldr	r3, [pc, #316]	; (80072f4 <xTaskIncrementTick+0x148>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f040 808f 	bne.w	80072de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071c0:	4b4d      	ldr	r3, [pc, #308]	; (80072f8 <xTaskIncrementTick+0x14c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3301      	adds	r3, #1
 80071c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071c8:	4a4b      	ldr	r2, [pc, #300]	; (80072f8 <xTaskIncrementTick+0x14c>)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d120      	bne.n	8007216 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80071d4:	4b49      	ldr	r3, [pc, #292]	; (80072fc <xTaskIncrementTick+0x150>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	603b      	str	r3, [r7, #0]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <xTaskIncrementTick+0x46>
 80071f4:	4b41      	ldr	r3, [pc, #260]	; (80072fc <xTaskIncrementTick+0x150>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	4b41      	ldr	r3, [pc, #260]	; (8007300 <xTaskIncrementTick+0x154>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a3f      	ldr	r2, [pc, #252]	; (80072fc <xTaskIncrementTick+0x150>)
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	4a3f      	ldr	r2, [pc, #252]	; (8007300 <xTaskIncrementTick+0x154>)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	4b3e      	ldr	r3, [pc, #248]	; (8007304 <xTaskIncrementTick+0x158>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3301      	adds	r3, #1
 800720e:	4a3d      	ldr	r2, [pc, #244]	; (8007304 <xTaskIncrementTick+0x158>)
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	f000 fad1 	bl	80077b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007216:	4b3c      	ldr	r3, [pc, #240]	; (8007308 <xTaskIncrementTick+0x15c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	429a      	cmp	r2, r3
 800721e:	d349      	bcc.n	80072b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007220:	4b36      	ldr	r3, [pc, #216]	; (80072fc <xTaskIncrementTick+0x150>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d104      	bne.n	8007234 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800722a:	4b37      	ldr	r3, [pc, #220]	; (8007308 <xTaskIncrementTick+0x15c>)
 800722c:	f04f 32ff 	mov.w	r2, #4294967295
 8007230:	601a      	str	r2, [r3, #0]
					break;
 8007232:	e03f      	b.n	80072b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007234:	4b31      	ldr	r3, [pc, #196]	; (80072fc <xTaskIncrementTick+0x150>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d203      	bcs.n	8007254 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800724c:	4a2e      	ldr	r2, [pc, #184]	; (8007308 <xTaskIncrementTick+0x15c>)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007252:	e02f      	b.n	80072b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	3304      	adds	r3, #4
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe ff5f 	bl	800611c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	d004      	beq.n	8007270 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	3318      	adds	r3, #24
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe ff56 	bl	800611c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007274:	4b25      	ldr	r3, [pc, #148]	; (800730c <xTaskIncrementTick+0x160>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	d903      	bls.n	8007284 <xTaskIncrementTick+0xd8>
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007280:	4a22      	ldr	r2, [pc, #136]	; (800730c <xTaskIncrementTick+0x160>)
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4a1f      	ldr	r2, [pc, #124]	; (8007310 <xTaskIncrementTick+0x164>)
 8007292:	441a      	add	r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	3304      	adds	r3, #4
 8007298:	4619      	mov	r1, r3
 800729a:	4610      	mov	r0, r2
 800729c:	f7fe fee1 	bl	8006062 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <xTaskIncrementTick+0x168>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d3b8      	bcc.n	8007220 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80072ae:	2301      	movs	r3, #1
 80072b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072b2:	e7b5      	b.n	8007220 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072b4:	4b17      	ldr	r3, [pc, #92]	; (8007314 <xTaskIncrementTick+0x168>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ba:	4915      	ldr	r1, [pc, #84]	; (8007310 <xTaskIncrementTick+0x164>)
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d901      	bls.n	80072d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80072cc:	2301      	movs	r3, #1
 80072ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80072d0:	4b11      	ldr	r3, [pc, #68]	; (8007318 <xTaskIncrementTick+0x16c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d007      	beq.n	80072e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80072d8:	2301      	movs	r3, #1
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	e004      	b.n	80072e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80072de:	4b0f      	ldr	r3, [pc, #60]	; (800731c <xTaskIncrementTick+0x170>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3301      	adds	r3, #1
 80072e4:	4a0d      	ldr	r2, [pc, #52]	; (800731c <xTaskIncrementTick+0x170>)
 80072e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80072e8:	697b      	ldr	r3, [r7, #20]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20001160 	.word	0x20001160
 80072f8:	2000113c 	.word	0x2000113c
 80072fc:	200010f0 	.word	0x200010f0
 8007300:	200010f4 	.word	0x200010f4
 8007304:	20001150 	.word	0x20001150
 8007308:	20001158 	.word	0x20001158
 800730c:	20001140 	.word	0x20001140
 8007310:	20000c68 	.word	0x20000c68
 8007314:	20000c64 	.word	0x20000c64
 8007318:	2000114c 	.word	0x2000114c
 800731c:	20001148 	.word	0x20001148

08007320 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007326:	4b28      	ldr	r3, [pc, #160]	; (80073c8 <vTaskSwitchContext+0xa8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800732e:	4b27      	ldr	r3, [pc, #156]	; (80073cc <vTaskSwitchContext+0xac>)
 8007330:	2201      	movs	r2, #1
 8007332:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007334:	e041      	b.n	80073ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007336:	4b25      	ldr	r3, [pc, #148]	; (80073cc <vTaskSwitchContext+0xac>)
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800733c:	4b24      	ldr	r3, [pc, #144]	; (80073d0 <vTaskSwitchContext+0xb0>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	e010      	b.n	8007366 <vTaskSwitchContext+0x46>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <vTaskSwitchContext+0x40>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	607b      	str	r3, [r7, #4]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <vTaskSwitchContext+0x3e>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3b01      	subs	r3, #1
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	491b      	ldr	r1, [pc, #108]	; (80073d4 <vTaskSwitchContext+0xb4>)
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0e4      	beq.n	8007344 <vTaskSwitchContext+0x24>
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4a13      	ldr	r2, [pc, #76]	; (80073d4 <vTaskSwitchContext+0xb4>)
 8007386:	4413      	add	r3, r2
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	605a      	str	r2, [r3, #4]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	3308      	adds	r3, #8
 800739c:	429a      	cmp	r2, r3
 800739e:	d104      	bne.n	80073aa <vTaskSwitchContext+0x8a>
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	605a      	str	r2, [r3, #4]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	4a09      	ldr	r2, [pc, #36]	; (80073d8 <vTaskSwitchContext+0xb8>)
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	4a06      	ldr	r2, [pc, #24]	; (80073d0 <vTaskSwitchContext+0xb0>)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6013      	str	r3, [r2, #0]
}
 80073ba:	bf00      	nop
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	20001160 	.word	0x20001160
 80073cc:	2000114c 	.word	0x2000114c
 80073d0:	20001140 	.word	0x20001140
 80073d4:	20000c68 	.word	0x20000c68
 80073d8:	20000c64 	.word	0x20000c64

080073dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	60fb      	str	r3, [r7, #12]
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007402:	4b07      	ldr	r3, [pc, #28]	; (8007420 <vTaskPlaceOnEventList+0x44>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3318      	adds	r3, #24
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fe fe4d 	bl	80060aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007410:	2101      	movs	r1, #1
 8007412:	6838      	ldr	r0, [r7, #0]
 8007414:	f000 fa7c 	bl	8007910 <prvAddCurrentTaskToDelayedList>
}
 8007418:	bf00      	nop
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20000c64 	.word	0x20000c64

08007424 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	617b      	str	r3, [r7, #20]
}
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800744c:	4b0a      	ldr	r3, [pc, #40]	; (8007478 <vTaskPlaceOnEventListRestricted+0x54>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3318      	adds	r3, #24
 8007452:	4619      	mov	r1, r3
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f7fe fe04 	bl	8006062 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007460:	f04f 33ff 	mov.w	r3, #4294967295
 8007464:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	68b8      	ldr	r0, [r7, #8]
 800746a:	f000 fa51 	bl	8007910 <prvAddCurrentTaskToDelayedList>
	}
 800746e:	bf00      	nop
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000c64 	.word	0x20000c64

0800747c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	60fb      	str	r3, [r7, #12]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	3318      	adds	r3, #24
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fe fe35 	bl	800611c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074b2:	4b1e      	ldr	r3, [pc, #120]	; (800752c <xTaskRemoveFromEventList+0xb0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d11d      	bne.n	80074f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	3304      	adds	r3, #4
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe fe2c 	bl	800611c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c8:	4b19      	ldr	r3, [pc, #100]	; (8007530 <xTaskRemoveFromEventList+0xb4>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d903      	bls.n	80074d8 <xTaskRemoveFromEventList+0x5c>
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	4a16      	ldr	r2, [pc, #88]	; (8007530 <xTaskRemoveFromEventList+0xb4>)
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4a13      	ldr	r2, [pc, #76]	; (8007534 <xTaskRemoveFromEventList+0xb8>)
 80074e6:	441a      	add	r2, r3
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f7fe fdb7 	bl	8006062 <vListInsertEnd>
 80074f4:	e005      	b.n	8007502 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	3318      	adds	r3, #24
 80074fa:	4619      	mov	r1, r3
 80074fc:	480e      	ldr	r0, [pc, #56]	; (8007538 <xTaskRemoveFromEventList+0xbc>)
 80074fe:	f7fe fdb0 	bl	8006062 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007506:	4b0d      	ldr	r3, [pc, #52]	; (800753c <xTaskRemoveFromEventList+0xc0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	429a      	cmp	r2, r3
 800750e:	d905      	bls.n	800751c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007510:	2301      	movs	r3, #1
 8007512:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007514:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <xTaskRemoveFromEventList+0xc4>)
 8007516:	2201      	movs	r2, #1
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e001      	b.n	8007520 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800751c:	2300      	movs	r3, #0
 800751e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007520:	697b      	ldr	r3, [r7, #20]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	20001160 	.word	0x20001160
 8007530:	20001140 	.word	0x20001140
 8007534:	20000c68 	.word	0x20000c68
 8007538:	200010f8 	.word	0x200010f8
 800753c:	20000c64 	.word	0x20000c64
 8007540:	2000114c 	.word	0x2000114c

08007544 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800754c:	4b06      	ldr	r3, [pc, #24]	; (8007568 <vTaskInternalSetTimeOutState+0x24>)
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007554:	4b05      	ldr	r3, [pc, #20]	; (800756c <vTaskInternalSetTimeOutState+0x28>)
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	605a      	str	r2, [r3, #4]
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	20001150 	.word	0x20001150
 800756c:	2000113c 	.word	0x2000113c

08007570 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	613b      	str	r3, [r7, #16]
}
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10a      	bne.n	80075b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	60fb      	str	r3, [r7, #12]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80075b2:	f000 fe7f 	bl	80082b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075b6:	4b1d      	ldr	r3, [pc, #116]	; (800762c <xTaskCheckForTimeOut+0xbc>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d102      	bne.n	80075d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61fb      	str	r3, [r7, #28]
 80075d4:	e023      	b.n	800761e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	4b15      	ldr	r3, [pc, #84]	; (8007630 <xTaskCheckForTimeOut+0xc0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d007      	beq.n	80075f2 <xTaskCheckForTimeOut+0x82>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d302      	bcc.n	80075f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80075ec:	2301      	movs	r3, #1
 80075ee:	61fb      	str	r3, [r7, #28]
 80075f0:	e015      	b.n	800761e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d20b      	bcs.n	8007614 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff ff9b 	bl	8007544 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800760e:	2300      	movs	r3, #0
 8007610:	61fb      	str	r3, [r7, #28]
 8007612:	e004      	b.n	800761e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800761a:	2301      	movs	r3, #1
 800761c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800761e:	f000 fe79 	bl	8008314 <vPortExitCritical>

	return xReturn;
 8007622:	69fb      	ldr	r3, [r7, #28]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3720      	adds	r7, #32
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	2000113c 	.word	0x2000113c
 8007630:	20001150 	.word	0x20001150

08007634 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007638:	4b03      	ldr	r3, [pc, #12]	; (8007648 <vTaskMissedYield+0x14>)
 800763a:	2201      	movs	r2, #1
 800763c:	601a      	str	r2, [r3, #0]
}
 800763e:	bf00      	nop
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	2000114c 	.word	0x2000114c

0800764c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007654:	f000 f852 	bl	80076fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007658:	4b06      	ldr	r3, [pc, #24]	; (8007674 <prvIdleTask+0x28>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d9f9      	bls.n	8007654 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007660:	4b05      	ldr	r3, [pc, #20]	; (8007678 <prvIdleTask+0x2c>)
 8007662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007670:	e7f0      	b.n	8007654 <prvIdleTask+0x8>
 8007672:	bf00      	nop
 8007674:	20000c68 	.word	0x20000c68
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
 8007686:	e00c      	b.n	80076a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4a12      	ldr	r2, [pc, #72]	; (80076dc <prvInitialiseTaskLists+0x60>)
 8007694:	4413      	add	r3, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fcb6 	bl	8006008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3301      	adds	r3, #1
 80076a0:	607b      	str	r3, [r7, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b37      	cmp	r3, #55	; 0x37
 80076a6:	d9ef      	bls.n	8007688 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076a8:	480d      	ldr	r0, [pc, #52]	; (80076e0 <prvInitialiseTaskLists+0x64>)
 80076aa:	f7fe fcad 	bl	8006008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076ae:	480d      	ldr	r0, [pc, #52]	; (80076e4 <prvInitialiseTaskLists+0x68>)
 80076b0:	f7fe fcaa 	bl	8006008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076b4:	480c      	ldr	r0, [pc, #48]	; (80076e8 <prvInitialiseTaskLists+0x6c>)
 80076b6:	f7fe fca7 	bl	8006008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076ba:	480c      	ldr	r0, [pc, #48]	; (80076ec <prvInitialiseTaskLists+0x70>)
 80076bc:	f7fe fca4 	bl	8006008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076c0:	480b      	ldr	r0, [pc, #44]	; (80076f0 <prvInitialiseTaskLists+0x74>)
 80076c2:	f7fe fca1 	bl	8006008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076c6:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <prvInitialiseTaskLists+0x78>)
 80076c8:	4a05      	ldr	r2, [pc, #20]	; (80076e0 <prvInitialiseTaskLists+0x64>)
 80076ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076cc:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <prvInitialiseTaskLists+0x7c>)
 80076ce:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <prvInitialiseTaskLists+0x68>)
 80076d0:	601a      	str	r2, [r3, #0]
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20000c68 	.word	0x20000c68
 80076e0:	200010c8 	.word	0x200010c8
 80076e4:	200010dc 	.word	0x200010dc
 80076e8:	200010f8 	.word	0x200010f8
 80076ec:	2000110c 	.word	0x2000110c
 80076f0:	20001124 	.word	0x20001124
 80076f4:	200010f0 	.word	0x200010f0
 80076f8:	200010f4 	.word	0x200010f4

080076fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007702:	e019      	b.n	8007738 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007704:	f000 fdd6 	bl	80082b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007708:	4b10      	ldr	r3, [pc, #64]	; (800774c <prvCheckTasksWaitingTermination+0x50>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3304      	adds	r3, #4
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe fd01 	bl	800611c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800771a:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <prvCheckTasksWaitingTermination+0x54>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3b01      	subs	r3, #1
 8007720:	4a0b      	ldr	r2, [pc, #44]	; (8007750 <prvCheckTasksWaitingTermination+0x54>)
 8007722:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007724:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <prvCheckTasksWaitingTermination+0x58>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3b01      	subs	r3, #1
 800772a:	4a0a      	ldr	r2, [pc, #40]	; (8007754 <prvCheckTasksWaitingTermination+0x58>)
 800772c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800772e:	f000 fdf1 	bl	8008314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f810 	bl	8007758 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007738:	4b06      	ldr	r3, [pc, #24]	; (8007754 <prvCheckTasksWaitingTermination+0x58>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e1      	bne.n	8007704 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	2000110c 	.word	0x2000110c
 8007750:	20001138 	.word	0x20001138
 8007754:	20001120 	.word	0x20001120

08007758 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007766:	2b00      	cmp	r3, #0
 8007768:	d108      	bne.n	800777c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776e:	4618      	mov	r0, r3
 8007770:	f000 ff8e 	bl	8008690 <vPortFree>
				vPortFree( pxTCB );
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 ff8b 	bl	8008690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800777a:	e018      	b.n	80077ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007782:	2b01      	cmp	r3, #1
 8007784:	d103      	bne.n	800778e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 ff82 	bl	8008690 <vPortFree>
	}
 800778c:	e00f      	b.n	80077ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007794:	2b02      	cmp	r3, #2
 8007796:	d00a      	beq.n	80077ae <prvDeleteTCB+0x56>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	60fb      	str	r3, [r7, #12]
}
 80077aa:	bf00      	nop
 80077ac:	e7fe      	b.n	80077ac <prvDeleteTCB+0x54>
	}
 80077ae:	bf00      	nop
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077be:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <prvResetNextTaskUnblockTime+0x38>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <prvResetNextTaskUnblockTime+0x3c>)
 80077ca:	f04f 32ff 	mov.w	r2, #4294967295
 80077ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077d0:	e008      	b.n	80077e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d2:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <prvResetNextTaskUnblockTime+0x38>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	4a04      	ldr	r2, [pc, #16]	; (80077f4 <prvResetNextTaskUnblockTime+0x3c>)
 80077e2:	6013      	str	r3, [r2, #0]
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	200010f0 	.word	0x200010f0
 80077f4:	20001158 	.word	0x20001158

080077f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077fe:	4b0b      	ldr	r3, [pc, #44]	; (800782c <xTaskGetSchedulerState+0x34>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007806:	2301      	movs	r3, #1
 8007808:	607b      	str	r3, [r7, #4]
 800780a:	e008      	b.n	800781e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800780c:	4b08      	ldr	r3, [pc, #32]	; (8007830 <xTaskGetSchedulerState+0x38>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d102      	bne.n	800781a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007814:	2302      	movs	r3, #2
 8007816:	607b      	str	r3, [r7, #4]
 8007818:	e001      	b.n	800781e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800781a:	2300      	movs	r3, #0
 800781c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800781e:	687b      	ldr	r3, [r7, #4]
	}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	20001144 	.word	0x20001144
 8007830:	20001160 	.word	0x20001160

08007834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007840:	2300      	movs	r3, #0
 8007842:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d056      	beq.n	80078f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800784a:	4b2e      	ldr	r3, [pc, #184]	; (8007904 <xTaskPriorityDisinherit+0xd0>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	429a      	cmp	r2, r3
 8007852:	d00a      	beq.n	800786a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	60fb      	str	r3, [r7, #12]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	60bb      	str	r3, [r7, #8]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788c:	1e5a      	subs	r2, r3, #1
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789a:	429a      	cmp	r2, r3
 800789c:	d02c      	beq.n	80078f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d128      	bne.n	80078f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fc36 	bl	800611c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <xTaskPriorityDisinherit+0xd4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d903      	bls.n	80078d8 <xTaskPriorityDisinherit+0xa4>
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	4a0c      	ldr	r2, [pc, #48]	; (8007908 <xTaskPriorityDisinherit+0xd4>)
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4a09      	ldr	r2, [pc, #36]	; (800790c <xTaskPriorityDisinherit+0xd8>)
 80078e6:	441a      	add	r2, r3
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f7fe fbb7 	bl	8006062 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078f4:	2301      	movs	r3, #1
 80078f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078f8:	697b      	ldr	r3, [r7, #20]
	}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20000c64 	.word	0x20000c64
 8007908:	20001140 	.word	0x20001140
 800790c:	20000c68 	.word	0x20000c68

08007910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800791a:	4b21      	ldr	r3, [pc, #132]	; (80079a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007920:	4b20      	ldr	r3, [pc, #128]	; (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3304      	adds	r3, #4
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fbf8 	bl	800611c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d10a      	bne.n	800794a <prvAddCurrentTaskToDelayedList+0x3a>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d007      	beq.n	800794a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800793a:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3304      	adds	r3, #4
 8007940:	4619      	mov	r1, r3
 8007942:	4819      	ldr	r0, [pc, #100]	; (80079a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007944:	f7fe fb8d 	bl	8006062 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007948:	e026      	b.n	8007998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4413      	add	r3, r2
 8007950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007952:	4b14      	ldr	r3, [pc, #80]	; (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	429a      	cmp	r2, r3
 8007960:	d209      	bcs.n	8007976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007962:	4b12      	ldr	r3, [pc, #72]	; (80079ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3304      	adds	r3, #4
 800796c:	4619      	mov	r1, r3
 800796e:	4610      	mov	r0, r2
 8007970:	f7fe fb9b 	bl	80060aa <vListInsert>
}
 8007974:	e010      	b.n	8007998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007976:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3304      	adds	r3, #4
 8007980:	4619      	mov	r1, r3
 8007982:	4610      	mov	r0, r2
 8007984:	f7fe fb91 	bl	80060aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007988:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	429a      	cmp	r2, r3
 8007990:	d202      	bcs.n	8007998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007992:	4a08      	ldr	r2, [pc, #32]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6013      	str	r3, [r2, #0]
}
 8007998:	bf00      	nop
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	2000113c 	.word	0x2000113c
 80079a4:	20000c64 	.word	0x20000c64
 80079a8:	20001124 	.word	0x20001124
 80079ac:	200010f4 	.word	0x200010f4
 80079b0:	200010f0 	.word	0x200010f0
 80079b4:	20001158 	.word	0x20001158

080079b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	; 0x28
 80079bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80079c2:	f000 fb07 	bl	8007fd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80079c6:	4b1c      	ldr	r3, [pc, #112]	; (8007a38 <xTimerCreateTimerTask+0x80>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d021      	beq.n	8007a12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80079d6:	1d3a      	adds	r2, r7, #4
 80079d8:	f107 0108 	add.w	r1, r7, #8
 80079dc:	f107 030c 	add.w	r3, r7, #12
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe faf7 	bl	8005fd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	9202      	str	r2, [sp, #8]
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	2302      	movs	r3, #2
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	2300      	movs	r3, #0
 80079f6:	460a      	mov	r2, r1
 80079f8:	4910      	ldr	r1, [pc, #64]	; (8007a3c <xTimerCreateTimerTask+0x84>)
 80079fa:	4811      	ldr	r0, [pc, #68]	; (8007a40 <xTimerCreateTimerTask+0x88>)
 80079fc:	f7ff f8de 	bl	8006bbc <xTaskCreateStatic>
 8007a00:	4603      	mov	r3, r0
 8007a02:	4a10      	ldr	r2, [pc, #64]	; (8007a44 <xTimerCreateTimerTask+0x8c>)
 8007a04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <xTimerCreateTimerTask+0x8c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	613b      	str	r3, [r7, #16]
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a2e:	697b      	ldr	r3, [r7, #20]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20001194 	.word	0x20001194
 8007a3c:	0800b2d4 	.word	0x0800b2d4
 8007a40:	08007b7d 	.word	0x08007b7d
 8007a44:	20001198 	.word	0x20001198

08007a48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08a      	sub	sp, #40	; 0x28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	623b      	str	r3, [r7, #32]
}
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a76:	4b1a      	ldr	r3, [pc, #104]	; (8007ae0 <xTimerGenericCommand+0x98>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d02a      	beq.n	8007ad4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b05      	cmp	r3, #5
 8007a8e:	dc18      	bgt.n	8007ac2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a90:	f7ff feb2 	bl	80077f8 <xTaskGetSchedulerState>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d109      	bne.n	8007aae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a9a:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <xTimerGenericCommand+0x98>)
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	f107 0110 	add.w	r1, r7, #16
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa6:	f7fe fca1 	bl	80063ec <xQueueGenericSend>
 8007aaa:	6278      	str	r0, [r7, #36]	; 0x24
 8007aac:	e012      	b.n	8007ad4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007aae:	4b0c      	ldr	r3, [pc, #48]	; (8007ae0 <xTimerGenericCommand+0x98>)
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	f107 0110 	add.w	r1, r7, #16
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f7fe fc97 	bl	80063ec <xQueueGenericSend>
 8007abe:	6278      	str	r0, [r7, #36]	; 0x24
 8007ac0:	e008      	b.n	8007ad4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ac2:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <xTimerGenericCommand+0x98>)
 8007ac4:	6818      	ldr	r0, [r3, #0]
 8007ac6:	f107 0110 	add.w	r1, r7, #16
 8007aca:	2300      	movs	r3, #0
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	f7fe fd8b 	bl	80065e8 <xQueueGenericSendFromISR>
 8007ad2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3728      	adds	r7, #40	; 0x28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20001194 	.word	0x20001194

08007ae4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aee:	4b22      	ldr	r3, [pc, #136]	; (8007b78 <prvProcessExpiredTimer+0x94>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fe fb0d 	bl	800611c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d022      	beq.n	8007b56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	18d1      	adds	r1, r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	6978      	ldr	r0, [r7, #20]
 8007b1e:	f000 f8d1 	bl	8007cc4 <prvInsertTimerInActiveList>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01f      	beq.n	8007b68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b28:	2300      	movs	r3, #0
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	2100      	movs	r1, #0
 8007b32:	6978      	ldr	r0, [r7, #20]
 8007b34:	f7ff ff88 	bl	8007a48 <xTimerGenericCommand>
 8007b38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d113      	bne.n	8007b68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	60fb      	str	r3, [r7, #12]
}
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b5c:	f023 0301 	bic.w	r3, r3, #1
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	6978      	ldr	r0, [r7, #20]
 8007b6e:	4798      	blx	r3
}
 8007b70:	bf00      	nop
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	2000118c 	.word	0x2000118c

08007b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b84:	f107 0308 	add.w	r3, r7, #8
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 f857 	bl	8007c3c <prvGetNextExpireTime>
 8007b8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4619      	mov	r1, r3
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f803 	bl	8007ba0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b9a:	f000 f8d5 	bl	8007d48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b9e:	e7f1      	b.n	8007b84 <prvTimerTask+0x8>

08007ba0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007baa:	f7ff fa43 	bl	8007034 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bae:	f107 0308 	add.w	r3, r7, #8
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f866 	bl	8007c84 <prvSampleTimeNow>
 8007bb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d130      	bne.n	8007c22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10a      	bne.n	8007bdc <prvProcessTimerOrBlockTask+0x3c>
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d806      	bhi.n	8007bdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007bce:	f7ff fa3f 	bl	8007050 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff ff85 	bl	8007ae4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007bda:	e024      	b.n	8007c26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d008      	beq.n	8007bf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007be2:	4b13      	ldr	r3, [pc, #76]	; (8007c30 <prvProcessTimerOrBlockTask+0x90>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <prvProcessTimerOrBlockTask+0x50>
 8007bec:	2301      	movs	r3, #1
 8007bee:	e000      	b.n	8007bf2 <prvProcessTimerOrBlockTask+0x52>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007bf4:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <prvProcessTimerOrBlockTask+0x94>)
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	4619      	mov	r1, r3
 8007c02:	f7fe ffa7 	bl	8006b54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c06:	f7ff fa23 	bl	8007050 <xTaskResumeAll>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10a      	bne.n	8007c26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c10:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <prvProcessTimerOrBlockTask+0x98>)
 8007c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
}
 8007c20:	e001      	b.n	8007c26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c22:	f7ff fa15 	bl	8007050 <xTaskResumeAll>
}
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20001190 	.word	0x20001190
 8007c34:	20001194 	.word	0x20001194
 8007c38:	e000ed04 	.word	0xe000ed04

08007c3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c44:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <prvGetNextExpireTime+0x44>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <prvGetNextExpireTime+0x16>
 8007c4e:	2201      	movs	r2, #1
 8007c50:	e000      	b.n	8007c54 <prvGetNextExpireTime+0x18>
 8007c52:	2200      	movs	r2, #0
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d105      	bne.n	8007c6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c60:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <prvGetNextExpireTime+0x44>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60fb      	str	r3, [r7, #12]
 8007c6a:	e001      	b.n	8007c70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c70:	68fb      	ldr	r3, [r7, #12]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	2000118c 	.word	0x2000118c

08007c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c8c:	f7ff fa7e 	bl	800718c <xTaskGetTickCount>
 8007c90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c92:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <prvSampleTimeNow+0x3c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d205      	bcs.n	8007ca8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c9c:	f000 f936 	bl	8007f0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	e002      	b.n	8007cae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007cae:	4a04      	ldr	r2, [pc, #16]	; (8007cc0 <prvSampleTimeNow+0x3c>)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	2000119c 	.word	0x2000119c

08007cc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d812      	bhi.n	8007d10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d302      	bcc.n	8007cfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	e01b      	b.n	8007d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007cfe:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <prvInsertTimerInActiveList+0x7c>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3304      	adds	r3, #4
 8007d06:	4619      	mov	r1, r3
 8007d08:	4610      	mov	r0, r2
 8007d0a:	f7fe f9ce 	bl	80060aa <vListInsert>
 8007d0e:	e012      	b.n	8007d36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d206      	bcs.n	8007d26 <prvInsertTimerInActiveList+0x62>
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d302      	bcc.n	8007d26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d20:	2301      	movs	r3, #1
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	e007      	b.n	8007d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d26:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <prvInsertTimerInActiveList+0x80>)
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4610      	mov	r0, r2
 8007d32:	f7fe f9ba 	bl	80060aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d36:	697b      	ldr	r3, [r7, #20]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20001190 	.word	0x20001190
 8007d44:	2000118c 	.word	0x2000118c

08007d48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08e      	sub	sp, #56	; 0x38
 8007d4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d4e:	e0ca      	b.n	8007ee6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	da18      	bge.n	8007d88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d56:	1d3b      	adds	r3, r7, #4
 8007d58:	3304      	adds	r3, #4
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	61fb      	str	r3, [r7, #28]
}
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d7e:	6850      	ldr	r0, [r2, #4]
 8007d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d82:	6892      	ldr	r2, [r2, #8]
 8007d84:	4611      	mov	r1, r2
 8007d86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f2c0 80ab 	blt.w	8007ee6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d004      	beq.n	8007da6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe f9bb 	bl	800611c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007da6:	463b      	mov	r3, r7
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff ff6b 	bl	8007c84 <prvSampleTimeNow>
 8007dae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b09      	cmp	r3, #9
 8007db4:	f200 8096 	bhi.w	8007ee4 <prvProcessReceivedCommands+0x19c>
 8007db8:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <prvProcessReceivedCommands+0x78>)
 8007dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbe:	bf00      	nop
 8007dc0:	08007de9 	.word	0x08007de9
 8007dc4:	08007de9 	.word	0x08007de9
 8007dc8:	08007de9 	.word	0x08007de9
 8007dcc:	08007e5d 	.word	0x08007e5d
 8007dd0:	08007e71 	.word	0x08007e71
 8007dd4:	08007ebb 	.word	0x08007ebb
 8007dd8:	08007de9 	.word	0x08007de9
 8007ddc:	08007de9 	.word	0x08007de9
 8007de0:	08007e5d 	.word	0x08007e5d
 8007de4:	08007e71 	.word	0x08007e71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dee:	f043 0301 	orr.w	r3, r3, #1
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	18d1      	adds	r1, r2, r3
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e08:	f7ff ff5c 	bl	8007cc4 <prvInsertTimerInActiveList>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d069      	beq.n	8007ee6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d05e      	beq.n	8007ee6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	441a      	add	r2, r3
 8007e30:	2300      	movs	r3, #0
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	2300      	movs	r3, #0
 8007e36:	2100      	movs	r1, #0
 8007e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e3a:	f7ff fe05 	bl	8007a48 <xTimerGenericCommand>
 8007e3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d14f      	bne.n	8007ee6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	61bb      	str	r3, [r7, #24]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e62:	f023 0301 	bic.w	r3, r3, #1
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007e6e:	e03a      	b.n	8007ee6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	617b      	str	r3, [r7, #20]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	699a      	ldr	r2, [r3, #24]
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	18d1      	adds	r1, r2, r3
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eb4:	f7ff ff06 	bl	8007cc4 <prvInsertTimerInActiveList>
					break;
 8007eb8:	e015      	b.n	8007ee6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d103      	bne.n	8007ed0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eca:	f000 fbe1 	bl	8008690 <vPortFree>
 8007ece:	e00a      	b.n	8007ee6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ed6:	f023 0301 	bic.w	r3, r3, #1
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ee2:	e000      	b.n	8007ee6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007ee4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ee6:	4b08      	ldr	r3, [pc, #32]	; (8007f08 <prvProcessReceivedCommands+0x1c0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	1d39      	adds	r1, r7, #4
 8007eec:	2200      	movs	r2, #0
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe fc16 	bl	8006720 <xQueueReceive>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f47f af2a 	bne.w	8007d50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
 8007f00:	3730      	adds	r7, #48	; 0x30
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20001194 	.word	0x20001194

08007f0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f12:	e048      	b.n	8007fa6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f14:	4b2d      	ldr	r3, [pc, #180]	; (8007fcc <prvSwitchTimerLists+0xc0>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f1e:	4b2b      	ldr	r3, [pc, #172]	; (8007fcc <prvSwitchTimerLists+0xc0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe f8f5 	bl	800611c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d02e      	beq.n	8007fa6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4413      	add	r3, r2
 8007f50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d90e      	bls.n	8007f78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f66:	4b19      	ldr	r3, [pc, #100]	; (8007fcc <prvSwitchTimerLists+0xc0>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4610      	mov	r0, r2
 8007f72:	f7fe f89a 	bl	80060aa <vListInsert>
 8007f76:	e016      	b.n	8007fa6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	2100      	movs	r1, #0
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff fd60 	bl	8007a48 <xTimerGenericCommand>
 8007f88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	603b      	str	r3, [r7, #0]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fa6:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <prvSwitchTimerLists+0xc0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1b1      	bne.n	8007f14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <prvSwitchTimerLists+0xc0>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007fb6:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <prvSwitchTimerLists+0xc4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a04      	ldr	r2, [pc, #16]	; (8007fcc <prvSwitchTimerLists+0xc0>)
 8007fbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007fbe:	4a04      	ldr	r2, [pc, #16]	; (8007fd0 <prvSwitchTimerLists+0xc4>)
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	6013      	str	r3, [r2, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	2000118c 	.word	0x2000118c
 8007fd0:	20001190 	.word	0x20001190

08007fd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007fda:	f000 f96b 	bl	80082b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007fde:	4b15      	ldr	r3, [pc, #84]	; (8008034 <prvCheckForValidListAndQueue+0x60>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d120      	bne.n	8008028 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007fe6:	4814      	ldr	r0, [pc, #80]	; (8008038 <prvCheckForValidListAndQueue+0x64>)
 8007fe8:	f7fe f80e 	bl	8006008 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fec:	4813      	ldr	r0, [pc, #76]	; (800803c <prvCheckForValidListAndQueue+0x68>)
 8007fee:	f7fe f80b 	bl	8006008 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ff2:	4b13      	ldr	r3, [pc, #76]	; (8008040 <prvCheckForValidListAndQueue+0x6c>)
 8007ff4:	4a10      	ldr	r2, [pc, #64]	; (8008038 <prvCheckForValidListAndQueue+0x64>)
 8007ff6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ff8:	4b12      	ldr	r3, [pc, #72]	; (8008044 <prvCheckForValidListAndQueue+0x70>)
 8007ffa:	4a10      	ldr	r2, [pc, #64]	; (800803c <prvCheckForValidListAndQueue+0x68>)
 8007ffc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ffe:	2300      	movs	r3, #0
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	4b11      	ldr	r3, [pc, #68]	; (8008048 <prvCheckForValidListAndQueue+0x74>)
 8008004:	4a11      	ldr	r2, [pc, #68]	; (800804c <prvCheckForValidListAndQueue+0x78>)
 8008006:	2110      	movs	r1, #16
 8008008:	200a      	movs	r0, #10
 800800a:	f7fe f919 	bl	8006240 <xQueueGenericCreateStatic>
 800800e:	4603      	mov	r3, r0
 8008010:	4a08      	ldr	r2, [pc, #32]	; (8008034 <prvCheckForValidListAndQueue+0x60>)
 8008012:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008014:	4b07      	ldr	r3, [pc, #28]	; (8008034 <prvCheckForValidListAndQueue+0x60>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800801c:	4b05      	ldr	r3, [pc, #20]	; (8008034 <prvCheckForValidListAndQueue+0x60>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	490b      	ldr	r1, [pc, #44]	; (8008050 <prvCheckForValidListAndQueue+0x7c>)
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe fd6c 	bl	8006b00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008028:	f000 f974 	bl	8008314 <vPortExitCritical>
}
 800802c:	bf00      	nop
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20001194 	.word	0x20001194
 8008038:	20001164 	.word	0x20001164
 800803c:	20001178 	.word	0x20001178
 8008040:	2000118c 	.word	0x2000118c
 8008044:	20001190 	.word	0x20001190
 8008048:	20001240 	.word	0x20001240
 800804c:	200011a0 	.word	0x200011a0
 8008050:	0800b2dc 	.word	0x0800b2dc

08008054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3b04      	subs	r3, #4
 8008064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800806c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3b04      	subs	r3, #4
 8008072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f023 0201 	bic.w	r2, r3, #1
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3b04      	subs	r3, #4
 8008082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008084:	4a0c      	ldr	r2, [pc, #48]	; (80080b8 <pxPortInitialiseStack+0x64>)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3b14      	subs	r3, #20
 800808e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3b04      	subs	r3, #4
 800809a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f06f 0202 	mvn.w	r2, #2
 80080a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	3b20      	subs	r3, #32
 80080a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080aa:	68fb      	ldr	r3, [r7, #12]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	080080bd 	.word	0x080080bd

080080bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080c6:	4b12      	ldr	r3, [pc, #72]	; (8008110 <prvTaskExitError+0x54>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ce:	d00a      	beq.n	80080e6 <prvTaskExitError+0x2a>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	60fb      	str	r3, [r7, #12]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <prvTaskExitError+0x28>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	60bb      	str	r3, [r7, #8]
}
 80080f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080fa:	bf00      	nop
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0fc      	beq.n	80080fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008102:	bf00      	nop
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	2000002c 	.word	0x2000002c
	...

08008120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <pxCurrentTCBConst2>)
 8008122:	6819      	ldr	r1, [r3, #0]
 8008124:	6808      	ldr	r0, [r1, #0]
 8008126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812a:	f380 8809 	msr	PSP, r0
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8811 	msr	BASEPRI, r0
 800813a:	4770      	bx	lr
 800813c:	f3af 8000 	nop.w

08008140 <pxCurrentTCBConst2>:
 8008140:	20000c64 	.word	0x20000c64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008148:	4808      	ldr	r0, [pc, #32]	; (800816c <prvPortStartFirstTask+0x24>)
 800814a:	6800      	ldr	r0, [r0, #0]
 800814c:	6800      	ldr	r0, [r0, #0]
 800814e:	f380 8808 	msr	MSP, r0
 8008152:	f04f 0000 	mov.w	r0, #0
 8008156:	f380 8814 	msr	CONTROL, r0
 800815a:	b662      	cpsie	i
 800815c:	b661      	cpsie	f
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	df00      	svc	0
 8008168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800816a:	bf00      	nop
 800816c:	e000ed08 	.word	0xe000ed08

08008170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008176:	4b46      	ldr	r3, [pc, #280]	; (8008290 <xPortStartScheduler+0x120>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a46      	ldr	r2, [pc, #280]	; (8008294 <xPortStartScheduler+0x124>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d10a      	bne.n	8008196 <xPortStartScheduler+0x26>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	613b      	str	r3, [r7, #16]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008196:	4b3e      	ldr	r3, [pc, #248]	; (8008290 <xPortStartScheduler+0x120>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a3f      	ldr	r2, [pc, #252]	; (8008298 <xPortStartScheduler+0x128>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d10a      	bne.n	80081b6 <xPortStartScheduler+0x46>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60fb      	str	r3, [r7, #12]
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081b6:	4b39      	ldr	r3, [pc, #228]	; (800829c <xPortStartScheduler+0x12c>)
 80081b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	22ff      	movs	r2, #255	; 0xff
 80081c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081d0:	78fb      	ldrb	r3, [r7, #3]
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	4b31      	ldr	r3, [pc, #196]	; (80082a0 <xPortStartScheduler+0x130>)
 80081dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081de:	4b31      	ldr	r3, [pc, #196]	; (80082a4 <xPortStartScheduler+0x134>)
 80081e0:	2207      	movs	r2, #7
 80081e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081e4:	e009      	b.n	80081fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80081e6:	4b2f      	ldr	r3, [pc, #188]	; (80082a4 <xPortStartScheduler+0x134>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	4a2d      	ldr	r2, [pc, #180]	; (80082a4 <xPortStartScheduler+0x134>)
 80081ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081fa:	78fb      	ldrb	r3, [r7, #3]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008202:	2b80      	cmp	r3, #128	; 0x80
 8008204:	d0ef      	beq.n	80081e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008206:	4b27      	ldr	r3, [pc, #156]	; (80082a4 <xPortStartScheduler+0x134>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f1c3 0307 	rsb	r3, r3, #7
 800820e:	2b04      	cmp	r3, #4
 8008210:	d00a      	beq.n	8008228 <xPortStartScheduler+0xb8>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	60bb      	str	r3, [r7, #8]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008228:	4b1e      	ldr	r3, [pc, #120]	; (80082a4 <xPortStartScheduler+0x134>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	021b      	lsls	r3, r3, #8
 800822e:	4a1d      	ldr	r2, [pc, #116]	; (80082a4 <xPortStartScheduler+0x134>)
 8008230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008232:	4b1c      	ldr	r3, [pc, #112]	; (80082a4 <xPortStartScheduler+0x134>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800823a:	4a1a      	ldr	r2, [pc, #104]	; (80082a4 <xPortStartScheduler+0x134>)
 800823c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	b2da      	uxtb	r2, r3
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008246:	4b18      	ldr	r3, [pc, #96]	; (80082a8 <xPortStartScheduler+0x138>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a17      	ldr	r2, [pc, #92]	; (80082a8 <xPortStartScheduler+0x138>)
 800824c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008252:	4b15      	ldr	r3, [pc, #84]	; (80082a8 <xPortStartScheduler+0x138>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a14      	ldr	r2, [pc, #80]	; (80082a8 <xPortStartScheduler+0x138>)
 8008258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800825c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800825e:	f000 f8dd 	bl	800841c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008262:	4b12      	ldr	r3, [pc, #72]	; (80082ac <xPortStartScheduler+0x13c>)
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008268:	f000 f8fc 	bl	8008464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800826c:	4b10      	ldr	r3, [pc, #64]	; (80082b0 <xPortStartScheduler+0x140>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a0f      	ldr	r2, [pc, #60]	; (80082b0 <xPortStartScheduler+0x140>)
 8008272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008278:	f7ff ff66 	bl	8008148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800827c:	f7ff f850 	bl	8007320 <vTaskSwitchContext>
	prvTaskExitError();
 8008280:	f7ff ff1c 	bl	80080bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	e000ed00 	.word	0xe000ed00
 8008294:	410fc271 	.word	0x410fc271
 8008298:	410fc270 	.word	0x410fc270
 800829c:	e000e400 	.word	0xe000e400
 80082a0:	20001290 	.word	0x20001290
 80082a4:	20001294 	.word	0x20001294
 80082a8:	e000ed20 	.word	0xe000ed20
 80082ac:	2000002c 	.word	0x2000002c
 80082b0:	e000ef34 	.word	0xe000ef34

080082b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	607b      	str	r3, [r7, #4]
}
 80082cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082ce:	4b0f      	ldr	r3, [pc, #60]	; (800830c <vPortEnterCritical+0x58>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3301      	adds	r3, #1
 80082d4:	4a0d      	ldr	r2, [pc, #52]	; (800830c <vPortEnterCritical+0x58>)
 80082d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082d8:	4b0c      	ldr	r3, [pc, #48]	; (800830c <vPortEnterCritical+0x58>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d10f      	bne.n	8008300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082e0:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <vPortEnterCritical+0x5c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <vPortEnterCritical+0x4c>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	603b      	str	r3, [r7, #0]
}
 80082fc:	bf00      	nop
 80082fe:	e7fe      	b.n	80082fe <vPortEnterCritical+0x4a>
	}
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	2000002c 	.word	0x2000002c
 8008310:	e000ed04 	.word	0xe000ed04

08008314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800831a:	4b12      	ldr	r3, [pc, #72]	; (8008364 <vPortExitCritical+0x50>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10a      	bne.n	8008338 <vPortExitCritical+0x24>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	607b      	str	r3, [r7, #4]
}
 8008334:	bf00      	nop
 8008336:	e7fe      	b.n	8008336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008338:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <vPortExitCritical+0x50>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	3b01      	subs	r3, #1
 800833e:	4a09      	ldr	r2, [pc, #36]	; (8008364 <vPortExitCritical+0x50>)
 8008340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008342:	4b08      	ldr	r3, [pc, #32]	; (8008364 <vPortExitCritical+0x50>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d105      	bne.n	8008356 <vPortExitCritical+0x42>
 800834a:	2300      	movs	r3, #0
 800834c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	f383 8811 	msr	BASEPRI, r3
}
 8008354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	2000002c 	.word	0x2000002c
	...

08008370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008370:	f3ef 8009 	mrs	r0, PSP
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <pxCurrentTCBConst>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	f01e 0f10 	tst.w	lr, #16
 8008380:	bf08      	it	eq
 8008382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838a:	6010      	str	r0, [r2, #0]
 800838c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008394:	f380 8811 	msr	BASEPRI, r0
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f7fe ffbe 	bl	8007320 <vTaskSwitchContext>
 80083a4:	f04f 0000 	mov.w	r0, #0
 80083a8:	f380 8811 	msr	BASEPRI, r0
 80083ac:	bc09      	pop	{r0, r3}
 80083ae:	6819      	ldr	r1, [r3, #0]
 80083b0:	6808      	ldr	r0, [r1, #0]
 80083b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b6:	f01e 0f10 	tst.w	lr, #16
 80083ba:	bf08      	it	eq
 80083bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083c0:	f380 8809 	msr	PSP, r0
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	f3af 8000 	nop.w

080083d0 <pxCurrentTCBConst>:
 80083d0:	20000c64 	.word	0x20000c64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop

080083d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	607b      	str	r3, [r7, #4]
}
 80083f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083f2:	f7fe fedb 	bl	80071ac <xTaskIncrementTick>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <xPortSysTickHandler+0x40>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	2300      	movs	r3, #0
 8008406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f383 8811 	msr	BASEPRI, r3
}
 800840e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008420:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <vPortSetupTimerInterrupt+0x34>)
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008426:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <vPortSetupTimerInterrupt+0x38>)
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800842c:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <vPortSetupTimerInterrupt+0x3c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a0a      	ldr	r2, [pc, #40]	; (800845c <vPortSetupTimerInterrupt+0x40>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	099b      	lsrs	r3, r3, #6
 8008438:	4a09      	ldr	r2, [pc, #36]	; (8008460 <vPortSetupTimerInterrupt+0x44>)
 800843a:	3b01      	subs	r3, #1
 800843c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800843e:	4b04      	ldr	r3, [pc, #16]	; (8008450 <vPortSetupTimerInterrupt+0x34>)
 8008440:	2207      	movs	r2, #7
 8008442:	601a      	str	r2, [r3, #0]
}
 8008444:	bf00      	nop
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	e000e010 	.word	0xe000e010
 8008454:	e000e018 	.word	0xe000e018
 8008458:	20000020 	.word	0x20000020
 800845c:	10624dd3 	.word	0x10624dd3
 8008460:	e000e014 	.word	0xe000e014

08008464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008474 <vPortEnableVFP+0x10>
 8008468:	6801      	ldr	r1, [r0, #0]
 800846a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800846e:	6001      	str	r1, [r0, #0]
 8008470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008472:	bf00      	nop
 8008474:	e000ed88 	.word	0xe000ed88

08008478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800847e:	f3ef 8305 	mrs	r3, IPSR
 8008482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b0f      	cmp	r3, #15
 8008488:	d914      	bls.n	80084b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800848a:	4a17      	ldr	r2, [pc, #92]	; (80084e8 <vPortValidateInterruptPriority+0x70>)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4413      	add	r3, r2
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008494:	4b15      	ldr	r3, [pc, #84]	; (80084ec <vPortValidateInterruptPriority+0x74>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	7afa      	ldrb	r2, [r7, #11]
 800849a:	429a      	cmp	r2, r3
 800849c:	d20a      	bcs.n	80084b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	607b      	str	r3, [r7, #4]
}
 80084b0:	bf00      	nop
 80084b2:	e7fe      	b.n	80084b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084b4:	4b0e      	ldr	r3, [pc, #56]	; (80084f0 <vPortValidateInterruptPriority+0x78>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80084bc:	4b0d      	ldr	r3, [pc, #52]	; (80084f4 <vPortValidateInterruptPriority+0x7c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d90a      	bls.n	80084da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	603b      	str	r3, [r7, #0]
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <vPortValidateInterruptPriority+0x60>
	}
 80084da:	bf00      	nop
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	e000e3f0 	.word	0xe000e3f0
 80084ec:	20001290 	.word	0x20001290
 80084f0:	e000ed0c 	.word	0xe000ed0c
 80084f4:	20001294 	.word	0x20001294

080084f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08a      	sub	sp, #40	; 0x28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008500:	2300      	movs	r3, #0
 8008502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008504:	f7fe fd96 	bl	8007034 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008508:	4b5b      	ldr	r3, [pc, #364]	; (8008678 <pvPortMalloc+0x180>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008510:	f000 f920 	bl	8008754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008514:	4b59      	ldr	r3, [pc, #356]	; (800867c <pvPortMalloc+0x184>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4013      	ands	r3, r2
 800851c:	2b00      	cmp	r3, #0
 800851e:	f040 8093 	bne.w	8008648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01d      	beq.n	8008564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008528:	2208      	movs	r2, #8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	2b00      	cmp	r3, #0
 8008538:	d014      	beq.n	8008564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f023 0307 	bic.w	r3, r3, #7
 8008540:	3308      	adds	r3, #8
 8008542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00a      	beq.n	8008564 <pvPortMalloc+0x6c>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	617b      	str	r3, [r7, #20]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d06e      	beq.n	8008648 <pvPortMalloc+0x150>
 800856a:	4b45      	ldr	r3, [pc, #276]	; (8008680 <pvPortMalloc+0x188>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d869      	bhi.n	8008648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008574:	4b43      	ldr	r3, [pc, #268]	; (8008684 <pvPortMalloc+0x18c>)
 8008576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008578:	4b42      	ldr	r3, [pc, #264]	; (8008684 <pvPortMalloc+0x18c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800857e:	e004      	b.n	800858a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d903      	bls.n	800859c <pvPortMalloc+0xa4>
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f1      	bne.n	8008580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800859c:	4b36      	ldr	r3, [pc, #216]	; (8008678 <pvPortMalloc+0x180>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d050      	beq.n	8008648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2208      	movs	r2, #8
 80085ac:	4413      	add	r3, r2
 80085ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	2308      	movs	r3, #8
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d91f      	bls.n	8008608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4413      	add	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00a      	beq.n	80085f0 <pvPortMalloc+0xf8>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	613b      	str	r3, [r7, #16]
}
 80085ec:	bf00      	nop
 80085ee:	e7fe      	b.n	80085ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	1ad2      	subs	r2, r2, r3
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008602:	69b8      	ldr	r0, [r7, #24]
 8008604:	f000 f908 	bl	8008818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008608:	4b1d      	ldr	r3, [pc, #116]	; (8008680 <pvPortMalloc+0x188>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	4a1b      	ldr	r2, [pc, #108]	; (8008680 <pvPortMalloc+0x188>)
 8008614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008616:	4b1a      	ldr	r3, [pc, #104]	; (8008680 <pvPortMalloc+0x188>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <pvPortMalloc+0x190>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d203      	bcs.n	800862a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008622:	4b17      	ldr	r3, [pc, #92]	; (8008680 <pvPortMalloc+0x188>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a18      	ldr	r2, [pc, #96]	; (8008688 <pvPortMalloc+0x190>)
 8008628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	4b13      	ldr	r3, [pc, #76]	; (800867c <pvPortMalloc+0x184>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	431a      	orrs	r2, r3
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800863e:	4b13      	ldr	r3, [pc, #76]	; (800868c <pvPortMalloc+0x194>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3301      	adds	r3, #1
 8008644:	4a11      	ldr	r2, [pc, #68]	; (800868c <pvPortMalloc+0x194>)
 8008646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008648:	f7fe fd02 	bl	8007050 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f003 0307 	and.w	r3, r3, #7
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <pvPortMalloc+0x174>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	60fb      	str	r3, [r7, #12]
}
 8008668:	bf00      	nop
 800866a:	e7fe      	b.n	800866a <pvPortMalloc+0x172>
	return pvReturn;
 800866c:	69fb      	ldr	r3, [r7, #28]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3728      	adds	r7, #40	; 0x28
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20004ea0 	.word	0x20004ea0
 800867c:	20004eb4 	.word	0x20004eb4
 8008680:	20004ea4 	.word	0x20004ea4
 8008684:	20004e98 	.word	0x20004e98
 8008688:	20004ea8 	.word	0x20004ea8
 800868c:	20004eac 	.word	0x20004eac

08008690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d04d      	beq.n	800873e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086a2:	2308      	movs	r3, #8
 80086a4:	425b      	negs	r3, r3
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4413      	add	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	4b24      	ldr	r3, [pc, #144]	; (8008748 <vPortFree+0xb8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10a      	bne.n	80086d4 <vPortFree+0x44>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	60fb      	str	r3, [r7, #12]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <vPortFree+0x62>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60bb      	str	r3, [r7, #8]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	4b14      	ldr	r3, [pc, #80]	; (8008748 <vPortFree+0xb8>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4013      	ands	r3, r2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d01e      	beq.n	800873e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d11a      	bne.n	800873e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	4b0e      	ldr	r3, [pc, #56]	; (8008748 <vPortFree+0xb8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	43db      	mvns	r3, r3
 8008712:	401a      	ands	r2, r3
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008718:	f7fe fc8c 	bl	8007034 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <vPortFree+0xbc>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4413      	add	r3, r2
 8008726:	4a09      	ldr	r2, [pc, #36]	; (800874c <vPortFree+0xbc>)
 8008728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800872a:	6938      	ldr	r0, [r7, #16]
 800872c:	f000 f874 	bl	8008818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008730:	4b07      	ldr	r3, [pc, #28]	; (8008750 <vPortFree+0xc0>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	4a06      	ldr	r2, [pc, #24]	; (8008750 <vPortFree+0xc0>)
 8008738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800873a:	f7fe fc89 	bl	8007050 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800873e:	bf00      	nop
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20004eb4 	.word	0x20004eb4
 800874c:	20004ea4 	.word	0x20004ea4
 8008750:	20004eb0 	.word	0x20004eb0

08008754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800875a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800875e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008760:	4b27      	ldr	r3, [pc, #156]	; (8008800 <prvHeapInit+0xac>)
 8008762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f003 0307 	and.w	r3, r3, #7
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00c      	beq.n	8008788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3307      	adds	r3, #7
 8008772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0307 	bic.w	r3, r3, #7
 800877a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	4a1f      	ldr	r2, [pc, #124]	; (8008800 <prvHeapInit+0xac>)
 8008784:	4413      	add	r3, r2
 8008786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800878c:	4a1d      	ldr	r2, [pc, #116]	; (8008804 <prvHeapInit+0xb0>)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008792:	4b1c      	ldr	r3, [pc, #112]	; (8008804 <prvHeapInit+0xb0>)
 8008794:	2200      	movs	r2, #0
 8008796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	4413      	add	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087a0:	2208      	movs	r2, #8
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0307 	bic.w	r3, r3, #7
 80087ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4a15      	ldr	r2, [pc, #84]	; (8008808 <prvHeapInit+0xb4>)
 80087b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087b6:	4b14      	ldr	r3, [pc, #80]	; (8008808 <prvHeapInit+0xb4>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2200      	movs	r2, #0
 80087bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087be:	4b12      	ldr	r3, [pc, #72]	; (8008808 <prvHeapInit+0xb4>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	1ad2      	subs	r2, r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087d4:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <prvHeapInit+0xb4>)
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	4a0a      	ldr	r2, [pc, #40]	; (800880c <prvHeapInit+0xb8>)
 80087e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	4a09      	ldr	r2, [pc, #36]	; (8008810 <prvHeapInit+0xbc>)
 80087ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087ec:	4b09      	ldr	r3, [pc, #36]	; (8008814 <prvHeapInit+0xc0>)
 80087ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087f2:	601a      	str	r2, [r3, #0]
}
 80087f4:	bf00      	nop
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	20001298 	.word	0x20001298
 8008804:	20004e98 	.word	0x20004e98
 8008808:	20004ea0 	.word	0x20004ea0
 800880c:	20004ea8 	.word	0x20004ea8
 8008810:	20004ea4 	.word	0x20004ea4
 8008814:	20004eb4 	.word	0x20004eb4

08008818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008820:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <prvInsertBlockIntoFreeList+0xac>)
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	e002      	b.n	800882c <prvInsertBlockIntoFreeList+0x14>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	429a      	cmp	r2, r3
 8008834:	d8f7      	bhi.n	8008826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	4413      	add	r3, r2
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d108      	bne.n	800885a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	441a      	add	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	441a      	add	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d118      	bne.n	80088a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d00d      	beq.n	8008896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	441a      	add	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	e008      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008896:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	e003      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d002      	beq.n	80088b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20004e98 	.word	0x20004e98
 80088c8:	20004ea0 	.word	0x20004ea0

080088cc <__cvt>:
 80088cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088d0:	ec55 4b10 	vmov	r4, r5, d0
 80088d4:	2d00      	cmp	r5, #0
 80088d6:	460e      	mov	r6, r1
 80088d8:	4619      	mov	r1, r3
 80088da:	462b      	mov	r3, r5
 80088dc:	bfbb      	ittet	lt
 80088de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80088e2:	461d      	movlt	r5, r3
 80088e4:	2300      	movge	r3, #0
 80088e6:	232d      	movlt	r3, #45	; 0x2d
 80088e8:	700b      	strb	r3, [r1, #0]
 80088ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088f0:	4691      	mov	r9, r2
 80088f2:	f023 0820 	bic.w	r8, r3, #32
 80088f6:	bfbc      	itt	lt
 80088f8:	4622      	movlt	r2, r4
 80088fa:	4614      	movlt	r4, r2
 80088fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008900:	d005      	beq.n	800890e <__cvt+0x42>
 8008902:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008906:	d100      	bne.n	800890a <__cvt+0x3e>
 8008908:	3601      	adds	r6, #1
 800890a:	2102      	movs	r1, #2
 800890c:	e000      	b.n	8008910 <__cvt+0x44>
 800890e:	2103      	movs	r1, #3
 8008910:	ab03      	add	r3, sp, #12
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	ab02      	add	r3, sp, #8
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	ec45 4b10 	vmov	d0, r4, r5
 800891c:	4653      	mov	r3, sl
 800891e:	4632      	mov	r2, r6
 8008920:	f000 fe6a 	bl	80095f8 <_dtoa_r>
 8008924:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008928:	4607      	mov	r7, r0
 800892a:	d102      	bne.n	8008932 <__cvt+0x66>
 800892c:	f019 0f01 	tst.w	r9, #1
 8008930:	d022      	beq.n	8008978 <__cvt+0xac>
 8008932:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008936:	eb07 0906 	add.w	r9, r7, r6
 800893a:	d110      	bne.n	800895e <__cvt+0x92>
 800893c:	783b      	ldrb	r3, [r7, #0]
 800893e:	2b30      	cmp	r3, #48	; 0x30
 8008940:	d10a      	bne.n	8008958 <__cvt+0x8c>
 8008942:	2200      	movs	r2, #0
 8008944:	2300      	movs	r3, #0
 8008946:	4620      	mov	r0, r4
 8008948:	4629      	mov	r1, r5
 800894a:	f7f8 f8c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800894e:	b918      	cbnz	r0, 8008958 <__cvt+0x8c>
 8008950:	f1c6 0601 	rsb	r6, r6, #1
 8008954:	f8ca 6000 	str.w	r6, [sl]
 8008958:	f8da 3000 	ldr.w	r3, [sl]
 800895c:	4499      	add	r9, r3
 800895e:	2200      	movs	r2, #0
 8008960:	2300      	movs	r3, #0
 8008962:	4620      	mov	r0, r4
 8008964:	4629      	mov	r1, r5
 8008966:	f7f8 f8b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800896a:	b108      	cbz	r0, 8008970 <__cvt+0xa4>
 800896c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008970:	2230      	movs	r2, #48	; 0x30
 8008972:	9b03      	ldr	r3, [sp, #12]
 8008974:	454b      	cmp	r3, r9
 8008976:	d307      	bcc.n	8008988 <__cvt+0xbc>
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800897c:	1bdb      	subs	r3, r3, r7
 800897e:	4638      	mov	r0, r7
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	b004      	add	sp, #16
 8008984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008988:	1c59      	adds	r1, r3, #1
 800898a:	9103      	str	r1, [sp, #12]
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	e7f0      	b.n	8008972 <__cvt+0xa6>

08008990 <__exponent>:
 8008990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008992:	4603      	mov	r3, r0
 8008994:	2900      	cmp	r1, #0
 8008996:	bfb8      	it	lt
 8008998:	4249      	neglt	r1, r1
 800899a:	f803 2b02 	strb.w	r2, [r3], #2
 800899e:	bfb4      	ite	lt
 80089a0:	222d      	movlt	r2, #45	; 0x2d
 80089a2:	222b      	movge	r2, #43	; 0x2b
 80089a4:	2909      	cmp	r1, #9
 80089a6:	7042      	strb	r2, [r0, #1]
 80089a8:	dd2a      	ble.n	8008a00 <__exponent+0x70>
 80089aa:	f10d 0207 	add.w	r2, sp, #7
 80089ae:	4617      	mov	r7, r2
 80089b0:	260a      	movs	r6, #10
 80089b2:	4694      	mov	ip, r2
 80089b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80089b8:	fb06 1415 	mls	r4, r6, r5, r1
 80089bc:	3430      	adds	r4, #48	; 0x30
 80089be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80089c2:	460c      	mov	r4, r1
 80089c4:	2c63      	cmp	r4, #99	; 0x63
 80089c6:	f102 32ff 	add.w	r2, r2, #4294967295
 80089ca:	4629      	mov	r1, r5
 80089cc:	dcf1      	bgt.n	80089b2 <__exponent+0x22>
 80089ce:	3130      	adds	r1, #48	; 0x30
 80089d0:	f1ac 0402 	sub.w	r4, ip, #2
 80089d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80089d8:	1c41      	adds	r1, r0, #1
 80089da:	4622      	mov	r2, r4
 80089dc:	42ba      	cmp	r2, r7
 80089de:	d30a      	bcc.n	80089f6 <__exponent+0x66>
 80089e0:	f10d 0209 	add.w	r2, sp, #9
 80089e4:	eba2 020c 	sub.w	r2, r2, ip
 80089e8:	42bc      	cmp	r4, r7
 80089ea:	bf88      	it	hi
 80089ec:	2200      	movhi	r2, #0
 80089ee:	4413      	add	r3, r2
 80089f0:	1a18      	subs	r0, r3, r0
 80089f2:	b003      	add	sp, #12
 80089f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80089fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80089fe:	e7ed      	b.n	80089dc <__exponent+0x4c>
 8008a00:	2330      	movs	r3, #48	; 0x30
 8008a02:	3130      	adds	r1, #48	; 0x30
 8008a04:	7083      	strb	r3, [r0, #2]
 8008a06:	70c1      	strb	r1, [r0, #3]
 8008a08:	1d03      	adds	r3, r0, #4
 8008a0a:	e7f1      	b.n	80089f0 <__exponent+0x60>

08008a0c <_printf_float>:
 8008a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a10:	ed2d 8b02 	vpush	{d8}
 8008a14:	b08d      	sub	sp, #52	; 0x34
 8008a16:	460c      	mov	r4, r1
 8008a18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008a1c:	4616      	mov	r6, r2
 8008a1e:	461f      	mov	r7, r3
 8008a20:	4605      	mov	r5, r0
 8008a22:	f000 fcd9 	bl	80093d8 <_localeconv_r>
 8008a26:	f8d0 a000 	ldr.w	sl, [r0]
 8008a2a:	4650      	mov	r0, sl
 8008a2c:	f7f7 fc28 	bl	8000280 <strlen>
 8008a30:	2300      	movs	r3, #0
 8008a32:	930a      	str	r3, [sp, #40]	; 0x28
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	9305      	str	r3, [sp, #20]
 8008a38:	f8d8 3000 	ldr.w	r3, [r8]
 8008a3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008a40:	3307      	adds	r3, #7
 8008a42:	f023 0307 	bic.w	r3, r3, #7
 8008a46:	f103 0208 	add.w	r2, r3, #8
 8008a4a:	f8c8 2000 	str.w	r2, [r8]
 8008a4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a56:	9307      	str	r3, [sp, #28]
 8008a58:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a5c:	ee08 0a10 	vmov	s16, r0
 8008a60:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008a64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a68:	4b9e      	ldr	r3, [pc, #632]	; (8008ce4 <_printf_float+0x2d8>)
 8008a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a6e:	f7f8 f865 	bl	8000b3c <__aeabi_dcmpun>
 8008a72:	bb88      	cbnz	r0, 8008ad8 <_printf_float+0xcc>
 8008a74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a78:	4b9a      	ldr	r3, [pc, #616]	; (8008ce4 <_printf_float+0x2d8>)
 8008a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7e:	f7f8 f83f 	bl	8000b00 <__aeabi_dcmple>
 8008a82:	bb48      	cbnz	r0, 8008ad8 <_printf_float+0xcc>
 8008a84:	2200      	movs	r2, #0
 8008a86:	2300      	movs	r3, #0
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f7f8 f82e 	bl	8000aec <__aeabi_dcmplt>
 8008a90:	b110      	cbz	r0, 8008a98 <_printf_float+0x8c>
 8008a92:	232d      	movs	r3, #45	; 0x2d
 8008a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a98:	4a93      	ldr	r2, [pc, #588]	; (8008ce8 <_printf_float+0x2dc>)
 8008a9a:	4b94      	ldr	r3, [pc, #592]	; (8008cec <_printf_float+0x2e0>)
 8008a9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008aa0:	bf94      	ite	ls
 8008aa2:	4690      	movls	r8, r2
 8008aa4:	4698      	movhi	r8, r3
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	9b05      	ldr	r3, [sp, #20]
 8008aac:	f023 0304 	bic.w	r3, r3, #4
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	f04f 0900 	mov.w	r9, #0
 8008ab6:	9700      	str	r7, [sp, #0]
 8008ab8:	4633      	mov	r3, r6
 8008aba:	aa0b      	add	r2, sp, #44	; 0x2c
 8008abc:	4621      	mov	r1, r4
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f000 f9da 	bl	8008e78 <_printf_common>
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	f040 8090 	bne.w	8008bea <_printf_float+0x1de>
 8008aca:	f04f 30ff 	mov.w	r0, #4294967295
 8008ace:	b00d      	add	sp, #52	; 0x34
 8008ad0:	ecbd 8b02 	vpop	{d8}
 8008ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad8:	4642      	mov	r2, r8
 8008ada:	464b      	mov	r3, r9
 8008adc:	4640      	mov	r0, r8
 8008ade:	4649      	mov	r1, r9
 8008ae0:	f7f8 f82c 	bl	8000b3c <__aeabi_dcmpun>
 8008ae4:	b140      	cbz	r0, 8008af8 <_printf_float+0xec>
 8008ae6:	464b      	mov	r3, r9
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	bfbc      	itt	lt
 8008aec:	232d      	movlt	r3, #45	; 0x2d
 8008aee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008af2:	4a7f      	ldr	r2, [pc, #508]	; (8008cf0 <_printf_float+0x2e4>)
 8008af4:	4b7f      	ldr	r3, [pc, #508]	; (8008cf4 <_printf_float+0x2e8>)
 8008af6:	e7d1      	b.n	8008a9c <_printf_float+0x90>
 8008af8:	6863      	ldr	r3, [r4, #4]
 8008afa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008afe:	9206      	str	r2, [sp, #24]
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	d13f      	bne.n	8008b84 <_printf_float+0x178>
 8008b04:	2306      	movs	r3, #6
 8008b06:	6063      	str	r3, [r4, #4]
 8008b08:	9b05      	ldr	r3, [sp, #20]
 8008b0a:	6861      	ldr	r1, [r4, #4]
 8008b0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008b10:	2300      	movs	r3, #0
 8008b12:	9303      	str	r3, [sp, #12]
 8008b14:	ab0a      	add	r3, sp, #40	; 0x28
 8008b16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008b1a:	ab09      	add	r3, sp, #36	; 0x24
 8008b1c:	ec49 8b10 	vmov	d0, r8, r9
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	6022      	str	r2, [r4, #0]
 8008b24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f7ff fecf 	bl	80088cc <__cvt>
 8008b2e:	9b06      	ldr	r3, [sp, #24]
 8008b30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b32:	2b47      	cmp	r3, #71	; 0x47
 8008b34:	4680      	mov	r8, r0
 8008b36:	d108      	bne.n	8008b4a <_printf_float+0x13e>
 8008b38:	1cc8      	adds	r0, r1, #3
 8008b3a:	db02      	blt.n	8008b42 <_printf_float+0x136>
 8008b3c:	6863      	ldr	r3, [r4, #4]
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	dd41      	ble.n	8008bc6 <_printf_float+0x1ba>
 8008b42:	f1ab 0302 	sub.w	r3, fp, #2
 8008b46:	fa5f fb83 	uxtb.w	fp, r3
 8008b4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b4e:	d820      	bhi.n	8008b92 <_printf_float+0x186>
 8008b50:	3901      	subs	r1, #1
 8008b52:	465a      	mov	r2, fp
 8008b54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b58:	9109      	str	r1, [sp, #36]	; 0x24
 8008b5a:	f7ff ff19 	bl	8008990 <__exponent>
 8008b5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b60:	1813      	adds	r3, r2, r0
 8008b62:	2a01      	cmp	r2, #1
 8008b64:	4681      	mov	r9, r0
 8008b66:	6123      	str	r3, [r4, #16]
 8008b68:	dc02      	bgt.n	8008b70 <_printf_float+0x164>
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	07d2      	lsls	r2, r2, #31
 8008b6e:	d501      	bpl.n	8008b74 <_printf_float+0x168>
 8008b70:	3301      	adds	r3, #1
 8008b72:	6123      	str	r3, [r4, #16]
 8008b74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d09c      	beq.n	8008ab6 <_printf_float+0xaa>
 8008b7c:	232d      	movs	r3, #45	; 0x2d
 8008b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b82:	e798      	b.n	8008ab6 <_printf_float+0xaa>
 8008b84:	9a06      	ldr	r2, [sp, #24]
 8008b86:	2a47      	cmp	r2, #71	; 0x47
 8008b88:	d1be      	bne.n	8008b08 <_printf_float+0xfc>
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1bc      	bne.n	8008b08 <_printf_float+0xfc>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e7b9      	b.n	8008b06 <_printf_float+0xfa>
 8008b92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b96:	d118      	bne.n	8008bca <_printf_float+0x1be>
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	6863      	ldr	r3, [r4, #4]
 8008b9c:	dd0b      	ble.n	8008bb6 <_printf_float+0x1aa>
 8008b9e:	6121      	str	r1, [r4, #16]
 8008ba0:	b913      	cbnz	r3, 8008ba8 <_printf_float+0x19c>
 8008ba2:	6822      	ldr	r2, [r4, #0]
 8008ba4:	07d0      	lsls	r0, r2, #31
 8008ba6:	d502      	bpl.n	8008bae <_printf_float+0x1a2>
 8008ba8:	3301      	adds	r3, #1
 8008baa:	440b      	add	r3, r1
 8008bac:	6123      	str	r3, [r4, #16]
 8008bae:	65a1      	str	r1, [r4, #88]	; 0x58
 8008bb0:	f04f 0900 	mov.w	r9, #0
 8008bb4:	e7de      	b.n	8008b74 <_printf_float+0x168>
 8008bb6:	b913      	cbnz	r3, 8008bbe <_printf_float+0x1b2>
 8008bb8:	6822      	ldr	r2, [r4, #0]
 8008bba:	07d2      	lsls	r2, r2, #31
 8008bbc:	d501      	bpl.n	8008bc2 <_printf_float+0x1b6>
 8008bbe:	3302      	adds	r3, #2
 8008bc0:	e7f4      	b.n	8008bac <_printf_float+0x1a0>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e7f2      	b.n	8008bac <_printf_float+0x1a0>
 8008bc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bcc:	4299      	cmp	r1, r3
 8008bce:	db05      	blt.n	8008bdc <_printf_float+0x1d0>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	6121      	str	r1, [r4, #16]
 8008bd4:	07d8      	lsls	r0, r3, #31
 8008bd6:	d5ea      	bpl.n	8008bae <_printf_float+0x1a2>
 8008bd8:	1c4b      	adds	r3, r1, #1
 8008bda:	e7e7      	b.n	8008bac <_printf_float+0x1a0>
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	bfd4      	ite	le
 8008be0:	f1c1 0202 	rsble	r2, r1, #2
 8008be4:	2201      	movgt	r2, #1
 8008be6:	4413      	add	r3, r2
 8008be8:	e7e0      	b.n	8008bac <_printf_float+0x1a0>
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	055a      	lsls	r2, r3, #21
 8008bee:	d407      	bmi.n	8008c00 <_printf_float+0x1f4>
 8008bf0:	6923      	ldr	r3, [r4, #16]
 8008bf2:	4642      	mov	r2, r8
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	47b8      	blx	r7
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d12c      	bne.n	8008c58 <_printf_float+0x24c>
 8008bfe:	e764      	b.n	8008aca <_printf_float+0xbe>
 8008c00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c04:	f240 80e0 	bls.w	8008dc8 <_printf_float+0x3bc>
 8008c08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f7f7 ff62 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d034      	beq.n	8008c82 <_printf_float+0x276>
 8008c18:	4a37      	ldr	r2, [pc, #220]	; (8008cf8 <_printf_float+0x2ec>)
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	4628      	mov	r0, r5
 8008c20:	47b8      	blx	r7
 8008c22:	3001      	adds	r0, #1
 8008c24:	f43f af51 	beq.w	8008aca <_printf_float+0xbe>
 8008c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	db02      	blt.n	8008c36 <_printf_float+0x22a>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	07d8      	lsls	r0, r3, #31
 8008c34:	d510      	bpl.n	8008c58 <_printf_float+0x24c>
 8008c36:	ee18 3a10 	vmov	r3, s16
 8008c3a:	4652      	mov	r2, sl
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4628      	mov	r0, r5
 8008c40:	47b8      	blx	r7
 8008c42:	3001      	adds	r0, #1
 8008c44:	f43f af41 	beq.w	8008aca <_printf_float+0xbe>
 8008c48:	f04f 0800 	mov.w	r8, #0
 8008c4c:	f104 091a 	add.w	r9, r4, #26
 8008c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c52:	3b01      	subs	r3, #1
 8008c54:	4543      	cmp	r3, r8
 8008c56:	dc09      	bgt.n	8008c6c <_printf_float+0x260>
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	079b      	lsls	r3, r3, #30
 8008c5c:	f100 8107 	bmi.w	8008e6e <_printf_float+0x462>
 8008c60:	68e0      	ldr	r0, [r4, #12]
 8008c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c64:	4298      	cmp	r0, r3
 8008c66:	bfb8      	it	lt
 8008c68:	4618      	movlt	r0, r3
 8008c6a:	e730      	b.n	8008ace <_printf_float+0xc2>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	464a      	mov	r2, r9
 8008c70:	4631      	mov	r1, r6
 8008c72:	4628      	mov	r0, r5
 8008c74:	47b8      	blx	r7
 8008c76:	3001      	adds	r0, #1
 8008c78:	f43f af27 	beq.w	8008aca <_printf_float+0xbe>
 8008c7c:	f108 0801 	add.w	r8, r8, #1
 8008c80:	e7e6      	b.n	8008c50 <_printf_float+0x244>
 8008c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dc39      	bgt.n	8008cfc <_printf_float+0x2f0>
 8008c88:	4a1b      	ldr	r2, [pc, #108]	; (8008cf8 <_printf_float+0x2ec>)
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4628      	mov	r0, r5
 8008c90:	47b8      	blx	r7
 8008c92:	3001      	adds	r0, #1
 8008c94:	f43f af19 	beq.w	8008aca <_printf_float+0xbe>
 8008c98:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	d102      	bne.n	8008ca6 <_printf_float+0x29a>
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	07d9      	lsls	r1, r3, #31
 8008ca4:	d5d8      	bpl.n	8008c58 <_printf_float+0x24c>
 8008ca6:	ee18 3a10 	vmov	r3, s16
 8008caa:	4652      	mov	r2, sl
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f43f af09 	beq.w	8008aca <_printf_float+0xbe>
 8008cb8:	f04f 0900 	mov.w	r9, #0
 8008cbc:	f104 0a1a 	add.w	sl, r4, #26
 8008cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc2:	425b      	negs	r3, r3
 8008cc4:	454b      	cmp	r3, r9
 8008cc6:	dc01      	bgt.n	8008ccc <_printf_float+0x2c0>
 8008cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cca:	e792      	b.n	8008bf2 <_printf_float+0x1e6>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	4652      	mov	r2, sl
 8008cd0:	4631      	mov	r1, r6
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	47b8      	blx	r7
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	f43f aef7 	beq.w	8008aca <_printf_float+0xbe>
 8008cdc:	f109 0901 	add.w	r9, r9, #1
 8008ce0:	e7ee      	b.n	8008cc0 <_printf_float+0x2b4>
 8008ce2:	bf00      	nop
 8008ce4:	7fefffff 	.word	0x7fefffff
 8008ce8:	0800b35c 	.word	0x0800b35c
 8008cec:	0800b360 	.word	0x0800b360
 8008cf0:	0800b364 	.word	0x0800b364
 8008cf4:	0800b368 	.word	0x0800b368
 8008cf8:	0800b36c 	.word	0x0800b36c
 8008cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d00:	429a      	cmp	r2, r3
 8008d02:	bfa8      	it	ge
 8008d04:	461a      	movge	r2, r3
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	4691      	mov	r9, r2
 8008d0a:	dc37      	bgt.n	8008d7c <_printf_float+0x370>
 8008d0c:	f04f 0b00 	mov.w	fp, #0
 8008d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d14:	f104 021a 	add.w	r2, r4, #26
 8008d18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d1a:	9305      	str	r3, [sp, #20]
 8008d1c:	eba3 0309 	sub.w	r3, r3, r9
 8008d20:	455b      	cmp	r3, fp
 8008d22:	dc33      	bgt.n	8008d8c <_printf_float+0x380>
 8008d24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	db3b      	blt.n	8008da4 <_printf_float+0x398>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	07da      	lsls	r2, r3, #31
 8008d30:	d438      	bmi.n	8008da4 <_printf_float+0x398>
 8008d32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008d36:	eba2 0903 	sub.w	r9, r2, r3
 8008d3a:	9b05      	ldr	r3, [sp, #20]
 8008d3c:	1ad2      	subs	r2, r2, r3
 8008d3e:	4591      	cmp	r9, r2
 8008d40:	bfa8      	it	ge
 8008d42:	4691      	movge	r9, r2
 8008d44:	f1b9 0f00 	cmp.w	r9, #0
 8008d48:	dc35      	bgt.n	8008db6 <_printf_float+0x3aa>
 8008d4a:	f04f 0800 	mov.w	r8, #0
 8008d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d52:	f104 0a1a 	add.w	sl, r4, #26
 8008d56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d5a:	1a9b      	subs	r3, r3, r2
 8008d5c:	eba3 0309 	sub.w	r3, r3, r9
 8008d60:	4543      	cmp	r3, r8
 8008d62:	f77f af79 	ble.w	8008c58 <_printf_float+0x24c>
 8008d66:	2301      	movs	r3, #1
 8008d68:	4652      	mov	r2, sl
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	47b8      	blx	r7
 8008d70:	3001      	adds	r0, #1
 8008d72:	f43f aeaa 	beq.w	8008aca <_printf_float+0xbe>
 8008d76:	f108 0801 	add.w	r8, r8, #1
 8008d7a:	e7ec      	b.n	8008d56 <_printf_float+0x34a>
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	4631      	mov	r1, r6
 8008d80:	4642      	mov	r2, r8
 8008d82:	4628      	mov	r0, r5
 8008d84:	47b8      	blx	r7
 8008d86:	3001      	adds	r0, #1
 8008d88:	d1c0      	bne.n	8008d0c <_printf_float+0x300>
 8008d8a:	e69e      	b.n	8008aca <_printf_float+0xbe>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	4631      	mov	r1, r6
 8008d90:	4628      	mov	r0, r5
 8008d92:	9205      	str	r2, [sp, #20]
 8008d94:	47b8      	blx	r7
 8008d96:	3001      	adds	r0, #1
 8008d98:	f43f ae97 	beq.w	8008aca <_printf_float+0xbe>
 8008d9c:	9a05      	ldr	r2, [sp, #20]
 8008d9e:	f10b 0b01 	add.w	fp, fp, #1
 8008da2:	e7b9      	b.n	8008d18 <_printf_float+0x30c>
 8008da4:	ee18 3a10 	vmov	r3, s16
 8008da8:	4652      	mov	r2, sl
 8008daa:	4631      	mov	r1, r6
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b8      	blx	r7
 8008db0:	3001      	adds	r0, #1
 8008db2:	d1be      	bne.n	8008d32 <_printf_float+0x326>
 8008db4:	e689      	b.n	8008aca <_printf_float+0xbe>
 8008db6:	9a05      	ldr	r2, [sp, #20]
 8008db8:	464b      	mov	r3, r9
 8008dba:	4442      	add	r2, r8
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	47b8      	blx	r7
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	d1c1      	bne.n	8008d4a <_printf_float+0x33e>
 8008dc6:	e680      	b.n	8008aca <_printf_float+0xbe>
 8008dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dca:	2a01      	cmp	r2, #1
 8008dcc:	dc01      	bgt.n	8008dd2 <_printf_float+0x3c6>
 8008dce:	07db      	lsls	r3, r3, #31
 8008dd0:	d53a      	bpl.n	8008e48 <_printf_float+0x43c>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	4628      	mov	r0, r5
 8008dda:	47b8      	blx	r7
 8008ddc:	3001      	adds	r0, #1
 8008dde:	f43f ae74 	beq.w	8008aca <_printf_float+0xbe>
 8008de2:	ee18 3a10 	vmov	r3, s16
 8008de6:	4652      	mov	r2, sl
 8008de8:	4631      	mov	r1, r6
 8008dea:	4628      	mov	r0, r5
 8008dec:	47b8      	blx	r7
 8008dee:	3001      	adds	r0, #1
 8008df0:	f43f ae6b 	beq.w	8008aca <_printf_float+0xbe>
 8008df4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008e00:	f7f7 fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e04:	b9d8      	cbnz	r0, 8008e3e <_printf_float+0x432>
 8008e06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008e0a:	f108 0201 	add.w	r2, r8, #1
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4628      	mov	r0, r5
 8008e12:	47b8      	blx	r7
 8008e14:	3001      	adds	r0, #1
 8008e16:	d10e      	bne.n	8008e36 <_printf_float+0x42a>
 8008e18:	e657      	b.n	8008aca <_printf_float+0xbe>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	4631      	mov	r1, r6
 8008e20:	4628      	mov	r0, r5
 8008e22:	47b8      	blx	r7
 8008e24:	3001      	adds	r0, #1
 8008e26:	f43f ae50 	beq.w	8008aca <_printf_float+0xbe>
 8008e2a:	f108 0801 	add.w	r8, r8, #1
 8008e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e30:	3b01      	subs	r3, #1
 8008e32:	4543      	cmp	r3, r8
 8008e34:	dcf1      	bgt.n	8008e1a <_printf_float+0x40e>
 8008e36:	464b      	mov	r3, r9
 8008e38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e3c:	e6da      	b.n	8008bf4 <_printf_float+0x1e8>
 8008e3e:	f04f 0800 	mov.w	r8, #0
 8008e42:	f104 0a1a 	add.w	sl, r4, #26
 8008e46:	e7f2      	b.n	8008e2e <_printf_float+0x422>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	4642      	mov	r2, r8
 8008e4c:	e7df      	b.n	8008e0e <_printf_float+0x402>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	464a      	mov	r2, r9
 8008e52:	4631      	mov	r1, r6
 8008e54:	4628      	mov	r0, r5
 8008e56:	47b8      	blx	r7
 8008e58:	3001      	adds	r0, #1
 8008e5a:	f43f ae36 	beq.w	8008aca <_printf_float+0xbe>
 8008e5e:	f108 0801 	add.w	r8, r8, #1
 8008e62:	68e3      	ldr	r3, [r4, #12]
 8008e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e66:	1a5b      	subs	r3, r3, r1
 8008e68:	4543      	cmp	r3, r8
 8008e6a:	dcf0      	bgt.n	8008e4e <_printf_float+0x442>
 8008e6c:	e6f8      	b.n	8008c60 <_printf_float+0x254>
 8008e6e:	f04f 0800 	mov.w	r8, #0
 8008e72:	f104 0919 	add.w	r9, r4, #25
 8008e76:	e7f4      	b.n	8008e62 <_printf_float+0x456>

08008e78 <_printf_common>:
 8008e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7c:	4616      	mov	r6, r2
 8008e7e:	4699      	mov	r9, r3
 8008e80:	688a      	ldr	r2, [r1, #8]
 8008e82:	690b      	ldr	r3, [r1, #16]
 8008e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	bfb8      	it	lt
 8008e8c:	4613      	movlt	r3, r2
 8008e8e:	6033      	str	r3, [r6, #0]
 8008e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e94:	4607      	mov	r7, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	b10a      	cbz	r2, 8008e9e <_printf_common+0x26>
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	6033      	str	r3, [r6, #0]
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	0699      	lsls	r1, r3, #26
 8008ea2:	bf42      	ittt	mi
 8008ea4:	6833      	ldrmi	r3, [r6, #0]
 8008ea6:	3302      	addmi	r3, #2
 8008ea8:	6033      	strmi	r3, [r6, #0]
 8008eaa:	6825      	ldr	r5, [r4, #0]
 8008eac:	f015 0506 	ands.w	r5, r5, #6
 8008eb0:	d106      	bne.n	8008ec0 <_printf_common+0x48>
 8008eb2:	f104 0a19 	add.w	sl, r4, #25
 8008eb6:	68e3      	ldr	r3, [r4, #12]
 8008eb8:	6832      	ldr	r2, [r6, #0]
 8008eba:	1a9b      	subs	r3, r3, r2
 8008ebc:	42ab      	cmp	r3, r5
 8008ebe:	dc26      	bgt.n	8008f0e <_printf_common+0x96>
 8008ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ec4:	1e13      	subs	r3, r2, #0
 8008ec6:	6822      	ldr	r2, [r4, #0]
 8008ec8:	bf18      	it	ne
 8008eca:	2301      	movne	r3, #1
 8008ecc:	0692      	lsls	r2, r2, #26
 8008ece:	d42b      	bmi.n	8008f28 <_printf_common+0xb0>
 8008ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	47c0      	blx	r8
 8008eda:	3001      	adds	r0, #1
 8008edc:	d01e      	beq.n	8008f1c <_printf_common+0xa4>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	6922      	ldr	r2, [r4, #16]
 8008ee2:	f003 0306 	and.w	r3, r3, #6
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	bf02      	ittt	eq
 8008eea:	68e5      	ldreq	r5, [r4, #12]
 8008eec:	6833      	ldreq	r3, [r6, #0]
 8008eee:	1aed      	subeq	r5, r5, r3
 8008ef0:	68a3      	ldr	r3, [r4, #8]
 8008ef2:	bf0c      	ite	eq
 8008ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ef8:	2500      	movne	r5, #0
 8008efa:	4293      	cmp	r3, r2
 8008efc:	bfc4      	itt	gt
 8008efe:	1a9b      	subgt	r3, r3, r2
 8008f00:	18ed      	addgt	r5, r5, r3
 8008f02:	2600      	movs	r6, #0
 8008f04:	341a      	adds	r4, #26
 8008f06:	42b5      	cmp	r5, r6
 8008f08:	d11a      	bne.n	8008f40 <_printf_common+0xc8>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	e008      	b.n	8008f20 <_printf_common+0xa8>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4652      	mov	r2, sl
 8008f12:	4649      	mov	r1, r9
 8008f14:	4638      	mov	r0, r7
 8008f16:	47c0      	blx	r8
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d103      	bne.n	8008f24 <_printf_common+0xac>
 8008f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f24:	3501      	adds	r5, #1
 8008f26:	e7c6      	b.n	8008eb6 <_printf_common+0x3e>
 8008f28:	18e1      	adds	r1, r4, r3
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	2030      	movs	r0, #48	; 0x30
 8008f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f32:	4422      	add	r2, r4
 8008f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f3c:	3302      	adds	r3, #2
 8008f3e:	e7c7      	b.n	8008ed0 <_printf_common+0x58>
 8008f40:	2301      	movs	r3, #1
 8008f42:	4622      	mov	r2, r4
 8008f44:	4649      	mov	r1, r9
 8008f46:	4638      	mov	r0, r7
 8008f48:	47c0      	blx	r8
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	d0e6      	beq.n	8008f1c <_printf_common+0xa4>
 8008f4e:	3601      	adds	r6, #1
 8008f50:	e7d9      	b.n	8008f06 <_printf_common+0x8e>
	...

08008f54 <_printf_i>:
 8008f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f58:	7e0f      	ldrb	r7, [r1, #24]
 8008f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f5c:	2f78      	cmp	r7, #120	; 0x78
 8008f5e:	4691      	mov	r9, r2
 8008f60:	4680      	mov	r8, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	469a      	mov	sl, r3
 8008f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f6a:	d807      	bhi.n	8008f7c <_printf_i+0x28>
 8008f6c:	2f62      	cmp	r7, #98	; 0x62
 8008f6e:	d80a      	bhi.n	8008f86 <_printf_i+0x32>
 8008f70:	2f00      	cmp	r7, #0
 8008f72:	f000 80d4 	beq.w	800911e <_printf_i+0x1ca>
 8008f76:	2f58      	cmp	r7, #88	; 0x58
 8008f78:	f000 80c0 	beq.w	80090fc <_printf_i+0x1a8>
 8008f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f84:	e03a      	b.n	8008ffc <_printf_i+0xa8>
 8008f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f8a:	2b15      	cmp	r3, #21
 8008f8c:	d8f6      	bhi.n	8008f7c <_printf_i+0x28>
 8008f8e:	a101      	add	r1, pc, #4	; (adr r1, 8008f94 <_printf_i+0x40>)
 8008f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f94:	08008fed 	.word	0x08008fed
 8008f98:	08009001 	.word	0x08009001
 8008f9c:	08008f7d 	.word	0x08008f7d
 8008fa0:	08008f7d 	.word	0x08008f7d
 8008fa4:	08008f7d 	.word	0x08008f7d
 8008fa8:	08008f7d 	.word	0x08008f7d
 8008fac:	08009001 	.word	0x08009001
 8008fb0:	08008f7d 	.word	0x08008f7d
 8008fb4:	08008f7d 	.word	0x08008f7d
 8008fb8:	08008f7d 	.word	0x08008f7d
 8008fbc:	08008f7d 	.word	0x08008f7d
 8008fc0:	08009105 	.word	0x08009105
 8008fc4:	0800902d 	.word	0x0800902d
 8008fc8:	080090bf 	.word	0x080090bf
 8008fcc:	08008f7d 	.word	0x08008f7d
 8008fd0:	08008f7d 	.word	0x08008f7d
 8008fd4:	08009127 	.word	0x08009127
 8008fd8:	08008f7d 	.word	0x08008f7d
 8008fdc:	0800902d 	.word	0x0800902d
 8008fe0:	08008f7d 	.word	0x08008f7d
 8008fe4:	08008f7d 	.word	0x08008f7d
 8008fe8:	080090c7 	.word	0x080090c7
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	1d1a      	adds	r2, r3, #4
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	602a      	str	r2, [r5, #0]
 8008ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e09f      	b.n	8009140 <_printf_i+0x1ec>
 8009000:	6820      	ldr	r0, [r4, #0]
 8009002:	682b      	ldr	r3, [r5, #0]
 8009004:	0607      	lsls	r7, r0, #24
 8009006:	f103 0104 	add.w	r1, r3, #4
 800900a:	6029      	str	r1, [r5, #0]
 800900c:	d501      	bpl.n	8009012 <_printf_i+0xbe>
 800900e:	681e      	ldr	r6, [r3, #0]
 8009010:	e003      	b.n	800901a <_printf_i+0xc6>
 8009012:	0646      	lsls	r6, r0, #25
 8009014:	d5fb      	bpl.n	800900e <_printf_i+0xba>
 8009016:	f9b3 6000 	ldrsh.w	r6, [r3]
 800901a:	2e00      	cmp	r6, #0
 800901c:	da03      	bge.n	8009026 <_printf_i+0xd2>
 800901e:	232d      	movs	r3, #45	; 0x2d
 8009020:	4276      	negs	r6, r6
 8009022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009026:	485a      	ldr	r0, [pc, #360]	; (8009190 <_printf_i+0x23c>)
 8009028:	230a      	movs	r3, #10
 800902a:	e012      	b.n	8009052 <_printf_i+0xfe>
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	6820      	ldr	r0, [r4, #0]
 8009030:	1d19      	adds	r1, r3, #4
 8009032:	6029      	str	r1, [r5, #0]
 8009034:	0605      	lsls	r5, r0, #24
 8009036:	d501      	bpl.n	800903c <_printf_i+0xe8>
 8009038:	681e      	ldr	r6, [r3, #0]
 800903a:	e002      	b.n	8009042 <_printf_i+0xee>
 800903c:	0641      	lsls	r1, r0, #25
 800903e:	d5fb      	bpl.n	8009038 <_printf_i+0xe4>
 8009040:	881e      	ldrh	r6, [r3, #0]
 8009042:	4853      	ldr	r0, [pc, #332]	; (8009190 <_printf_i+0x23c>)
 8009044:	2f6f      	cmp	r7, #111	; 0x6f
 8009046:	bf0c      	ite	eq
 8009048:	2308      	moveq	r3, #8
 800904a:	230a      	movne	r3, #10
 800904c:	2100      	movs	r1, #0
 800904e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009052:	6865      	ldr	r5, [r4, #4]
 8009054:	60a5      	str	r5, [r4, #8]
 8009056:	2d00      	cmp	r5, #0
 8009058:	bfa2      	ittt	ge
 800905a:	6821      	ldrge	r1, [r4, #0]
 800905c:	f021 0104 	bicge.w	r1, r1, #4
 8009060:	6021      	strge	r1, [r4, #0]
 8009062:	b90e      	cbnz	r6, 8009068 <_printf_i+0x114>
 8009064:	2d00      	cmp	r5, #0
 8009066:	d04b      	beq.n	8009100 <_printf_i+0x1ac>
 8009068:	4615      	mov	r5, r2
 800906a:	fbb6 f1f3 	udiv	r1, r6, r3
 800906e:	fb03 6711 	mls	r7, r3, r1, r6
 8009072:	5dc7      	ldrb	r7, [r0, r7]
 8009074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009078:	4637      	mov	r7, r6
 800907a:	42bb      	cmp	r3, r7
 800907c:	460e      	mov	r6, r1
 800907e:	d9f4      	bls.n	800906a <_printf_i+0x116>
 8009080:	2b08      	cmp	r3, #8
 8009082:	d10b      	bne.n	800909c <_printf_i+0x148>
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	07de      	lsls	r6, r3, #31
 8009088:	d508      	bpl.n	800909c <_printf_i+0x148>
 800908a:	6923      	ldr	r3, [r4, #16]
 800908c:	6861      	ldr	r1, [r4, #4]
 800908e:	4299      	cmp	r1, r3
 8009090:	bfde      	ittt	le
 8009092:	2330      	movle	r3, #48	; 0x30
 8009094:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009098:	f105 35ff 	addle.w	r5, r5, #4294967295
 800909c:	1b52      	subs	r2, r2, r5
 800909e:	6122      	str	r2, [r4, #16]
 80090a0:	f8cd a000 	str.w	sl, [sp]
 80090a4:	464b      	mov	r3, r9
 80090a6:	aa03      	add	r2, sp, #12
 80090a8:	4621      	mov	r1, r4
 80090aa:	4640      	mov	r0, r8
 80090ac:	f7ff fee4 	bl	8008e78 <_printf_common>
 80090b0:	3001      	adds	r0, #1
 80090b2:	d14a      	bne.n	800914a <_printf_i+0x1f6>
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295
 80090b8:	b004      	add	sp, #16
 80090ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	f043 0320 	orr.w	r3, r3, #32
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	4833      	ldr	r0, [pc, #204]	; (8009194 <_printf_i+0x240>)
 80090c8:	2778      	movs	r7, #120	; 0x78
 80090ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	6829      	ldr	r1, [r5, #0]
 80090d2:	061f      	lsls	r7, r3, #24
 80090d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80090d8:	d402      	bmi.n	80090e0 <_printf_i+0x18c>
 80090da:	065f      	lsls	r7, r3, #25
 80090dc:	bf48      	it	mi
 80090de:	b2b6      	uxthmi	r6, r6
 80090e0:	07df      	lsls	r7, r3, #31
 80090e2:	bf48      	it	mi
 80090e4:	f043 0320 	orrmi.w	r3, r3, #32
 80090e8:	6029      	str	r1, [r5, #0]
 80090ea:	bf48      	it	mi
 80090ec:	6023      	strmi	r3, [r4, #0]
 80090ee:	b91e      	cbnz	r6, 80090f8 <_printf_i+0x1a4>
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	f023 0320 	bic.w	r3, r3, #32
 80090f6:	6023      	str	r3, [r4, #0]
 80090f8:	2310      	movs	r3, #16
 80090fa:	e7a7      	b.n	800904c <_printf_i+0xf8>
 80090fc:	4824      	ldr	r0, [pc, #144]	; (8009190 <_printf_i+0x23c>)
 80090fe:	e7e4      	b.n	80090ca <_printf_i+0x176>
 8009100:	4615      	mov	r5, r2
 8009102:	e7bd      	b.n	8009080 <_printf_i+0x12c>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	6826      	ldr	r6, [r4, #0]
 8009108:	6961      	ldr	r1, [r4, #20]
 800910a:	1d18      	adds	r0, r3, #4
 800910c:	6028      	str	r0, [r5, #0]
 800910e:	0635      	lsls	r5, r6, #24
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	d501      	bpl.n	8009118 <_printf_i+0x1c4>
 8009114:	6019      	str	r1, [r3, #0]
 8009116:	e002      	b.n	800911e <_printf_i+0x1ca>
 8009118:	0670      	lsls	r0, r6, #25
 800911a:	d5fb      	bpl.n	8009114 <_printf_i+0x1c0>
 800911c:	8019      	strh	r1, [r3, #0]
 800911e:	2300      	movs	r3, #0
 8009120:	6123      	str	r3, [r4, #16]
 8009122:	4615      	mov	r5, r2
 8009124:	e7bc      	b.n	80090a0 <_printf_i+0x14c>
 8009126:	682b      	ldr	r3, [r5, #0]
 8009128:	1d1a      	adds	r2, r3, #4
 800912a:	602a      	str	r2, [r5, #0]
 800912c:	681d      	ldr	r5, [r3, #0]
 800912e:	6862      	ldr	r2, [r4, #4]
 8009130:	2100      	movs	r1, #0
 8009132:	4628      	mov	r0, r5
 8009134:	f7f7 f854 	bl	80001e0 <memchr>
 8009138:	b108      	cbz	r0, 800913e <_printf_i+0x1ea>
 800913a:	1b40      	subs	r0, r0, r5
 800913c:	6060      	str	r0, [r4, #4]
 800913e:	6863      	ldr	r3, [r4, #4]
 8009140:	6123      	str	r3, [r4, #16]
 8009142:	2300      	movs	r3, #0
 8009144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009148:	e7aa      	b.n	80090a0 <_printf_i+0x14c>
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	462a      	mov	r2, r5
 800914e:	4649      	mov	r1, r9
 8009150:	4640      	mov	r0, r8
 8009152:	47d0      	blx	sl
 8009154:	3001      	adds	r0, #1
 8009156:	d0ad      	beq.n	80090b4 <_printf_i+0x160>
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	079b      	lsls	r3, r3, #30
 800915c:	d413      	bmi.n	8009186 <_printf_i+0x232>
 800915e:	68e0      	ldr	r0, [r4, #12]
 8009160:	9b03      	ldr	r3, [sp, #12]
 8009162:	4298      	cmp	r0, r3
 8009164:	bfb8      	it	lt
 8009166:	4618      	movlt	r0, r3
 8009168:	e7a6      	b.n	80090b8 <_printf_i+0x164>
 800916a:	2301      	movs	r3, #1
 800916c:	4632      	mov	r2, r6
 800916e:	4649      	mov	r1, r9
 8009170:	4640      	mov	r0, r8
 8009172:	47d0      	blx	sl
 8009174:	3001      	adds	r0, #1
 8009176:	d09d      	beq.n	80090b4 <_printf_i+0x160>
 8009178:	3501      	adds	r5, #1
 800917a:	68e3      	ldr	r3, [r4, #12]
 800917c:	9903      	ldr	r1, [sp, #12]
 800917e:	1a5b      	subs	r3, r3, r1
 8009180:	42ab      	cmp	r3, r5
 8009182:	dcf2      	bgt.n	800916a <_printf_i+0x216>
 8009184:	e7eb      	b.n	800915e <_printf_i+0x20a>
 8009186:	2500      	movs	r5, #0
 8009188:	f104 0619 	add.w	r6, r4, #25
 800918c:	e7f5      	b.n	800917a <_printf_i+0x226>
 800918e:	bf00      	nop
 8009190:	0800b36e 	.word	0x0800b36e
 8009194:	0800b37f 	.word	0x0800b37f

08009198 <std>:
 8009198:	2300      	movs	r3, #0
 800919a:	b510      	push	{r4, lr}
 800919c:	4604      	mov	r4, r0
 800919e:	e9c0 3300 	strd	r3, r3, [r0]
 80091a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091a6:	6083      	str	r3, [r0, #8]
 80091a8:	8181      	strh	r1, [r0, #12]
 80091aa:	6643      	str	r3, [r0, #100]	; 0x64
 80091ac:	81c2      	strh	r2, [r0, #14]
 80091ae:	6183      	str	r3, [r0, #24]
 80091b0:	4619      	mov	r1, r3
 80091b2:	2208      	movs	r2, #8
 80091b4:	305c      	adds	r0, #92	; 0x5c
 80091b6:	f000 f906 	bl	80093c6 <memset>
 80091ba:	4b0d      	ldr	r3, [pc, #52]	; (80091f0 <std+0x58>)
 80091bc:	6263      	str	r3, [r4, #36]	; 0x24
 80091be:	4b0d      	ldr	r3, [pc, #52]	; (80091f4 <std+0x5c>)
 80091c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80091c2:	4b0d      	ldr	r3, [pc, #52]	; (80091f8 <std+0x60>)
 80091c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091c6:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <std+0x64>)
 80091c8:	6323      	str	r3, [r4, #48]	; 0x30
 80091ca:	4b0d      	ldr	r3, [pc, #52]	; (8009200 <std+0x68>)
 80091cc:	6224      	str	r4, [r4, #32]
 80091ce:	429c      	cmp	r4, r3
 80091d0:	d006      	beq.n	80091e0 <std+0x48>
 80091d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80091d6:	4294      	cmp	r4, r2
 80091d8:	d002      	beq.n	80091e0 <std+0x48>
 80091da:	33d0      	adds	r3, #208	; 0xd0
 80091dc:	429c      	cmp	r4, r3
 80091de:	d105      	bne.n	80091ec <std+0x54>
 80091e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e8:	f000 b96a 	b.w	80094c0 <__retarget_lock_init_recursive>
 80091ec:	bd10      	pop	{r4, pc}
 80091ee:	bf00      	nop
 80091f0:	08009341 	.word	0x08009341
 80091f4:	08009363 	.word	0x08009363
 80091f8:	0800939b 	.word	0x0800939b
 80091fc:	080093bf 	.word	0x080093bf
 8009200:	20004eb8 	.word	0x20004eb8

08009204 <stdio_exit_handler>:
 8009204:	4a02      	ldr	r2, [pc, #8]	; (8009210 <stdio_exit_handler+0xc>)
 8009206:	4903      	ldr	r1, [pc, #12]	; (8009214 <stdio_exit_handler+0x10>)
 8009208:	4803      	ldr	r0, [pc, #12]	; (8009218 <stdio_exit_handler+0x14>)
 800920a:	f000 b869 	b.w	80092e0 <_fwalk_sglue>
 800920e:	bf00      	nop
 8009210:	20000030 	.word	0x20000030
 8009214:	0800ae69 	.word	0x0800ae69
 8009218:	2000003c 	.word	0x2000003c

0800921c <cleanup_stdio>:
 800921c:	6841      	ldr	r1, [r0, #4]
 800921e:	4b0c      	ldr	r3, [pc, #48]	; (8009250 <cleanup_stdio+0x34>)
 8009220:	4299      	cmp	r1, r3
 8009222:	b510      	push	{r4, lr}
 8009224:	4604      	mov	r4, r0
 8009226:	d001      	beq.n	800922c <cleanup_stdio+0x10>
 8009228:	f001 fe1e 	bl	800ae68 <_fflush_r>
 800922c:	68a1      	ldr	r1, [r4, #8]
 800922e:	4b09      	ldr	r3, [pc, #36]	; (8009254 <cleanup_stdio+0x38>)
 8009230:	4299      	cmp	r1, r3
 8009232:	d002      	beq.n	800923a <cleanup_stdio+0x1e>
 8009234:	4620      	mov	r0, r4
 8009236:	f001 fe17 	bl	800ae68 <_fflush_r>
 800923a:	68e1      	ldr	r1, [r4, #12]
 800923c:	4b06      	ldr	r3, [pc, #24]	; (8009258 <cleanup_stdio+0x3c>)
 800923e:	4299      	cmp	r1, r3
 8009240:	d004      	beq.n	800924c <cleanup_stdio+0x30>
 8009242:	4620      	mov	r0, r4
 8009244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009248:	f001 be0e 	b.w	800ae68 <_fflush_r>
 800924c:	bd10      	pop	{r4, pc}
 800924e:	bf00      	nop
 8009250:	20004eb8 	.word	0x20004eb8
 8009254:	20004f20 	.word	0x20004f20
 8009258:	20004f88 	.word	0x20004f88

0800925c <global_stdio_init.part.0>:
 800925c:	b510      	push	{r4, lr}
 800925e:	4b0b      	ldr	r3, [pc, #44]	; (800928c <global_stdio_init.part.0+0x30>)
 8009260:	4c0b      	ldr	r4, [pc, #44]	; (8009290 <global_stdio_init.part.0+0x34>)
 8009262:	4a0c      	ldr	r2, [pc, #48]	; (8009294 <global_stdio_init.part.0+0x38>)
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	4620      	mov	r0, r4
 8009268:	2200      	movs	r2, #0
 800926a:	2104      	movs	r1, #4
 800926c:	f7ff ff94 	bl	8009198 <std>
 8009270:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009274:	2201      	movs	r2, #1
 8009276:	2109      	movs	r1, #9
 8009278:	f7ff ff8e 	bl	8009198 <std>
 800927c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009280:	2202      	movs	r2, #2
 8009282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009286:	2112      	movs	r1, #18
 8009288:	f7ff bf86 	b.w	8009198 <std>
 800928c:	20004ff0 	.word	0x20004ff0
 8009290:	20004eb8 	.word	0x20004eb8
 8009294:	08009205 	.word	0x08009205

08009298 <__sfp_lock_acquire>:
 8009298:	4801      	ldr	r0, [pc, #4]	; (80092a0 <__sfp_lock_acquire+0x8>)
 800929a:	f000 b912 	b.w	80094c2 <__retarget_lock_acquire_recursive>
 800929e:	bf00      	nop
 80092a0:	20004ff9 	.word	0x20004ff9

080092a4 <__sfp_lock_release>:
 80092a4:	4801      	ldr	r0, [pc, #4]	; (80092ac <__sfp_lock_release+0x8>)
 80092a6:	f000 b90d 	b.w	80094c4 <__retarget_lock_release_recursive>
 80092aa:	bf00      	nop
 80092ac:	20004ff9 	.word	0x20004ff9

080092b0 <__sinit>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	4604      	mov	r4, r0
 80092b4:	f7ff fff0 	bl	8009298 <__sfp_lock_acquire>
 80092b8:	6a23      	ldr	r3, [r4, #32]
 80092ba:	b11b      	cbz	r3, 80092c4 <__sinit+0x14>
 80092bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c0:	f7ff bff0 	b.w	80092a4 <__sfp_lock_release>
 80092c4:	4b04      	ldr	r3, [pc, #16]	; (80092d8 <__sinit+0x28>)
 80092c6:	6223      	str	r3, [r4, #32]
 80092c8:	4b04      	ldr	r3, [pc, #16]	; (80092dc <__sinit+0x2c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1f5      	bne.n	80092bc <__sinit+0xc>
 80092d0:	f7ff ffc4 	bl	800925c <global_stdio_init.part.0>
 80092d4:	e7f2      	b.n	80092bc <__sinit+0xc>
 80092d6:	bf00      	nop
 80092d8:	0800921d 	.word	0x0800921d
 80092dc:	20004ff0 	.word	0x20004ff0

080092e0 <_fwalk_sglue>:
 80092e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e4:	4607      	mov	r7, r0
 80092e6:	4688      	mov	r8, r1
 80092e8:	4614      	mov	r4, r2
 80092ea:	2600      	movs	r6, #0
 80092ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092f0:	f1b9 0901 	subs.w	r9, r9, #1
 80092f4:	d505      	bpl.n	8009302 <_fwalk_sglue+0x22>
 80092f6:	6824      	ldr	r4, [r4, #0]
 80092f8:	2c00      	cmp	r4, #0
 80092fa:	d1f7      	bne.n	80092ec <_fwalk_sglue+0xc>
 80092fc:	4630      	mov	r0, r6
 80092fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009302:	89ab      	ldrh	r3, [r5, #12]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d907      	bls.n	8009318 <_fwalk_sglue+0x38>
 8009308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800930c:	3301      	adds	r3, #1
 800930e:	d003      	beq.n	8009318 <_fwalk_sglue+0x38>
 8009310:	4629      	mov	r1, r5
 8009312:	4638      	mov	r0, r7
 8009314:	47c0      	blx	r8
 8009316:	4306      	orrs	r6, r0
 8009318:	3568      	adds	r5, #104	; 0x68
 800931a:	e7e9      	b.n	80092f0 <_fwalk_sglue+0x10>

0800931c <iprintf>:
 800931c:	b40f      	push	{r0, r1, r2, r3}
 800931e:	b507      	push	{r0, r1, r2, lr}
 8009320:	4906      	ldr	r1, [pc, #24]	; (800933c <iprintf+0x20>)
 8009322:	ab04      	add	r3, sp, #16
 8009324:	6808      	ldr	r0, [r1, #0]
 8009326:	f853 2b04 	ldr.w	r2, [r3], #4
 800932a:	6881      	ldr	r1, [r0, #8]
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	f001 fbfb 	bl	800ab28 <_vfiprintf_r>
 8009332:	b003      	add	sp, #12
 8009334:	f85d eb04 	ldr.w	lr, [sp], #4
 8009338:	b004      	add	sp, #16
 800933a:	4770      	bx	lr
 800933c:	20000088 	.word	0x20000088

08009340 <__sread>:
 8009340:	b510      	push	{r4, lr}
 8009342:	460c      	mov	r4, r1
 8009344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009348:	f000 f86c 	bl	8009424 <_read_r>
 800934c:	2800      	cmp	r0, #0
 800934e:	bfab      	itete	ge
 8009350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009352:	89a3      	ldrhlt	r3, [r4, #12]
 8009354:	181b      	addge	r3, r3, r0
 8009356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800935a:	bfac      	ite	ge
 800935c:	6563      	strge	r3, [r4, #84]	; 0x54
 800935e:	81a3      	strhlt	r3, [r4, #12]
 8009360:	bd10      	pop	{r4, pc}

08009362 <__swrite>:
 8009362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009366:	461f      	mov	r7, r3
 8009368:	898b      	ldrh	r3, [r1, #12]
 800936a:	05db      	lsls	r3, r3, #23
 800936c:	4605      	mov	r5, r0
 800936e:	460c      	mov	r4, r1
 8009370:	4616      	mov	r6, r2
 8009372:	d505      	bpl.n	8009380 <__swrite+0x1e>
 8009374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009378:	2302      	movs	r3, #2
 800937a:	2200      	movs	r2, #0
 800937c:	f000 f840 	bl	8009400 <_lseek_r>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	4632      	mov	r2, r6
 800938e:	463b      	mov	r3, r7
 8009390:	4628      	mov	r0, r5
 8009392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009396:	f000 b857 	b.w	8009448 <_write_r>

0800939a <__sseek>:
 800939a:	b510      	push	{r4, lr}
 800939c:	460c      	mov	r4, r1
 800939e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a2:	f000 f82d 	bl	8009400 <_lseek_r>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	bf15      	itete	ne
 80093ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80093ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093b6:	81a3      	strheq	r3, [r4, #12]
 80093b8:	bf18      	it	ne
 80093ba:	81a3      	strhne	r3, [r4, #12]
 80093bc:	bd10      	pop	{r4, pc}

080093be <__sclose>:
 80093be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c2:	f000 b80d 	b.w	80093e0 <_close_r>

080093c6 <memset>:
 80093c6:	4402      	add	r2, r0
 80093c8:	4603      	mov	r3, r0
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d100      	bne.n	80093d0 <memset+0xa>
 80093ce:	4770      	bx	lr
 80093d0:	f803 1b01 	strb.w	r1, [r3], #1
 80093d4:	e7f9      	b.n	80093ca <memset+0x4>
	...

080093d8 <_localeconv_r>:
 80093d8:	4800      	ldr	r0, [pc, #0]	; (80093dc <_localeconv_r+0x4>)
 80093da:	4770      	bx	lr
 80093dc:	2000017c 	.word	0x2000017c

080093e0 <_close_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d06      	ldr	r5, [pc, #24]	; (80093fc <_close_r+0x1c>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	f7f9 f8b9 	bl	8002562 <_close>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_close_r+0x1a>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_close_r+0x1a>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	20004ff4 	.word	0x20004ff4

08009400 <_lseek_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d07      	ldr	r5, [pc, #28]	; (8009420 <_lseek_r+0x20>)
 8009404:	4604      	mov	r4, r0
 8009406:	4608      	mov	r0, r1
 8009408:	4611      	mov	r1, r2
 800940a:	2200      	movs	r2, #0
 800940c:	602a      	str	r2, [r5, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	f7f9 f8ce 	bl	80025b0 <_lseek>
 8009414:	1c43      	adds	r3, r0, #1
 8009416:	d102      	bne.n	800941e <_lseek_r+0x1e>
 8009418:	682b      	ldr	r3, [r5, #0]
 800941a:	b103      	cbz	r3, 800941e <_lseek_r+0x1e>
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	20004ff4 	.word	0x20004ff4

08009424 <_read_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d07      	ldr	r5, [pc, #28]	; (8009444 <_read_r+0x20>)
 8009428:	4604      	mov	r4, r0
 800942a:	4608      	mov	r0, r1
 800942c:	4611      	mov	r1, r2
 800942e:	2200      	movs	r2, #0
 8009430:	602a      	str	r2, [r5, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	f7f9 f85c 	bl	80024f0 <_read>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d102      	bne.n	8009442 <_read_r+0x1e>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	b103      	cbz	r3, 8009442 <_read_r+0x1e>
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	20004ff4 	.word	0x20004ff4

08009448 <_write_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d07      	ldr	r5, [pc, #28]	; (8009468 <_write_r+0x20>)
 800944c:	4604      	mov	r4, r0
 800944e:	4608      	mov	r0, r1
 8009450:	4611      	mov	r1, r2
 8009452:	2200      	movs	r2, #0
 8009454:	602a      	str	r2, [r5, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	f7f9 f867 	bl	800252a <_write>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d102      	bne.n	8009466 <_write_r+0x1e>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	b103      	cbz	r3, 8009466 <_write_r+0x1e>
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	20004ff4 	.word	0x20004ff4

0800946c <__errno>:
 800946c:	4b01      	ldr	r3, [pc, #4]	; (8009474 <__errno+0x8>)
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	20000088 	.word	0x20000088

08009478 <__libc_init_array>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	4d0d      	ldr	r5, [pc, #52]	; (80094b0 <__libc_init_array+0x38>)
 800947c:	4c0d      	ldr	r4, [pc, #52]	; (80094b4 <__libc_init_array+0x3c>)
 800947e:	1b64      	subs	r4, r4, r5
 8009480:	10a4      	asrs	r4, r4, #2
 8009482:	2600      	movs	r6, #0
 8009484:	42a6      	cmp	r6, r4
 8009486:	d109      	bne.n	800949c <__libc_init_array+0x24>
 8009488:	4d0b      	ldr	r5, [pc, #44]	; (80094b8 <__libc_init_array+0x40>)
 800948a:	4c0c      	ldr	r4, [pc, #48]	; (80094bc <__libc_init_array+0x44>)
 800948c:	f001 fef0 	bl	800b270 <_init>
 8009490:	1b64      	subs	r4, r4, r5
 8009492:	10a4      	asrs	r4, r4, #2
 8009494:	2600      	movs	r6, #0
 8009496:	42a6      	cmp	r6, r4
 8009498:	d105      	bne.n	80094a6 <__libc_init_array+0x2e>
 800949a:	bd70      	pop	{r4, r5, r6, pc}
 800949c:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a0:	4798      	blx	r3
 80094a2:	3601      	adds	r6, #1
 80094a4:	e7ee      	b.n	8009484 <__libc_init_array+0xc>
 80094a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094aa:	4798      	blx	r3
 80094ac:	3601      	adds	r6, #1
 80094ae:	e7f2      	b.n	8009496 <__libc_init_array+0x1e>
 80094b0:	0800b6d4 	.word	0x0800b6d4
 80094b4:	0800b6d4 	.word	0x0800b6d4
 80094b8:	0800b6d4 	.word	0x0800b6d4
 80094bc:	0800b6d8 	.word	0x0800b6d8

080094c0 <__retarget_lock_init_recursive>:
 80094c0:	4770      	bx	lr

080094c2 <__retarget_lock_acquire_recursive>:
 80094c2:	4770      	bx	lr

080094c4 <__retarget_lock_release_recursive>:
 80094c4:	4770      	bx	lr

080094c6 <memcpy>:
 80094c6:	440a      	add	r2, r1
 80094c8:	4291      	cmp	r1, r2
 80094ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80094ce:	d100      	bne.n	80094d2 <memcpy+0xc>
 80094d0:	4770      	bx	lr
 80094d2:	b510      	push	{r4, lr}
 80094d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094dc:	4291      	cmp	r1, r2
 80094de:	d1f9      	bne.n	80094d4 <memcpy+0xe>
 80094e0:	bd10      	pop	{r4, pc}

080094e2 <quorem>:
 80094e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e6:	6903      	ldr	r3, [r0, #16]
 80094e8:	690c      	ldr	r4, [r1, #16]
 80094ea:	42a3      	cmp	r3, r4
 80094ec:	4607      	mov	r7, r0
 80094ee:	db7e      	blt.n	80095ee <quorem+0x10c>
 80094f0:	3c01      	subs	r4, #1
 80094f2:	f101 0814 	add.w	r8, r1, #20
 80094f6:	f100 0514 	add.w	r5, r0, #20
 80094fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009508:	3301      	adds	r3, #1
 800950a:	429a      	cmp	r2, r3
 800950c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009510:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009514:	fbb2 f6f3 	udiv	r6, r2, r3
 8009518:	d331      	bcc.n	800957e <quorem+0x9c>
 800951a:	f04f 0e00 	mov.w	lr, #0
 800951e:	4640      	mov	r0, r8
 8009520:	46ac      	mov	ip, r5
 8009522:	46f2      	mov	sl, lr
 8009524:	f850 2b04 	ldr.w	r2, [r0], #4
 8009528:	b293      	uxth	r3, r2
 800952a:	fb06 e303 	mla	r3, r6, r3, lr
 800952e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009532:	0c1a      	lsrs	r2, r3, #16
 8009534:	b29b      	uxth	r3, r3
 8009536:	ebaa 0303 	sub.w	r3, sl, r3
 800953a:	f8dc a000 	ldr.w	sl, [ip]
 800953e:	fa13 f38a 	uxtah	r3, r3, sl
 8009542:	fb06 220e 	mla	r2, r6, lr, r2
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	9b00      	ldr	r3, [sp, #0]
 800954a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800954e:	b292      	uxth	r2, r2
 8009550:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009558:	f8bd 3000 	ldrh.w	r3, [sp]
 800955c:	4581      	cmp	r9, r0
 800955e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009562:	f84c 3b04 	str.w	r3, [ip], #4
 8009566:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800956a:	d2db      	bcs.n	8009524 <quorem+0x42>
 800956c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009570:	b92b      	cbnz	r3, 800957e <quorem+0x9c>
 8009572:	9b01      	ldr	r3, [sp, #4]
 8009574:	3b04      	subs	r3, #4
 8009576:	429d      	cmp	r5, r3
 8009578:	461a      	mov	r2, r3
 800957a:	d32c      	bcc.n	80095d6 <quorem+0xf4>
 800957c:	613c      	str	r4, [r7, #16]
 800957e:	4638      	mov	r0, r7
 8009580:	f001 f9a8 	bl	800a8d4 <__mcmp>
 8009584:	2800      	cmp	r0, #0
 8009586:	db22      	blt.n	80095ce <quorem+0xec>
 8009588:	3601      	adds	r6, #1
 800958a:	4629      	mov	r1, r5
 800958c:	2000      	movs	r0, #0
 800958e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009592:	f8d1 c000 	ldr.w	ip, [r1]
 8009596:	b293      	uxth	r3, r2
 8009598:	1ac3      	subs	r3, r0, r3
 800959a:	0c12      	lsrs	r2, r2, #16
 800959c:	fa13 f38c 	uxtah	r3, r3, ip
 80095a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80095a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095ae:	45c1      	cmp	r9, r8
 80095b0:	f841 3b04 	str.w	r3, [r1], #4
 80095b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80095b8:	d2e9      	bcs.n	800958e <quorem+0xac>
 80095ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095c2:	b922      	cbnz	r2, 80095ce <quorem+0xec>
 80095c4:	3b04      	subs	r3, #4
 80095c6:	429d      	cmp	r5, r3
 80095c8:	461a      	mov	r2, r3
 80095ca:	d30a      	bcc.n	80095e2 <quorem+0x100>
 80095cc:	613c      	str	r4, [r7, #16]
 80095ce:	4630      	mov	r0, r6
 80095d0:	b003      	add	sp, #12
 80095d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d6:	6812      	ldr	r2, [r2, #0]
 80095d8:	3b04      	subs	r3, #4
 80095da:	2a00      	cmp	r2, #0
 80095dc:	d1ce      	bne.n	800957c <quorem+0x9a>
 80095de:	3c01      	subs	r4, #1
 80095e0:	e7c9      	b.n	8009576 <quorem+0x94>
 80095e2:	6812      	ldr	r2, [r2, #0]
 80095e4:	3b04      	subs	r3, #4
 80095e6:	2a00      	cmp	r2, #0
 80095e8:	d1f0      	bne.n	80095cc <quorem+0xea>
 80095ea:	3c01      	subs	r4, #1
 80095ec:	e7eb      	b.n	80095c6 <quorem+0xe4>
 80095ee:	2000      	movs	r0, #0
 80095f0:	e7ee      	b.n	80095d0 <quorem+0xee>
 80095f2:	0000      	movs	r0, r0
 80095f4:	0000      	movs	r0, r0
	...

080095f8 <_dtoa_r>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	ed2d 8b04 	vpush	{d8-d9}
 8009600:	69c5      	ldr	r5, [r0, #28]
 8009602:	b093      	sub	sp, #76	; 0x4c
 8009604:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009608:	ec57 6b10 	vmov	r6, r7, d0
 800960c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009610:	9107      	str	r1, [sp, #28]
 8009612:	4604      	mov	r4, r0
 8009614:	920a      	str	r2, [sp, #40]	; 0x28
 8009616:	930d      	str	r3, [sp, #52]	; 0x34
 8009618:	b975      	cbnz	r5, 8009638 <_dtoa_r+0x40>
 800961a:	2010      	movs	r0, #16
 800961c:	f000 fe2a 	bl	800a274 <malloc>
 8009620:	4602      	mov	r2, r0
 8009622:	61e0      	str	r0, [r4, #28]
 8009624:	b920      	cbnz	r0, 8009630 <_dtoa_r+0x38>
 8009626:	4bae      	ldr	r3, [pc, #696]	; (80098e0 <_dtoa_r+0x2e8>)
 8009628:	21ef      	movs	r1, #239	; 0xef
 800962a:	48ae      	ldr	r0, [pc, #696]	; (80098e4 <_dtoa_r+0x2ec>)
 800962c:	f001 fcea 	bl	800b004 <__assert_func>
 8009630:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009634:	6005      	str	r5, [r0, #0]
 8009636:	60c5      	str	r5, [r0, #12]
 8009638:	69e3      	ldr	r3, [r4, #28]
 800963a:	6819      	ldr	r1, [r3, #0]
 800963c:	b151      	cbz	r1, 8009654 <_dtoa_r+0x5c>
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	604a      	str	r2, [r1, #4]
 8009642:	2301      	movs	r3, #1
 8009644:	4093      	lsls	r3, r2
 8009646:	608b      	str	r3, [r1, #8]
 8009648:	4620      	mov	r0, r4
 800964a:	f000 ff07 	bl	800a45c <_Bfree>
 800964e:	69e3      	ldr	r3, [r4, #28]
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	1e3b      	subs	r3, r7, #0
 8009656:	bfbb      	ittet	lt
 8009658:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800965c:	9303      	strlt	r3, [sp, #12]
 800965e:	2300      	movge	r3, #0
 8009660:	2201      	movlt	r2, #1
 8009662:	bfac      	ite	ge
 8009664:	f8c8 3000 	strge.w	r3, [r8]
 8009668:	f8c8 2000 	strlt.w	r2, [r8]
 800966c:	4b9e      	ldr	r3, [pc, #632]	; (80098e8 <_dtoa_r+0x2f0>)
 800966e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009672:	ea33 0308 	bics.w	r3, r3, r8
 8009676:	d11b      	bne.n	80096b0 <_dtoa_r+0xb8>
 8009678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800967a:	f242 730f 	movw	r3, #9999	; 0x270f
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009684:	4333      	orrs	r3, r6
 8009686:	f000 8593 	beq.w	800a1b0 <_dtoa_r+0xbb8>
 800968a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800968c:	b963      	cbnz	r3, 80096a8 <_dtoa_r+0xb0>
 800968e:	4b97      	ldr	r3, [pc, #604]	; (80098ec <_dtoa_r+0x2f4>)
 8009690:	e027      	b.n	80096e2 <_dtoa_r+0xea>
 8009692:	4b97      	ldr	r3, [pc, #604]	; (80098f0 <_dtoa_r+0x2f8>)
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	3308      	adds	r3, #8
 8009698:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	9800      	ldr	r0, [sp, #0]
 800969e:	b013      	add	sp, #76	; 0x4c
 80096a0:	ecbd 8b04 	vpop	{d8-d9}
 80096a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a8:	4b90      	ldr	r3, [pc, #576]	; (80098ec <_dtoa_r+0x2f4>)
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	3303      	adds	r3, #3
 80096ae:	e7f3      	b.n	8009698 <_dtoa_r+0xa0>
 80096b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096b4:	2200      	movs	r2, #0
 80096b6:	ec51 0b17 	vmov	r0, r1, d7
 80096ba:	eeb0 8a47 	vmov.f32	s16, s14
 80096be:	eef0 8a67 	vmov.f32	s17, s15
 80096c2:	2300      	movs	r3, #0
 80096c4:	f7f7 fa08 	bl	8000ad8 <__aeabi_dcmpeq>
 80096c8:	4681      	mov	r9, r0
 80096ca:	b160      	cbz	r0, 80096e6 <_dtoa_r+0xee>
 80096cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096ce:	2301      	movs	r3, #1
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 8568 	beq.w	800a1aa <_dtoa_r+0xbb2>
 80096da:	4b86      	ldr	r3, [pc, #536]	; (80098f4 <_dtoa_r+0x2fc>)
 80096dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096de:	6013      	str	r3, [r2, #0]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	e7da      	b.n	800969c <_dtoa_r+0xa4>
 80096e6:	aa10      	add	r2, sp, #64	; 0x40
 80096e8:	a911      	add	r1, sp, #68	; 0x44
 80096ea:	4620      	mov	r0, r4
 80096ec:	eeb0 0a48 	vmov.f32	s0, s16
 80096f0:	eef0 0a68 	vmov.f32	s1, s17
 80096f4:	f001 f994 	bl	800aa20 <__d2b>
 80096f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80096fc:	4682      	mov	sl, r0
 80096fe:	2d00      	cmp	r5, #0
 8009700:	d07f      	beq.n	8009802 <_dtoa_r+0x20a>
 8009702:	ee18 3a90 	vmov	r3, s17
 8009706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800970a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800970e:	ec51 0b18 	vmov	r0, r1, d8
 8009712:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009716:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800971a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800971e:	4619      	mov	r1, r3
 8009720:	2200      	movs	r2, #0
 8009722:	4b75      	ldr	r3, [pc, #468]	; (80098f8 <_dtoa_r+0x300>)
 8009724:	f7f6 fdb8 	bl	8000298 <__aeabi_dsub>
 8009728:	a367      	add	r3, pc, #412	; (adr r3, 80098c8 <_dtoa_r+0x2d0>)
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	f7f6 ff6b 	bl	8000608 <__aeabi_dmul>
 8009732:	a367      	add	r3, pc, #412	; (adr r3, 80098d0 <_dtoa_r+0x2d8>)
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f7f6 fdb0 	bl	800029c <__adddf3>
 800973c:	4606      	mov	r6, r0
 800973e:	4628      	mov	r0, r5
 8009740:	460f      	mov	r7, r1
 8009742:	f7f6 fef7 	bl	8000534 <__aeabi_i2d>
 8009746:	a364      	add	r3, pc, #400	; (adr r3, 80098d8 <_dtoa_r+0x2e0>)
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f7f6 ff5c 	bl	8000608 <__aeabi_dmul>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4630      	mov	r0, r6
 8009756:	4639      	mov	r1, r7
 8009758:	f7f6 fda0 	bl	800029c <__adddf3>
 800975c:	4606      	mov	r6, r0
 800975e:	460f      	mov	r7, r1
 8009760:	f7f7 fa02 	bl	8000b68 <__aeabi_d2iz>
 8009764:	2200      	movs	r2, #0
 8009766:	4683      	mov	fp, r0
 8009768:	2300      	movs	r3, #0
 800976a:	4630      	mov	r0, r6
 800976c:	4639      	mov	r1, r7
 800976e:	f7f7 f9bd 	bl	8000aec <__aeabi_dcmplt>
 8009772:	b148      	cbz	r0, 8009788 <_dtoa_r+0x190>
 8009774:	4658      	mov	r0, fp
 8009776:	f7f6 fedd 	bl	8000534 <__aeabi_i2d>
 800977a:	4632      	mov	r2, r6
 800977c:	463b      	mov	r3, r7
 800977e:	f7f7 f9ab 	bl	8000ad8 <__aeabi_dcmpeq>
 8009782:	b908      	cbnz	r0, 8009788 <_dtoa_r+0x190>
 8009784:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009788:	f1bb 0f16 	cmp.w	fp, #22
 800978c:	d857      	bhi.n	800983e <_dtoa_r+0x246>
 800978e:	4b5b      	ldr	r3, [pc, #364]	; (80098fc <_dtoa_r+0x304>)
 8009790:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	ec51 0b18 	vmov	r0, r1, d8
 800979c:	f7f7 f9a6 	bl	8000aec <__aeabi_dcmplt>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d04e      	beq.n	8009842 <_dtoa_r+0x24a>
 80097a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097a8:	2300      	movs	r3, #0
 80097aa:	930c      	str	r3, [sp, #48]	; 0x30
 80097ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097ae:	1b5b      	subs	r3, r3, r5
 80097b0:	1e5a      	subs	r2, r3, #1
 80097b2:	bf45      	ittet	mi
 80097b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80097b8:	9305      	strmi	r3, [sp, #20]
 80097ba:	2300      	movpl	r3, #0
 80097bc:	2300      	movmi	r3, #0
 80097be:	9206      	str	r2, [sp, #24]
 80097c0:	bf54      	ite	pl
 80097c2:	9305      	strpl	r3, [sp, #20]
 80097c4:	9306      	strmi	r3, [sp, #24]
 80097c6:	f1bb 0f00 	cmp.w	fp, #0
 80097ca:	db3c      	blt.n	8009846 <_dtoa_r+0x24e>
 80097cc:	9b06      	ldr	r3, [sp, #24]
 80097ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80097d2:	445b      	add	r3, fp
 80097d4:	9306      	str	r3, [sp, #24]
 80097d6:	2300      	movs	r3, #0
 80097d8:	9308      	str	r3, [sp, #32]
 80097da:	9b07      	ldr	r3, [sp, #28]
 80097dc:	2b09      	cmp	r3, #9
 80097de:	d868      	bhi.n	80098b2 <_dtoa_r+0x2ba>
 80097e0:	2b05      	cmp	r3, #5
 80097e2:	bfc4      	itt	gt
 80097e4:	3b04      	subgt	r3, #4
 80097e6:	9307      	strgt	r3, [sp, #28]
 80097e8:	9b07      	ldr	r3, [sp, #28]
 80097ea:	f1a3 0302 	sub.w	r3, r3, #2
 80097ee:	bfcc      	ite	gt
 80097f0:	2500      	movgt	r5, #0
 80097f2:	2501      	movle	r5, #1
 80097f4:	2b03      	cmp	r3, #3
 80097f6:	f200 8085 	bhi.w	8009904 <_dtoa_r+0x30c>
 80097fa:	e8df f003 	tbb	[pc, r3]
 80097fe:	3b2e      	.short	0x3b2e
 8009800:	5839      	.short	0x5839
 8009802:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009806:	441d      	add	r5, r3
 8009808:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800980c:	2b20      	cmp	r3, #32
 800980e:	bfc1      	itttt	gt
 8009810:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009814:	fa08 f803 	lslgt.w	r8, r8, r3
 8009818:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800981c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009820:	bfd6      	itet	le
 8009822:	f1c3 0320 	rsble	r3, r3, #32
 8009826:	ea48 0003 	orrgt.w	r0, r8, r3
 800982a:	fa06 f003 	lslle.w	r0, r6, r3
 800982e:	f7f6 fe71 	bl	8000514 <__aeabi_ui2d>
 8009832:	2201      	movs	r2, #1
 8009834:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009838:	3d01      	subs	r5, #1
 800983a:	920e      	str	r2, [sp, #56]	; 0x38
 800983c:	e76f      	b.n	800971e <_dtoa_r+0x126>
 800983e:	2301      	movs	r3, #1
 8009840:	e7b3      	b.n	80097aa <_dtoa_r+0x1b2>
 8009842:	900c      	str	r0, [sp, #48]	; 0x30
 8009844:	e7b2      	b.n	80097ac <_dtoa_r+0x1b4>
 8009846:	9b05      	ldr	r3, [sp, #20]
 8009848:	eba3 030b 	sub.w	r3, r3, fp
 800984c:	9305      	str	r3, [sp, #20]
 800984e:	f1cb 0300 	rsb	r3, fp, #0
 8009852:	9308      	str	r3, [sp, #32]
 8009854:	2300      	movs	r3, #0
 8009856:	930b      	str	r3, [sp, #44]	; 0x2c
 8009858:	e7bf      	b.n	80097da <_dtoa_r+0x1e2>
 800985a:	2300      	movs	r3, #0
 800985c:	9309      	str	r3, [sp, #36]	; 0x24
 800985e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009860:	2b00      	cmp	r3, #0
 8009862:	dc52      	bgt.n	800990a <_dtoa_r+0x312>
 8009864:	2301      	movs	r3, #1
 8009866:	9301      	str	r3, [sp, #4]
 8009868:	9304      	str	r3, [sp, #16]
 800986a:	461a      	mov	r2, r3
 800986c:	920a      	str	r2, [sp, #40]	; 0x28
 800986e:	e00b      	b.n	8009888 <_dtoa_r+0x290>
 8009870:	2301      	movs	r3, #1
 8009872:	e7f3      	b.n	800985c <_dtoa_r+0x264>
 8009874:	2300      	movs	r3, #0
 8009876:	9309      	str	r3, [sp, #36]	; 0x24
 8009878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987a:	445b      	add	r3, fp
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	3301      	adds	r3, #1
 8009880:	2b01      	cmp	r3, #1
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	bfb8      	it	lt
 8009886:	2301      	movlt	r3, #1
 8009888:	69e0      	ldr	r0, [r4, #28]
 800988a:	2100      	movs	r1, #0
 800988c:	2204      	movs	r2, #4
 800988e:	f102 0614 	add.w	r6, r2, #20
 8009892:	429e      	cmp	r6, r3
 8009894:	d93d      	bls.n	8009912 <_dtoa_r+0x31a>
 8009896:	6041      	str	r1, [r0, #4]
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fd9f 	bl	800a3dc <_Balloc>
 800989e:	9000      	str	r0, [sp, #0]
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d139      	bne.n	8009918 <_dtoa_r+0x320>
 80098a4:	4b16      	ldr	r3, [pc, #88]	; (8009900 <_dtoa_r+0x308>)
 80098a6:	4602      	mov	r2, r0
 80098a8:	f240 11af 	movw	r1, #431	; 0x1af
 80098ac:	e6bd      	b.n	800962a <_dtoa_r+0x32>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e7e1      	b.n	8009876 <_dtoa_r+0x27e>
 80098b2:	2501      	movs	r5, #1
 80098b4:	2300      	movs	r3, #0
 80098b6:	9307      	str	r3, [sp, #28]
 80098b8:	9509      	str	r5, [sp, #36]	; 0x24
 80098ba:	f04f 33ff 	mov.w	r3, #4294967295
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	9304      	str	r3, [sp, #16]
 80098c2:	2200      	movs	r2, #0
 80098c4:	2312      	movs	r3, #18
 80098c6:	e7d1      	b.n	800986c <_dtoa_r+0x274>
 80098c8:	636f4361 	.word	0x636f4361
 80098cc:	3fd287a7 	.word	0x3fd287a7
 80098d0:	8b60c8b3 	.word	0x8b60c8b3
 80098d4:	3fc68a28 	.word	0x3fc68a28
 80098d8:	509f79fb 	.word	0x509f79fb
 80098dc:	3fd34413 	.word	0x3fd34413
 80098e0:	0800b39d 	.word	0x0800b39d
 80098e4:	0800b3b4 	.word	0x0800b3b4
 80098e8:	7ff00000 	.word	0x7ff00000
 80098ec:	0800b399 	.word	0x0800b399
 80098f0:	0800b390 	.word	0x0800b390
 80098f4:	0800b36d 	.word	0x0800b36d
 80098f8:	3ff80000 	.word	0x3ff80000
 80098fc:	0800b4a0 	.word	0x0800b4a0
 8009900:	0800b40c 	.word	0x0800b40c
 8009904:	2301      	movs	r3, #1
 8009906:	9309      	str	r3, [sp, #36]	; 0x24
 8009908:	e7d7      	b.n	80098ba <_dtoa_r+0x2c2>
 800990a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	9304      	str	r3, [sp, #16]
 8009910:	e7ba      	b.n	8009888 <_dtoa_r+0x290>
 8009912:	3101      	adds	r1, #1
 8009914:	0052      	lsls	r2, r2, #1
 8009916:	e7ba      	b.n	800988e <_dtoa_r+0x296>
 8009918:	69e3      	ldr	r3, [r4, #28]
 800991a:	9a00      	ldr	r2, [sp, #0]
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	9b04      	ldr	r3, [sp, #16]
 8009920:	2b0e      	cmp	r3, #14
 8009922:	f200 80a8 	bhi.w	8009a76 <_dtoa_r+0x47e>
 8009926:	2d00      	cmp	r5, #0
 8009928:	f000 80a5 	beq.w	8009a76 <_dtoa_r+0x47e>
 800992c:	f1bb 0f00 	cmp.w	fp, #0
 8009930:	dd38      	ble.n	80099a4 <_dtoa_r+0x3ac>
 8009932:	4bc0      	ldr	r3, [pc, #768]	; (8009c34 <_dtoa_r+0x63c>)
 8009934:	f00b 020f 	and.w	r2, fp, #15
 8009938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800993c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009940:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009944:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009948:	d019      	beq.n	800997e <_dtoa_r+0x386>
 800994a:	4bbb      	ldr	r3, [pc, #748]	; (8009c38 <_dtoa_r+0x640>)
 800994c:	ec51 0b18 	vmov	r0, r1, d8
 8009950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009954:	f7f6 ff82 	bl	800085c <__aeabi_ddiv>
 8009958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800995c:	f008 080f 	and.w	r8, r8, #15
 8009960:	2503      	movs	r5, #3
 8009962:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009c38 <_dtoa_r+0x640>
 8009966:	f1b8 0f00 	cmp.w	r8, #0
 800996a:	d10a      	bne.n	8009982 <_dtoa_r+0x38a>
 800996c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009970:	4632      	mov	r2, r6
 8009972:	463b      	mov	r3, r7
 8009974:	f7f6 ff72 	bl	800085c <__aeabi_ddiv>
 8009978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800997c:	e02b      	b.n	80099d6 <_dtoa_r+0x3de>
 800997e:	2502      	movs	r5, #2
 8009980:	e7ef      	b.n	8009962 <_dtoa_r+0x36a>
 8009982:	f018 0f01 	tst.w	r8, #1
 8009986:	d008      	beq.n	800999a <_dtoa_r+0x3a2>
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009990:	f7f6 fe3a 	bl	8000608 <__aeabi_dmul>
 8009994:	3501      	adds	r5, #1
 8009996:	4606      	mov	r6, r0
 8009998:	460f      	mov	r7, r1
 800999a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800999e:	f109 0908 	add.w	r9, r9, #8
 80099a2:	e7e0      	b.n	8009966 <_dtoa_r+0x36e>
 80099a4:	f000 809f 	beq.w	8009ae6 <_dtoa_r+0x4ee>
 80099a8:	f1cb 0600 	rsb	r6, fp, #0
 80099ac:	4ba1      	ldr	r3, [pc, #644]	; (8009c34 <_dtoa_r+0x63c>)
 80099ae:	4fa2      	ldr	r7, [pc, #648]	; (8009c38 <_dtoa_r+0x640>)
 80099b0:	f006 020f 	and.w	r2, r6, #15
 80099b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	ec51 0b18 	vmov	r0, r1, d8
 80099c0:	f7f6 fe22 	bl	8000608 <__aeabi_dmul>
 80099c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099c8:	1136      	asrs	r6, r6, #4
 80099ca:	2300      	movs	r3, #0
 80099cc:	2502      	movs	r5, #2
 80099ce:	2e00      	cmp	r6, #0
 80099d0:	d17e      	bne.n	8009ad0 <_dtoa_r+0x4d8>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1d0      	bne.n	8009978 <_dtoa_r+0x380>
 80099d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 8084 	beq.w	8009aea <_dtoa_r+0x4f2>
 80099e2:	4b96      	ldr	r3, [pc, #600]	; (8009c3c <_dtoa_r+0x644>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	4640      	mov	r0, r8
 80099e8:	4649      	mov	r1, r9
 80099ea:	f7f7 f87f 	bl	8000aec <__aeabi_dcmplt>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d07b      	beq.n	8009aea <_dtoa_r+0x4f2>
 80099f2:	9b04      	ldr	r3, [sp, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d078      	beq.n	8009aea <_dtoa_r+0x4f2>
 80099f8:	9b01      	ldr	r3, [sp, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	dd39      	ble.n	8009a72 <_dtoa_r+0x47a>
 80099fe:	4b90      	ldr	r3, [pc, #576]	; (8009c40 <_dtoa_r+0x648>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	4640      	mov	r0, r8
 8009a04:	4649      	mov	r1, r9
 8009a06:	f7f6 fdff 	bl	8000608 <__aeabi_dmul>
 8009a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a0e:	9e01      	ldr	r6, [sp, #4]
 8009a10:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009a14:	3501      	adds	r5, #1
 8009a16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f7f6 fd8a 	bl	8000534 <__aeabi_i2d>
 8009a20:	4642      	mov	r2, r8
 8009a22:	464b      	mov	r3, r9
 8009a24:	f7f6 fdf0 	bl	8000608 <__aeabi_dmul>
 8009a28:	4b86      	ldr	r3, [pc, #536]	; (8009c44 <_dtoa_r+0x64c>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f7f6 fc36 	bl	800029c <__adddf3>
 8009a30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a38:	9303      	str	r3, [sp, #12]
 8009a3a:	2e00      	cmp	r6, #0
 8009a3c:	d158      	bne.n	8009af0 <_dtoa_r+0x4f8>
 8009a3e:	4b82      	ldr	r3, [pc, #520]	; (8009c48 <_dtoa_r+0x650>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	4640      	mov	r0, r8
 8009a44:	4649      	mov	r1, r9
 8009a46:	f7f6 fc27 	bl	8000298 <__aeabi_dsub>
 8009a4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a4e:	4680      	mov	r8, r0
 8009a50:	4689      	mov	r9, r1
 8009a52:	f7f7 f869 	bl	8000b28 <__aeabi_dcmpgt>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	f040 8296 	bne.w	8009f88 <_dtoa_r+0x990>
 8009a5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009a60:	4640      	mov	r0, r8
 8009a62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a66:	4649      	mov	r1, r9
 8009a68:	f7f7 f840 	bl	8000aec <__aeabi_dcmplt>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	f040 8289 	bne.w	8009f84 <_dtoa_r+0x98c>
 8009a72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009a76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f2c0 814e 	blt.w	8009d1a <_dtoa_r+0x722>
 8009a7e:	f1bb 0f0e 	cmp.w	fp, #14
 8009a82:	f300 814a 	bgt.w	8009d1a <_dtoa_r+0x722>
 8009a86:	4b6b      	ldr	r3, [pc, #428]	; (8009c34 <_dtoa_r+0x63c>)
 8009a88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f280 80dc 	bge.w	8009c50 <_dtoa_r+0x658>
 8009a98:	9b04      	ldr	r3, [sp, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f300 80d8 	bgt.w	8009c50 <_dtoa_r+0x658>
 8009aa0:	f040 826f 	bne.w	8009f82 <_dtoa_r+0x98a>
 8009aa4:	4b68      	ldr	r3, [pc, #416]	; (8009c48 <_dtoa_r+0x650>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	4649      	mov	r1, r9
 8009aac:	f7f6 fdac 	bl	8000608 <__aeabi_dmul>
 8009ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ab4:	f7f7 f82e 	bl	8000b14 <__aeabi_dcmpge>
 8009ab8:	9e04      	ldr	r6, [sp, #16]
 8009aba:	4637      	mov	r7, r6
 8009abc:	2800      	cmp	r0, #0
 8009abe:	f040 8245 	bne.w	8009f4c <_dtoa_r+0x954>
 8009ac2:	9d00      	ldr	r5, [sp, #0]
 8009ac4:	2331      	movs	r3, #49	; 0x31
 8009ac6:	f805 3b01 	strb.w	r3, [r5], #1
 8009aca:	f10b 0b01 	add.w	fp, fp, #1
 8009ace:	e241      	b.n	8009f54 <_dtoa_r+0x95c>
 8009ad0:	07f2      	lsls	r2, r6, #31
 8009ad2:	d505      	bpl.n	8009ae0 <_dtoa_r+0x4e8>
 8009ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ad8:	f7f6 fd96 	bl	8000608 <__aeabi_dmul>
 8009adc:	3501      	adds	r5, #1
 8009ade:	2301      	movs	r3, #1
 8009ae0:	1076      	asrs	r6, r6, #1
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	e773      	b.n	80099ce <_dtoa_r+0x3d6>
 8009ae6:	2502      	movs	r5, #2
 8009ae8:	e775      	b.n	80099d6 <_dtoa_r+0x3de>
 8009aea:	9e04      	ldr	r6, [sp, #16]
 8009aec:	465f      	mov	r7, fp
 8009aee:	e792      	b.n	8009a16 <_dtoa_r+0x41e>
 8009af0:	9900      	ldr	r1, [sp, #0]
 8009af2:	4b50      	ldr	r3, [pc, #320]	; (8009c34 <_dtoa_r+0x63c>)
 8009af4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009af8:	4431      	add	r1, r6
 8009afa:	9102      	str	r1, [sp, #8]
 8009afc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009afe:	eeb0 9a47 	vmov.f32	s18, s14
 8009b02:	eef0 9a67 	vmov.f32	s19, s15
 8009b06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b0e:	2900      	cmp	r1, #0
 8009b10:	d044      	beq.n	8009b9c <_dtoa_r+0x5a4>
 8009b12:	494e      	ldr	r1, [pc, #312]	; (8009c4c <_dtoa_r+0x654>)
 8009b14:	2000      	movs	r0, #0
 8009b16:	f7f6 fea1 	bl	800085c <__aeabi_ddiv>
 8009b1a:	ec53 2b19 	vmov	r2, r3, d9
 8009b1e:	f7f6 fbbb 	bl	8000298 <__aeabi_dsub>
 8009b22:	9d00      	ldr	r5, [sp, #0]
 8009b24:	ec41 0b19 	vmov	d9, r0, r1
 8009b28:	4649      	mov	r1, r9
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	f7f7 f81c 	bl	8000b68 <__aeabi_d2iz>
 8009b30:	4606      	mov	r6, r0
 8009b32:	f7f6 fcff 	bl	8000534 <__aeabi_i2d>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	f7f6 fbab 	bl	8000298 <__aeabi_dsub>
 8009b42:	3630      	adds	r6, #48	; 0x30
 8009b44:	f805 6b01 	strb.w	r6, [r5], #1
 8009b48:	ec53 2b19 	vmov	r2, r3, d9
 8009b4c:	4680      	mov	r8, r0
 8009b4e:	4689      	mov	r9, r1
 8009b50:	f7f6 ffcc 	bl	8000aec <__aeabi_dcmplt>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d164      	bne.n	8009c22 <_dtoa_r+0x62a>
 8009b58:	4642      	mov	r2, r8
 8009b5a:	464b      	mov	r3, r9
 8009b5c:	4937      	ldr	r1, [pc, #220]	; (8009c3c <_dtoa_r+0x644>)
 8009b5e:	2000      	movs	r0, #0
 8009b60:	f7f6 fb9a 	bl	8000298 <__aeabi_dsub>
 8009b64:	ec53 2b19 	vmov	r2, r3, d9
 8009b68:	f7f6 ffc0 	bl	8000aec <__aeabi_dcmplt>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	f040 80b6 	bne.w	8009cde <_dtoa_r+0x6e6>
 8009b72:	9b02      	ldr	r3, [sp, #8]
 8009b74:	429d      	cmp	r5, r3
 8009b76:	f43f af7c 	beq.w	8009a72 <_dtoa_r+0x47a>
 8009b7a:	4b31      	ldr	r3, [pc, #196]	; (8009c40 <_dtoa_r+0x648>)
 8009b7c:	ec51 0b19 	vmov	r0, r1, d9
 8009b80:	2200      	movs	r2, #0
 8009b82:	f7f6 fd41 	bl	8000608 <__aeabi_dmul>
 8009b86:	4b2e      	ldr	r3, [pc, #184]	; (8009c40 <_dtoa_r+0x648>)
 8009b88:	ec41 0b19 	vmov	d9, r0, r1
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4640      	mov	r0, r8
 8009b90:	4649      	mov	r1, r9
 8009b92:	f7f6 fd39 	bl	8000608 <__aeabi_dmul>
 8009b96:	4680      	mov	r8, r0
 8009b98:	4689      	mov	r9, r1
 8009b9a:	e7c5      	b.n	8009b28 <_dtoa_r+0x530>
 8009b9c:	ec51 0b17 	vmov	r0, r1, d7
 8009ba0:	f7f6 fd32 	bl	8000608 <__aeabi_dmul>
 8009ba4:	9b02      	ldr	r3, [sp, #8]
 8009ba6:	9d00      	ldr	r5, [sp, #0]
 8009ba8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009baa:	ec41 0b19 	vmov	d9, r0, r1
 8009bae:	4649      	mov	r1, r9
 8009bb0:	4640      	mov	r0, r8
 8009bb2:	f7f6 ffd9 	bl	8000b68 <__aeabi_d2iz>
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	f7f6 fcbc 	bl	8000534 <__aeabi_i2d>
 8009bbc:	3630      	adds	r6, #48	; 0x30
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	f7f6 fb67 	bl	8000298 <__aeabi_dsub>
 8009bca:	f805 6b01 	strb.w	r6, [r5], #1
 8009bce:	9b02      	ldr	r3, [sp, #8]
 8009bd0:	429d      	cmp	r5, r3
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	4689      	mov	r9, r1
 8009bd6:	f04f 0200 	mov.w	r2, #0
 8009bda:	d124      	bne.n	8009c26 <_dtoa_r+0x62e>
 8009bdc:	4b1b      	ldr	r3, [pc, #108]	; (8009c4c <_dtoa_r+0x654>)
 8009bde:	ec51 0b19 	vmov	r0, r1, d9
 8009be2:	f7f6 fb5b 	bl	800029c <__adddf3>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4640      	mov	r0, r8
 8009bec:	4649      	mov	r1, r9
 8009bee:	f7f6 ff9b 	bl	8000b28 <__aeabi_dcmpgt>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d173      	bne.n	8009cde <_dtoa_r+0x6e6>
 8009bf6:	ec53 2b19 	vmov	r2, r3, d9
 8009bfa:	4914      	ldr	r1, [pc, #80]	; (8009c4c <_dtoa_r+0x654>)
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	f7f6 fb4b 	bl	8000298 <__aeabi_dsub>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4640      	mov	r0, r8
 8009c08:	4649      	mov	r1, r9
 8009c0a:	f7f6 ff6f 	bl	8000aec <__aeabi_dcmplt>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f43f af2f 	beq.w	8009a72 <_dtoa_r+0x47a>
 8009c14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c16:	1e6b      	subs	r3, r5, #1
 8009c18:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c1e:	2b30      	cmp	r3, #48	; 0x30
 8009c20:	d0f8      	beq.n	8009c14 <_dtoa_r+0x61c>
 8009c22:	46bb      	mov	fp, r7
 8009c24:	e04a      	b.n	8009cbc <_dtoa_r+0x6c4>
 8009c26:	4b06      	ldr	r3, [pc, #24]	; (8009c40 <_dtoa_r+0x648>)
 8009c28:	f7f6 fcee 	bl	8000608 <__aeabi_dmul>
 8009c2c:	4680      	mov	r8, r0
 8009c2e:	4689      	mov	r9, r1
 8009c30:	e7bd      	b.n	8009bae <_dtoa_r+0x5b6>
 8009c32:	bf00      	nop
 8009c34:	0800b4a0 	.word	0x0800b4a0
 8009c38:	0800b478 	.word	0x0800b478
 8009c3c:	3ff00000 	.word	0x3ff00000
 8009c40:	40240000 	.word	0x40240000
 8009c44:	401c0000 	.word	0x401c0000
 8009c48:	40140000 	.word	0x40140000
 8009c4c:	3fe00000 	.word	0x3fe00000
 8009c50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c54:	9d00      	ldr	r5, [sp, #0]
 8009c56:	4642      	mov	r2, r8
 8009c58:	464b      	mov	r3, r9
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	4639      	mov	r1, r7
 8009c5e:	f7f6 fdfd 	bl	800085c <__aeabi_ddiv>
 8009c62:	f7f6 ff81 	bl	8000b68 <__aeabi_d2iz>
 8009c66:	9001      	str	r0, [sp, #4]
 8009c68:	f7f6 fc64 	bl	8000534 <__aeabi_i2d>
 8009c6c:	4642      	mov	r2, r8
 8009c6e:	464b      	mov	r3, r9
 8009c70:	f7f6 fcca 	bl	8000608 <__aeabi_dmul>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	4630      	mov	r0, r6
 8009c7a:	4639      	mov	r1, r7
 8009c7c:	f7f6 fb0c 	bl	8000298 <__aeabi_dsub>
 8009c80:	9e01      	ldr	r6, [sp, #4]
 8009c82:	9f04      	ldr	r7, [sp, #16]
 8009c84:	3630      	adds	r6, #48	; 0x30
 8009c86:	f805 6b01 	strb.w	r6, [r5], #1
 8009c8a:	9e00      	ldr	r6, [sp, #0]
 8009c8c:	1bae      	subs	r6, r5, r6
 8009c8e:	42b7      	cmp	r7, r6
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	d134      	bne.n	8009d00 <_dtoa_r+0x708>
 8009c96:	f7f6 fb01 	bl	800029c <__adddf3>
 8009c9a:	4642      	mov	r2, r8
 8009c9c:	464b      	mov	r3, r9
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	460f      	mov	r7, r1
 8009ca2:	f7f6 ff41 	bl	8000b28 <__aeabi_dcmpgt>
 8009ca6:	b9c8      	cbnz	r0, 8009cdc <_dtoa_r+0x6e4>
 8009ca8:	4642      	mov	r2, r8
 8009caa:	464b      	mov	r3, r9
 8009cac:	4630      	mov	r0, r6
 8009cae:	4639      	mov	r1, r7
 8009cb0:	f7f6 ff12 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cb4:	b110      	cbz	r0, 8009cbc <_dtoa_r+0x6c4>
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	07db      	lsls	r3, r3, #31
 8009cba:	d40f      	bmi.n	8009cdc <_dtoa_r+0x6e4>
 8009cbc:	4651      	mov	r1, sl
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f000 fbcc 	bl	800a45c <_Bfree>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cc8:	702b      	strb	r3, [r5, #0]
 8009cca:	f10b 0301 	add.w	r3, fp, #1
 8009cce:	6013      	str	r3, [r2, #0]
 8009cd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f43f ace2 	beq.w	800969c <_dtoa_r+0xa4>
 8009cd8:	601d      	str	r5, [r3, #0]
 8009cda:	e4df      	b.n	800969c <_dtoa_r+0xa4>
 8009cdc:	465f      	mov	r7, fp
 8009cde:	462b      	mov	r3, r5
 8009ce0:	461d      	mov	r5, r3
 8009ce2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ce6:	2a39      	cmp	r2, #57	; 0x39
 8009ce8:	d106      	bne.n	8009cf8 <_dtoa_r+0x700>
 8009cea:	9a00      	ldr	r2, [sp, #0]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d1f7      	bne.n	8009ce0 <_dtoa_r+0x6e8>
 8009cf0:	9900      	ldr	r1, [sp, #0]
 8009cf2:	2230      	movs	r2, #48	; 0x30
 8009cf4:	3701      	adds	r7, #1
 8009cf6:	700a      	strb	r2, [r1, #0]
 8009cf8:	781a      	ldrb	r2, [r3, #0]
 8009cfa:	3201      	adds	r2, #1
 8009cfc:	701a      	strb	r2, [r3, #0]
 8009cfe:	e790      	b.n	8009c22 <_dtoa_r+0x62a>
 8009d00:	4ba3      	ldr	r3, [pc, #652]	; (8009f90 <_dtoa_r+0x998>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	f7f6 fc80 	bl	8000608 <__aeabi_dmul>
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	460f      	mov	r7, r1
 8009d10:	f7f6 fee2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d09e      	beq.n	8009c56 <_dtoa_r+0x65e>
 8009d18:	e7d0      	b.n	8009cbc <_dtoa_r+0x6c4>
 8009d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d1c:	2a00      	cmp	r2, #0
 8009d1e:	f000 80ca 	beq.w	8009eb6 <_dtoa_r+0x8be>
 8009d22:	9a07      	ldr	r2, [sp, #28]
 8009d24:	2a01      	cmp	r2, #1
 8009d26:	f300 80ad 	bgt.w	8009e84 <_dtoa_r+0x88c>
 8009d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d2c:	2a00      	cmp	r2, #0
 8009d2e:	f000 80a5 	beq.w	8009e7c <_dtoa_r+0x884>
 8009d32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d36:	9e08      	ldr	r6, [sp, #32]
 8009d38:	9d05      	ldr	r5, [sp, #20]
 8009d3a:	9a05      	ldr	r2, [sp, #20]
 8009d3c:	441a      	add	r2, r3
 8009d3e:	9205      	str	r2, [sp, #20]
 8009d40:	9a06      	ldr	r2, [sp, #24]
 8009d42:	2101      	movs	r1, #1
 8009d44:	441a      	add	r2, r3
 8009d46:	4620      	mov	r0, r4
 8009d48:	9206      	str	r2, [sp, #24]
 8009d4a:	f000 fc3d 	bl	800a5c8 <__i2b>
 8009d4e:	4607      	mov	r7, r0
 8009d50:	b165      	cbz	r5, 8009d6c <_dtoa_r+0x774>
 8009d52:	9b06      	ldr	r3, [sp, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	dd09      	ble.n	8009d6c <_dtoa_r+0x774>
 8009d58:	42ab      	cmp	r3, r5
 8009d5a:	9a05      	ldr	r2, [sp, #20]
 8009d5c:	bfa8      	it	ge
 8009d5e:	462b      	movge	r3, r5
 8009d60:	1ad2      	subs	r2, r2, r3
 8009d62:	9205      	str	r2, [sp, #20]
 8009d64:	9a06      	ldr	r2, [sp, #24]
 8009d66:	1aed      	subs	r5, r5, r3
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	9306      	str	r3, [sp, #24]
 8009d6c:	9b08      	ldr	r3, [sp, #32]
 8009d6e:	b1f3      	cbz	r3, 8009dae <_dtoa_r+0x7b6>
 8009d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f000 80a3 	beq.w	8009ebe <_dtoa_r+0x8c6>
 8009d78:	2e00      	cmp	r6, #0
 8009d7a:	dd10      	ble.n	8009d9e <_dtoa_r+0x7a6>
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	4632      	mov	r2, r6
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 fce1 	bl	800a748 <__pow5mult>
 8009d86:	4652      	mov	r2, sl
 8009d88:	4601      	mov	r1, r0
 8009d8a:	4607      	mov	r7, r0
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f000 fc31 	bl	800a5f4 <__multiply>
 8009d92:	4651      	mov	r1, sl
 8009d94:	4680      	mov	r8, r0
 8009d96:	4620      	mov	r0, r4
 8009d98:	f000 fb60 	bl	800a45c <_Bfree>
 8009d9c:	46c2      	mov	sl, r8
 8009d9e:	9b08      	ldr	r3, [sp, #32]
 8009da0:	1b9a      	subs	r2, r3, r6
 8009da2:	d004      	beq.n	8009dae <_dtoa_r+0x7b6>
 8009da4:	4651      	mov	r1, sl
 8009da6:	4620      	mov	r0, r4
 8009da8:	f000 fcce 	bl	800a748 <__pow5mult>
 8009dac:	4682      	mov	sl, r0
 8009dae:	2101      	movs	r1, #1
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 fc09 	bl	800a5c8 <__i2b>
 8009db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	4606      	mov	r6, r0
 8009dbc:	f340 8081 	ble.w	8009ec2 <_dtoa_r+0x8ca>
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 fcbf 	bl	800a748 <__pow5mult>
 8009dca:	9b07      	ldr	r3, [sp, #28]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	4606      	mov	r6, r0
 8009dd0:	dd7a      	ble.n	8009ec8 <_dtoa_r+0x8d0>
 8009dd2:	f04f 0800 	mov.w	r8, #0
 8009dd6:	6933      	ldr	r3, [r6, #16]
 8009dd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ddc:	6918      	ldr	r0, [r3, #16]
 8009dde:	f000 fba5 	bl	800a52c <__hi0bits>
 8009de2:	f1c0 0020 	rsb	r0, r0, #32
 8009de6:	9b06      	ldr	r3, [sp, #24]
 8009de8:	4418      	add	r0, r3
 8009dea:	f010 001f 	ands.w	r0, r0, #31
 8009dee:	f000 8094 	beq.w	8009f1a <_dtoa_r+0x922>
 8009df2:	f1c0 0320 	rsb	r3, r0, #32
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	f340 8085 	ble.w	8009f06 <_dtoa_r+0x90e>
 8009dfc:	9b05      	ldr	r3, [sp, #20]
 8009dfe:	f1c0 001c 	rsb	r0, r0, #28
 8009e02:	4403      	add	r3, r0
 8009e04:	9305      	str	r3, [sp, #20]
 8009e06:	9b06      	ldr	r3, [sp, #24]
 8009e08:	4403      	add	r3, r0
 8009e0a:	4405      	add	r5, r0
 8009e0c:	9306      	str	r3, [sp, #24]
 8009e0e:	9b05      	ldr	r3, [sp, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	dd05      	ble.n	8009e20 <_dtoa_r+0x828>
 8009e14:	4651      	mov	r1, sl
 8009e16:	461a      	mov	r2, r3
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f000 fcef 	bl	800a7fc <__lshift>
 8009e1e:	4682      	mov	sl, r0
 8009e20:	9b06      	ldr	r3, [sp, #24]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	dd05      	ble.n	8009e32 <_dtoa_r+0x83a>
 8009e26:	4631      	mov	r1, r6
 8009e28:	461a      	mov	r2, r3
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f000 fce6 	bl	800a7fc <__lshift>
 8009e30:	4606      	mov	r6, r0
 8009e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d072      	beq.n	8009f1e <_dtoa_r+0x926>
 8009e38:	4631      	mov	r1, r6
 8009e3a:	4650      	mov	r0, sl
 8009e3c:	f000 fd4a 	bl	800a8d4 <__mcmp>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	da6c      	bge.n	8009f1e <_dtoa_r+0x926>
 8009e44:	2300      	movs	r3, #0
 8009e46:	4651      	mov	r1, sl
 8009e48:	220a      	movs	r2, #10
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 fb28 	bl	800a4a0 <__multadd>
 8009e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e56:	4682      	mov	sl, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 81b0 	beq.w	800a1be <_dtoa_r+0xbc6>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4639      	mov	r1, r7
 8009e62:	220a      	movs	r2, #10
 8009e64:	4620      	mov	r0, r4
 8009e66:	f000 fb1b 	bl	800a4a0 <__multadd>
 8009e6a:	9b01      	ldr	r3, [sp, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	4607      	mov	r7, r0
 8009e70:	f300 8096 	bgt.w	8009fa0 <_dtoa_r+0x9a8>
 8009e74:	9b07      	ldr	r3, [sp, #28]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	dc59      	bgt.n	8009f2e <_dtoa_r+0x936>
 8009e7a:	e091      	b.n	8009fa0 <_dtoa_r+0x9a8>
 8009e7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e82:	e758      	b.n	8009d36 <_dtoa_r+0x73e>
 8009e84:	9b04      	ldr	r3, [sp, #16]
 8009e86:	1e5e      	subs	r6, r3, #1
 8009e88:	9b08      	ldr	r3, [sp, #32]
 8009e8a:	42b3      	cmp	r3, r6
 8009e8c:	bfbf      	itttt	lt
 8009e8e:	9b08      	ldrlt	r3, [sp, #32]
 8009e90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009e92:	9608      	strlt	r6, [sp, #32]
 8009e94:	1af3      	sublt	r3, r6, r3
 8009e96:	bfb4      	ite	lt
 8009e98:	18d2      	addlt	r2, r2, r3
 8009e9a:	1b9e      	subge	r6, r3, r6
 8009e9c:	9b04      	ldr	r3, [sp, #16]
 8009e9e:	bfbc      	itt	lt
 8009ea0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009ea2:	2600      	movlt	r6, #0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	bfb7      	itett	lt
 8009ea8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009eac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009eb0:	1a9d      	sublt	r5, r3, r2
 8009eb2:	2300      	movlt	r3, #0
 8009eb4:	e741      	b.n	8009d3a <_dtoa_r+0x742>
 8009eb6:	9e08      	ldr	r6, [sp, #32]
 8009eb8:	9d05      	ldr	r5, [sp, #20]
 8009eba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ebc:	e748      	b.n	8009d50 <_dtoa_r+0x758>
 8009ebe:	9a08      	ldr	r2, [sp, #32]
 8009ec0:	e770      	b.n	8009da4 <_dtoa_r+0x7ac>
 8009ec2:	9b07      	ldr	r3, [sp, #28]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	dc19      	bgt.n	8009efc <_dtoa_r+0x904>
 8009ec8:	9b02      	ldr	r3, [sp, #8]
 8009eca:	b9bb      	cbnz	r3, 8009efc <_dtoa_r+0x904>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ed2:	b99b      	cbnz	r3, 8009efc <_dtoa_r+0x904>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009eda:	0d1b      	lsrs	r3, r3, #20
 8009edc:	051b      	lsls	r3, r3, #20
 8009ede:	b183      	cbz	r3, 8009f02 <_dtoa_r+0x90a>
 8009ee0:	9b05      	ldr	r3, [sp, #20]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	9305      	str	r3, [sp, #20]
 8009ee6:	9b06      	ldr	r3, [sp, #24]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	9306      	str	r3, [sp, #24]
 8009eec:	f04f 0801 	mov.w	r8, #1
 8009ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f47f af6f 	bne.w	8009dd6 <_dtoa_r+0x7de>
 8009ef8:	2001      	movs	r0, #1
 8009efa:	e774      	b.n	8009de6 <_dtoa_r+0x7ee>
 8009efc:	f04f 0800 	mov.w	r8, #0
 8009f00:	e7f6      	b.n	8009ef0 <_dtoa_r+0x8f8>
 8009f02:	4698      	mov	r8, r3
 8009f04:	e7f4      	b.n	8009ef0 <_dtoa_r+0x8f8>
 8009f06:	d082      	beq.n	8009e0e <_dtoa_r+0x816>
 8009f08:	9a05      	ldr	r2, [sp, #20]
 8009f0a:	331c      	adds	r3, #28
 8009f0c:	441a      	add	r2, r3
 8009f0e:	9205      	str	r2, [sp, #20]
 8009f10:	9a06      	ldr	r2, [sp, #24]
 8009f12:	441a      	add	r2, r3
 8009f14:	441d      	add	r5, r3
 8009f16:	9206      	str	r2, [sp, #24]
 8009f18:	e779      	b.n	8009e0e <_dtoa_r+0x816>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	e7f4      	b.n	8009f08 <_dtoa_r+0x910>
 8009f1e:	9b04      	ldr	r3, [sp, #16]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	dc37      	bgt.n	8009f94 <_dtoa_r+0x99c>
 8009f24:	9b07      	ldr	r3, [sp, #28]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	dd34      	ble.n	8009f94 <_dtoa_r+0x99c>
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	9301      	str	r3, [sp, #4]
 8009f2e:	9b01      	ldr	r3, [sp, #4]
 8009f30:	b963      	cbnz	r3, 8009f4c <_dtoa_r+0x954>
 8009f32:	4631      	mov	r1, r6
 8009f34:	2205      	movs	r2, #5
 8009f36:	4620      	mov	r0, r4
 8009f38:	f000 fab2 	bl	800a4a0 <__multadd>
 8009f3c:	4601      	mov	r1, r0
 8009f3e:	4606      	mov	r6, r0
 8009f40:	4650      	mov	r0, sl
 8009f42:	f000 fcc7 	bl	800a8d4 <__mcmp>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f73f adbb 	bgt.w	8009ac2 <_dtoa_r+0x4ca>
 8009f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f4e:	9d00      	ldr	r5, [sp, #0]
 8009f50:	ea6f 0b03 	mvn.w	fp, r3
 8009f54:	f04f 0800 	mov.w	r8, #0
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 fa7e 	bl	800a45c <_Bfree>
 8009f60:	2f00      	cmp	r7, #0
 8009f62:	f43f aeab 	beq.w	8009cbc <_dtoa_r+0x6c4>
 8009f66:	f1b8 0f00 	cmp.w	r8, #0
 8009f6a:	d005      	beq.n	8009f78 <_dtoa_r+0x980>
 8009f6c:	45b8      	cmp	r8, r7
 8009f6e:	d003      	beq.n	8009f78 <_dtoa_r+0x980>
 8009f70:	4641      	mov	r1, r8
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 fa72 	bl	800a45c <_Bfree>
 8009f78:	4639      	mov	r1, r7
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 fa6e 	bl	800a45c <_Bfree>
 8009f80:	e69c      	b.n	8009cbc <_dtoa_r+0x6c4>
 8009f82:	2600      	movs	r6, #0
 8009f84:	4637      	mov	r7, r6
 8009f86:	e7e1      	b.n	8009f4c <_dtoa_r+0x954>
 8009f88:	46bb      	mov	fp, r7
 8009f8a:	4637      	mov	r7, r6
 8009f8c:	e599      	b.n	8009ac2 <_dtoa_r+0x4ca>
 8009f8e:	bf00      	nop
 8009f90:	40240000 	.word	0x40240000
 8009f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 80c8 	beq.w	800a12c <_dtoa_r+0xb34>
 8009f9c:	9b04      	ldr	r3, [sp, #16]
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	dd05      	ble.n	8009fb0 <_dtoa_r+0x9b8>
 8009fa4:	4639      	mov	r1, r7
 8009fa6:	462a      	mov	r2, r5
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f000 fc27 	bl	800a7fc <__lshift>
 8009fae:	4607      	mov	r7, r0
 8009fb0:	f1b8 0f00 	cmp.w	r8, #0
 8009fb4:	d05b      	beq.n	800a06e <_dtoa_r+0xa76>
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f000 fa0f 	bl	800a3dc <_Balloc>
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	b928      	cbnz	r0, 8009fce <_dtoa_r+0x9d6>
 8009fc2:	4b83      	ldr	r3, [pc, #524]	; (800a1d0 <_dtoa_r+0xbd8>)
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009fca:	f7ff bb2e 	b.w	800962a <_dtoa_r+0x32>
 8009fce:	693a      	ldr	r2, [r7, #16]
 8009fd0:	3202      	adds	r2, #2
 8009fd2:	0092      	lsls	r2, r2, #2
 8009fd4:	f107 010c 	add.w	r1, r7, #12
 8009fd8:	300c      	adds	r0, #12
 8009fda:	f7ff fa74 	bl	80094c6 <memcpy>
 8009fde:	2201      	movs	r2, #1
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 fc0a 	bl	800a7fc <__lshift>
 8009fe8:	9b00      	ldr	r3, [sp, #0]
 8009fea:	3301      	adds	r3, #1
 8009fec:	9304      	str	r3, [sp, #16]
 8009fee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	9308      	str	r3, [sp, #32]
 8009ff6:	9b02      	ldr	r3, [sp, #8]
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	46b8      	mov	r8, r7
 8009ffe:	9306      	str	r3, [sp, #24]
 800a000:	4607      	mov	r7, r0
 800a002:	9b04      	ldr	r3, [sp, #16]
 800a004:	4631      	mov	r1, r6
 800a006:	3b01      	subs	r3, #1
 800a008:	4650      	mov	r0, sl
 800a00a:	9301      	str	r3, [sp, #4]
 800a00c:	f7ff fa69 	bl	80094e2 <quorem>
 800a010:	4641      	mov	r1, r8
 800a012:	9002      	str	r0, [sp, #8]
 800a014:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a018:	4650      	mov	r0, sl
 800a01a:	f000 fc5b 	bl	800a8d4 <__mcmp>
 800a01e:	463a      	mov	r2, r7
 800a020:	9005      	str	r0, [sp, #20]
 800a022:	4631      	mov	r1, r6
 800a024:	4620      	mov	r0, r4
 800a026:	f000 fc71 	bl	800a90c <__mdiff>
 800a02a:	68c2      	ldr	r2, [r0, #12]
 800a02c:	4605      	mov	r5, r0
 800a02e:	bb02      	cbnz	r2, 800a072 <_dtoa_r+0xa7a>
 800a030:	4601      	mov	r1, r0
 800a032:	4650      	mov	r0, sl
 800a034:	f000 fc4e 	bl	800a8d4 <__mcmp>
 800a038:	4602      	mov	r2, r0
 800a03a:	4629      	mov	r1, r5
 800a03c:	4620      	mov	r0, r4
 800a03e:	9209      	str	r2, [sp, #36]	; 0x24
 800a040:	f000 fa0c 	bl	800a45c <_Bfree>
 800a044:	9b07      	ldr	r3, [sp, #28]
 800a046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a048:	9d04      	ldr	r5, [sp, #16]
 800a04a:	ea43 0102 	orr.w	r1, r3, r2
 800a04e:	9b06      	ldr	r3, [sp, #24]
 800a050:	4319      	orrs	r1, r3
 800a052:	d110      	bne.n	800a076 <_dtoa_r+0xa7e>
 800a054:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a058:	d029      	beq.n	800a0ae <_dtoa_r+0xab6>
 800a05a:	9b05      	ldr	r3, [sp, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	dd02      	ble.n	800a066 <_dtoa_r+0xa6e>
 800a060:	9b02      	ldr	r3, [sp, #8]
 800a062:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	f883 9000 	strb.w	r9, [r3]
 800a06c:	e774      	b.n	8009f58 <_dtoa_r+0x960>
 800a06e:	4638      	mov	r0, r7
 800a070:	e7ba      	b.n	8009fe8 <_dtoa_r+0x9f0>
 800a072:	2201      	movs	r2, #1
 800a074:	e7e1      	b.n	800a03a <_dtoa_r+0xa42>
 800a076:	9b05      	ldr	r3, [sp, #20]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	db04      	blt.n	800a086 <_dtoa_r+0xa8e>
 800a07c:	9907      	ldr	r1, [sp, #28]
 800a07e:	430b      	orrs	r3, r1
 800a080:	9906      	ldr	r1, [sp, #24]
 800a082:	430b      	orrs	r3, r1
 800a084:	d120      	bne.n	800a0c8 <_dtoa_r+0xad0>
 800a086:	2a00      	cmp	r2, #0
 800a088:	dded      	ble.n	800a066 <_dtoa_r+0xa6e>
 800a08a:	4651      	mov	r1, sl
 800a08c:	2201      	movs	r2, #1
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 fbb4 	bl	800a7fc <__lshift>
 800a094:	4631      	mov	r1, r6
 800a096:	4682      	mov	sl, r0
 800a098:	f000 fc1c 	bl	800a8d4 <__mcmp>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	dc03      	bgt.n	800a0a8 <_dtoa_r+0xab0>
 800a0a0:	d1e1      	bne.n	800a066 <_dtoa_r+0xa6e>
 800a0a2:	f019 0f01 	tst.w	r9, #1
 800a0a6:	d0de      	beq.n	800a066 <_dtoa_r+0xa6e>
 800a0a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0ac:	d1d8      	bne.n	800a060 <_dtoa_r+0xa68>
 800a0ae:	9a01      	ldr	r2, [sp, #4]
 800a0b0:	2339      	movs	r3, #57	; 0x39
 800a0b2:	7013      	strb	r3, [r2, #0]
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	461d      	mov	r5, r3
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a0be:	2a39      	cmp	r2, #57	; 0x39
 800a0c0:	d06c      	beq.n	800a19c <_dtoa_r+0xba4>
 800a0c2:	3201      	adds	r2, #1
 800a0c4:	701a      	strb	r2, [r3, #0]
 800a0c6:	e747      	b.n	8009f58 <_dtoa_r+0x960>
 800a0c8:	2a00      	cmp	r2, #0
 800a0ca:	dd07      	ble.n	800a0dc <_dtoa_r+0xae4>
 800a0cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0d0:	d0ed      	beq.n	800a0ae <_dtoa_r+0xab6>
 800a0d2:	9a01      	ldr	r2, [sp, #4]
 800a0d4:	f109 0301 	add.w	r3, r9, #1
 800a0d8:	7013      	strb	r3, [r2, #0]
 800a0da:	e73d      	b.n	8009f58 <_dtoa_r+0x960>
 800a0dc:	9b04      	ldr	r3, [sp, #16]
 800a0de:	9a08      	ldr	r2, [sp, #32]
 800a0e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d043      	beq.n	800a170 <_dtoa_r+0xb78>
 800a0e8:	4651      	mov	r1, sl
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	220a      	movs	r2, #10
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 f9d6 	bl	800a4a0 <__multadd>
 800a0f4:	45b8      	cmp	r8, r7
 800a0f6:	4682      	mov	sl, r0
 800a0f8:	f04f 0300 	mov.w	r3, #0
 800a0fc:	f04f 020a 	mov.w	r2, #10
 800a100:	4641      	mov	r1, r8
 800a102:	4620      	mov	r0, r4
 800a104:	d107      	bne.n	800a116 <_dtoa_r+0xb1e>
 800a106:	f000 f9cb 	bl	800a4a0 <__multadd>
 800a10a:	4680      	mov	r8, r0
 800a10c:	4607      	mov	r7, r0
 800a10e:	9b04      	ldr	r3, [sp, #16]
 800a110:	3301      	adds	r3, #1
 800a112:	9304      	str	r3, [sp, #16]
 800a114:	e775      	b.n	800a002 <_dtoa_r+0xa0a>
 800a116:	f000 f9c3 	bl	800a4a0 <__multadd>
 800a11a:	4639      	mov	r1, r7
 800a11c:	4680      	mov	r8, r0
 800a11e:	2300      	movs	r3, #0
 800a120:	220a      	movs	r2, #10
 800a122:	4620      	mov	r0, r4
 800a124:	f000 f9bc 	bl	800a4a0 <__multadd>
 800a128:	4607      	mov	r7, r0
 800a12a:	e7f0      	b.n	800a10e <_dtoa_r+0xb16>
 800a12c:	9b04      	ldr	r3, [sp, #16]
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	9d00      	ldr	r5, [sp, #0]
 800a132:	4631      	mov	r1, r6
 800a134:	4650      	mov	r0, sl
 800a136:	f7ff f9d4 	bl	80094e2 <quorem>
 800a13a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a13e:	9b00      	ldr	r3, [sp, #0]
 800a140:	f805 9b01 	strb.w	r9, [r5], #1
 800a144:	1aea      	subs	r2, r5, r3
 800a146:	9b01      	ldr	r3, [sp, #4]
 800a148:	4293      	cmp	r3, r2
 800a14a:	dd07      	ble.n	800a15c <_dtoa_r+0xb64>
 800a14c:	4651      	mov	r1, sl
 800a14e:	2300      	movs	r3, #0
 800a150:	220a      	movs	r2, #10
 800a152:	4620      	mov	r0, r4
 800a154:	f000 f9a4 	bl	800a4a0 <__multadd>
 800a158:	4682      	mov	sl, r0
 800a15a:	e7ea      	b.n	800a132 <_dtoa_r+0xb3a>
 800a15c:	9b01      	ldr	r3, [sp, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bfc8      	it	gt
 800a162:	461d      	movgt	r5, r3
 800a164:	9b00      	ldr	r3, [sp, #0]
 800a166:	bfd8      	it	le
 800a168:	2501      	movle	r5, #1
 800a16a:	441d      	add	r5, r3
 800a16c:	f04f 0800 	mov.w	r8, #0
 800a170:	4651      	mov	r1, sl
 800a172:	2201      	movs	r2, #1
 800a174:	4620      	mov	r0, r4
 800a176:	f000 fb41 	bl	800a7fc <__lshift>
 800a17a:	4631      	mov	r1, r6
 800a17c:	4682      	mov	sl, r0
 800a17e:	f000 fba9 	bl	800a8d4 <__mcmp>
 800a182:	2800      	cmp	r0, #0
 800a184:	dc96      	bgt.n	800a0b4 <_dtoa_r+0xabc>
 800a186:	d102      	bne.n	800a18e <_dtoa_r+0xb96>
 800a188:	f019 0f01 	tst.w	r9, #1
 800a18c:	d192      	bne.n	800a0b4 <_dtoa_r+0xabc>
 800a18e:	462b      	mov	r3, r5
 800a190:	461d      	mov	r5, r3
 800a192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a196:	2a30      	cmp	r2, #48	; 0x30
 800a198:	d0fa      	beq.n	800a190 <_dtoa_r+0xb98>
 800a19a:	e6dd      	b.n	8009f58 <_dtoa_r+0x960>
 800a19c:	9a00      	ldr	r2, [sp, #0]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d189      	bne.n	800a0b6 <_dtoa_r+0xabe>
 800a1a2:	f10b 0b01 	add.w	fp, fp, #1
 800a1a6:	2331      	movs	r3, #49	; 0x31
 800a1a8:	e796      	b.n	800a0d8 <_dtoa_r+0xae0>
 800a1aa:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <_dtoa_r+0xbdc>)
 800a1ac:	f7ff ba99 	b.w	80096e2 <_dtoa_r+0xea>
 800a1b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f47f aa6d 	bne.w	8009692 <_dtoa_r+0x9a>
 800a1b8:	4b07      	ldr	r3, [pc, #28]	; (800a1d8 <_dtoa_r+0xbe0>)
 800a1ba:	f7ff ba92 	b.w	80096e2 <_dtoa_r+0xea>
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	dcb5      	bgt.n	800a130 <_dtoa_r+0xb38>
 800a1c4:	9b07      	ldr	r3, [sp, #28]
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	f73f aeb1 	bgt.w	8009f2e <_dtoa_r+0x936>
 800a1cc:	e7b0      	b.n	800a130 <_dtoa_r+0xb38>
 800a1ce:	bf00      	nop
 800a1d0:	0800b40c 	.word	0x0800b40c
 800a1d4:	0800b36c 	.word	0x0800b36c
 800a1d8:	0800b390 	.word	0x0800b390

0800a1dc <_free_r>:
 800a1dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1de:	2900      	cmp	r1, #0
 800a1e0:	d044      	beq.n	800a26c <_free_r+0x90>
 800a1e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1e6:	9001      	str	r0, [sp, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a1ee:	bfb8      	it	lt
 800a1f0:	18e4      	addlt	r4, r4, r3
 800a1f2:	f000 f8e7 	bl	800a3c4 <__malloc_lock>
 800a1f6:	4a1e      	ldr	r2, [pc, #120]	; (800a270 <_free_r+0x94>)
 800a1f8:	9801      	ldr	r0, [sp, #4]
 800a1fa:	6813      	ldr	r3, [r2, #0]
 800a1fc:	b933      	cbnz	r3, 800a20c <_free_r+0x30>
 800a1fe:	6063      	str	r3, [r4, #4]
 800a200:	6014      	str	r4, [r2, #0]
 800a202:	b003      	add	sp, #12
 800a204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a208:	f000 b8e2 	b.w	800a3d0 <__malloc_unlock>
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	d908      	bls.n	800a222 <_free_r+0x46>
 800a210:	6825      	ldr	r5, [r4, #0]
 800a212:	1961      	adds	r1, r4, r5
 800a214:	428b      	cmp	r3, r1
 800a216:	bf01      	itttt	eq
 800a218:	6819      	ldreq	r1, [r3, #0]
 800a21a:	685b      	ldreq	r3, [r3, #4]
 800a21c:	1949      	addeq	r1, r1, r5
 800a21e:	6021      	streq	r1, [r4, #0]
 800a220:	e7ed      	b.n	800a1fe <_free_r+0x22>
 800a222:	461a      	mov	r2, r3
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	b10b      	cbz	r3, 800a22c <_free_r+0x50>
 800a228:	42a3      	cmp	r3, r4
 800a22a:	d9fa      	bls.n	800a222 <_free_r+0x46>
 800a22c:	6811      	ldr	r1, [r2, #0]
 800a22e:	1855      	adds	r5, r2, r1
 800a230:	42a5      	cmp	r5, r4
 800a232:	d10b      	bne.n	800a24c <_free_r+0x70>
 800a234:	6824      	ldr	r4, [r4, #0]
 800a236:	4421      	add	r1, r4
 800a238:	1854      	adds	r4, r2, r1
 800a23a:	42a3      	cmp	r3, r4
 800a23c:	6011      	str	r1, [r2, #0]
 800a23e:	d1e0      	bne.n	800a202 <_free_r+0x26>
 800a240:	681c      	ldr	r4, [r3, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	6053      	str	r3, [r2, #4]
 800a246:	440c      	add	r4, r1
 800a248:	6014      	str	r4, [r2, #0]
 800a24a:	e7da      	b.n	800a202 <_free_r+0x26>
 800a24c:	d902      	bls.n	800a254 <_free_r+0x78>
 800a24e:	230c      	movs	r3, #12
 800a250:	6003      	str	r3, [r0, #0]
 800a252:	e7d6      	b.n	800a202 <_free_r+0x26>
 800a254:	6825      	ldr	r5, [r4, #0]
 800a256:	1961      	adds	r1, r4, r5
 800a258:	428b      	cmp	r3, r1
 800a25a:	bf04      	itt	eq
 800a25c:	6819      	ldreq	r1, [r3, #0]
 800a25e:	685b      	ldreq	r3, [r3, #4]
 800a260:	6063      	str	r3, [r4, #4]
 800a262:	bf04      	itt	eq
 800a264:	1949      	addeq	r1, r1, r5
 800a266:	6021      	streq	r1, [r4, #0]
 800a268:	6054      	str	r4, [r2, #4]
 800a26a:	e7ca      	b.n	800a202 <_free_r+0x26>
 800a26c:	b003      	add	sp, #12
 800a26e:	bd30      	pop	{r4, r5, pc}
 800a270:	20004ffc 	.word	0x20004ffc

0800a274 <malloc>:
 800a274:	4b02      	ldr	r3, [pc, #8]	; (800a280 <malloc+0xc>)
 800a276:	4601      	mov	r1, r0
 800a278:	6818      	ldr	r0, [r3, #0]
 800a27a:	f000 b823 	b.w	800a2c4 <_malloc_r>
 800a27e:	bf00      	nop
 800a280:	20000088 	.word	0x20000088

0800a284 <sbrk_aligned>:
 800a284:	b570      	push	{r4, r5, r6, lr}
 800a286:	4e0e      	ldr	r6, [pc, #56]	; (800a2c0 <sbrk_aligned+0x3c>)
 800a288:	460c      	mov	r4, r1
 800a28a:	6831      	ldr	r1, [r6, #0]
 800a28c:	4605      	mov	r5, r0
 800a28e:	b911      	cbnz	r1, 800a296 <sbrk_aligned+0x12>
 800a290:	f000 fea8 	bl	800afe4 <_sbrk_r>
 800a294:	6030      	str	r0, [r6, #0]
 800a296:	4621      	mov	r1, r4
 800a298:	4628      	mov	r0, r5
 800a29a:	f000 fea3 	bl	800afe4 <_sbrk_r>
 800a29e:	1c43      	adds	r3, r0, #1
 800a2a0:	d00a      	beq.n	800a2b8 <sbrk_aligned+0x34>
 800a2a2:	1cc4      	adds	r4, r0, #3
 800a2a4:	f024 0403 	bic.w	r4, r4, #3
 800a2a8:	42a0      	cmp	r0, r4
 800a2aa:	d007      	beq.n	800a2bc <sbrk_aligned+0x38>
 800a2ac:	1a21      	subs	r1, r4, r0
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f000 fe98 	bl	800afe4 <_sbrk_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d101      	bne.n	800a2bc <sbrk_aligned+0x38>
 800a2b8:	f04f 34ff 	mov.w	r4, #4294967295
 800a2bc:	4620      	mov	r0, r4
 800a2be:	bd70      	pop	{r4, r5, r6, pc}
 800a2c0:	20005000 	.word	0x20005000

0800a2c4 <_malloc_r>:
 800a2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c8:	1ccd      	adds	r5, r1, #3
 800a2ca:	f025 0503 	bic.w	r5, r5, #3
 800a2ce:	3508      	adds	r5, #8
 800a2d0:	2d0c      	cmp	r5, #12
 800a2d2:	bf38      	it	cc
 800a2d4:	250c      	movcc	r5, #12
 800a2d6:	2d00      	cmp	r5, #0
 800a2d8:	4607      	mov	r7, r0
 800a2da:	db01      	blt.n	800a2e0 <_malloc_r+0x1c>
 800a2dc:	42a9      	cmp	r1, r5
 800a2de:	d905      	bls.n	800a2ec <_malloc_r+0x28>
 800a2e0:	230c      	movs	r3, #12
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	2600      	movs	r6, #0
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a3c0 <_malloc_r+0xfc>
 800a2f0:	f000 f868 	bl	800a3c4 <__malloc_lock>
 800a2f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2f8:	461c      	mov	r4, r3
 800a2fa:	bb5c      	cbnz	r4, 800a354 <_malloc_r+0x90>
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	4638      	mov	r0, r7
 800a300:	f7ff ffc0 	bl	800a284 <sbrk_aligned>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	4604      	mov	r4, r0
 800a308:	d155      	bne.n	800a3b6 <_malloc_r+0xf2>
 800a30a:	f8d8 4000 	ldr.w	r4, [r8]
 800a30e:	4626      	mov	r6, r4
 800a310:	2e00      	cmp	r6, #0
 800a312:	d145      	bne.n	800a3a0 <_malloc_r+0xdc>
 800a314:	2c00      	cmp	r4, #0
 800a316:	d048      	beq.n	800a3aa <_malloc_r+0xe6>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	4631      	mov	r1, r6
 800a31c:	4638      	mov	r0, r7
 800a31e:	eb04 0903 	add.w	r9, r4, r3
 800a322:	f000 fe5f 	bl	800afe4 <_sbrk_r>
 800a326:	4581      	cmp	r9, r0
 800a328:	d13f      	bne.n	800a3aa <_malloc_r+0xe6>
 800a32a:	6821      	ldr	r1, [r4, #0]
 800a32c:	1a6d      	subs	r5, r5, r1
 800a32e:	4629      	mov	r1, r5
 800a330:	4638      	mov	r0, r7
 800a332:	f7ff ffa7 	bl	800a284 <sbrk_aligned>
 800a336:	3001      	adds	r0, #1
 800a338:	d037      	beq.n	800a3aa <_malloc_r+0xe6>
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	442b      	add	r3, r5
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	f8d8 3000 	ldr.w	r3, [r8]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d038      	beq.n	800a3ba <_malloc_r+0xf6>
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	42a2      	cmp	r2, r4
 800a34c:	d12b      	bne.n	800a3a6 <_malloc_r+0xe2>
 800a34e:	2200      	movs	r2, #0
 800a350:	605a      	str	r2, [r3, #4]
 800a352:	e00f      	b.n	800a374 <_malloc_r+0xb0>
 800a354:	6822      	ldr	r2, [r4, #0]
 800a356:	1b52      	subs	r2, r2, r5
 800a358:	d41f      	bmi.n	800a39a <_malloc_r+0xd6>
 800a35a:	2a0b      	cmp	r2, #11
 800a35c:	d917      	bls.n	800a38e <_malloc_r+0xca>
 800a35e:	1961      	adds	r1, r4, r5
 800a360:	42a3      	cmp	r3, r4
 800a362:	6025      	str	r5, [r4, #0]
 800a364:	bf18      	it	ne
 800a366:	6059      	strne	r1, [r3, #4]
 800a368:	6863      	ldr	r3, [r4, #4]
 800a36a:	bf08      	it	eq
 800a36c:	f8c8 1000 	streq.w	r1, [r8]
 800a370:	5162      	str	r2, [r4, r5]
 800a372:	604b      	str	r3, [r1, #4]
 800a374:	4638      	mov	r0, r7
 800a376:	f104 060b 	add.w	r6, r4, #11
 800a37a:	f000 f829 	bl	800a3d0 <__malloc_unlock>
 800a37e:	f026 0607 	bic.w	r6, r6, #7
 800a382:	1d23      	adds	r3, r4, #4
 800a384:	1af2      	subs	r2, r6, r3
 800a386:	d0ae      	beq.n	800a2e6 <_malloc_r+0x22>
 800a388:	1b9b      	subs	r3, r3, r6
 800a38a:	50a3      	str	r3, [r4, r2]
 800a38c:	e7ab      	b.n	800a2e6 <_malloc_r+0x22>
 800a38e:	42a3      	cmp	r3, r4
 800a390:	6862      	ldr	r2, [r4, #4]
 800a392:	d1dd      	bne.n	800a350 <_malloc_r+0x8c>
 800a394:	f8c8 2000 	str.w	r2, [r8]
 800a398:	e7ec      	b.n	800a374 <_malloc_r+0xb0>
 800a39a:	4623      	mov	r3, r4
 800a39c:	6864      	ldr	r4, [r4, #4]
 800a39e:	e7ac      	b.n	800a2fa <_malloc_r+0x36>
 800a3a0:	4634      	mov	r4, r6
 800a3a2:	6876      	ldr	r6, [r6, #4]
 800a3a4:	e7b4      	b.n	800a310 <_malloc_r+0x4c>
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	e7cc      	b.n	800a344 <_malloc_r+0x80>
 800a3aa:	230c      	movs	r3, #12
 800a3ac:	603b      	str	r3, [r7, #0]
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	f000 f80e 	bl	800a3d0 <__malloc_unlock>
 800a3b4:	e797      	b.n	800a2e6 <_malloc_r+0x22>
 800a3b6:	6025      	str	r5, [r4, #0]
 800a3b8:	e7dc      	b.n	800a374 <_malloc_r+0xb0>
 800a3ba:	605b      	str	r3, [r3, #4]
 800a3bc:	deff      	udf	#255	; 0xff
 800a3be:	bf00      	nop
 800a3c0:	20004ffc 	.word	0x20004ffc

0800a3c4 <__malloc_lock>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	; (800a3cc <__malloc_lock+0x8>)
 800a3c6:	f7ff b87c 	b.w	80094c2 <__retarget_lock_acquire_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	20004ff8 	.word	0x20004ff8

0800a3d0 <__malloc_unlock>:
 800a3d0:	4801      	ldr	r0, [pc, #4]	; (800a3d8 <__malloc_unlock+0x8>)
 800a3d2:	f7ff b877 	b.w	80094c4 <__retarget_lock_release_recursive>
 800a3d6:	bf00      	nop
 800a3d8:	20004ff8 	.word	0x20004ff8

0800a3dc <_Balloc>:
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	69c6      	ldr	r6, [r0, #28]
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	460d      	mov	r5, r1
 800a3e4:	b976      	cbnz	r6, 800a404 <_Balloc+0x28>
 800a3e6:	2010      	movs	r0, #16
 800a3e8:	f7ff ff44 	bl	800a274 <malloc>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	61e0      	str	r0, [r4, #28]
 800a3f0:	b920      	cbnz	r0, 800a3fc <_Balloc+0x20>
 800a3f2:	4b18      	ldr	r3, [pc, #96]	; (800a454 <_Balloc+0x78>)
 800a3f4:	4818      	ldr	r0, [pc, #96]	; (800a458 <_Balloc+0x7c>)
 800a3f6:	216b      	movs	r1, #107	; 0x6b
 800a3f8:	f000 fe04 	bl	800b004 <__assert_func>
 800a3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a400:	6006      	str	r6, [r0, #0]
 800a402:	60c6      	str	r6, [r0, #12]
 800a404:	69e6      	ldr	r6, [r4, #28]
 800a406:	68f3      	ldr	r3, [r6, #12]
 800a408:	b183      	cbz	r3, 800a42c <_Balloc+0x50>
 800a40a:	69e3      	ldr	r3, [r4, #28]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a412:	b9b8      	cbnz	r0, 800a444 <_Balloc+0x68>
 800a414:	2101      	movs	r1, #1
 800a416:	fa01 f605 	lsl.w	r6, r1, r5
 800a41a:	1d72      	adds	r2, r6, #5
 800a41c:	0092      	lsls	r2, r2, #2
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 fe0e 	bl	800b040 <_calloc_r>
 800a424:	b160      	cbz	r0, 800a440 <_Balloc+0x64>
 800a426:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a42a:	e00e      	b.n	800a44a <_Balloc+0x6e>
 800a42c:	2221      	movs	r2, #33	; 0x21
 800a42e:	2104      	movs	r1, #4
 800a430:	4620      	mov	r0, r4
 800a432:	f000 fe05 	bl	800b040 <_calloc_r>
 800a436:	69e3      	ldr	r3, [r4, #28]
 800a438:	60f0      	str	r0, [r6, #12]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1e4      	bne.n	800a40a <_Balloc+0x2e>
 800a440:	2000      	movs	r0, #0
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	6802      	ldr	r2, [r0, #0]
 800a446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a44a:	2300      	movs	r3, #0
 800a44c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a450:	e7f7      	b.n	800a442 <_Balloc+0x66>
 800a452:	bf00      	nop
 800a454:	0800b39d 	.word	0x0800b39d
 800a458:	0800b41d 	.word	0x0800b41d

0800a45c <_Bfree>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	69c6      	ldr	r6, [r0, #28]
 800a460:	4605      	mov	r5, r0
 800a462:	460c      	mov	r4, r1
 800a464:	b976      	cbnz	r6, 800a484 <_Bfree+0x28>
 800a466:	2010      	movs	r0, #16
 800a468:	f7ff ff04 	bl	800a274 <malloc>
 800a46c:	4602      	mov	r2, r0
 800a46e:	61e8      	str	r0, [r5, #28]
 800a470:	b920      	cbnz	r0, 800a47c <_Bfree+0x20>
 800a472:	4b09      	ldr	r3, [pc, #36]	; (800a498 <_Bfree+0x3c>)
 800a474:	4809      	ldr	r0, [pc, #36]	; (800a49c <_Bfree+0x40>)
 800a476:	218f      	movs	r1, #143	; 0x8f
 800a478:	f000 fdc4 	bl	800b004 <__assert_func>
 800a47c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a480:	6006      	str	r6, [r0, #0]
 800a482:	60c6      	str	r6, [r0, #12]
 800a484:	b13c      	cbz	r4, 800a496 <_Bfree+0x3a>
 800a486:	69eb      	ldr	r3, [r5, #28]
 800a488:	6862      	ldr	r2, [r4, #4]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a490:	6021      	str	r1, [r4, #0]
 800a492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a496:	bd70      	pop	{r4, r5, r6, pc}
 800a498:	0800b39d 	.word	0x0800b39d
 800a49c:	0800b41d 	.word	0x0800b41d

0800a4a0 <__multadd>:
 800a4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a4:	690d      	ldr	r5, [r1, #16]
 800a4a6:	4607      	mov	r7, r0
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	461e      	mov	r6, r3
 800a4ac:	f101 0c14 	add.w	ip, r1, #20
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a4b6:	b299      	uxth	r1, r3
 800a4b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a4bc:	0c1e      	lsrs	r6, r3, #16
 800a4be:	0c0b      	lsrs	r3, r1, #16
 800a4c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a4c4:	b289      	uxth	r1, r1
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4cc:	4285      	cmp	r5, r0
 800a4ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a4d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4d6:	dcec      	bgt.n	800a4b2 <__multadd+0x12>
 800a4d8:	b30e      	cbz	r6, 800a51e <__multadd+0x7e>
 800a4da:	68a3      	ldr	r3, [r4, #8]
 800a4dc:	42ab      	cmp	r3, r5
 800a4de:	dc19      	bgt.n	800a514 <__multadd+0x74>
 800a4e0:	6861      	ldr	r1, [r4, #4]
 800a4e2:	4638      	mov	r0, r7
 800a4e4:	3101      	adds	r1, #1
 800a4e6:	f7ff ff79 	bl	800a3dc <_Balloc>
 800a4ea:	4680      	mov	r8, r0
 800a4ec:	b928      	cbnz	r0, 800a4fa <__multadd+0x5a>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <__multadd+0x84>)
 800a4f2:	480d      	ldr	r0, [pc, #52]	; (800a528 <__multadd+0x88>)
 800a4f4:	21ba      	movs	r1, #186	; 0xba
 800a4f6:	f000 fd85 	bl	800b004 <__assert_func>
 800a4fa:	6922      	ldr	r2, [r4, #16]
 800a4fc:	3202      	adds	r2, #2
 800a4fe:	f104 010c 	add.w	r1, r4, #12
 800a502:	0092      	lsls	r2, r2, #2
 800a504:	300c      	adds	r0, #12
 800a506:	f7fe ffde 	bl	80094c6 <memcpy>
 800a50a:	4621      	mov	r1, r4
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7ff ffa5 	bl	800a45c <_Bfree>
 800a512:	4644      	mov	r4, r8
 800a514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a518:	3501      	adds	r5, #1
 800a51a:	615e      	str	r6, [r3, #20]
 800a51c:	6125      	str	r5, [r4, #16]
 800a51e:	4620      	mov	r0, r4
 800a520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a524:	0800b40c 	.word	0x0800b40c
 800a528:	0800b41d 	.word	0x0800b41d

0800a52c <__hi0bits>:
 800a52c:	0c03      	lsrs	r3, r0, #16
 800a52e:	041b      	lsls	r3, r3, #16
 800a530:	b9d3      	cbnz	r3, 800a568 <__hi0bits+0x3c>
 800a532:	0400      	lsls	r0, r0, #16
 800a534:	2310      	movs	r3, #16
 800a536:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a53a:	bf04      	itt	eq
 800a53c:	0200      	lsleq	r0, r0, #8
 800a53e:	3308      	addeq	r3, #8
 800a540:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a544:	bf04      	itt	eq
 800a546:	0100      	lsleq	r0, r0, #4
 800a548:	3304      	addeq	r3, #4
 800a54a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a54e:	bf04      	itt	eq
 800a550:	0080      	lsleq	r0, r0, #2
 800a552:	3302      	addeq	r3, #2
 800a554:	2800      	cmp	r0, #0
 800a556:	db05      	blt.n	800a564 <__hi0bits+0x38>
 800a558:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a55c:	f103 0301 	add.w	r3, r3, #1
 800a560:	bf08      	it	eq
 800a562:	2320      	moveq	r3, #32
 800a564:	4618      	mov	r0, r3
 800a566:	4770      	bx	lr
 800a568:	2300      	movs	r3, #0
 800a56a:	e7e4      	b.n	800a536 <__hi0bits+0xa>

0800a56c <__lo0bits>:
 800a56c:	6803      	ldr	r3, [r0, #0]
 800a56e:	f013 0207 	ands.w	r2, r3, #7
 800a572:	d00c      	beq.n	800a58e <__lo0bits+0x22>
 800a574:	07d9      	lsls	r1, r3, #31
 800a576:	d422      	bmi.n	800a5be <__lo0bits+0x52>
 800a578:	079a      	lsls	r2, r3, #30
 800a57a:	bf49      	itett	mi
 800a57c:	085b      	lsrmi	r3, r3, #1
 800a57e:	089b      	lsrpl	r3, r3, #2
 800a580:	6003      	strmi	r3, [r0, #0]
 800a582:	2201      	movmi	r2, #1
 800a584:	bf5c      	itt	pl
 800a586:	6003      	strpl	r3, [r0, #0]
 800a588:	2202      	movpl	r2, #2
 800a58a:	4610      	mov	r0, r2
 800a58c:	4770      	bx	lr
 800a58e:	b299      	uxth	r1, r3
 800a590:	b909      	cbnz	r1, 800a596 <__lo0bits+0x2a>
 800a592:	0c1b      	lsrs	r3, r3, #16
 800a594:	2210      	movs	r2, #16
 800a596:	b2d9      	uxtb	r1, r3
 800a598:	b909      	cbnz	r1, 800a59e <__lo0bits+0x32>
 800a59a:	3208      	adds	r2, #8
 800a59c:	0a1b      	lsrs	r3, r3, #8
 800a59e:	0719      	lsls	r1, r3, #28
 800a5a0:	bf04      	itt	eq
 800a5a2:	091b      	lsreq	r3, r3, #4
 800a5a4:	3204      	addeq	r2, #4
 800a5a6:	0799      	lsls	r1, r3, #30
 800a5a8:	bf04      	itt	eq
 800a5aa:	089b      	lsreq	r3, r3, #2
 800a5ac:	3202      	addeq	r2, #2
 800a5ae:	07d9      	lsls	r1, r3, #31
 800a5b0:	d403      	bmi.n	800a5ba <__lo0bits+0x4e>
 800a5b2:	085b      	lsrs	r3, r3, #1
 800a5b4:	f102 0201 	add.w	r2, r2, #1
 800a5b8:	d003      	beq.n	800a5c2 <__lo0bits+0x56>
 800a5ba:	6003      	str	r3, [r0, #0]
 800a5bc:	e7e5      	b.n	800a58a <__lo0bits+0x1e>
 800a5be:	2200      	movs	r2, #0
 800a5c0:	e7e3      	b.n	800a58a <__lo0bits+0x1e>
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	e7e1      	b.n	800a58a <__lo0bits+0x1e>
	...

0800a5c8 <__i2b>:
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	f7ff ff05 	bl	800a3dc <_Balloc>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	b928      	cbnz	r0, 800a5e2 <__i2b+0x1a>
 800a5d6:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <__i2b+0x24>)
 800a5d8:	4805      	ldr	r0, [pc, #20]	; (800a5f0 <__i2b+0x28>)
 800a5da:	f240 1145 	movw	r1, #325	; 0x145
 800a5de:	f000 fd11 	bl	800b004 <__assert_func>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	6144      	str	r4, [r0, #20]
 800a5e6:	6103      	str	r3, [r0, #16]
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	bf00      	nop
 800a5ec:	0800b40c 	.word	0x0800b40c
 800a5f0:	0800b41d 	.word	0x0800b41d

0800a5f4 <__multiply>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	4691      	mov	r9, r2
 800a5fa:	690a      	ldr	r2, [r1, #16]
 800a5fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a600:	429a      	cmp	r2, r3
 800a602:	bfb8      	it	lt
 800a604:	460b      	movlt	r3, r1
 800a606:	460c      	mov	r4, r1
 800a608:	bfbc      	itt	lt
 800a60a:	464c      	movlt	r4, r9
 800a60c:	4699      	movlt	r9, r3
 800a60e:	6927      	ldr	r7, [r4, #16]
 800a610:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a614:	68a3      	ldr	r3, [r4, #8]
 800a616:	6861      	ldr	r1, [r4, #4]
 800a618:	eb07 060a 	add.w	r6, r7, sl
 800a61c:	42b3      	cmp	r3, r6
 800a61e:	b085      	sub	sp, #20
 800a620:	bfb8      	it	lt
 800a622:	3101      	addlt	r1, #1
 800a624:	f7ff feda 	bl	800a3dc <_Balloc>
 800a628:	b930      	cbnz	r0, 800a638 <__multiply+0x44>
 800a62a:	4602      	mov	r2, r0
 800a62c:	4b44      	ldr	r3, [pc, #272]	; (800a740 <__multiply+0x14c>)
 800a62e:	4845      	ldr	r0, [pc, #276]	; (800a744 <__multiply+0x150>)
 800a630:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a634:	f000 fce6 	bl	800b004 <__assert_func>
 800a638:	f100 0514 	add.w	r5, r0, #20
 800a63c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a640:	462b      	mov	r3, r5
 800a642:	2200      	movs	r2, #0
 800a644:	4543      	cmp	r3, r8
 800a646:	d321      	bcc.n	800a68c <__multiply+0x98>
 800a648:	f104 0314 	add.w	r3, r4, #20
 800a64c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a650:	f109 0314 	add.w	r3, r9, #20
 800a654:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a658:	9202      	str	r2, [sp, #8]
 800a65a:	1b3a      	subs	r2, r7, r4
 800a65c:	3a15      	subs	r2, #21
 800a65e:	f022 0203 	bic.w	r2, r2, #3
 800a662:	3204      	adds	r2, #4
 800a664:	f104 0115 	add.w	r1, r4, #21
 800a668:	428f      	cmp	r7, r1
 800a66a:	bf38      	it	cc
 800a66c:	2204      	movcc	r2, #4
 800a66e:	9201      	str	r2, [sp, #4]
 800a670:	9a02      	ldr	r2, [sp, #8]
 800a672:	9303      	str	r3, [sp, #12]
 800a674:	429a      	cmp	r2, r3
 800a676:	d80c      	bhi.n	800a692 <__multiply+0x9e>
 800a678:	2e00      	cmp	r6, #0
 800a67a:	dd03      	ble.n	800a684 <__multiply+0x90>
 800a67c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a680:	2b00      	cmp	r3, #0
 800a682:	d05b      	beq.n	800a73c <__multiply+0x148>
 800a684:	6106      	str	r6, [r0, #16]
 800a686:	b005      	add	sp, #20
 800a688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68c:	f843 2b04 	str.w	r2, [r3], #4
 800a690:	e7d8      	b.n	800a644 <__multiply+0x50>
 800a692:	f8b3 a000 	ldrh.w	sl, [r3]
 800a696:	f1ba 0f00 	cmp.w	sl, #0
 800a69a:	d024      	beq.n	800a6e6 <__multiply+0xf2>
 800a69c:	f104 0e14 	add.w	lr, r4, #20
 800a6a0:	46a9      	mov	r9, r5
 800a6a2:	f04f 0c00 	mov.w	ip, #0
 800a6a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a6aa:	f8d9 1000 	ldr.w	r1, [r9]
 800a6ae:	fa1f fb82 	uxth.w	fp, r2
 800a6b2:	b289      	uxth	r1, r1
 800a6b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6bc:	f8d9 2000 	ldr.w	r2, [r9]
 800a6c0:	4461      	add	r1, ip
 800a6c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6ce:	b289      	uxth	r1, r1
 800a6d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6d4:	4577      	cmp	r7, lr
 800a6d6:	f849 1b04 	str.w	r1, [r9], #4
 800a6da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6de:	d8e2      	bhi.n	800a6a6 <__multiply+0xb2>
 800a6e0:	9a01      	ldr	r2, [sp, #4]
 800a6e2:	f845 c002 	str.w	ip, [r5, r2]
 800a6e6:	9a03      	ldr	r2, [sp, #12]
 800a6e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	f1b9 0f00 	cmp.w	r9, #0
 800a6f2:	d021      	beq.n	800a738 <__multiply+0x144>
 800a6f4:	6829      	ldr	r1, [r5, #0]
 800a6f6:	f104 0c14 	add.w	ip, r4, #20
 800a6fa:	46ae      	mov	lr, r5
 800a6fc:	f04f 0a00 	mov.w	sl, #0
 800a700:	f8bc b000 	ldrh.w	fp, [ip]
 800a704:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a708:	fb09 220b 	mla	r2, r9, fp, r2
 800a70c:	4452      	add	r2, sl
 800a70e:	b289      	uxth	r1, r1
 800a710:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a714:	f84e 1b04 	str.w	r1, [lr], #4
 800a718:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a71c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a720:	f8be 1000 	ldrh.w	r1, [lr]
 800a724:	fb09 110a 	mla	r1, r9, sl, r1
 800a728:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a72c:	4567      	cmp	r7, ip
 800a72e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a732:	d8e5      	bhi.n	800a700 <__multiply+0x10c>
 800a734:	9a01      	ldr	r2, [sp, #4]
 800a736:	50a9      	str	r1, [r5, r2]
 800a738:	3504      	adds	r5, #4
 800a73a:	e799      	b.n	800a670 <__multiply+0x7c>
 800a73c:	3e01      	subs	r6, #1
 800a73e:	e79b      	b.n	800a678 <__multiply+0x84>
 800a740:	0800b40c 	.word	0x0800b40c
 800a744:	0800b41d 	.word	0x0800b41d

0800a748 <__pow5mult>:
 800a748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a74c:	4615      	mov	r5, r2
 800a74e:	f012 0203 	ands.w	r2, r2, #3
 800a752:	4606      	mov	r6, r0
 800a754:	460f      	mov	r7, r1
 800a756:	d007      	beq.n	800a768 <__pow5mult+0x20>
 800a758:	4c25      	ldr	r4, [pc, #148]	; (800a7f0 <__pow5mult+0xa8>)
 800a75a:	3a01      	subs	r2, #1
 800a75c:	2300      	movs	r3, #0
 800a75e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a762:	f7ff fe9d 	bl	800a4a0 <__multadd>
 800a766:	4607      	mov	r7, r0
 800a768:	10ad      	asrs	r5, r5, #2
 800a76a:	d03d      	beq.n	800a7e8 <__pow5mult+0xa0>
 800a76c:	69f4      	ldr	r4, [r6, #28]
 800a76e:	b97c      	cbnz	r4, 800a790 <__pow5mult+0x48>
 800a770:	2010      	movs	r0, #16
 800a772:	f7ff fd7f 	bl	800a274 <malloc>
 800a776:	4602      	mov	r2, r0
 800a778:	61f0      	str	r0, [r6, #28]
 800a77a:	b928      	cbnz	r0, 800a788 <__pow5mult+0x40>
 800a77c:	4b1d      	ldr	r3, [pc, #116]	; (800a7f4 <__pow5mult+0xac>)
 800a77e:	481e      	ldr	r0, [pc, #120]	; (800a7f8 <__pow5mult+0xb0>)
 800a780:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a784:	f000 fc3e 	bl	800b004 <__assert_func>
 800a788:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a78c:	6004      	str	r4, [r0, #0]
 800a78e:	60c4      	str	r4, [r0, #12]
 800a790:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a794:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a798:	b94c      	cbnz	r4, 800a7ae <__pow5mult+0x66>
 800a79a:	f240 2171 	movw	r1, #625	; 0x271
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f7ff ff12 	bl	800a5c8 <__i2b>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	6003      	str	r3, [r0, #0]
 800a7ae:	f04f 0900 	mov.w	r9, #0
 800a7b2:	07eb      	lsls	r3, r5, #31
 800a7b4:	d50a      	bpl.n	800a7cc <__pow5mult+0x84>
 800a7b6:	4639      	mov	r1, r7
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7ff ff1a 	bl	800a5f4 <__multiply>
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	4680      	mov	r8, r0
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7ff fe49 	bl	800a45c <_Bfree>
 800a7ca:	4647      	mov	r7, r8
 800a7cc:	106d      	asrs	r5, r5, #1
 800a7ce:	d00b      	beq.n	800a7e8 <__pow5mult+0xa0>
 800a7d0:	6820      	ldr	r0, [r4, #0]
 800a7d2:	b938      	cbnz	r0, 800a7e4 <__pow5mult+0x9c>
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7ff ff0b 	bl	800a5f4 <__multiply>
 800a7de:	6020      	str	r0, [r4, #0]
 800a7e0:	f8c0 9000 	str.w	r9, [r0]
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	e7e4      	b.n	800a7b2 <__pow5mult+0x6a>
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ee:	bf00      	nop
 800a7f0:	0800b568 	.word	0x0800b568
 800a7f4:	0800b39d 	.word	0x0800b39d
 800a7f8:	0800b41d 	.word	0x0800b41d

0800a7fc <__lshift>:
 800a7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a800:	460c      	mov	r4, r1
 800a802:	6849      	ldr	r1, [r1, #4]
 800a804:	6923      	ldr	r3, [r4, #16]
 800a806:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a80a:	68a3      	ldr	r3, [r4, #8]
 800a80c:	4607      	mov	r7, r0
 800a80e:	4691      	mov	r9, r2
 800a810:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a814:	f108 0601 	add.w	r6, r8, #1
 800a818:	42b3      	cmp	r3, r6
 800a81a:	db0b      	blt.n	800a834 <__lshift+0x38>
 800a81c:	4638      	mov	r0, r7
 800a81e:	f7ff fddd 	bl	800a3dc <_Balloc>
 800a822:	4605      	mov	r5, r0
 800a824:	b948      	cbnz	r0, 800a83a <__lshift+0x3e>
 800a826:	4602      	mov	r2, r0
 800a828:	4b28      	ldr	r3, [pc, #160]	; (800a8cc <__lshift+0xd0>)
 800a82a:	4829      	ldr	r0, [pc, #164]	; (800a8d0 <__lshift+0xd4>)
 800a82c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a830:	f000 fbe8 	bl	800b004 <__assert_func>
 800a834:	3101      	adds	r1, #1
 800a836:	005b      	lsls	r3, r3, #1
 800a838:	e7ee      	b.n	800a818 <__lshift+0x1c>
 800a83a:	2300      	movs	r3, #0
 800a83c:	f100 0114 	add.w	r1, r0, #20
 800a840:	f100 0210 	add.w	r2, r0, #16
 800a844:	4618      	mov	r0, r3
 800a846:	4553      	cmp	r3, sl
 800a848:	db33      	blt.n	800a8b2 <__lshift+0xb6>
 800a84a:	6920      	ldr	r0, [r4, #16]
 800a84c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a850:	f104 0314 	add.w	r3, r4, #20
 800a854:	f019 091f 	ands.w	r9, r9, #31
 800a858:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a85c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a860:	d02b      	beq.n	800a8ba <__lshift+0xbe>
 800a862:	f1c9 0e20 	rsb	lr, r9, #32
 800a866:	468a      	mov	sl, r1
 800a868:	2200      	movs	r2, #0
 800a86a:	6818      	ldr	r0, [r3, #0]
 800a86c:	fa00 f009 	lsl.w	r0, r0, r9
 800a870:	4310      	orrs	r0, r2
 800a872:	f84a 0b04 	str.w	r0, [sl], #4
 800a876:	f853 2b04 	ldr.w	r2, [r3], #4
 800a87a:	459c      	cmp	ip, r3
 800a87c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a880:	d8f3      	bhi.n	800a86a <__lshift+0x6e>
 800a882:	ebac 0304 	sub.w	r3, ip, r4
 800a886:	3b15      	subs	r3, #21
 800a888:	f023 0303 	bic.w	r3, r3, #3
 800a88c:	3304      	adds	r3, #4
 800a88e:	f104 0015 	add.w	r0, r4, #21
 800a892:	4584      	cmp	ip, r0
 800a894:	bf38      	it	cc
 800a896:	2304      	movcc	r3, #4
 800a898:	50ca      	str	r2, [r1, r3]
 800a89a:	b10a      	cbz	r2, 800a8a0 <__lshift+0xa4>
 800a89c:	f108 0602 	add.w	r6, r8, #2
 800a8a0:	3e01      	subs	r6, #1
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	612e      	str	r6, [r5, #16]
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	f7ff fdd8 	bl	800a45c <_Bfree>
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	e7c5      	b.n	800a846 <__lshift+0x4a>
 800a8ba:	3904      	subs	r1, #4
 800a8bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8c4:	459c      	cmp	ip, r3
 800a8c6:	d8f9      	bhi.n	800a8bc <__lshift+0xc0>
 800a8c8:	e7ea      	b.n	800a8a0 <__lshift+0xa4>
 800a8ca:	bf00      	nop
 800a8cc:	0800b40c 	.word	0x0800b40c
 800a8d0:	0800b41d 	.word	0x0800b41d

0800a8d4 <__mcmp>:
 800a8d4:	b530      	push	{r4, r5, lr}
 800a8d6:	6902      	ldr	r2, [r0, #16]
 800a8d8:	690c      	ldr	r4, [r1, #16]
 800a8da:	1b12      	subs	r2, r2, r4
 800a8dc:	d10e      	bne.n	800a8fc <__mcmp+0x28>
 800a8de:	f100 0314 	add.w	r3, r0, #20
 800a8e2:	3114      	adds	r1, #20
 800a8e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8f4:	42a5      	cmp	r5, r4
 800a8f6:	d003      	beq.n	800a900 <__mcmp+0x2c>
 800a8f8:	d305      	bcc.n	800a906 <__mcmp+0x32>
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	bd30      	pop	{r4, r5, pc}
 800a900:	4283      	cmp	r3, r0
 800a902:	d3f3      	bcc.n	800a8ec <__mcmp+0x18>
 800a904:	e7fa      	b.n	800a8fc <__mcmp+0x28>
 800a906:	f04f 32ff 	mov.w	r2, #4294967295
 800a90a:	e7f7      	b.n	800a8fc <__mcmp+0x28>

0800a90c <__mdiff>:
 800a90c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a910:	460c      	mov	r4, r1
 800a912:	4606      	mov	r6, r0
 800a914:	4611      	mov	r1, r2
 800a916:	4620      	mov	r0, r4
 800a918:	4690      	mov	r8, r2
 800a91a:	f7ff ffdb 	bl	800a8d4 <__mcmp>
 800a91e:	1e05      	subs	r5, r0, #0
 800a920:	d110      	bne.n	800a944 <__mdiff+0x38>
 800a922:	4629      	mov	r1, r5
 800a924:	4630      	mov	r0, r6
 800a926:	f7ff fd59 	bl	800a3dc <_Balloc>
 800a92a:	b930      	cbnz	r0, 800a93a <__mdiff+0x2e>
 800a92c:	4b3a      	ldr	r3, [pc, #232]	; (800aa18 <__mdiff+0x10c>)
 800a92e:	4602      	mov	r2, r0
 800a930:	f240 2137 	movw	r1, #567	; 0x237
 800a934:	4839      	ldr	r0, [pc, #228]	; (800aa1c <__mdiff+0x110>)
 800a936:	f000 fb65 	bl	800b004 <__assert_func>
 800a93a:	2301      	movs	r3, #1
 800a93c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a944:	bfa4      	itt	ge
 800a946:	4643      	movge	r3, r8
 800a948:	46a0      	movge	r8, r4
 800a94a:	4630      	mov	r0, r6
 800a94c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a950:	bfa6      	itte	ge
 800a952:	461c      	movge	r4, r3
 800a954:	2500      	movge	r5, #0
 800a956:	2501      	movlt	r5, #1
 800a958:	f7ff fd40 	bl	800a3dc <_Balloc>
 800a95c:	b920      	cbnz	r0, 800a968 <__mdiff+0x5c>
 800a95e:	4b2e      	ldr	r3, [pc, #184]	; (800aa18 <__mdiff+0x10c>)
 800a960:	4602      	mov	r2, r0
 800a962:	f240 2145 	movw	r1, #581	; 0x245
 800a966:	e7e5      	b.n	800a934 <__mdiff+0x28>
 800a968:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a96c:	6926      	ldr	r6, [r4, #16]
 800a96e:	60c5      	str	r5, [r0, #12]
 800a970:	f104 0914 	add.w	r9, r4, #20
 800a974:	f108 0514 	add.w	r5, r8, #20
 800a978:	f100 0e14 	add.w	lr, r0, #20
 800a97c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a980:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a984:	f108 0210 	add.w	r2, r8, #16
 800a988:	46f2      	mov	sl, lr
 800a98a:	2100      	movs	r1, #0
 800a98c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a990:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a994:	fa11 f88b 	uxtah	r8, r1, fp
 800a998:	b299      	uxth	r1, r3
 800a99a:	0c1b      	lsrs	r3, r3, #16
 800a99c:	eba8 0801 	sub.w	r8, r8, r1
 800a9a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9a8:	fa1f f888 	uxth.w	r8, r8
 800a9ac:	1419      	asrs	r1, r3, #16
 800a9ae:	454e      	cmp	r6, r9
 800a9b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9b4:	f84a 3b04 	str.w	r3, [sl], #4
 800a9b8:	d8e8      	bhi.n	800a98c <__mdiff+0x80>
 800a9ba:	1b33      	subs	r3, r6, r4
 800a9bc:	3b15      	subs	r3, #21
 800a9be:	f023 0303 	bic.w	r3, r3, #3
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	3415      	adds	r4, #21
 800a9c6:	42a6      	cmp	r6, r4
 800a9c8:	bf38      	it	cc
 800a9ca:	2304      	movcc	r3, #4
 800a9cc:	441d      	add	r5, r3
 800a9ce:	4473      	add	r3, lr
 800a9d0:	469e      	mov	lr, r3
 800a9d2:	462e      	mov	r6, r5
 800a9d4:	4566      	cmp	r6, ip
 800a9d6:	d30e      	bcc.n	800a9f6 <__mdiff+0xea>
 800a9d8:	f10c 0203 	add.w	r2, ip, #3
 800a9dc:	1b52      	subs	r2, r2, r5
 800a9de:	f022 0203 	bic.w	r2, r2, #3
 800a9e2:	3d03      	subs	r5, #3
 800a9e4:	45ac      	cmp	ip, r5
 800a9e6:	bf38      	it	cc
 800a9e8:	2200      	movcc	r2, #0
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a9f0:	b17a      	cbz	r2, 800aa12 <__mdiff+0x106>
 800a9f2:	6107      	str	r7, [r0, #16]
 800a9f4:	e7a4      	b.n	800a940 <__mdiff+0x34>
 800a9f6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9fa:	fa11 f288 	uxtah	r2, r1, r8
 800a9fe:	1414      	asrs	r4, r2, #16
 800aa00:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa04:	b292      	uxth	r2, r2
 800aa06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa0a:	f84e 2b04 	str.w	r2, [lr], #4
 800aa0e:	1421      	asrs	r1, r4, #16
 800aa10:	e7e0      	b.n	800a9d4 <__mdiff+0xc8>
 800aa12:	3f01      	subs	r7, #1
 800aa14:	e7ea      	b.n	800a9ec <__mdiff+0xe0>
 800aa16:	bf00      	nop
 800aa18:	0800b40c 	.word	0x0800b40c
 800aa1c:	0800b41d 	.word	0x0800b41d

0800aa20 <__d2b>:
 800aa20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa24:	460f      	mov	r7, r1
 800aa26:	2101      	movs	r1, #1
 800aa28:	ec59 8b10 	vmov	r8, r9, d0
 800aa2c:	4616      	mov	r6, r2
 800aa2e:	f7ff fcd5 	bl	800a3dc <_Balloc>
 800aa32:	4604      	mov	r4, r0
 800aa34:	b930      	cbnz	r0, 800aa44 <__d2b+0x24>
 800aa36:	4602      	mov	r2, r0
 800aa38:	4b24      	ldr	r3, [pc, #144]	; (800aacc <__d2b+0xac>)
 800aa3a:	4825      	ldr	r0, [pc, #148]	; (800aad0 <__d2b+0xb0>)
 800aa3c:	f240 310f 	movw	r1, #783	; 0x30f
 800aa40:	f000 fae0 	bl	800b004 <__assert_func>
 800aa44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa4c:	bb2d      	cbnz	r5, 800aa9a <__d2b+0x7a>
 800aa4e:	9301      	str	r3, [sp, #4]
 800aa50:	f1b8 0300 	subs.w	r3, r8, #0
 800aa54:	d026      	beq.n	800aaa4 <__d2b+0x84>
 800aa56:	4668      	mov	r0, sp
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	f7ff fd87 	bl	800a56c <__lo0bits>
 800aa5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa62:	b1e8      	cbz	r0, 800aaa0 <__d2b+0x80>
 800aa64:	f1c0 0320 	rsb	r3, r0, #32
 800aa68:	fa02 f303 	lsl.w	r3, r2, r3
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	40c2      	lsrs	r2, r0
 800aa70:	6163      	str	r3, [r4, #20]
 800aa72:	9201      	str	r2, [sp, #4]
 800aa74:	9b01      	ldr	r3, [sp, #4]
 800aa76:	61a3      	str	r3, [r4, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bf14      	ite	ne
 800aa7c:	2202      	movne	r2, #2
 800aa7e:	2201      	moveq	r2, #1
 800aa80:	6122      	str	r2, [r4, #16]
 800aa82:	b1bd      	cbz	r5, 800aab4 <__d2b+0x94>
 800aa84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa88:	4405      	add	r5, r0
 800aa8a:	603d      	str	r5, [r7, #0]
 800aa8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa90:	6030      	str	r0, [r6, #0]
 800aa92:	4620      	mov	r0, r4
 800aa94:	b003      	add	sp, #12
 800aa96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa9e:	e7d6      	b.n	800aa4e <__d2b+0x2e>
 800aaa0:	6161      	str	r1, [r4, #20]
 800aaa2:	e7e7      	b.n	800aa74 <__d2b+0x54>
 800aaa4:	a801      	add	r0, sp, #4
 800aaa6:	f7ff fd61 	bl	800a56c <__lo0bits>
 800aaaa:	9b01      	ldr	r3, [sp, #4]
 800aaac:	6163      	str	r3, [r4, #20]
 800aaae:	3020      	adds	r0, #32
 800aab0:	2201      	movs	r2, #1
 800aab2:	e7e5      	b.n	800aa80 <__d2b+0x60>
 800aab4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aab8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aabc:	6038      	str	r0, [r7, #0]
 800aabe:	6918      	ldr	r0, [r3, #16]
 800aac0:	f7ff fd34 	bl	800a52c <__hi0bits>
 800aac4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aac8:	e7e2      	b.n	800aa90 <__d2b+0x70>
 800aaca:	bf00      	nop
 800aacc:	0800b40c 	.word	0x0800b40c
 800aad0:	0800b41d 	.word	0x0800b41d

0800aad4 <__sfputc_r>:
 800aad4:	6893      	ldr	r3, [r2, #8]
 800aad6:	3b01      	subs	r3, #1
 800aad8:	2b00      	cmp	r3, #0
 800aada:	b410      	push	{r4}
 800aadc:	6093      	str	r3, [r2, #8]
 800aade:	da08      	bge.n	800aaf2 <__sfputc_r+0x1e>
 800aae0:	6994      	ldr	r4, [r2, #24]
 800aae2:	42a3      	cmp	r3, r4
 800aae4:	db01      	blt.n	800aaea <__sfputc_r+0x16>
 800aae6:	290a      	cmp	r1, #10
 800aae8:	d103      	bne.n	800aaf2 <__sfputc_r+0x1e>
 800aaea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaee:	f000 b9e3 	b.w	800aeb8 <__swbuf_r>
 800aaf2:	6813      	ldr	r3, [r2, #0]
 800aaf4:	1c58      	adds	r0, r3, #1
 800aaf6:	6010      	str	r0, [r2, #0]
 800aaf8:	7019      	strb	r1, [r3, #0]
 800aafa:	4608      	mov	r0, r1
 800aafc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <__sfputs_r>:
 800ab02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab04:	4606      	mov	r6, r0
 800ab06:	460f      	mov	r7, r1
 800ab08:	4614      	mov	r4, r2
 800ab0a:	18d5      	adds	r5, r2, r3
 800ab0c:	42ac      	cmp	r4, r5
 800ab0e:	d101      	bne.n	800ab14 <__sfputs_r+0x12>
 800ab10:	2000      	movs	r0, #0
 800ab12:	e007      	b.n	800ab24 <__sfputs_r+0x22>
 800ab14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab18:	463a      	mov	r2, r7
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f7ff ffda 	bl	800aad4 <__sfputc_r>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d1f3      	bne.n	800ab0c <__sfputs_r+0xa>
 800ab24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab28 <_vfiprintf_r>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	460d      	mov	r5, r1
 800ab2e:	b09d      	sub	sp, #116	; 0x74
 800ab30:	4614      	mov	r4, r2
 800ab32:	4698      	mov	r8, r3
 800ab34:	4606      	mov	r6, r0
 800ab36:	b118      	cbz	r0, 800ab40 <_vfiprintf_r+0x18>
 800ab38:	6a03      	ldr	r3, [r0, #32]
 800ab3a:	b90b      	cbnz	r3, 800ab40 <_vfiprintf_r+0x18>
 800ab3c:	f7fe fbb8 	bl	80092b0 <__sinit>
 800ab40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab42:	07d9      	lsls	r1, r3, #31
 800ab44:	d405      	bmi.n	800ab52 <_vfiprintf_r+0x2a>
 800ab46:	89ab      	ldrh	r3, [r5, #12]
 800ab48:	059a      	lsls	r2, r3, #22
 800ab4a:	d402      	bmi.n	800ab52 <_vfiprintf_r+0x2a>
 800ab4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab4e:	f7fe fcb8 	bl	80094c2 <__retarget_lock_acquire_recursive>
 800ab52:	89ab      	ldrh	r3, [r5, #12]
 800ab54:	071b      	lsls	r3, r3, #28
 800ab56:	d501      	bpl.n	800ab5c <_vfiprintf_r+0x34>
 800ab58:	692b      	ldr	r3, [r5, #16]
 800ab5a:	b99b      	cbnz	r3, 800ab84 <_vfiprintf_r+0x5c>
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f000 f9e8 	bl	800af34 <__swsetup_r>
 800ab64:	b170      	cbz	r0, 800ab84 <_vfiprintf_r+0x5c>
 800ab66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab68:	07dc      	lsls	r4, r3, #31
 800ab6a:	d504      	bpl.n	800ab76 <_vfiprintf_r+0x4e>
 800ab6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab70:	b01d      	add	sp, #116	; 0x74
 800ab72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab76:	89ab      	ldrh	r3, [r5, #12]
 800ab78:	0598      	lsls	r0, r3, #22
 800ab7a:	d4f7      	bmi.n	800ab6c <_vfiprintf_r+0x44>
 800ab7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab7e:	f7fe fca1 	bl	80094c4 <__retarget_lock_release_recursive>
 800ab82:	e7f3      	b.n	800ab6c <_vfiprintf_r+0x44>
 800ab84:	2300      	movs	r3, #0
 800ab86:	9309      	str	r3, [sp, #36]	; 0x24
 800ab88:	2320      	movs	r3, #32
 800ab8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab92:	2330      	movs	r3, #48	; 0x30
 800ab94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ad48 <_vfiprintf_r+0x220>
 800ab98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab9c:	f04f 0901 	mov.w	r9, #1
 800aba0:	4623      	mov	r3, r4
 800aba2:	469a      	mov	sl, r3
 800aba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aba8:	b10a      	cbz	r2, 800abae <_vfiprintf_r+0x86>
 800abaa:	2a25      	cmp	r2, #37	; 0x25
 800abac:	d1f9      	bne.n	800aba2 <_vfiprintf_r+0x7a>
 800abae:	ebba 0b04 	subs.w	fp, sl, r4
 800abb2:	d00b      	beq.n	800abcc <_vfiprintf_r+0xa4>
 800abb4:	465b      	mov	r3, fp
 800abb6:	4622      	mov	r2, r4
 800abb8:	4629      	mov	r1, r5
 800abba:	4630      	mov	r0, r6
 800abbc:	f7ff ffa1 	bl	800ab02 <__sfputs_r>
 800abc0:	3001      	adds	r0, #1
 800abc2:	f000 80a9 	beq.w	800ad18 <_vfiprintf_r+0x1f0>
 800abc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abc8:	445a      	add	r2, fp
 800abca:	9209      	str	r2, [sp, #36]	; 0x24
 800abcc:	f89a 3000 	ldrb.w	r3, [sl]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 80a1 	beq.w	800ad18 <_vfiprintf_r+0x1f0>
 800abd6:	2300      	movs	r3, #0
 800abd8:	f04f 32ff 	mov.w	r2, #4294967295
 800abdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abe0:	f10a 0a01 	add.w	sl, sl, #1
 800abe4:	9304      	str	r3, [sp, #16]
 800abe6:	9307      	str	r3, [sp, #28]
 800abe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abec:	931a      	str	r3, [sp, #104]	; 0x68
 800abee:	4654      	mov	r4, sl
 800abf0:	2205      	movs	r2, #5
 800abf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf6:	4854      	ldr	r0, [pc, #336]	; (800ad48 <_vfiprintf_r+0x220>)
 800abf8:	f7f5 faf2 	bl	80001e0 <memchr>
 800abfc:	9a04      	ldr	r2, [sp, #16]
 800abfe:	b9d8      	cbnz	r0, 800ac38 <_vfiprintf_r+0x110>
 800ac00:	06d1      	lsls	r1, r2, #27
 800ac02:	bf44      	itt	mi
 800ac04:	2320      	movmi	r3, #32
 800ac06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac0a:	0713      	lsls	r3, r2, #28
 800ac0c:	bf44      	itt	mi
 800ac0e:	232b      	movmi	r3, #43	; 0x2b
 800ac10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac14:	f89a 3000 	ldrb.w	r3, [sl]
 800ac18:	2b2a      	cmp	r3, #42	; 0x2a
 800ac1a:	d015      	beq.n	800ac48 <_vfiprintf_r+0x120>
 800ac1c:	9a07      	ldr	r2, [sp, #28]
 800ac1e:	4654      	mov	r4, sl
 800ac20:	2000      	movs	r0, #0
 800ac22:	f04f 0c0a 	mov.w	ip, #10
 800ac26:	4621      	mov	r1, r4
 800ac28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac2c:	3b30      	subs	r3, #48	; 0x30
 800ac2e:	2b09      	cmp	r3, #9
 800ac30:	d94d      	bls.n	800acce <_vfiprintf_r+0x1a6>
 800ac32:	b1b0      	cbz	r0, 800ac62 <_vfiprintf_r+0x13a>
 800ac34:	9207      	str	r2, [sp, #28]
 800ac36:	e014      	b.n	800ac62 <_vfiprintf_r+0x13a>
 800ac38:	eba0 0308 	sub.w	r3, r0, r8
 800ac3c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac40:	4313      	orrs	r3, r2
 800ac42:	9304      	str	r3, [sp, #16]
 800ac44:	46a2      	mov	sl, r4
 800ac46:	e7d2      	b.n	800abee <_vfiprintf_r+0xc6>
 800ac48:	9b03      	ldr	r3, [sp, #12]
 800ac4a:	1d19      	adds	r1, r3, #4
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	9103      	str	r1, [sp, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	bfbb      	ittet	lt
 800ac54:	425b      	neglt	r3, r3
 800ac56:	f042 0202 	orrlt.w	r2, r2, #2
 800ac5a:	9307      	strge	r3, [sp, #28]
 800ac5c:	9307      	strlt	r3, [sp, #28]
 800ac5e:	bfb8      	it	lt
 800ac60:	9204      	strlt	r2, [sp, #16]
 800ac62:	7823      	ldrb	r3, [r4, #0]
 800ac64:	2b2e      	cmp	r3, #46	; 0x2e
 800ac66:	d10c      	bne.n	800ac82 <_vfiprintf_r+0x15a>
 800ac68:	7863      	ldrb	r3, [r4, #1]
 800ac6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ac6c:	d134      	bne.n	800acd8 <_vfiprintf_r+0x1b0>
 800ac6e:	9b03      	ldr	r3, [sp, #12]
 800ac70:	1d1a      	adds	r2, r3, #4
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	9203      	str	r2, [sp, #12]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	bfb8      	it	lt
 800ac7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac7e:	3402      	adds	r4, #2
 800ac80:	9305      	str	r3, [sp, #20]
 800ac82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ad58 <_vfiprintf_r+0x230>
 800ac86:	7821      	ldrb	r1, [r4, #0]
 800ac88:	2203      	movs	r2, #3
 800ac8a:	4650      	mov	r0, sl
 800ac8c:	f7f5 faa8 	bl	80001e0 <memchr>
 800ac90:	b138      	cbz	r0, 800aca2 <_vfiprintf_r+0x17a>
 800ac92:	9b04      	ldr	r3, [sp, #16]
 800ac94:	eba0 000a 	sub.w	r0, r0, sl
 800ac98:	2240      	movs	r2, #64	; 0x40
 800ac9a:	4082      	lsls	r2, r0
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	3401      	adds	r4, #1
 800aca0:	9304      	str	r3, [sp, #16]
 800aca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca6:	4829      	ldr	r0, [pc, #164]	; (800ad4c <_vfiprintf_r+0x224>)
 800aca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acac:	2206      	movs	r2, #6
 800acae:	f7f5 fa97 	bl	80001e0 <memchr>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d03f      	beq.n	800ad36 <_vfiprintf_r+0x20e>
 800acb6:	4b26      	ldr	r3, [pc, #152]	; (800ad50 <_vfiprintf_r+0x228>)
 800acb8:	bb1b      	cbnz	r3, 800ad02 <_vfiprintf_r+0x1da>
 800acba:	9b03      	ldr	r3, [sp, #12]
 800acbc:	3307      	adds	r3, #7
 800acbe:	f023 0307 	bic.w	r3, r3, #7
 800acc2:	3308      	adds	r3, #8
 800acc4:	9303      	str	r3, [sp, #12]
 800acc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc8:	443b      	add	r3, r7
 800acca:	9309      	str	r3, [sp, #36]	; 0x24
 800accc:	e768      	b.n	800aba0 <_vfiprintf_r+0x78>
 800acce:	fb0c 3202 	mla	r2, ip, r2, r3
 800acd2:	460c      	mov	r4, r1
 800acd4:	2001      	movs	r0, #1
 800acd6:	e7a6      	b.n	800ac26 <_vfiprintf_r+0xfe>
 800acd8:	2300      	movs	r3, #0
 800acda:	3401      	adds	r4, #1
 800acdc:	9305      	str	r3, [sp, #20]
 800acde:	4619      	mov	r1, r3
 800ace0:	f04f 0c0a 	mov.w	ip, #10
 800ace4:	4620      	mov	r0, r4
 800ace6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acea:	3a30      	subs	r2, #48	; 0x30
 800acec:	2a09      	cmp	r2, #9
 800acee:	d903      	bls.n	800acf8 <_vfiprintf_r+0x1d0>
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d0c6      	beq.n	800ac82 <_vfiprintf_r+0x15a>
 800acf4:	9105      	str	r1, [sp, #20]
 800acf6:	e7c4      	b.n	800ac82 <_vfiprintf_r+0x15a>
 800acf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800acfc:	4604      	mov	r4, r0
 800acfe:	2301      	movs	r3, #1
 800ad00:	e7f0      	b.n	800ace4 <_vfiprintf_r+0x1bc>
 800ad02:	ab03      	add	r3, sp, #12
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	462a      	mov	r2, r5
 800ad08:	4b12      	ldr	r3, [pc, #72]	; (800ad54 <_vfiprintf_r+0x22c>)
 800ad0a:	a904      	add	r1, sp, #16
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f7fd fe7d 	bl	8008a0c <_printf_float>
 800ad12:	4607      	mov	r7, r0
 800ad14:	1c78      	adds	r0, r7, #1
 800ad16:	d1d6      	bne.n	800acc6 <_vfiprintf_r+0x19e>
 800ad18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad1a:	07d9      	lsls	r1, r3, #31
 800ad1c:	d405      	bmi.n	800ad2a <_vfiprintf_r+0x202>
 800ad1e:	89ab      	ldrh	r3, [r5, #12]
 800ad20:	059a      	lsls	r2, r3, #22
 800ad22:	d402      	bmi.n	800ad2a <_vfiprintf_r+0x202>
 800ad24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad26:	f7fe fbcd 	bl	80094c4 <__retarget_lock_release_recursive>
 800ad2a:	89ab      	ldrh	r3, [r5, #12]
 800ad2c:	065b      	lsls	r3, r3, #25
 800ad2e:	f53f af1d 	bmi.w	800ab6c <_vfiprintf_r+0x44>
 800ad32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad34:	e71c      	b.n	800ab70 <_vfiprintf_r+0x48>
 800ad36:	ab03      	add	r3, sp, #12
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	462a      	mov	r2, r5
 800ad3c:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <_vfiprintf_r+0x22c>)
 800ad3e:	a904      	add	r1, sp, #16
 800ad40:	4630      	mov	r0, r6
 800ad42:	f7fe f907 	bl	8008f54 <_printf_i>
 800ad46:	e7e4      	b.n	800ad12 <_vfiprintf_r+0x1ea>
 800ad48:	0800b574 	.word	0x0800b574
 800ad4c:	0800b57e 	.word	0x0800b57e
 800ad50:	08008a0d 	.word	0x08008a0d
 800ad54:	0800ab03 	.word	0x0800ab03
 800ad58:	0800b57a 	.word	0x0800b57a

0800ad5c <__sflush_r>:
 800ad5c:	898a      	ldrh	r2, [r1, #12]
 800ad5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad62:	4605      	mov	r5, r0
 800ad64:	0710      	lsls	r0, r2, #28
 800ad66:	460c      	mov	r4, r1
 800ad68:	d458      	bmi.n	800ae1c <__sflush_r+0xc0>
 800ad6a:	684b      	ldr	r3, [r1, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	dc05      	bgt.n	800ad7c <__sflush_r+0x20>
 800ad70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	dc02      	bgt.n	800ad7c <__sflush_r+0x20>
 800ad76:	2000      	movs	r0, #0
 800ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad7e:	2e00      	cmp	r6, #0
 800ad80:	d0f9      	beq.n	800ad76 <__sflush_r+0x1a>
 800ad82:	2300      	movs	r3, #0
 800ad84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad88:	682f      	ldr	r7, [r5, #0]
 800ad8a:	6a21      	ldr	r1, [r4, #32]
 800ad8c:	602b      	str	r3, [r5, #0]
 800ad8e:	d032      	beq.n	800adf6 <__sflush_r+0x9a>
 800ad90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	075a      	lsls	r2, r3, #29
 800ad96:	d505      	bpl.n	800ada4 <__sflush_r+0x48>
 800ad98:	6863      	ldr	r3, [r4, #4]
 800ad9a:	1ac0      	subs	r0, r0, r3
 800ad9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad9e:	b10b      	cbz	r3, 800ada4 <__sflush_r+0x48>
 800ada0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ada2:	1ac0      	subs	r0, r0, r3
 800ada4:	2300      	movs	r3, #0
 800ada6:	4602      	mov	r2, r0
 800ada8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adaa:	6a21      	ldr	r1, [r4, #32]
 800adac:	4628      	mov	r0, r5
 800adae:	47b0      	blx	r6
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	d106      	bne.n	800adc4 <__sflush_r+0x68>
 800adb6:	6829      	ldr	r1, [r5, #0]
 800adb8:	291d      	cmp	r1, #29
 800adba:	d82b      	bhi.n	800ae14 <__sflush_r+0xb8>
 800adbc:	4a29      	ldr	r2, [pc, #164]	; (800ae64 <__sflush_r+0x108>)
 800adbe:	410a      	asrs	r2, r1
 800adc0:	07d6      	lsls	r6, r2, #31
 800adc2:	d427      	bmi.n	800ae14 <__sflush_r+0xb8>
 800adc4:	2200      	movs	r2, #0
 800adc6:	6062      	str	r2, [r4, #4]
 800adc8:	04d9      	lsls	r1, r3, #19
 800adca:	6922      	ldr	r2, [r4, #16]
 800adcc:	6022      	str	r2, [r4, #0]
 800adce:	d504      	bpl.n	800adda <__sflush_r+0x7e>
 800add0:	1c42      	adds	r2, r0, #1
 800add2:	d101      	bne.n	800add8 <__sflush_r+0x7c>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	b903      	cbnz	r3, 800adda <__sflush_r+0x7e>
 800add8:	6560      	str	r0, [r4, #84]	; 0x54
 800adda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800addc:	602f      	str	r7, [r5, #0]
 800adde:	2900      	cmp	r1, #0
 800ade0:	d0c9      	beq.n	800ad76 <__sflush_r+0x1a>
 800ade2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ade6:	4299      	cmp	r1, r3
 800ade8:	d002      	beq.n	800adf0 <__sflush_r+0x94>
 800adea:	4628      	mov	r0, r5
 800adec:	f7ff f9f6 	bl	800a1dc <_free_r>
 800adf0:	2000      	movs	r0, #0
 800adf2:	6360      	str	r0, [r4, #52]	; 0x34
 800adf4:	e7c0      	b.n	800ad78 <__sflush_r+0x1c>
 800adf6:	2301      	movs	r3, #1
 800adf8:	4628      	mov	r0, r5
 800adfa:	47b0      	blx	r6
 800adfc:	1c41      	adds	r1, r0, #1
 800adfe:	d1c8      	bne.n	800ad92 <__sflush_r+0x36>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0c5      	beq.n	800ad92 <__sflush_r+0x36>
 800ae06:	2b1d      	cmp	r3, #29
 800ae08:	d001      	beq.n	800ae0e <__sflush_r+0xb2>
 800ae0a:	2b16      	cmp	r3, #22
 800ae0c:	d101      	bne.n	800ae12 <__sflush_r+0xb6>
 800ae0e:	602f      	str	r7, [r5, #0]
 800ae10:	e7b1      	b.n	800ad76 <__sflush_r+0x1a>
 800ae12:	89a3      	ldrh	r3, [r4, #12]
 800ae14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	e7ad      	b.n	800ad78 <__sflush_r+0x1c>
 800ae1c:	690f      	ldr	r7, [r1, #16]
 800ae1e:	2f00      	cmp	r7, #0
 800ae20:	d0a9      	beq.n	800ad76 <__sflush_r+0x1a>
 800ae22:	0793      	lsls	r3, r2, #30
 800ae24:	680e      	ldr	r6, [r1, #0]
 800ae26:	bf08      	it	eq
 800ae28:	694b      	ldreq	r3, [r1, #20]
 800ae2a:	600f      	str	r7, [r1, #0]
 800ae2c:	bf18      	it	ne
 800ae2e:	2300      	movne	r3, #0
 800ae30:	eba6 0807 	sub.w	r8, r6, r7
 800ae34:	608b      	str	r3, [r1, #8]
 800ae36:	f1b8 0f00 	cmp.w	r8, #0
 800ae3a:	dd9c      	ble.n	800ad76 <__sflush_r+0x1a>
 800ae3c:	6a21      	ldr	r1, [r4, #32]
 800ae3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae40:	4643      	mov	r3, r8
 800ae42:	463a      	mov	r2, r7
 800ae44:	4628      	mov	r0, r5
 800ae46:	47b0      	blx	r6
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	dc06      	bgt.n	800ae5a <__sflush_r+0xfe>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae52:	81a3      	strh	r3, [r4, #12]
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	e78e      	b.n	800ad78 <__sflush_r+0x1c>
 800ae5a:	4407      	add	r7, r0
 800ae5c:	eba8 0800 	sub.w	r8, r8, r0
 800ae60:	e7e9      	b.n	800ae36 <__sflush_r+0xda>
 800ae62:	bf00      	nop
 800ae64:	dfbffffe 	.word	0xdfbffffe

0800ae68 <_fflush_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	690b      	ldr	r3, [r1, #16]
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	460c      	mov	r4, r1
 800ae70:	b913      	cbnz	r3, 800ae78 <_fflush_r+0x10>
 800ae72:	2500      	movs	r5, #0
 800ae74:	4628      	mov	r0, r5
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	b118      	cbz	r0, 800ae82 <_fflush_r+0x1a>
 800ae7a:	6a03      	ldr	r3, [r0, #32]
 800ae7c:	b90b      	cbnz	r3, 800ae82 <_fflush_r+0x1a>
 800ae7e:	f7fe fa17 	bl	80092b0 <__sinit>
 800ae82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0f3      	beq.n	800ae72 <_fflush_r+0xa>
 800ae8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae8c:	07d0      	lsls	r0, r2, #31
 800ae8e:	d404      	bmi.n	800ae9a <_fflush_r+0x32>
 800ae90:	0599      	lsls	r1, r3, #22
 800ae92:	d402      	bmi.n	800ae9a <_fflush_r+0x32>
 800ae94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae96:	f7fe fb14 	bl	80094c2 <__retarget_lock_acquire_recursive>
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	f7ff ff5d 	bl	800ad5c <__sflush_r>
 800aea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aea4:	07da      	lsls	r2, r3, #31
 800aea6:	4605      	mov	r5, r0
 800aea8:	d4e4      	bmi.n	800ae74 <_fflush_r+0xc>
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	059b      	lsls	r3, r3, #22
 800aeae:	d4e1      	bmi.n	800ae74 <_fflush_r+0xc>
 800aeb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeb2:	f7fe fb07 	bl	80094c4 <__retarget_lock_release_recursive>
 800aeb6:	e7dd      	b.n	800ae74 <_fflush_r+0xc>

0800aeb8 <__swbuf_r>:
 800aeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeba:	460e      	mov	r6, r1
 800aebc:	4614      	mov	r4, r2
 800aebe:	4605      	mov	r5, r0
 800aec0:	b118      	cbz	r0, 800aeca <__swbuf_r+0x12>
 800aec2:	6a03      	ldr	r3, [r0, #32]
 800aec4:	b90b      	cbnz	r3, 800aeca <__swbuf_r+0x12>
 800aec6:	f7fe f9f3 	bl	80092b0 <__sinit>
 800aeca:	69a3      	ldr	r3, [r4, #24]
 800aecc:	60a3      	str	r3, [r4, #8]
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	071a      	lsls	r2, r3, #28
 800aed2:	d525      	bpl.n	800af20 <__swbuf_r+0x68>
 800aed4:	6923      	ldr	r3, [r4, #16]
 800aed6:	b31b      	cbz	r3, 800af20 <__swbuf_r+0x68>
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	6922      	ldr	r2, [r4, #16]
 800aedc:	1a98      	subs	r0, r3, r2
 800aede:	6963      	ldr	r3, [r4, #20]
 800aee0:	b2f6      	uxtb	r6, r6
 800aee2:	4283      	cmp	r3, r0
 800aee4:	4637      	mov	r7, r6
 800aee6:	dc04      	bgt.n	800aef2 <__swbuf_r+0x3a>
 800aee8:	4621      	mov	r1, r4
 800aeea:	4628      	mov	r0, r5
 800aeec:	f7ff ffbc 	bl	800ae68 <_fflush_r>
 800aef0:	b9e0      	cbnz	r0, 800af2c <__swbuf_r+0x74>
 800aef2:	68a3      	ldr	r3, [r4, #8]
 800aef4:	3b01      	subs	r3, #1
 800aef6:	60a3      	str	r3, [r4, #8]
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	6022      	str	r2, [r4, #0]
 800aefe:	701e      	strb	r6, [r3, #0]
 800af00:	6962      	ldr	r2, [r4, #20]
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	429a      	cmp	r2, r3
 800af06:	d004      	beq.n	800af12 <__swbuf_r+0x5a>
 800af08:	89a3      	ldrh	r3, [r4, #12]
 800af0a:	07db      	lsls	r3, r3, #31
 800af0c:	d506      	bpl.n	800af1c <__swbuf_r+0x64>
 800af0e:	2e0a      	cmp	r6, #10
 800af10:	d104      	bne.n	800af1c <__swbuf_r+0x64>
 800af12:	4621      	mov	r1, r4
 800af14:	4628      	mov	r0, r5
 800af16:	f7ff ffa7 	bl	800ae68 <_fflush_r>
 800af1a:	b938      	cbnz	r0, 800af2c <__swbuf_r+0x74>
 800af1c:	4638      	mov	r0, r7
 800af1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af20:	4621      	mov	r1, r4
 800af22:	4628      	mov	r0, r5
 800af24:	f000 f806 	bl	800af34 <__swsetup_r>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d0d5      	beq.n	800aed8 <__swbuf_r+0x20>
 800af2c:	f04f 37ff 	mov.w	r7, #4294967295
 800af30:	e7f4      	b.n	800af1c <__swbuf_r+0x64>
	...

0800af34 <__swsetup_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4b2a      	ldr	r3, [pc, #168]	; (800afe0 <__swsetup_r+0xac>)
 800af38:	4605      	mov	r5, r0
 800af3a:	6818      	ldr	r0, [r3, #0]
 800af3c:	460c      	mov	r4, r1
 800af3e:	b118      	cbz	r0, 800af48 <__swsetup_r+0x14>
 800af40:	6a03      	ldr	r3, [r0, #32]
 800af42:	b90b      	cbnz	r3, 800af48 <__swsetup_r+0x14>
 800af44:	f7fe f9b4 	bl	80092b0 <__sinit>
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af4e:	0718      	lsls	r0, r3, #28
 800af50:	d422      	bmi.n	800af98 <__swsetup_r+0x64>
 800af52:	06d9      	lsls	r1, r3, #27
 800af54:	d407      	bmi.n	800af66 <__swsetup_r+0x32>
 800af56:	2309      	movs	r3, #9
 800af58:	602b      	str	r3, [r5, #0]
 800af5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af5e:	81a3      	strh	r3, [r4, #12]
 800af60:	f04f 30ff 	mov.w	r0, #4294967295
 800af64:	e034      	b.n	800afd0 <__swsetup_r+0x9c>
 800af66:	0758      	lsls	r0, r3, #29
 800af68:	d512      	bpl.n	800af90 <__swsetup_r+0x5c>
 800af6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af6c:	b141      	cbz	r1, 800af80 <__swsetup_r+0x4c>
 800af6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af72:	4299      	cmp	r1, r3
 800af74:	d002      	beq.n	800af7c <__swsetup_r+0x48>
 800af76:	4628      	mov	r0, r5
 800af78:	f7ff f930 	bl	800a1dc <_free_r>
 800af7c:	2300      	movs	r3, #0
 800af7e:	6363      	str	r3, [r4, #52]	; 0x34
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af86:	81a3      	strh	r3, [r4, #12]
 800af88:	2300      	movs	r3, #0
 800af8a:	6063      	str	r3, [r4, #4]
 800af8c:	6923      	ldr	r3, [r4, #16]
 800af8e:	6023      	str	r3, [r4, #0]
 800af90:	89a3      	ldrh	r3, [r4, #12]
 800af92:	f043 0308 	orr.w	r3, r3, #8
 800af96:	81a3      	strh	r3, [r4, #12]
 800af98:	6923      	ldr	r3, [r4, #16]
 800af9a:	b94b      	cbnz	r3, 800afb0 <__swsetup_r+0x7c>
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afa6:	d003      	beq.n	800afb0 <__swsetup_r+0x7c>
 800afa8:	4621      	mov	r1, r4
 800afaa:	4628      	mov	r0, r5
 800afac:	f000 f8b6 	bl	800b11c <__smakebuf_r>
 800afb0:	89a0      	ldrh	r0, [r4, #12]
 800afb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afb6:	f010 0301 	ands.w	r3, r0, #1
 800afba:	d00a      	beq.n	800afd2 <__swsetup_r+0x9e>
 800afbc:	2300      	movs	r3, #0
 800afbe:	60a3      	str	r3, [r4, #8]
 800afc0:	6963      	ldr	r3, [r4, #20]
 800afc2:	425b      	negs	r3, r3
 800afc4:	61a3      	str	r3, [r4, #24]
 800afc6:	6923      	ldr	r3, [r4, #16]
 800afc8:	b943      	cbnz	r3, 800afdc <__swsetup_r+0xa8>
 800afca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afce:	d1c4      	bne.n	800af5a <__swsetup_r+0x26>
 800afd0:	bd38      	pop	{r3, r4, r5, pc}
 800afd2:	0781      	lsls	r1, r0, #30
 800afd4:	bf58      	it	pl
 800afd6:	6963      	ldrpl	r3, [r4, #20]
 800afd8:	60a3      	str	r3, [r4, #8]
 800afda:	e7f4      	b.n	800afc6 <__swsetup_r+0x92>
 800afdc:	2000      	movs	r0, #0
 800afde:	e7f7      	b.n	800afd0 <__swsetup_r+0x9c>
 800afe0:	20000088 	.word	0x20000088

0800afe4 <_sbrk_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d06      	ldr	r5, [pc, #24]	; (800b000 <_sbrk_r+0x1c>)
 800afe8:	2300      	movs	r3, #0
 800afea:	4604      	mov	r4, r0
 800afec:	4608      	mov	r0, r1
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	f7f7 faec 	bl	80025cc <_sbrk>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	d102      	bne.n	800affe <_sbrk_r+0x1a>
 800aff8:	682b      	ldr	r3, [r5, #0]
 800affa:	b103      	cbz	r3, 800affe <_sbrk_r+0x1a>
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	20004ff4 	.word	0x20004ff4

0800b004 <__assert_func>:
 800b004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b006:	4614      	mov	r4, r2
 800b008:	461a      	mov	r2, r3
 800b00a:	4b09      	ldr	r3, [pc, #36]	; (800b030 <__assert_func+0x2c>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4605      	mov	r5, r0
 800b010:	68d8      	ldr	r0, [r3, #12]
 800b012:	b14c      	cbz	r4, 800b028 <__assert_func+0x24>
 800b014:	4b07      	ldr	r3, [pc, #28]	; (800b034 <__assert_func+0x30>)
 800b016:	9100      	str	r1, [sp, #0]
 800b018:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b01c:	4906      	ldr	r1, [pc, #24]	; (800b038 <__assert_func+0x34>)
 800b01e:	462b      	mov	r3, r5
 800b020:	f000 f844 	bl	800b0ac <fiprintf>
 800b024:	f000 f8d8 	bl	800b1d8 <abort>
 800b028:	4b04      	ldr	r3, [pc, #16]	; (800b03c <__assert_func+0x38>)
 800b02a:	461c      	mov	r4, r3
 800b02c:	e7f3      	b.n	800b016 <__assert_func+0x12>
 800b02e:	bf00      	nop
 800b030:	20000088 	.word	0x20000088
 800b034:	0800b58f 	.word	0x0800b58f
 800b038:	0800b59c 	.word	0x0800b59c
 800b03c:	0800b5ca 	.word	0x0800b5ca

0800b040 <_calloc_r>:
 800b040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b042:	fba1 2402 	umull	r2, r4, r1, r2
 800b046:	b94c      	cbnz	r4, 800b05c <_calloc_r+0x1c>
 800b048:	4611      	mov	r1, r2
 800b04a:	9201      	str	r2, [sp, #4]
 800b04c:	f7ff f93a 	bl	800a2c4 <_malloc_r>
 800b050:	9a01      	ldr	r2, [sp, #4]
 800b052:	4605      	mov	r5, r0
 800b054:	b930      	cbnz	r0, 800b064 <_calloc_r+0x24>
 800b056:	4628      	mov	r0, r5
 800b058:	b003      	add	sp, #12
 800b05a:	bd30      	pop	{r4, r5, pc}
 800b05c:	220c      	movs	r2, #12
 800b05e:	6002      	str	r2, [r0, #0]
 800b060:	2500      	movs	r5, #0
 800b062:	e7f8      	b.n	800b056 <_calloc_r+0x16>
 800b064:	4621      	mov	r1, r4
 800b066:	f7fe f9ae 	bl	80093c6 <memset>
 800b06a:	e7f4      	b.n	800b056 <_calloc_r+0x16>

0800b06c <__ascii_mbtowc>:
 800b06c:	b082      	sub	sp, #8
 800b06e:	b901      	cbnz	r1, 800b072 <__ascii_mbtowc+0x6>
 800b070:	a901      	add	r1, sp, #4
 800b072:	b142      	cbz	r2, 800b086 <__ascii_mbtowc+0x1a>
 800b074:	b14b      	cbz	r3, 800b08a <__ascii_mbtowc+0x1e>
 800b076:	7813      	ldrb	r3, [r2, #0]
 800b078:	600b      	str	r3, [r1, #0]
 800b07a:	7812      	ldrb	r2, [r2, #0]
 800b07c:	1e10      	subs	r0, r2, #0
 800b07e:	bf18      	it	ne
 800b080:	2001      	movne	r0, #1
 800b082:	b002      	add	sp, #8
 800b084:	4770      	bx	lr
 800b086:	4610      	mov	r0, r2
 800b088:	e7fb      	b.n	800b082 <__ascii_mbtowc+0x16>
 800b08a:	f06f 0001 	mvn.w	r0, #1
 800b08e:	e7f8      	b.n	800b082 <__ascii_mbtowc+0x16>

0800b090 <__ascii_wctomb>:
 800b090:	b149      	cbz	r1, 800b0a6 <__ascii_wctomb+0x16>
 800b092:	2aff      	cmp	r2, #255	; 0xff
 800b094:	bf85      	ittet	hi
 800b096:	238a      	movhi	r3, #138	; 0x8a
 800b098:	6003      	strhi	r3, [r0, #0]
 800b09a:	700a      	strbls	r2, [r1, #0]
 800b09c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0a0:	bf98      	it	ls
 800b0a2:	2001      	movls	r0, #1
 800b0a4:	4770      	bx	lr
 800b0a6:	4608      	mov	r0, r1
 800b0a8:	4770      	bx	lr
	...

0800b0ac <fiprintf>:
 800b0ac:	b40e      	push	{r1, r2, r3}
 800b0ae:	b503      	push	{r0, r1, lr}
 800b0b0:	4601      	mov	r1, r0
 800b0b2:	ab03      	add	r3, sp, #12
 800b0b4:	4805      	ldr	r0, [pc, #20]	; (800b0cc <fiprintf+0x20>)
 800b0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ba:	6800      	ldr	r0, [r0, #0]
 800b0bc:	9301      	str	r3, [sp, #4]
 800b0be:	f7ff fd33 	bl	800ab28 <_vfiprintf_r>
 800b0c2:	b002      	add	sp, #8
 800b0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0c8:	b003      	add	sp, #12
 800b0ca:	4770      	bx	lr
 800b0cc:	20000088 	.word	0x20000088

0800b0d0 <__swhatbuf_r>:
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d8:	2900      	cmp	r1, #0
 800b0da:	b096      	sub	sp, #88	; 0x58
 800b0dc:	4615      	mov	r5, r2
 800b0de:	461e      	mov	r6, r3
 800b0e0:	da0d      	bge.n	800b0fe <__swhatbuf_r+0x2e>
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b0e8:	f04f 0100 	mov.w	r1, #0
 800b0ec:	bf0c      	ite	eq
 800b0ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b0f2:	2340      	movne	r3, #64	; 0x40
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	6031      	str	r1, [r6, #0]
 800b0f8:	602b      	str	r3, [r5, #0]
 800b0fa:	b016      	add	sp, #88	; 0x58
 800b0fc:	bd70      	pop	{r4, r5, r6, pc}
 800b0fe:	466a      	mov	r2, sp
 800b100:	f000 f848 	bl	800b194 <_fstat_r>
 800b104:	2800      	cmp	r0, #0
 800b106:	dbec      	blt.n	800b0e2 <__swhatbuf_r+0x12>
 800b108:	9901      	ldr	r1, [sp, #4]
 800b10a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b10e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b112:	4259      	negs	r1, r3
 800b114:	4159      	adcs	r1, r3
 800b116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b11a:	e7eb      	b.n	800b0f4 <__swhatbuf_r+0x24>

0800b11c <__smakebuf_r>:
 800b11c:	898b      	ldrh	r3, [r1, #12]
 800b11e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b120:	079d      	lsls	r5, r3, #30
 800b122:	4606      	mov	r6, r0
 800b124:	460c      	mov	r4, r1
 800b126:	d507      	bpl.n	800b138 <__smakebuf_r+0x1c>
 800b128:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	6123      	str	r3, [r4, #16]
 800b130:	2301      	movs	r3, #1
 800b132:	6163      	str	r3, [r4, #20]
 800b134:	b002      	add	sp, #8
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	ab01      	add	r3, sp, #4
 800b13a:	466a      	mov	r2, sp
 800b13c:	f7ff ffc8 	bl	800b0d0 <__swhatbuf_r>
 800b140:	9900      	ldr	r1, [sp, #0]
 800b142:	4605      	mov	r5, r0
 800b144:	4630      	mov	r0, r6
 800b146:	f7ff f8bd 	bl	800a2c4 <_malloc_r>
 800b14a:	b948      	cbnz	r0, 800b160 <__smakebuf_r+0x44>
 800b14c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b150:	059a      	lsls	r2, r3, #22
 800b152:	d4ef      	bmi.n	800b134 <__smakebuf_r+0x18>
 800b154:	f023 0303 	bic.w	r3, r3, #3
 800b158:	f043 0302 	orr.w	r3, r3, #2
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	e7e3      	b.n	800b128 <__smakebuf_r+0xc>
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	6020      	str	r0, [r4, #0]
 800b164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b168:	81a3      	strh	r3, [r4, #12]
 800b16a:	9b00      	ldr	r3, [sp, #0]
 800b16c:	6163      	str	r3, [r4, #20]
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	6120      	str	r0, [r4, #16]
 800b172:	b15b      	cbz	r3, 800b18c <__smakebuf_r+0x70>
 800b174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b178:	4630      	mov	r0, r6
 800b17a:	f000 f81d 	bl	800b1b8 <_isatty_r>
 800b17e:	b128      	cbz	r0, 800b18c <__smakebuf_r+0x70>
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	f023 0303 	bic.w	r3, r3, #3
 800b186:	f043 0301 	orr.w	r3, r3, #1
 800b18a:	81a3      	strh	r3, [r4, #12]
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	431d      	orrs	r5, r3
 800b190:	81a5      	strh	r5, [r4, #12]
 800b192:	e7cf      	b.n	800b134 <__smakebuf_r+0x18>

0800b194 <_fstat_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4d07      	ldr	r5, [pc, #28]	; (800b1b4 <_fstat_r+0x20>)
 800b198:	2300      	movs	r3, #0
 800b19a:	4604      	mov	r4, r0
 800b19c:	4608      	mov	r0, r1
 800b19e:	4611      	mov	r1, r2
 800b1a0:	602b      	str	r3, [r5, #0]
 800b1a2:	f7f7 f9ea 	bl	800257a <_fstat>
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	d102      	bne.n	800b1b0 <_fstat_r+0x1c>
 800b1aa:	682b      	ldr	r3, [r5, #0]
 800b1ac:	b103      	cbz	r3, 800b1b0 <_fstat_r+0x1c>
 800b1ae:	6023      	str	r3, [r4, #0]
 800b1b0:	bd38      	pop	{r3, r4, r5, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20004ff4 	.word	0x20004ff4

0800b1b8 <_isatty_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4d06      	ldr	r5, [pc, #24]	; (800b1d4 <_isatty_r+0x1c>)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	4604      	mov	r4, r0
 800b1c0:	4608      	mov	r0, r1
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	f7f7 f9e9 	bl	800259a <_isatty>
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	d102      	bne.n	800b1d2 <_isatty_r+0x1a>
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	b103      	cbz	r3, 800b1d2 <_isatty_r+0x1a>
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	bd38      	pop	{r3, r4, r5, pc}
 800b1d4:	20004ff4 	.word	0x20004ff4

0800b1d8 <abort>:
 800b1d8:	b508      	push	{r3, lr}
 800b1da:	2006      	movs	r0, #6
 800b1dc:	f000 f82c 	bl	800b238 <raise>
 800b1e0:	2001      	movs	r0, #1
 800b1e2:	f7f7 f97b 	bl	80024dc <_exit>

0800b1e6 <_raise_r>:
 800b1e6:	291f      	cmp	r1, #31
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	460d      	mov	r5, r1
 800b1ee:	d904      	bls.n	800b1fa <_raise_r+0x14>
 800b1f0:	2316      	movs	r3, #22
 800b1f2:	6003      	str	r3, [r0, #0]
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f8:	bd38      	pop	{r3, r4, r5, pc}
 800b1fa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b1fc:	b112      	cbz	r2, 800b204 <_raise_r+0x1e>
 800b1fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b202:	b94b      	cbnz	r3, 800b218 <_raise_r+0x32>
 800b204:	4620      	mov	r0, r4
 800b206:	f000 f831 	bl	800b26c <_getpid_r>
 800b20a:	462a      	mov	r2, r5
 800b20c:	4601      	mov	r1, r0
 800b20e:	4620      	mov	r0, r4
 800b210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b214:	f000 b818 	b.w	800b248 <_kill_r>
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d00a      	beq.n	800b232 <_raise_r+0x4c>
 800b21c:	1c59      	adds	r1, r3, #1
 800b21e:	d103      	bne.n	800b228 <_raise_r+0x42>
 800b220:	2316      	movs	r3, #22
 800b222:	6003      	str	r3, [r0, #0]
 800b224:	2001      	movs	r0, #1
 800b226:	e7e7      	b.n	800b1f8 <_raise_r+0x12>
 800b228:	2400      	movs	r4, #0
 800b22a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b22e:	4628      	mov	r0, r5
 800b230:	4798      	blx	r3
 800b232:	2000      	movs	r0, #0
 800b234:	e7e0      	b.n	800b1f8 <_raise_r+0x12>
	...

0800b238 <raise>:
 800b238:	4b02      	ldr	r3, [pc, #8]	; (800b244 <raise+0xc>)
 800b23a:	4601      	mov	r1, r0
 800b23c:	6818      	ldr	r0, [r3, #0]
 800b23e:	f7ff bfd2 	b.w	800b1e6 <_raise_r>
 800b242:	bf00      	nop
 800b244:	20000088 	.word	0x20000088

0800b248 <_kill_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4d07      	ldr	r5, [pc, #28]	; (800b268 <_kill_r+0x20>)
 800b24c:	2300      	movs	r3, #0
 800b24e:	4604      	mov	r4, r0
 800b250:	4608      	mov	r0, r1
 800b252:	4611      	mov	r1, r2
 800b254:	602b      	str	r3, [r5, #0]
 800b256:	f7f7 f931 	bl	80024bc <_kill>
 800b25a:	1c43      	adds	r3, r0, #1
 800b25c:	d102      	bne.n	800b264 <_kill_r+0x1c>
 800b25e:	682b      	ldr	r3, [r5, #0]
 800b260:	b103      	cbz	r3, 800b264 <_kill_r+0x1c>
 800b262:	6023      	str	r3, [r4, #0]
 800b264:	bd38      	pop	{r3, r4, r5, pc}
 800b266:	bf00      	nop
 800b268:	20004ff4 	.word	0x20004ff4

0800b26c <_getpid_r>:
 800b26c:	f7f7 b91e 	b.w	80024ac <_getpid>

0800b270 <_init>:
 800b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b272:	bf00      	nop
 800b274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b276:	bc08      	pop	{r3}
 800b278:	469e      	mov	lr, r3
 800b27a:	4770      	bx	lr

0800b27c <_fini>:
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27e:	bf00      	nop
 800b280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b282:	bc08      	pop	{r3}
 800b284:	469e      	mov	lr, r3
 800b286:	4770      	bx	lr
