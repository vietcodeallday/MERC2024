
motor MERC2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08008cf0  08008cf0  00018cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092e0  080092e0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080092e0  080092e0  000192e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092e8  080092e8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092ec  080092ec  000192ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080092f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200001d8  080094c4  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  080094c4  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e09b  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000230d  00000000  00000000  0002e2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  000305f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a51  00000000  00000000  00031338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180da  00000000  00000000  00031d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010828  00000000  00000000  00049e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000907c2  00000000  00000000  0005a68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a08  00000000  00000000  000eae50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ef858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008cd8 	.word	0x08008cd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008cd8 	.word	0x08008cd8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b990 	b.w	8000fd0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f826 	bl	8000d08 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_f2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	f7ff fc45 	bl	8000558 <__aeabi_f2d>
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_f2ulz+0x38>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc97 	bl	8000608 <__aeabi_dmul>
 8000cda:	f7ff ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc18 	bl	8000514 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_f2ulz+0x3c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc8e 	bl	8000608 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fad0 	bl	8000298 <__aeabi_dsub>
 8000cf8:	f7ff ff5e 	bl	8000bb8 <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	0000      	movs	r0, r0
	...

08000fd8 <get_rpm>:
	double rpm;
	uint16_t cnt=0;
	uint16_t preCnt=0;
	int loop=0;
	bool flag_rot;
double get_rpm(int motor){
 8000fd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
	reset_tick();
 8000fe2:	f000 f9b9 	bl	8001358 <reset_tick>

	switch (motor){
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d029      	beq.n	8001040 <get_rpm+0x68>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	dc36      	bgt.n	8001060 <get_rpm+0x88>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d003      	beq.n	8001000 <get_rpm+0x28>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d010      	beq.n	8001020 <get_rpm+0x48>
 8000ffe:	e02f      	b.n	8001060 <get_rpm+0x88>
		case MOTOR_1:
			__HAL_TIM_SET_COUNTER(&htim1, (flag_rot_1)?65535:0);
 8001000:	4b69      	ldr	r3, [pc, #420]	; (80011a8 <get_rpm+0x1d0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <get_rpm+0x36>
 8001008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800100c:	e000      	b.n	8001010 <get_rpm+0x38>
 800100e:	2200      	movs	r2, #0
 8001010:	4b66      	ldr	r3, [pc, #408]	; (80011ac <get_rpm+0x1d4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_1;
 8001016:	4b64      	ldr	r3, [pc, #400]	; (80011a8 <get_rpm+0x1d0>)
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	4b65      	ldr	r3, [pc, #404]	; (80011b0 <get_rpm+0x1d8>)
 800101c:	701a      	strb	r2, [r3, #0]
			break;
 800101e:	e01f      	b.n	8001060 <get_rpm+0x88>
		case MOTOR_2:
			__HAL_TIM_SET_COUNTER(&htim3, (flag_rot_2)?65535:0);
 8001020:	4b64      	ldr	r3, [pc, #400]	; (80011b4 <get_rpm+0x1dc>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <get_rpm+0x56>
 8001028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102c:	e000      	b.n	8001030 <get_rpm+0x58>
 800102e:	2200      	movs	r2, #0
 8001030:	4b61      	ldr	r3, [pc, #388]	; (80011b8 <get_rpm+0x1e0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_2;
 8001036:	4b5f      	ldr	r3, [pc, #380]	; (80011b4 <get_rpm+0x1dc>)
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	4b5d      	ldr	r3, [pc, #372]	; (80011b0 <get_rpm+0x1d8>)
 800103c:	701a      	strb	r2, [r3, #0]
			break;
 800103e:	e00f      	b.n	8001060 <get_rpm+0x88>
		case MOTOR_3:
			__HAL_TIM_SET_COUNTER(&htim4, (flag_rot_3)?65535:0);
 8001040:	4b5e      	ldr	r3, [pc, #376]	; (80011bc <get_rpm+0x1e4>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <get_rpm+0x76>
 8001048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800104c:	e000      	b.n	8001050 <get_rpm+0x78>
 800104e:	2200      	movs	r2, #0
 8001050:	4b5b      	ldr	r3, [pc, #364]	; (80011c0 <get_rpm+0x1e8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_3;
 8001056:	4b59      	ldr	r3, [pc, #356]	; (80011bc <get_rpm+0x1e4>)
 8001058:	781a      	ldrb	r2, [r3, #0]
 800105a:	4b55      	ldr	r3, [pc, #340]	; (80011b0 <get_rpm+0x1d8>)
 800105c:	701a      	strb	r2, [r3, #0]
			break;
 800105e:	bf00      	nop
	}
	ResetLoop(flag_rot);
 8001060:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <get_rpm+0x1d8>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f8eb 	bl	8001240 <ResetLoop>
	volatile uint16_t a=millis();
 800106a:	f000 f95b 	bl	8001324 <millis>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	b293      	uxth	r3, r2
 8001074:	81fb      	strh	r3, [r7, #14]

	while(millis()- a <=250){
 8001076:	e029      	b.n	80010cc <get_rpm+0xf4>
		switch (motor){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d017      	beq.n	80010ae <get_rpm+0xd6>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b03      	cmp	r3, #3
 8001082:	dc1b      	bgt.n	80010bc <get_rpm+0xe4>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d003      	beq.n	8001092 <get_rpm+0xba>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d007      	beq.n	80010a0 <get_rpm+0xc8>
 8001090:	e014      	b.n	80010bc <get_rpm+0xe4>
			case MOTOR_1:
				cnt = __HAL_TIM_GET_COUNTER(&htim1);
 8001092:	4b46      	ldr	r3, [pc, #280]	; (80011ac <get_rpm+0x1d4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	b29a      	uxth	r2, r3
 800109a:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <get_rpm+0x1ec>)
 800109c:	801a      	strh	r2, [r3, #0]
				break;
 800109e:	e00d      	b.n	80010bc <get_rpm+0xe4>

			case MOTOR_2:
				cnt = __HAL_TIM_GET_COUNTER(&htim3);
 80010a0:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <get_rpm+0x1e0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <get_rpm+0x1ec>)
 80010aa:	801a      	strh	r2, [r3, #0]
				break;
 80010ac:	e006      	b.n	80010bc <get_rpm+0xe4>

			case MOTOR_3:
				cnt = __HAL_TIM_GET_COUNTER(&htim4);
 80010ae:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <get_rpm+0x1e8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <get_rpm+0x1ec>)
 80010b8:	801a      	strh	r2, [r3, #0]
				break;
 80010ba:	bf00      	nop
		}
		CountLoop(cnt, flag_rot);
 80010bc:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <get_rpm+0x1ec>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	4a3b      	ldr	r2, [pc, #236]	; (80011b0 <get_rpm+0x1d8>)
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f886 	bl	80011d8 <CountLoop>
	while(millis()- a <=250){
 80010cc:	f000 f92a 	bl	8001324 <millis>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	89f9      	ldrh	r1, [r7, #14]
 80010d6:	b289      	uxth	r1, r1
 80010d8:	b289      	uxth	r1, r1
 80010da:	2000      	movs	r0, #0
 80010dc:	4688      	mov	r8, r1
 80010de:	4681      	mov	r9, r0
 80010e0:	ebb2 0408 	subs.w	r4, r2, r8
 80010e4:	eb63 0509 	sbc.w	r5, r3, r9
 80010e8:	2cfb      	cmp	r4, #251	; 0xfb
 80010ea:	f175 0300 	sbcs.w	r3, r5, #0
 80010ee:	d3c3      	bcc.n	8001078 <get_rpm+0xa0>
	}
	rpm= ((double)loop*65000+((flag_rot)?(double)(65535-cnt):(double)cnt))/47000*4*60;
 80010f0:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <get_rpm+0x1f0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa1d 	bl	8000534 <__aeabi_i2d>
 80010fa:	a327      	add	r3, pc, #156	; (adr r3, 8001198 <get_rpm+0x1c0>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff fa82 	bl	8000608 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4614      	mov	r4, r2
 800110a:	461d      	mov	r5, r3
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <get_rpm+0x1d8>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <get_rpm+0x14e>
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <get_rpm+0x1ec>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800111c:	33ff      	adds	r3, #255	; 0xff
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa08 	bl	8000534 <__aeabi_i2d>
 8001124:	e004      	b.n	8001130 <get_rpm+0x158>
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <get_rpm+0x1ec>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f9f2 	bl	8000514 <__aeabi_ui2d>
 8001130:	4622      	mov	r2, r4
 8001132:	462b      	mov	r3, r5
 8001134:	f7ff f8b2 	bl	800029c <__adddf3>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	a317      	add	r3, pc, #92	; (adr r3, 80011a0 <get_rpm+0x1c8>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fb89 	bl	800085c <__aeabi_ddiv>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <get_rpm+0x1f4>)
 8001158:	f7ff fa56 	bl	8000608 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <get_rpm+0x1f8>)
 800116a:	f7ff fa4d 	bl	8000608 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4918      	ldr	r1, [pc, #96]	; (80011d4 <get_rpm+0x1fc>)
 8001174:	e9c1 2300 	strd	r2, r3, [r1]

	return rpm;
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <get_rpm+0x1fc>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001182:	eeb0 0a47 	vmov.f32	s0, s14
 8001186:	eef0 0a67 	vmov.f32	s1, s15
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001192:	bf00      	nop
 8001194:	f3af 8000 	nop.w
 8001198:	00000000 	.word	0x00000000
 800119c:	40efbd00 	.word	0x40efbd00
 80011a0:	00000000 	.word	0x00000000
 80011a4:	40e6f300 	.word	0x40e6f300
 80011a8:	200003f0 	.word	0x200003f0
 80011ac:	20000220 	.word	0x20000220
 80011b0:	20000208 	.word	0x20000208
 80011b4:	200003f1 	.word	0x200003f1
 80011b8:	200002b0 	.word	0x200002b0
 80011bc:	200003f2 	.word	0x200003f2
 80011c0:	200002f8 	.word	0x200002f8
 80011c4:	20000200 	.word	0x20000200
 80011c8:	20000204 	.word	0x20000204
 80011cc:	40100000 	.word	0x40100000
 80011d0:	404e0000 	.word	0x404e0000
 80011d4:	200001f8 	.word	0x200001f8

080011d8 <CountLoop>:
void CountLoop(uint16_t cnt, bool flag){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	460a      	mov	r2, r1
 80011e2:	80fb      	strh	r3, [r7, #6]
 80011e4:	4613      	mov	r3, r2
 80011e6:	717b      	strb	r3, [r7, #5]
	if (!flag){
 80011e8:	797b      	ldrb	r3, [r7, #5]
 80011ea:	f083 0301 	eor.w	r3, r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00d      	beq.n	8001210 <CountLoop+0x38>
		if(cnt<preCnt){ //working as MOTOR1=RESET, MOTOR2=RESET, MOTOR3=RESET
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <CountLoop+0x60>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	88fa      	ldrh	r2, [r7, #6]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d204      	bcs.n	8001208 <CountLoop+0x30>
			loop++;
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <CountLoop+0x64>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <CountLoop+0x64>)
 8001206:	6013      	str	r3, [r2, #0]
		}
		preCnt=cnt;
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <CountLoop+0x60>)
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	8013      	strh	r3, [r2, #0]
		if(cnt>preCnt){	//
			loop++;
		}
		preCnt=cnt;
	}
}
 800120e:	e00c      	b.n	800122a <CountLoop+0x52>
		if(cnt>preCnt){	//
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <CountLoop+0x60>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	88fa      	ldrh	r2, [r7, #6]
 8001216:	429a      	cmp	r2, r3
 8001218:	d904      	bls.n	8001224 <CountLoop+0x4c>
			loop++;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <CountLoop+0x64>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <CountLoop+0x64>)
 8001222:	6013      	str	r3, [r2, #0]
		preCnt=cnt;
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <CountLoop+0x60>)
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	8013      	strh	r3, [r2, #0]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000202 	.word	0x20000202
 800123c:	20000204 	.word	0x20000204

08001240 <ResetLoop>:
void ResetLoop(bool flag){
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	if(!flag){
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f083 0301 	eor.w	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <ResetLoop+0x24>
		loop=0;
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <ResetLoop+0x40>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
		preCnt=0;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <ResetLoop+0x44>)
 800125e:	2200      	movs	r2, #0
 8001260:	801a      	strh	r2, [r3, #0]
	}else{
		loop=0;
		preCnt=65535;
	}
}
 8001262:	e006      	b.n	8001272 <ResetLoop+0x32>
		loop=0;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <ResetLoop+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
		preCnt=65535;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <ResetLoop+0x44>)
 800126c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001270:	801a      	strh	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000204 	.word	0x20000204
 8001284:	20000202 	.word	0x20000202

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <systick_init_ms>:
#include "stm32f4xx.h"                  // Device header
#include "stm32f4xx_it.h"

volatile uint64_t ms,rms;
void systick_init_ms(uint32_t freq) /*Frequency in MHz*/
	{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
	__disable_irq();
	SysTick->LOAD=(freq/1000)-1;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a0c      	ldr	r2, [pc, #48]	; (800131c <systick_init_ms+0x40>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	099b      	lsrs	r3, r3, #6
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <systick_init_ms+0x44>)
 80012f4:	3b01      	subs	r3, #1
 80012f6:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <systick_init_ms+0x44>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=7; //0b00000111;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <systick_init_ms+0x44>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(SysTick_IRQn,7);
 8001304:	2107      	movs	r1, #7
 8001306:	f04f 30ff 	mov.w	r0, #4294967295
 800130a:	f7ff ffbd 	bl	8001288 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800130e:	b662      	cpsie	i
}
 8001310:	bf00      	nop
	__enable_irq();	
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	10624dd3 	.word	0x10624dd3
 8001320:	e000e010 	.word	0xe000e010

08001324 <millis>:

uint64_t millis(void)
	{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
	__disable_irq();
	rms=ms; //store current ms in rms
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <millis+0x2c>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <millis+0x30>)
 8001334:	e9c1 2300 	strd	r2, r3, [r1]
  __ASM volatile ("cpsie i" : : : "memory");
 8001338:	b662      	cpsie	i
}
 800133a:	bf00      	nop
	__enable_irq();
	return rms;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <millis+0x30>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
	}
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000210 	.word	0x20000210
 8001354:	20000218 	.word	0x20000218

08001358 <reset_tick>:

void reset_tick(void){
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	ms=0;
 800135c:	4909      	ldr	r1, [pc, #36]	; (8001384 <reset_tick+0x2c>)
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	e9c1 2300 	strd	r2, r3, [r1]
	rms=0;
 800136a:	4907      	ldr	r1, [pc, #28]	; (8001388 <reset_tick+0x30>)
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000210 	.word	0x20000210
 8001388:	20000218 	.word	0x20000218

0800138c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001394:	1d39      	adds	r1, r7, #4
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	2201      	movs	r2, #1
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <__io_putchar+0x20>)
 800139e:	f003 fb79 	bl	8004a94 <HAL_UART_Transmit>
  return ch;
 80013a2:	687b      	ldr	r3, [r7, #4]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000340 	.word	0x20000340

080013b0 <pid_config>:
void pid_config(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	pid_par.Kp=1.4;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <pid_config+0x80>)
 80013b6:	4a1f      	ldr	r2, [pc, #124]	; (8001434 <pid_config+0x84>)
 80013b8:	601a      	str	r2, [r3, #0]
	pid_par.Ki=0.001;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <pid_config+0x80>)
 80013bc:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <pid_config+0x88>)
 80013be:	605a      	str	r2, [r3, #4]
	pid_par.Kd=1;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <pid_config+0x80>)
 80013c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013c6:	609a      	str	r2, [r3, #8]
	pid_par.Ts=1;
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <pid_config+0x80>)
 80013ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013ce:	60da      	str	r2, [r3, #12]
	pid_par.Anti_windup=Anti_windup_disabled;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <pid_config+0x80>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
	pid_par.Anti_windup_error=10;
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <pid_config+0x80>)
 80013d8:	4a18      	ldr	r2, [pc, #96]	; (800143c <pid_config+0x8c>)
 80013da:	61da      	str	r2, [r3, #28]
	pid_par.Set_point_motor_1=V1;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <pid_config+0x90>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fc07 	bl	8000bf8 <__aeabi_d2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a10      	ldr	r2, [pc, #64]	; (8001430 <pid_config+0x80>)
 80013ee:	6113      	str	r3, [r2, #16]
	pid_par.Set_point_motor_2=V2;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <pid_config+0x94>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fbfd 	bl	8000bf8 <__aeabi_d2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <pid_config+0x80>)
 8001402:	6153      	str	r3, [r2, #20]
	pid_par.Set_point_motor_3=V3;
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <pid_config+0x98>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fbf3 	bl	8000bf8 <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <pid_config+0x80>)
 8001416:	6193      	str	r3, [r2, #24]
	pid_par.Outmin=-10;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <pid_config+0x80>)
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <pid_config+0x9c>)
 800141c:	621a      	str	r2, [r3, #32]
	pid_par.Outmax=10;
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <pid_config+0x80>)
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <pid_config+0x8c>)
 8001422:	625a      	str	r2, [r3, #36]	; 0x24

	PID_init(&pid_par);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <pid_config+0x80>)
 8001426:	f000 fee5 	bl	80021f4 <PID_init>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000388 	.word	0x20000388
 8001434:	3fb33333 	.word	0x3fb33333
 8001438:	3a83126f 	.word	0x3a83126f
 800143c:	41200000 	.word	0x41200000
 8001440:	200003d8 	.word	0x200003d8
 8001444:	200003e0 	.word	0x200003e0
 8001448:	200003e8 	.word	0x200003e8
 800144c:	c1200000 	.word	0xc1200000

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001454:	ed2d 8b02 	vpush	{d8}
 8001458:	b084      	sub	sp, #16
 800145a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f001 fbbc 	bl	8002bd8 <HAL_Init>
  /* USER CODE BEGIN Init */
  //init_State();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001460:	f000 f966 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001464:	f000 fb74 	bl	8001b50 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001468:	f000 faa0 	bl	80019ac <MX_TIM3_Init>
  MX_TIM2_Init();
 800146c:	f000 fa14 	bl	8001898 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001470:	f000 f9ba 	bl	80017e8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001474:	f000 fb42 	bl	8001afc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001478:	f000 faec 	bl	8001a54 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  systick_init_ms(8000000);
 800147c:	4898      	ldr	r0, [pc, #608]	; (80016e0 <main+0x290>)
 800147e:	f7ff ff2d 	bl	80012dc <systick_init_ms>

//	flag_rot_1=true;
//	flag_rot_2=true;
//	flag_rot_3=true;

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001482:	2100      	movs	r1, #0
 8001484:	4897      	ldr	r0, [pc, #604]	; (80016e4 <main+0x294>)
 8001486:	f002 fc01 	bl	8003c8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800148a:	2104      	movs	r1, #4
 800148c:	4895      	ldr	r0, [pc, #596]	; (80016e4 <main+0x294>)
 800148e:	f002 fbfd 	bl	8003c8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001492:	2108      	movs	r1, #8
 8001494:	4893      	ldr	r0, [pc, #588]	; (80016e4 <main+0x294>)
 8001496:	f002 fbf9 	bl	8003c8c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800149a:	2104      	movs	r1, #4
 800149c:	4892      	ldr	r0, [pc, #584]	; (80016e8 <main+0x298>)
 800149e:	f002 fd4b 	bl	8003f38 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80014a2:	2104      	movs	r1, #4
 80014a4:	4891      	ldr	r0, [pc, #580]	; (80016ec <main+0x29c>)
 80014a6:	f002 fd47 	bl	8003f38 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80014aa:	2104      	movs	r1, #4
 80014ac:	4890      	ldr	r0, [pc, #576]	; (80016f0 <main+0x2a0>)
 80014ae:	f002 fd43 	bl	8003f38 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(2000);
 80014b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014b6:	f001 fc01 	bl	8002cbc <HAL_Delay>

	Robot_Move(1, 90, 0);
 80014ba:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 80016f4 <main+0x2a4>
 80014be:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80016f8 <main+0x2a8>
 80014c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80014c6:	f000 fbb3 	bl	8001c30 <Robot_Move>
	V1=v2rpm(V1);
 80014ca:	4b8c      	ldr	r3, [pc, #560]	; (80016fc <main+0x2ac>)
 80014cc:	ed93 7b00 	vldr	d7, [r3]
 80014d0:	eeb0 0a47 	vmov.f32	s0, s14
 80014d4:	eef0 0a67 	vmov.f32	s1, s15
 80014d8:	f000 fe66 	bl	80021a8 <v2rpm>
 80014dc:	eeb0 7a40 	vmov.f32	s14, s0
 80014e0:	eef0 7a60 	vmov.f32	s15, s1
 80014e4:	4b85      	ldr	r3, [pc, #532]	; (80016fc <main+0x2ac>)
 80014e6:	ed83 7b00 	vstr	d7, [r3]
	V2=v2rpm(V2);
 80014ea:	4b85      	ldr	r3, [pc, #532]	; (8001700 <main+0x2b0>)
 80014ec:	ed93 7b00 	vldr	d7, [r3]
 80014f0:	eeb0 0a47 	vmov.f32	s0, s14
 80014f4:	eef0 0a67 	vmov.f32	s1, s15
 80014f8:	f000 fe56 	bl	80021a8 <v2rpm>
 80014fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001500:	eef0 7a60 	vmov.f32	s15, s1
 8001504:	4b7e      	ldr	r3, [pc, #504]	; (8001700 <main+0x2b0>)
 8001506:	ed83 7b00 	vstr	d7, [r3]
	V3=v2rpm(V3);
 800150a:	4b7e      	ldr	r3, [pc, #504]	; (8001704 <main+0x2b4>)
 800150c:	ed93 7b00 	vldr	d7, [r3]
 8001510:	eeb0 0a47 	vmov.f32	s0, s14
 8001514:	eef0 0a67 	vmov.f32	s1, s15
 8001518:	f000 fe46 	bl	80021a8 <v2rpm>
 800151c:	eeb0 7a40 	vmov.f32	s14, s0
 8001520:	eef0 7a60 	vmov.f32	s15, s1
 8001524:	4b77      	ldr	r3, [pc, #476]	; (8001704 <main+0x2b4>)
 8001526:	ed83 7b00 	vstr	d7, [r3]
	printf("V1= %.2f rpm \t V2= %.2f rpm \t V3= %.2f rpm \r\n", V1,V2,V3);
 800152a:	4b74      	ldr	r3, [pc, #464]	; (80016fc <main+0x2ac>)
 800152c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001530:	4b73      	ldr	r3, [pc, #460]	; (8001700 <main+0x2b0>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	4973      	ldr	r1, [pc, #460]	; (8001704 <main+0x2b4>)
 8001538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800153c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001540:	e9cd 2300 	strd	r2, r3, [sp]
 8001544:	4622      	mov	r2, r4
 8001546:	462b      	mov	r3, r5
 8001548:	486f      	ldr	r0, [pc, #444]	; (8001708 <main+0x2b8>)
 800154a:	f004 fb87 	bl	8005c5c <iprintf>
//
	pid_config();
 800154e:	f7ff ff2f 	bl	80013b0 <pid_config>

    /* USER CODE BEGIN 3 */
/*
 * MAX 1m/s
 */
	rpm_1=get_rpm(MOTOR_1);
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff fd40 	bl	8000fd8 <get_rpm>
 8001558:	eeb0 7a40 	vmov.f32	s14, s0
 800155c:	eef0 7a60 	vmov.f32	s15, s1
 8001560:	4b6a      	ldr	r3, [pc, #424]	; (800170c <main+0x2bc>)
 8001562:	ed83 7b00 	vstr	d7, [r3]
	rpm_2=get_rpm(MOTOR_2);
 8001566:	2002      	movs	r0, #2
 8001568:	f7ff fd36 	bl	8000fd8 <get_rpm>
 800156c:	eeb0 7a40 	vmov.f32	s14, s0
 8001570:	eef0 7a60 	vmov.f32	s15, s1
 8001574:	4b66      	ldr	r3, [pc, #408]	; (8001710 <main+0x2c0>)
 8001576:	ed83 7b00 	vstr	d7, [r3]
	rpm_3=get_rpm(MOTOR_3);
 800157a:	2003      	movs	r0, #3
 800157c:	f7ff fd2c 	bl	8000fd8 <get_rpm>
 8001580:	eeb0 7a40 	vmov.f32	s14, s0
 8001584:	eef0 7a60 	vmov.f32	s15, s1
 8001588:	4b62      	ldr	r3, [pc, #392]	; (8001714 <main+0x2c4>)
 800158a:	ed83 7b00 	vstr	d7, [r3]


	printf("rpm_1: %.2f \t rpm_2: %.2f \t rpm_3: %.2f \r \n", rpm_1, rpm_2, rpm_3);
 800158e:	4b5f      	ldr	r3, [pc, #380]	; (800170c <main+0x2bc>)
 8001590:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001594:	4b5e      	ldr	r3, [pc, #376]	; (8001710 <main+0x2c0>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	495e      	ldr	r1, [pc, #376]	; (8001714 <main+0x2c4>)
 800159c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015a4:	e9cd 2300 	strd	r2, r3, [sp]
 80015a8:	4622      	mov	r2, r4
 80015aa:	462b      	mov	r3, r5
 80015ac:	485a      	ldr	r0, [pc, #360]	; (8001718 <main+0x2c8>)
 80015ae:	f004 fb55 	bl	8005c5c <iprintf>

	if(millis()%(uint64_t)pid_par.Ts==0){
 80015b2:	f7ff feb7 	bl	8001324 <millis>
 80015b6:	4604      	mov	r4, r0
 80015b8:	460d      	mov	r5, r1
 80015ba:	4b58      	ldr	r3, [pc, #352]	; (800171c <main+0x2cc>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fb82 	bl	8000cc8 <__aeabi_f2ulz>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4620      	mov	r0, r4
 80015ca:	4629      	mov	r1, r5
 80015cc:	f7ff fb64 	bl	8000c98 <__aeabi_uldivmod>
 80015d0:	4313      	orrs	r3, r2
 80015d2:	d1be      	bne.n	8001552 <main+0x102>
		out_1=PID_Calculation(MOTOR_1, rpm_1);
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <main+0x2bc>)
 80015d6:	ed93 7b00 	vldr	d7, [r3]
 80015da:	eeb0 0a47 	vmov.f32	s0, s14
 80015de:	eef0 0a67 	vmov.f32	s1, s15
 80015e2:	2001      	movs	r0, #1
 80015e4:	f000 fe68 	bl	80022b8 <PID_Calculation>
 80015e8:	eef0 7a40 	vmov.f32	s15, s0
 80015ec:	4b4c      	ldr	r3, [pc, #304]	; (8001720 <main+0x2d0>)
 80015ee:	edc3 7a00 	vstr	s15, [r3]
		out_2=PID_Calculation(MOTOR_2, rpm_2);
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <main+0x2c0>)
 80015f4:	ed93 7b00 	vldr	d7, [r3]
 80015f8:	eeb0 0a47 	vmov.f32	s0, s14
 80015fc:	eef0 0a67 	vmov.f32	s1, s15
 8001600:	2002      	movs	r0, #2
 8001602:	f000 fe59 	bl	80022b8 <PID_Calculation>
 8001606:	eef0 7a40 	vmov.f32	s15, s0
 800160a:	4b46      	ldr	r3, [pc, #280]	; (8001724 <main+0x2d4>)
 800160c:	edc3 7a00 	vstr	s15, [r3]
		out_3=PID_Calculation(MOTOR_3, rpm_3);
 8001610:	4b40      	ldr	r3, [pc, #256]	; (8001714 <main+0x2c4>)
 8001612:	ed93 7b00 	vldr	d7, [r3]
 8001616:	eeb0 0a47 	vmov.f32	s0, s14
 800161a:	eef0 0a67 	vmov.f32	s1, s15
 800161e:	2003      	movs	r0, #3
 8001620:	f000 fe4a 	bl	80022b8 <PID_Calculation>
 8001624:	eef0 7a40 	vmov.f32	s15, s0
 8001628:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <main+0x2d8>)
 800162a:	edc3 7a00 	vstr	s15, [r3]
		set_duty_cycle(MOTOR_1, rpm_1, out_1);
 800162e:	4b37      	ldr	r3, [pc, #220]	; (800170c <main+0x2bc>)
 8001630:	ed93 8b00 	vldr	d8, [r3]
 8001634:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <main+0x2d0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff8d 	bl	8000558 <__aeabi_f2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ec43 2b11 	vmov	d1, r2, r3
 8001646:	eeb0 0a48 	vmov.f32	s0, s16
 800164a:	eef0 0a68 	vmov.f32	s1, s17
 800164e:	2001      	movs	r0, #1
 8001650:	f000 fd02 	bl	8002058 <set_duty_cycle>
		set_duty_cycle(MOTOR_2, rpm_2, out_2);
 8001654:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <main+0x2c0>)
 8001656:	ed93 8b00 	vldr	d8, [r3]
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <main+0x2d4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff7a 	bl	8000558 <__aeabi_f2d>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	ec43 2b11 	vmov	d1, r2, r3
 800166c:	eeb0 0a48 	vmov.f32	s0, s16
 8001670:	eef0 0a68 	vmov.f32	s1, s17
 8001674:	2002      	movs	r0, #2
 8001676:	f000 fcef 	bl	8002058 <set_duty_cycle>
		set_duty_cycle(MOTOR_3, rpm_3, out_3);
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <main+0x2c4>)
 800167c:	ed93 8b00 	vldr	d8, [r3]
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <main+0x2d8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff67 	bl	8000558 <__aeabi_f2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	ec43 2b11 	vmov	d1, r2, r3
 8001692:	eeb0 0a48 	vmov.f32	s0, s16
 8001696:	eef0 0a68 	vmov.f32	s1, s17
 800169a:	2003      	movs	r0, #3
 800169c:	f000 fcdc 	bl	8002058 <set_duty_cycle>
		printf("out_1: %f \t out_2: %f \t out_3: %f \r \n \r\n",out_1,out_2,out_3);
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <main+0x2d0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff57 	bl	8000558 <__aeabi_f2d>
 80016aa:	4680      	mov	r8, r0
 80016ac:	4689      	mov	r9, r1
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <main+0x2d4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff50 	bl	8000558 <__aeabi_f2d>
 80016b8:	4604      	mov	r4, r0
 80016ba:	460d      	mov	r5, r1
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <main+0x2d8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff49 	bl	8000558 <__aeabi_f2d>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016ce:	e9cd 4500 	strd	r4, r5, [sp]
 80016d2:	4642      	mov	r2, r8
 80016d4:	464b      	mov	r3, r9
 80016d6:	4815      	ldr	r0, [pc, #84]	; (800172c <main+0x2dc>)
 80016d8:	f004 fac0 	bl	8005c5c <iprintf>
	rpm_1=get_rpm(MOTOR_1);
 80016dc:	e739      	b.n	8001552 <main+0x102>
 80016de:	bf00      	nop
 80016e0:	007a1200 	.word	0x007a1200
 80016e4:	20000268 	.word	0x20000268
 80016e8:	20000220 	.word	0x20000220
 80016ec:	200002b0 	.word	0x200002b0
 80016f0:	200002f8 	.word	0x200002f8
 80016f4:	00000000 	.word	0x00000000
 80016f8:	42b40000 	.word	0x42b40000
 80016fc:	200003d8 	.word	0x200003d8
 8001700:	200003e0 	.word	0x200003e0
 8001704:	200003e8 	.word	0x200003e8
 8001708:	08008cf0 	.word	0x08008cf0
 800170c:	200003c0 	.word	0x200003c0
 8001710:	200003c8 	.word	0x200003c8
 8001714:	200003d0 	.word	0x200003d0
 8001718:	08008d20 	.word	0x08008d20
 800171c:	20000388 	.word	0x20000388
 8001720:	200003b4 	.word	0x200003b4
 8001724:	200003b8 	.word	0x200003b8
 8001728:	200003bc 	.word	0x200003bc
 800172c:	08008d4c 	.word	0x08008d4c

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2230      	movs	r2, #48	; 0x30
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f004 fae1 	bl	8005d06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <SystemClock_Config+0xb0>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <SystemClock_Config+0xb0>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <SystemClock_Config+0xb0>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <SystemClock_Config+0xb4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <SystemClock_Config+0xb4>)
 800177a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <SystemClock_Config+0xb4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800178c:	2301      	movs	r3, #1
 800178e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001796:	2300      	movs	r3, #0
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179a:	f107 0320 	add.w	r3, r7, #32
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 fd34 	bl	800320c <HAL_RCC_OscConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80017aa:	f000 fa39 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ae:	230f      	movs	r3, #15
 80017b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80017b2:	2301      	movs	r3, #1
 80017b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 ff97 	bl	80036fc <HAL_RCC_ClockConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80017d4:	f000 fa24 	bl	8001c20 <Error_Handler>
  }
}
 80017d8:	bf00      	nop
 80017da:	3750      	adds	r7, #80	; 0x50
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40007000 	.word	0x40007000

080017e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	; 0x30
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	2224      	movs	r2, #36	; 0x24
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 fa85 	bl	8005d06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <MX_TIM1_Init+0xa8>)
 8001806:	4a23      	ldr	r2, [pc, #140]	; (8001894 <MX_TIM1_Init+0xac>)
 8001808:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_TIM1_Init+0xa8>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_TIM1_Init+0xa8>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_TIM1_Init+0xa8>)
 8001818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <MX_TIM1_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_TIM1_Init+0xa8>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <MX_TIM1_Init+0xa8>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001830:	2303      	movs	r3, #3
 8001832:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001838:	2301      	movs	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001848:	2301      	movs	r3, #1
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <MX_TIM1_Init+0xa8>)
 800185c:	f002 fac6 	bl	8003dec <HAL_TIM_Encoder_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001866:	f000 f9db 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <MX_TIM1_Init+0xa8>)
 8001878:	f003 f84e 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001882:	f000 f9cd 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3730      	adds	r7, #48	; 0x30
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000220 	.word	0x20000220
 8001894:	40010000 	.word	0x40010000

08001898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08e      	sub	sp, #56	; 0x38
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	f107 0320 	add.w	r3, r7, #32
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	615a      	str	r2, [r3, #20]
 80018c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018c8:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <MX_TIM2_Init+0x110>)
 80018ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80018d0:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <MX_TIM2_Init+0x110>)
 80018d2:	2207      	movs	r2, #7
 80018d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <MX_TIM2_Init+0x110>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80018dc:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <MX_TIM2_Init+0x110>)
 80018de:	2263      	movs	r2, #99	; 0x63
 80018e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <MX_TIM2_Init+0x110>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <MX_TIM2_Init+0x110>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ee:	482e      	ldr	r0, [pc, #184]	; (80019a8 <MX_TIM2_Init+0x110>)
 80018f0:	f002 f924 	bl	8003b3c <HAL_TIM_Base_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80018fa:	f000 f991 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001908:	4619      	mov	r1, r3
 800190a:	4827      	ldr	r0, [pc, #156]	; (80019a8 <MX_TIM2_Init+0x110>)
 800190c:	f002 fc64 	bl	80041d8 <HAL_TIM_ConfigClockSource>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001916:	f000 f983 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800191a:	4823      	ldr	r0, [pc, #140]	; (80019a8 <MX_TIM2_Init+0x110>)
 800191c:	f002 f95d 	bl	8003bda <HAL_TIM_PWM_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001926:	f000 f97b 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001932:	f107 0320 	add.w	r3, r7, #32
 8001936:	4619      	mov	r1, r3
 8001938:	481b      	ldr	r0, [pc, #108]	; (80019a8 <MX_TIM2_Init+0x110>)
 800193a:	f002 ffed 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001944:	f000 f96c 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001948:	2360      	movs	r3, #96	; 0x60
 800194a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	2200      	movs	r2, #0
 800195c:	4619      	mov	r1, r3
 800195e:	4812      	ldr	r0, [pc, #72]	; (80019a8 <MX_TIM2_Init+0x110>)
 8001960:	f002 fb78 	bl	8004054 <HAL_TIM_PWM_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800196a:	f000 f959 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2204      	movs	r2, #4
 8001972:	4619      	mov	r1, r3
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <MX_TIM2_Init+0x110>)
 8001976:	f002 fb6d 	bl	8004054 <HAL_TIM_PWM_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001980:	f000 f94e 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2208      	movs	r2, #8
 8001988:	4619      	mov	r1, r3
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <MX_TIM2_Init+0x110>)
 800198c:	f002 fb62 	bl	8004054 <HAL_TIM_PWM_ConfigChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8001996:	f000 f943 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800199a:	4803      	ldr	r0, [pc, #12]	; (80019a8 <MX_TIM2_Init+0x110>)
 800199c:	f000 ff44 	bl	8002828 <HAL_TIM_MspPostInit>

}
 80019a0:	bf00      	nop
 80019a2:	3738      	adds	r7, #56	; 0x38
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000268 	.word	0x20000268

080019ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	; 0x30
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	2224      	movs	r2, #36	; 0x24
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 f9a3 	bl	8005d06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <MX_TIM3_Init+0xa4>)
 80019cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019ee:	2303      	movs	r3, #3
 80019f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019f6:	2301      	movs	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a06:	2301      	movs	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	4619      	mov	r1, r3
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <MX_TIM3_Init+0xa0>)
 8001a1a:	f002 f9e7 	bl	8003dec <HAL_TIM_Encoder_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a24:	f000 f8fc 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_TIM3_Init+0xa0>)
 8001a36:	f002 ff6f 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a40:	f000 f8ee 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3730      	adds	r7, #48	; 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200002b0 	.word	0x200002b0
 8001a50:	40000400 	.word	0x40000400

08001a54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	2224      	movs	r2, #36	; 0x24
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 f94f 	bl	8005d06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a70:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a72:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <MX_TIM4_Init+0xa4>)
 8001a74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a96:	2303      	movs	r3, #3
 8001a98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001ac2:	f002 f993 	bl	8003dec <HAL_TIM_Encoder_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001acc:	f000 f8a8 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001ade:	f002 ff1b 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ae8:	f000 f89a 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3730      	adds	r7, #48	; 0x30
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200002f8 	.word	0x200002f8
 8001af8:	40000800 	.word	0x40000800

08001afc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_USART2_UART_Init+0x50>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b34:	f002 ff5e 	bl	80049f4 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b3e:	f000 f86f 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000340 	.word	0x20000340
 8001b4c:	40004400 	.word	0x40004400

08001b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <MX_GPIO_Init+0xc4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <MX_GPIO_Init+0xc4>)
 8001b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <MX_GPIO_Init+0xc4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <MX_GPIO_Init+0xc4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a22      	ldr	r2, [pc, #136]	; (8001c14 <MX_GPIO_Init+0xc4>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <MX_GPIO_Init+0xc4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <MX_GPIO_Init+0xc4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <MX_GPIO_Init+0xc4>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <MX_GPIO_Init+0xc4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIRECTION_3_Pin|DIRECTION_2_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2106      	movs	r1, #6
 8001bbe:	4816      	ldr	r0, [pc, #88]	; (8001c18 <MX_GPIO_Init+0xc8>)
 8001bc0:	f001 fb0a 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bca:	4814      	ldr	r0, [pc, #80]	; (8001c1c <MX_GPIO_Init+0xcc>)
 8001bcc:	f001 fb04 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIRECTION_3_Pin DIRECTION_2_Pin */
  GPIO_InitStruct.Pin = DIRECTION_3_Pin|DIRECTION_2_Pin;
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	480c      	ldr	r0, [pc, #48]	; (8001c18 <MX_GPIO_Init+0xc8>)
 8001be8:	f001 f972 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECTION_1_Pin */
  GPIO_InitStruct.Pin = DIRECTION_1_Pin;
 8001bec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIRECTION_1_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_GPIO_Init+0xcc>)
 8001c06:	f001 f963 	bl	8002ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c0a:	bf00      	nop
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020000 	.word	0x40020000

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
 8001c2a:	0000      	movs	r0, r0
 8001c2c:	0000      	movs	r0, r0
	...

08001c30 <Robot_Move>:
bool flag_rot_1,
flag_rot_2,
flag_rot_3;


void Robot_Move(float Vd, float Theta, float Vtheta){
 8001c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c34:	b092      	sub	sp, #72	; 0x48
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	ed87 0a07 	vstr	s0, [r7, #28]
 8001c3c:	edc7 0a06 	vstr	s1, [r7, #24]
 8001c40:	ed87 1a05 	vstr	s2, [r7, #20]
	double V1_abs, V2_abs, V3_abs, Vmax, Temp;

	V1=Vd*(-0.87*cos(Theta*PI/180)-0.5*sin(Theta*PI/180));
 8001c44:	69f8      	ldr	r0, [r7, #28]
 8001c46:	f7fe fc87 	bl	8000558 <__aeabi_f2d>
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	460d      	mov	r5, r1
 8001c4e:	69b8      	ldr	r0, [r7, #24]
 8001c50:	f7fe fc82 	bl	8000558 <__aeabi_f2d>
 8001c54:	a3ba      	add	r3, pc, #744	; (adr r3, 8001f40 <Robot_Move+0x310>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fcd5 	bl	8000608 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	4bbb      	ldr	r3, [pc, #748]	; (8001f58 <Robot_Move+0x328>)
 8001c6c:	f7fe fdf6 	bl	800085c <__aeabi_ddiv>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	ec43 2b17 	vmov	d7, r2, r3
 8001c78:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7c:	eef0 0a67 	vmov.f32	s1, s15
 8001c80:	f005 ff96 	bl	8007bb0 <cos>
 8001c84:	ec51 0b10 	vmov	r0, r1, d0
 8001c88:	a3ab      	add	r3, pc, #684	; (adr r3, 8001f38 <Robot_Move+0x308>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	f7fe fcbb 	bl	8000608 <__aeabi_dmul>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4690      	mov	r8, r2
 8001c98:	4699      	mov	r9, r3
 8001c9a:	69b8      	ldr	r0, [r7, #24]
 8001c9c:	f7fe fc5c 	bl	8000558 <__aeabi_f2d>
 8001ca0:	a3a7      	add	r3, pc, #668	; (adr r3, 8001f40 <Robot_Move+0x310>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fcaf 	bl	8000608 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	4ba8      	ldr	r3, [pc, #672]	; (8001f58 <Robot_Move+0x328>)
 8001cb8:	f7fe fdd0 	bl	800085c <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	ec43 2b17 	vmov	d7, r2, r3
 8001cc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc8:	eef0 0a67 	vmov.f32	s1, s15
 8001ccc:	f005 ffc4 	bl	8007c58 <sin>
 8001cd0:	ec51 0b10 	vmov	r0, r1, d0
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4ba0      	ldr	r3, [pc, #640]	; (8001f5c <Robot_Move+0x32c>)
 8001cda:	f7fe fc95 	bl	8000608 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4640      	mov	r0, r8
 8001ce4:	4649      	mov	r1, r9
 8001ce6:	f7fe fad7 	bl	8000298 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4620      	mov	r0, r4
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	f7fe fc89 	bl	8000608 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4999      	ldr	r1, [pc, #612]	; (8001f60 <Robot_Move+0x330>)
 8001cfc:	e9c1 2300 	strd	r2, r3, [r1]
	V2=Vd*(0.87*cos(Theta*PI/180)-0.5*sin(Theta*PI/180));
 8001d00:	69f8      	ldr	r0, [r7, #28]
 8001d02:	f7fe fc29 	bl	8000558 <__aeabi_f2d>
 8001d06:	4604      	mov	r4, r0
 8001d08:	460d      	mov	r5, r1
 8001d0a:	69b8      	ldr	r0, [r7, #24]
 8001d0c:	f7fe fc24 	bl	8000558 <__aeabi_f2d>
 8001d10:	a38b      	add	r3, pc, #556	; (adr r3, 8001f40 <Robot_Move+0x310>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fc77 	bl	8000608 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <Robot_Move+0x328>)
 8001d28:	f7fe fd98 	bl	800085c <__aeabi_ddiv>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	ec43 2b17 	vmov	d7, r2, r3
 8001d34:	eeb0 0a47 	vmov.f32	s0, s14
 8001d38:	eef0 0a67 	vmov.f32	s1, s15
 8001d3c:	f005 ff38 	bl	8007bb0 <cos>
 8001d40:	ec51 0b10 	vmov	r0, r1, d0
 8001d44:	a380      	add	r3, pc, #512	; (adr r3, 8001f48 <Robot_Move+0x318>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	f7fe fc5d 	bl	8000608 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4690      	mov	r8, r2
 8001d54:	4699      	mov	r9, r3
 8001d56:	69b8      	ldr	r0, [r7, #24]
 8001d58:	f7fe fbfe 	bl	8000558 <__aeabi_f2d>
 8001d5c:	a378      	add	r3, pc, #480	; (adr r3, 8001f40 <Robot_Move+0x310>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fc51 	bl	8000608 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b79      	ldr	r3, [pc, #484]	; (8001f58 <Robot_Move+0x328>)
 8001d74:	f7fe fd72 	bl	800085c <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	ec43 2b17 	vmov	d7, r2, r3
 8001d80:	eeb0 0a47 	vmov.f32	s0, s14
 8001d84:	eef0 0a67 	vmov.f32	s1, s15
 8001d88:	f005 ff66 	bl	8007c58 <sin>
 8001d8c:	ec51 0b10 	vmov	r0, r1, d0
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b71      	ldr	r3, [pc, #452]	; (8001f5c <Robot_Move+0x32c>)
 8001d96:	f7fe fc37 	bl	8000608 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4640      	mov	r0, r8
 8001da0:	4649      	mov	r1, r9
 8001da2:	f7fe fa79 	bl	8000298 <__aeabi_dsub>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4620      	mov	r0, r4
 8001dac:	4629      	mov	r1, r5
 8001dae:	f7fe fc2b 	bl	8000608 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	496b      	ldr	r1, [pc, #428]	; (8001f64 <Robot_Move+0x334>)
 8001db8:	e9c1 2300 	strd	r2, r3, [r1]
	V3=Vd*sin(Theta*PI/180);
 8001dbc:	69f8      	ldr	r0, [r7, #28]
 8001dbe:	f7fe fbcb 	bl	8000558 <__aeabi_f2d>
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	460d      	mov	r5, r1
 8001dc6:	69b8      	ldr	r0, [r7, #24]
 8001dc8:	f7fe fbc6 	bl	8000558 <__aeabi_f2d>
 8001dcc:	a35c      	add	r3, pc, #368	; (adr r3, 8001f40 <Robot_Move+0x310>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	f7fe fc19 	bl	8000608 <__aeabi_dmul>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <Robot_Move+0x328>)
 8001de4:	f7fe fd3a 	bl	800085c <__aeabi_ddiv>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	ec43 2b17 	vmov	d7, r2, r3
 8001df0:	eeb0 0a47 	vmov.f32	s0, s14
 8001df4:	eef0 0a67 	vmov.f32	s1, s15
 8001df8:	f005 ff2e 	bl	8007c58 <sin>
 8001dfc:	ec53 2b10 	vmov	r2, r3, d0
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fc00 	bl	8000608 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4956      	ldr	r1, [pc, #344]	; (8001f68 <Robot_Move+0x338>)
 8001e0e:	e9c1 2300 	strd	r2, r3, [r1]

	V1_abs=fabs(V1);
 8001e12:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <Robot_Move+0x330>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	6439      	str	r1, [r7, #64]	; 0x40
 8001e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e20:	647b      	str	r3, [r7, #68]	; 0x44
	V2_abs=fabs(V2);
 8001e22:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <Robot_Move+0x334>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
	V3_abs=fabs(V3);
 8001e32:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <Robot_Move+0x338>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	6339      	str	r1, [r7, #48]	; 0x30
 8001e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34

	Vmax=V1_abs;
 8001e42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V2_abs > Vmax) ? V2_abs : Vmax;
 8001e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e4e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e52:	f7fe fe69 	bl	8000b28 <__aeabi_dcmpgt>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <Robot_Move+0x232>
 8001e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e60:	e001      	b.n	8001e66 <Robot_Move+0x236>
 8001e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V3_abs > Vmax) ? V3_abs : Vmax;
 8001e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e72:	f7fe fe59 	bl	8000b28 <__aeabi_dcmpgt>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <Robot_Move+0x252>
 8001e7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e80:	e001      	b.n	8001e86 <Robot_Move+0x256>
 8001e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (Vmax>10000){
 8001e8a:	a331      	add	r3, pc, #196	; (adr r3, 8001f50 <Robot_Move+0x320>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e94:	f7fe fe48 	bl	8000b28 <__aeabi_dcmpgt>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d02e      	beq.n	8001efc <Robot_Move+0x2cc>
		Temp=10000/Vmax;
 8001e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ea2:	a12b      	add	r1, pc, #172	; (adr r1, 8001f50 <Robot_Move+0x320>)
 8001ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ea8:	f7fe fcd8 	bl	800085c <__aeabi_ddiv>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	e9c7 2308 	strd	r2, r3, [r7, #32]
		V1= V1*Temp;
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <Robot_Move+0x330>)
 8001eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ebe:	f7fe fba3 	bl	8000608 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4926      	ldr	r1, [pc, #152]	; (8001f60 <Robot_Move+0x330>)
 8001ec8:	e9c1 2300 	strd	r2, r3, [r1]
		V2= V2*Temp;
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <Robot_Move+0x334>)
 8001ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ed6:	f7fe fb97 	bl	8000608 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4921      	ldr	r1, [pc, #132]	; (8001f64 <Robot_Move+0x334>)
 8001ee0:	e9c1 2300 	strd	r2, r3, [r1]
		V3= V3*Temp;
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <Robot_Move+0x338>)
 8001ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001eee:	f7fe fb8b 	bl	8000608 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	491c      	ldr	r1, [pc, #112]	; (8001f68 <Robot_Move+0x338>)
 8001ef8:	e9c1 2300 	strd	r2, r3, [r1]
//	 V1 = Vmax*V1/10000;
//	 V2 = Vmax*V2/10000;
//	 V3 = Vmax*V3/10000;

//	 printf("V1= %.2f m/s \t V2= %.2f m/s \t V3= %.2f m/s \r\n", V1,V2,V3);
	 if(V1<0){
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <Robot_Move+0x330>)
 8001efe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	f7fe fdef 	bl	8000aec <__aeabi_dcmplt>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d02b      	beq.n	8001f6c <Robot_Move+0x33c>
		 Rotation(MOTOR_1, !CLOCK_WISE);
 8001f14:	2100      	movs	r1, #0
 8001f16:	2001      	movs	r0, #1
 8001f18:	f000 f8ec 	bl	80020f4 <Rotation>
		 V1=fabs(V1);
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <Robot_Move+0x330>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	60ba      	str	r2, [r7, #8]
 8001f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <Robot_Move+0x330>)
 8001f2c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f30:	ed83 7b00 	vstr	d7, [r3]
 8001f34:	e01e      	b.n	8001f74 <Robot_Move+0x344>
 8001f36:	bf00      	nop
 8001f38:	3d70a3d7 	.word	0x3d70a3d7
 8001f3c:	bfebd70a 	.word	0xbfebd70a
 8001f40:	54524550 	.word	0x54524550
 8001f44:	400921fb 	.word	0x400921fb
 8001f48:	3d70a3d7 	.word	0x3d70a3d7
 8001f4c:	3febd70a 	.word	0x3febd70a
 8001f50:	00000000 	.word	0x00000000
 8001f54:	40c38800 	.word	0x40c38800
 8001f58:	40668000 	.word	0x40668000
 8001f5c:	3fe00000 	.word	0x3fe00000
 8001f60:	200003d8 	.word	0x200003d8
 8001f64:	200003e0 	.word	0x200003e0
 8001f68:	200003e8 	.word	0x200003e8
	 } else{
		 Rotation(MOTOR_1, CLOCK_WISE);
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f000 f8c0 	bl	80020f4 <Rotation>
	 }
	 if(V2<0){
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <Robot_Move+0x3cc>)
 8001f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	f7fe fdb3 	bl	8000aec <__aeabi_dcmplt>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d010      	beq.n	8001fae <Robot_Move+0x37e>
		 Rotation(MOTOR_2, !CLOCK_WISE);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2002      	movs	r0, #2
 8001f90:	f000 f8b0 	bl	80020f4 <Rotation>
		 V2=fabs(V2);
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <Robot_Move+0x3cc>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	603a      	str	r2, [r7, #0]
 8001f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <Robot_Move+0x3cc>)
 8001fa4:	ed97 7b00 	vldr	d7, [r7]
 8001fa8:	ed83 7b00 	vstr	d7, [r3]
 8001fac:	e003      	b.n	8001fb6 <Robot_Move+0x386>
	 } else{
		 Rotation(MOTOR_2, CLOCK_WISE);
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f000 f89f 	bl	80020f4 <Rotation>
	 }
	 if(V3<0){
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <Robot_Move+0x3d0>)
 8001fb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	f7fe fd92 	bl	8000aec <__aeabi_dcmplt>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00d      	beq.n	8001fea <Robot_Move+0x3ba>
		 Rotation(MOTOR_3, !CLOCK_WISE);
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 f88f 	bl	80020f4 <Rotation>
		 V3=fabs(V3);
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <Robot_Move+0x3d0>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	4692      	mov	sl, r2
 8001fde:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <Robot_Move+0x3d0>)
 8001fe4:	e9c3 ab00 	strd	sl, fp, [r3]
	 } else{
		 Rotation(MOTOR_3, CLOCK_WISE);
	 }
}
 8001fe8:	e003      	b.n	8001ff2 <Robot_Move+0x3c2>
		 Rotation(MOTOR_3, CLOCK_WISE);
 8001fea:	2101      	movs	r1, #1
 8001fec:	2003      	movs	r0, #3
 8001fee:	f000 f881 	bl	80020f4 <Rotation>
}
 8001ff2:	bf00      	nop
 8001ff4:	3748      	adds	r7, #72	; 0x48
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffc:	200003e0 	.word	0x200003e0
 8002000:	200003e8 	.word	0x200003e8
 8002004:	00000000 	.word	0x00000000

08002008 <rpm_to_duty>:
double rpm_to_duty(double rpm){
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	ed87 0b00 	vstr	d0, [r7]
	return (98.15-0.6*rpm);
 8002012:	a30d      	add	r3, pc, #52	; (adr r3, 8002048 <rpm_to_duty+0x40>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	e9d7 0100 	ldrd	r0, r1, [r7]
 800201c:	f7fe faf4 	bl	8000608 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	a10a      	add	r1, pc, #40	; (adr r1, 8002050 <rpm_to_duty+0x48>)
 8002026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800202a:	f7fe f935 	bl	8000298 <__aeabi_dsub>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ec43 2b17 	vmov	d7, r2, r3
}
 8002036:	eeb0 0a47 	vmov.f32	s0, s14
 800203a:	eef0 0a67 	vmov.f32	s1, s15
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	f3af 8000 	nop.w
 8002048:	33333333 	.word	0x33333333
 800204c:	3fe33333 	.word	0x3fe33333
 8002050:	9999999a 	.word	0x9999999a
 8002054:	40588999 	.word	0x40588999

08002058 <set_duty_cycle>:
void set_duty_cycle(int motor, double rpm, double out){
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6178      	str	r0, [r7, #20]
 8002060:	ed87 0b02 	vstr	d0, [r7, #8]
 8002064:	ed87 1b00 	vstr	d1, [r7]
	double duty = rpm_to_duty(rpm);
 8002068:	ed97 0b02 	vldr	d0, [r7, #8]
 800206c:	f7ff ffcc 	bl	8002008 <rpm_to_duty>
 8002070:	ed87 0b06 	vstr	d0, [r7, #24]
	if(motor==MOTOR_1){
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10f      	bne.n	800209a <set_duty_cycle+0x42>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, (duty+out));
 800207a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800207e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002082:	f7fe f90b 	bl	800029c <__adddf3>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4919      	ldr	r1, [pc, #100]	; (80020f0 <set_duty_cycle+0x98>)
 800208c:	680c      	ldr	r4, [r1, #0]
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f7fe fd91 	bl	8000bb8 <__aeabi_d2uiz>
 8002096:	4603      	mov	r3, r0
 8002098:	6363      	str	r3, [r4, #52]	; 0x34
	}
	if(motor==MOTOR_2){
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d10f      	bne.n	80020c0 <set_duty_cycle+0x68>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, (duty+out));
 80020a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020a8:	f7fe f8f8 	bl	800029c <__adddf3>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	490f      	ldr	r1, [pc, #60]	; (80020f0 <set_duty_cycle+0x98>)
 80020b2:	680c      	ldr	r4, [r1, #0]
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7fe fd7e 	bl	8000bb8 <__aeabi_d2uiz>
 80020bc:	4603      	mov	r3, r0
 80020be:	63a3      	str	r3, [r4, #56]	; 0x38
	}
	if(motor==MOTOR_3){
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d10f      	bne.n	80020e6 <set_duty_cycle+0x8e>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, (duty+out));
 80020c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ce:	f7fe f8e5 	bl	800029c <__adddf3>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4906      	ldr	r1, [pc, #24]	; (80020f0 <set_duty_cycle+0x98>)
 80020d8:	680c      	ldr	r4, [r1, #0]
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fd6b 	bl	8000bb8 <__aeabi_d2uiz>
 80020e2:	4603      	mov	r3, r0
 80020e4:	63e3      	str	r3, [r4, #60]	; 0x3c
	}
}
 80020e6:	bf00      	nop
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000268 	.word	0x20000268

080020f4 <Rotation>:
void Rotation(int motor, int rotation){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
	if(motor==MOTOR_1){
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d115      	bne.n	8002130 <Rotation+0x3c>
		if(rotation==CLOCK_WISE){
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d109      	bne.n	800211e <Rotation+0x2a>
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, CLOCK_WISE);
 800210a:	2201      	movs	r2, #1
 800210c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002110:	4820      	ldr	r0, [pc, #128]	; (8002194 <Rotation+0xa0>)
 8002112:	f001 f861 	bl	80031d8 <HAL_GPIO_WritePin>
			flag_rot_1=true;
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <Rotation+0xa4>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e008      	b.n	8002130 <Rotation+0x3c>
		} else {
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, !CLOCK_WISE);
 800211e:	2200      	movs	r2, #0
 8002120:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002124:	481b      	ldr	r0, [pc, #108]	; (8002194 <Rotation+0xa0>)
 8002126:	f001 f857 	bl	80031d8 <HAL_GPIO_WritePin>
			flag_rot_1=false;
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <Rotation+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_2){
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d113      	bne.n	800215e <Rotation+0x6a>
		if(rotation==CLOCK_WISE){
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <Rotation+0x5a>
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, CLOCK_WISE);
 800213c:	2201      	movs	r2, #1
 800213e:	2104      	movs	r1, #4
 8002140:	4816      	ldr	r0, [pc, #88]	; (800219c <Rotation+0xa8>)
 8002142:	f001 f849 	bl	80031d8 <HAL_GPIO_WritePin>
			flag_rot_2=true;
 8002146:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <Rotation+0xac>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e007      	b.n	800215e <Rotation+0x6a>
		} else {
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, !CLOCK_WISE);
 800214e:	2200      	movs	r2, #0
 8002150:	2104      	movs	r1, #4
 8002152:	4812      	ldr	r0, [pc, #72]	; (800219c <Rotation+0xa8>)
 8002154:	f001 f840 	bl	80031d8 <HAL_GPIO_WritePin>
			flag_rot_2=false;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <Rotation+0xac>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_3){
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d113      	bne.n	800218c <Rotation+0x98>
		if(rotation==CLOCK_WISE){
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d108      	bne.n	800217c <Rotation+0x88>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, CLOCK_WISE);
 800216a:	2201      	movs	r2, #1
 800216c:	2102      	movs	r1, #2
 800216e:	480b      	ldr	r0, [pc, #44]	; (800219c <Rotation+0xa8>)
 8002170:	f001 f832 	bl	80031d8 <HAL_GPIO_WritePin>
			flag_rot_3=true;
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <Rotation+0xb0>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
		} else {
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
			flag_rot_3=false;
		}
	}
}
 800217a:	e007      	b.n	800218c <Rotation+0x98>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
 800217c:	2200      	movs	r2, #0
 800217e:	2102      	movs	r1, #2
 8002180:	4806      	ldr	r0, [pc, #24]	; (800219c <Rotation+0xa8>)
 8002182:	f001 f829 	bl	80031d8 <HAL_GPIO_WritePin>
			flag_rot_3=false;
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <Rotation+0xb0>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40020000 	.word	0x40020000
 8002198:	200003f0 	.word	0x200003f0
 800219c:	40020400 	.word	0x40020400
 80021a0:	200003f1 	.word	0x200003f1
 80021a4:	200003f2 	.word	0x200003f2

080021a8 <v2rpm>:

double v2rpm (double vantoc){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	ed87 0b00 	vstr	d0, [r7]
    return (vantoc/(PI*diameter))*60;
 80021b2:	a30e      	add	r3, pc, #56	; (adr r3, 80021ec <v2rpm+0x44>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021bc:	f7fe fb4e 	bl	800085c <__aeabi_ddiv>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <v2rpm+0x40>)
 80021ce:	f7fe fa1b 	bl	8000608 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	ec43 2b17 	vmov	d7, r2, r3
}
 80021da:	eeb0 0a47 	vmov.f32	s0, s14
 80021de:	eef0 0a67 	vmov.f32	s1, s15
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	404e0000 	.word	0x404e0000
 80021ec:	5b30428a 	.word	0x5b30428a
 80021f0:	3fd8209f 	.word	0x3fd8209f

080021f4 <PID_init>:
,prev_input_3
,prev_input
,Ki_sum;


void PID_init(PID_Param_t *par){
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	Kp=par->Kp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a20      	ldr	r2, [pc, #128]	; (8002284 <PID_init+0x90>)
 8002202:	6013      	str	r3, [r2, #0]
	Ki=par->Ki;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <PID_init+0x94>)
 800220a:	6013      	str	r3, [r2, #0]
	Kd=par->Kd;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4a1e      	ldr	r2, [pc, #120]	; (800228c <PID_init+0x98>)
 8002212:	6013      	str	r3, [r2, #0]
	Ts=(par->Ts)/1000;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	ed93 7a03 	vldr	s14, [r3, #12]
 800221a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002290 <PID_init+0x9c>
 800221e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002222:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <PID_init+0xa0>)
 8002224:	edc3 7a00 	vstr	s15, [r3]
	set_point_motor_1=par->Set_point_motor_1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	4a1a      	ldr	r2, [pc, #104]	; (8002298 <PID_init+0xa4>)
 800222e:	6013      	str	r3, [r2, #0]
	set_point_motor_2=par->Set_point_motor_2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4a19      	ldr	r2, [pc, #100]	; (800229c <PID_init+0xa8>)
 8002236:	6013      	str	r3, [r2, #0]
	set_point_motor_3=par->Set_point_motor_3;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <PID_init+0xac>)
 800223e:	6013      	str	r3, [r2, #0]
	antiwinduperror=par->Anti_windup_error;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <PID_init+0xb0>)
 8002246:	6013      	str	r3, [r2, #0]
	Outmin=par->Outmin;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <PID_init+0xb4>)
 800224e:	6013      	str	r3, [r2, #0]
	Outmax=par->Outmax;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <PID_init+0xb8>)
 8002256:	6013      	str	r3, [r2, #0]
	windup=par->Anti_windup;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <PID_init+0xbc>)
 800225e:	6013      	str	r3, [r2, #0]

	if(0==par->Anti_windup_error){antiwinduperror=10;}
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edd3 7a07 	vldr	s15, [r3, #28]
 8002266:	eef5 7a40 	vcmp.f32	s15, #0.0
 800226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226e:	d102      	bne.n	8002276 <PID_init+0x82>
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <PID_init+0xb0>)
 8002272:	4a10      	ldr	r2, [pc, #64]	; (80022b4 <PID_init+0xc0>)
 8002274:	601a      	str	r2, [r3, #0]
	}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200003f4 	.word	0x200003f4
 8002288:	200003f8 	.word	0x200003f8
 800228c:	200003fc 	.word	0x200003fc
 8002290:	447a0000 	.word	0x447a0000
 8002294:	20000400 	.word	0x20000400
 8002298:	2000040c 	.word	0x2000040c
 800229c:	20000410 	.word	0x20000410
 80022a0:	20000414 	.word	0x20000414
 80022a4:	2000041c 	.word	0x2000041c
 80022a8:	20000404 	.word	0x20000404
 80022ac:	20000408 	.word	0x20000408
 80022b0:	20000420 	.word	0x20000420
 80022b4:	41200000 	.word	0x41200000

080022b8 <PID_Calculation>:


float PID_Calculation(int motor, double input)
	{
 80022b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	ed87 0b00 	vstr	d0, [r7]
	set_point=(motor==MOTOR_1)? set_point_motor_1: ((motor==MOTOR_2)? set_point_motor_2:set_point_motor_3);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d008      	beq.n	80022de <PID_Calculation+0x26>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d102      	bne.n	80022d8 <PID_Calculation+0x20>
 80022d2:	4bb7      	ldr	r3, [pc, #732]	; (80025b0 <PID_Calculation+0x2f8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	e004      	b.n	80022e2 <PID_Calculation+0x2a>
 80022d8:	4bb6      	ldr	r3, [pc, #728]	; (80025b4 <PID_Calculation+0x2fc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	e001      	b.n	80022e2 <PID_Calculation+0x2a>
 80022de:	4bb6      	ldr	r3, [pc, #728]	; (80025b8 <PID_Calculation+0x300>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4ab6      	ldr	r2, [pc, #728]	; (80025bc <PID_Calculation+0x304>)
 80022e4:	6013      	str	r3, [r2, #0]
	prev_input = (motor==MOTOR_1)? prev_input_1:((motor==MOTOR_2)? prev_input_2:prev_input_3);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d008      	beq.n	80022fe <PID_Calculation+0x46>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d102      	bne.n	80022f8 <PID_Calculation+0x40>
 80022f2:	4bb3      	ldr	r3, [pc, #716]	; (80025c0 <PID_Calculation+0x308>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	e004      	b.n	8002302 <PID_Calculation+0x4a>
 80022f8:	4bb2      	ldr	r3, [pc, #712]	; (80025c4 <PID_Calculation+0x30c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	e001      	b.n	8002302 <PID_Calculation+0x4a>
 80022fe:	4bb2      	ldr	r3, [pc, #712]	; (80025c8 <PID_Calculation+0x310>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4ab2      	ldr	r2, [pc, #712]	; (80025cc <PID_Calculation+0x314>)
 8002304:	6013      	str	r3, [r2, #0]

	error=(set_point-input);
 8002306:	4bad      	ldr	r3, [pc, #692]	; (80025bc <PID_Calculation+0x304>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f924 	bl	8000558 <__aeabi_f2d>
 8002310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002314:	f7fd ffc0 	bl	8000298 <__aeabi_dsub>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f7fe fc6a 	bl	8000bf8 <__aeabi_d2f>
 8002324:	4603      	mov	r3, r0
 8002326:	4aaa      	ldr	r2, [pc, #680]	; (80025d0 <PID_Calculation+0x318>)
 8002328:	6013      	str	r3, [r2, #0]

	float out;
	if(Anti_windup_enabled==windup)
 800232a:	4baa      	ldr	r3, [pc, #680]	; (80025d4 <PID_Calculation+0x31c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b01      	cmp	r3, #1
 8002330:	f040 80a4 	bne.w	800247c <PID_Calculation+0x1c4>
		{

		if(antiwinduperror<fabs(error))
 8002334:	4ba6      	ldr	r3, [pc, #664]	; (80025d0 <PID_Calculation+0x318>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	eeb0 7ae7 	vabs.f32	s14, s15
 800233e:	4ba6      	ldr	r3, [pc, #664]	; (80025d8 <PID_Calculation+0x320>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234c:	dd43      	ble.n	80023d6 <PID_Calculation+0x11e>
			{
			out=Kp*(error)+Kd*(input-prev_input)/Ts;
 800234e:	4ba3      	ldr	r3, [pc, #652]	; (80025dc <PID_Calculation+0x324>)
 8002350:	ed93 7a00 	vldr	s14, [r3]
 8002354:	4b9e      	ldr	r3, [pc, #632]	; (80025d0 <PID_Calculation+0x318>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235e:	ee17 0a90 	vmov	r0, s15
 8002362:	f7fe f8f9 	bl	8000558 <__aeabi_f2d>
 8002366:	4604      	mov	r4, r0
 8002368:	460d      	mov	r5, r1
 800236a:	4b9d      	ldr	r3, [pc, #628]	; (80025e0 <PID_Calculation+0x328>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe f8f2 	bl	8000558 <__aeabi_f2d>
 8002374:	4680      	mov	r8, r0
 8002376:	4689      	mov	r9, r1
 8002378:	4b94      	ldr	r3, [pc, #592]	; (80025cc <PID_Calculation+0x314>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8eb 	bl	8000558 <__aeabi_f2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	e9d7 0100 	ldrd	r0, r1, [r7]
 800238a:	f7fd ff85 	bl	8000298 <__aeabi_dsub>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4640      	mov	r0, r8
 8002394:	4649      	mov	r1, r9
 8002396:	f7fe f937 	bl	8000608 <__aeabi_dmul>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4690      	mov	r8, r2
 80023a0:	4699      	mov	r9, r3
 80023a2:	4b90      	ldr	r3, [pc, #576]	; (80025e4 <PID_Calculation+0x32c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe f8d6 	bl	8000558 <__aeabi_f2d>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4640      	mov	r0, r8
 80023b2:	4649      	mov	r1, r9
 80023b4:	f7fe fa52 	bl	800085c <__aeabi_ddiv>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4620      	mov	r0, r4
 80023be:	4629      	mov	r1, r5
 80023c0:	f7fd ff6c 	bl	800029c <__adddf3>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc14 	bl	8000bf8 <__aeabi_d2f>
 80023d0:	4603      	mov	r3, r0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	e0a4      	b.n	8002520 <PID_Calculation+0x268>
			}
		else
			{
			out=(Kp*(error)) +( Ki*(Ki_sum)*Ts) -( Kd*(input-prev_input)/Ts);
 80023d6:	4b81      	ldr	r3, [pc, #516]	; (80025dc <PID_Calculation+0x324>)
 80023d8:	ed93 7a00 	vldr	s14, [r3]
 80023dc:	4b7c      	ldr	r3, [pc, #496]	; (80025d0 <PID_Calculation+0x318>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e6:	4b80      	ldr	r3, [pc, #512]	; (80025e8 <PID_Calculation+0x330>)
 80023e8:	edd3 6a00 	vldr	s13, [r3]
 80023ec:	4b7f      	ldr	r3, [pc, #508]	; (80025ec <PID_Calculation+0x334>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023f6:	4b7b      	ldr	r3, [pc, #492]	; (80025e4 <PID_Calculation+0x32c>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002404:	ee17 0a90 	vmov	r0, s15
 8002408:	f7fe f8a6 	bl	8000558 <__aeabi_f2d>
 800240c:	4604      	mov	r4, r0
 800240e:	460d      	mov	r5, r1
 8002410:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <PID_Calculation+0x328>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f89f 	bl	8000558 <__aeabi_f2d>
 800241a:	4680      	mov	r8, r0
 800241c:	4689      	mov	r9, r1
 800241e:	4b6b      	ldr	r3, [pc, #428]	; (80025cc <PID_Calculation+0x314>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f898 	bl	8000558 <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002430:	f7fd ff32 	bl	8000298 <__aeabi_dsub>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4640      	mov	r0, r8
 800243a:	4649      	mov	r1, r9
 800243c:	f7fe f8e4 	bl	8000608 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4690      	mov	r8, r2
 8002446:	4699      	mov	r9, r3
 8002448:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <PID_Calculation+0x32c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f883 	bl	8000558 <__aeabi_f2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4640      	mov	r0, r8
 8002458:	4649      	mov	r1, r9
 800245a:	f7fe f9ff 	bl	800085c <__aeabi_ddiv>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4620      	mov	r0, r4
 8002464:	4629      	mov	r1, r5
 8002466:	f7fd ff17 	bl	8000298 <__aeabi_dsub>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	f7fe fbc1 	bl	8000bf8 <__aeabi_d2f>
 8002476:	4603      	mov	r3, r0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e051      	b.n	8002520 <PID_Calculation+0x268>

		}

	else
		{
		out=Kp*(error) + Ki*(Ki_sum)*Ts - Kd*(input-prev_input)/Ts;
 800247c:	4b57      	ldr	r3, [pc, #348]	; (80025dc <PID_Calculation+0x324>)
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <PID_Calculation+0x318>)
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248c:	4b56      	ldr	r3, [pc, #344]	; (80025e8 <PID_Calculation+0x330>)
 800248e:	edd3 6a00 	vldr	s13, [r3]
 8002492:	4b56      	ldr	r3, [pc, #344]	; (80025ec <PID_Calculation+0x334>)
 8002494:	edd3 7a00 	vldr	s15, [r3]
 8002498:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800249c:	4b51      	ldr	r3, [pc, #324]	; (80025e4 <PID_Calculation+0x32c>)
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024aa:	ee17 0a90 	vmov	r0, s15
 80024ae:	f7fe f853 	bl	8000558 <__aeabi_f2d>
 80024b2:	4604      	mov	r4, r0
 80024b4:	460d      	mov	r5, r1
 80024b6:	4b4a      	ldr	r3, [pc, #296]	; (80025e0 <PID_Calculation+0x328>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe f84c 	bl	8000558 <__aeabi_f2d>
 80024c0:	4680      	mov	r8, r0
 80024c2:	4689      	mov	r9, r1
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <PID_Calculation+0x314>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f845 	bl	8000558 <__aeabi_f2d>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024d6:	f7fd fedf 	bl	8000298 <__aeabi_dsub>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4640      	mov	r0, r8
 80024e0:	4649      	mov	r1, r9
 80024e2:	f7fe f891 	bl	8000608 <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4690      	mov	r8, r2
 80024ec:	4699      	mov	r9, r3
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <PID_Calculation+0x32c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f830 	bl	8000558 <__aeabi_f2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4640      	mov	r0, r8
 80024fe:	4649      	mov	r1, r9
 8002500:	f7fe f9ac 	bl	800085c <__aeabi_ddiv>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4620      	mov	r0, r4
 800250a:	4629      	mov	r1, r5
 800250c:	f7fd fec4 	bl	8000298 <__aeabi_dsub>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	f7fe fb6e 	bl	8000bf8 <__aeabi_d2f>
 800251c:	4603      	mov	r3, r0
 800251e:	617b      	str	r3, [r7, #20]
		}
	Ki_sum=Ki_sum+(Ki_sum);
 8002520:	4b32      	ldr	r3, [pc, #200]	; (80025ec <PID_Calculation+0x334>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <PID_Calculation+0x334>)
 800252c:	edc3 7a00 	vstr	s15, [r3]
	if(out>Outmax){out=Outmax;}
 8002530:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <PID_Calculation+0x338>)
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	ed97 7a05 	vldr	s14, [r7, #20]
 800253a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	dd02      	ble.n	800254a <PID_Calculation+0x292>
 8002544:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <PID_Calculation+0x338>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	617b      	str	r3, [r7, #20]
	if(out<Outmin){out=Outmin;}
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <PID_Calculation+0x33c>)
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	ed97 7a05 	vldr	s14, [r7, #20]
 8002554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	d502      	bpl.n	8002564 <PID_Calculation+0x2ac>
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <PID_Calculation+0x33c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	617b      	str	r3, [r7, #20]
	if(motor==MOTOR_1){
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d107      	bne.n	800257a <PID_Calculation+0x2c2>
		prev_input_1=input;
 800256a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800256e:	f7fe fb43 	bl	8000bf8 <__aeabi_d2f>
 8002572:	4603      	mov	r3, r0
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <PID_Calculation+0x310>)
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e011      	b.n	800259e <PID_Calculation+0x2e6>
	}else if(motor==MOTOR_2){
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d107      	bne.n	8002590 <PID_Calculation+0x2d8>
		prev_input_2=input;
 8002580:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002584:	f7fe fb38 	bl	8000bf8 <__aeabi_d2f>
 8002588:	4603      	mov	r3, r0
 800258a:	4a0d      	ldr	r2, [pc, #52]	; (80025c0 <PID_Calculation+0x308>)
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e006      	b.n	800259e <PID_Calculation+0x2e6>
	}else{
		prev_input_3=input;
 8002590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002594:	f7fe fb30 	bl	8000bf8 <__aeabi_d2f>
 8002598:	4603      	mov	r3, r0
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <PID_Calculation+0x30c>)
 800259c:	6013      	str	r3, [r2, #0]
	}
	return out;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	ee07 3a90 	vmov	s15, r3
	}
 80025a4:	eeb0 0a67 	vmov.f32	s0, s15
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025b0:	20000410 	.word	0x20000410
 80025b4:	20000414 	.word	0x20000414
 80025b8:	2000040c 	.word	0x2000040c
 80025bc:	20000418 	.word	0x20000418
 80025c0:	2000042c 	.word	0x2000042c
 80025c4:	20000430 	.word	0x20000430
 80025c8:	20000428 	.word	0x20000428
 80025cc:	20000434 	.word	0x20000434
 80025d0:	20000424 	.word	0x20000424
 80025d4:	20000420 	.word	0x20000420
 80025d8:	2000041c 	.word	0x2000041c
 80025dc:	200003f4 	.word	0x200003f4
 80025e0:	200003fc 	.word	0x200003fc
 80025e4:	20000400 	.word	0x20000400
 80025e8:	200003f8 	.word	0x200003f8
 80025ec:	20000438 	.word	0x20000438
 80025f0:	20000408 	.word	0x20000408
 80025f4:	20000404 	.word	0x20000404

080025f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_MspInit+0x4c>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <HAL_MspInit+0x4c>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260c:	6453      	str	r3, [r2, #68]	; 0x44
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_MspInit+0x4c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_MspInit+0x4c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <HAL_MspInit+0x4c>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_MspInit+0x4c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08e      	sub	sp, #56	; 0x38
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a5a      	ldr	r2, [pc, #360]	; (80027d0 <HAL_TIM_Encoder_MspInit+0x188>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d12d      	bne.n	80026c6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	4b59      	ldr	r3, [pc, #356]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	4b52      	ldr	r3, [pc, #328]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a51      	ldr	r2, [pc, #324]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026b4:	2301      	movs	r3, #1
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026bc:	4619      	mov	r1, r3
 80026be:	4846      	ldr	r0, [pc, #280]	; (80027d8 <HAL_TIM_Encoder_MspInit+0x190>)
 80026c0:	f000 fc06 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80026c4:	e080      	b.n	80027c8 <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM3)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a44      	ldr	r2, [pc, #272]	; (80027dc <HAL_TIM_Encoder_MspInit+0x194>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d14a      	bne.n	8002766 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	4a3e      	ldr	r2, [pc, #248]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80026da:	f043 0302 	orr.w	r3, r3, #2
 80026de:	6413      	str	r3, [r2, #64]	; 0x40
 80026e0:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	4a37      	ldr	r2, [pc, #220]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6313      	str	r3, [r2, #48]	; 0x30
 80026fc:	4b35      	ldr	r3, [pc, #212]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	4a30      	ldr	r2, [pc, #192]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	6313      	str	r3, [r2, #48]	; 0x30
 8002718:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002724:	2340      	movs	r3, #64	; 0x40
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002734:	2302      	movs	r3, #2
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273c:	4619      	mov	r1, r3
 800273e:	4826      	ldr	r0, [pc, #152]	; (80027d8 <HAL_TIM_Encoder_MspInit+0x190>)
 8002740:	f000 fbc6 	bl	8002ed0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002744:	2320      	movs	r3, #32
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002754:	2302      	movs	r3, #2
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800275c:	4619      	mov	r1, r3
 800275e:	4820      	ldr	r0, [pc, #128]	; (80027e0 <HAL_TIM_Encoder_MspInit+0x198>)
 8002760:	f000 fbb6 	bl	8002ed0 <HAL_GPIO_Init>
}
 8002764:	e030      	b.n	80027c8 <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM4)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <HAL_TIM_Encoder_MspInit+0x19c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d12b      	bne.n	80027c8 <HAL_TIM_Encoder_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 800277a:	f043 0304 	orr.w	r3, r3, #4
 800277e:	6413      	str	r3, [r2, #64]	; 0x40
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	6313      	str	r3, [r2, #48]	; 0x30
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_TIM_Encoder_MspInit+0x18c>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027a8:	23c0      	movs	r3, #192	; 0xc0
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027b8:	2302      	movs	r3, #2
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c0:	4619      	mov	r1, r3
 80027c2:	4807      	ldr	r0, [pc, #28]	; (80027e0 <HAL_TIM_Encoder_MspInit+0x198>)
 80027c4:	f000 fb84 	bl	8002ed0 <HAL_GPIO_Init>
}
 80027c8:	bf00      	nop
 80027ca:	3738      	adds	r7, #56	; 0x38
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40000800 	.word	0x40000800

080027e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d10d      	bne.n	8002816 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_TIM_Base_MspInit+0x3c>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <HAL_TIM_Base_MspInit+0x3c>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_TIM_Base_MspInit+0x3c>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d13c      	bne.n	80028c4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_TIM_MspPostInit+0xa4>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <HAL_TIM_MspPostInit+0xa4>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_TIM_MspPostInit+0xa4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_TIM_MspPostInit+0xa4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a17      	ldr	r2, [pc, #92]	; (80028cc <HAL_TIM_MspPostInit+0xa4>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_TIM_MspPostInit+0xa4>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002882:	2303      	movs	r3, #3
 8002884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002892:	2301      	movs	r3, #1
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4619      	mov	r1, r3
 800289c:	480c      	ldr	r0, [pc, #48]	; (80028d0 <HAL_TIM_MspPostInit+0xa8>)
 800289e:	f000 fb17 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028b4:	2301      	movs	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	4619      	mov	r1, r3
 80028be:	4805      	ldr	r0, [pc, #20]	; (80028d4 <HAL_TIM_MspPostInit+0xac>)
 80028c0:	f000 fb06 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028c4:	bf00      	nop
 80028c6:	3728      	adds	r7, #40	; 0x28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400

080028d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a19      	ldr	r2, [pc, #100]	; (800295c <HAL_UART_MspInit+0x84>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d12b      	bne.n	8002952 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	4b18      	ldr	r3, [pc, #96]	; (8002960 <HAL_UART_MspInit+0x88>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_UART_MspInit+0x88>)
 8002904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_UART_MspInit+0x88>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_UART_MspInit+0x88>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a10      	ldr	r2, [pc, #64]	; (8002960 <HAL_UART_MspInit+0x88>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <HAL_UART_MspInit+0x88>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002932:	230c      	movs	r3, #12
 8002934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293e:	2303      	movs	r3, #3
 8002940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002942:	2307      	movs	r3, #7
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	4619      	mov	r1, r3
 800294c:	4805      	ldr	r0, [pc, #20]	; (8002964 <HAL_UART_MspInit+0x8c>)
 800294e:	f000 fabf 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002952:	bf00      	nop
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40004400 	.word	0x40004400
 8002960:	40023800 	.word	0x40023800
 8002964:	40020000 	.word	0x40020000

08002968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800296c:	e7fe      	b.n	800296c <NMI_Handler+0x4>

0800296e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <HardFault_Handler+0x4>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <MemManage_Handler+0x4>

0800297a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <BusFault_Handler+0x4>

08002980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <UsageFault_Handler+0x4>

08002986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b4:	f000 f962 	bl	8002c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ms++;
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <SysTick_Handler+0x20>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	1c54      	adds	r4, r2, #1
 80029c0:	f143 0500 	adc.w	r5, r3, #0
 80029c4:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <SysTick_Handler+0x20>)
 80029c6:	e9c3 4500 	strd	r4, r5, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bdb0      	pop	{r4, r5, r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000210 	.word	0x20000210

080029d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return 1;
 80029d8:	2301      	movs	r3, #1
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <_kill>:

int _kill(int pid, int sig)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029ee:	f003 f9dd 	bl	8005dac <__errno>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2216      	movs	r2, #22
 80029f6:	601a      	str	r2, [r3, #0]
  return -1;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_exit>:

void _exit (int status)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ffe7 	bl	80029e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a16:	e7fe      	b.n	8002a16 <_exit+0x12>

08002a18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e00a      	b.n	8002a40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a2a:	f3af 8000 	nop.w
 8002a2e:	4601      	mov	r1, r0
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	60ba      	str	r2, [r7, #8]
 8002a36:	b2ca      	uxtb	r2, r1
 8002a38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	dbf0      	blt.n	8002a2a <_read+0x12>
  }

  return len;
 8002a48:	687b      	ldr	r3, [r7, #4]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	e009      	b.n	8002a78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	60ba      	str	r2, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fc8d 	bl	800138c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3301      	adds	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	dbf1      	blt.n	8002a64 <_write+0x12>
  }
  return len;
 8002a80:	687b      	ldr	r3, [r7, #4]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <_close>:

int _close(int file)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ab2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <_isatty>:

int _isatty(int file)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aca:	2301      	movs	r3, #1
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <_sbrk+0x5c>)
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <_sbrk+0x60>)
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <_sbrk+0x64>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <_sbrk+0x64>)
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <_sbrk+0x68>)
 8002b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <_sbrk+0x64>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d207      	bcs.n	8002b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b24:	f003 f942 	bl	8005dac <__errno>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	220c      	movs	r2, #12
 8002b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b32:	e009      	b.n	8002b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <_sbrk+0x64>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <_sbrk+0x64>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <_sbrk+0x64>)
 8002b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b46:	68fb      	ldr	r3, [r7, #12]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20020000 	.word	0x20020000
 8002b54:	00000400 	.word	0x00000400
 8002b58:	2000043c 	.word	0x2000043c
 8002b5c:	20000590 	.word	0x20000590

08002b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <SystemInit+0x20>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <SystemInit+0x20>)
 8002b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b88:	f7ff ffea 	bl	8002b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b8c:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b8e:	490d      	ldr	r1, [pc, #52]	; (8002bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b90:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b94:	e002      	b.n	8002b9c <LoopCopyDataInit>

08002b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b9a:	3304      	adds	r3, #4

08002b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba0:	d3f9      	bcc.n	8002b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ba4:	4c0a      	ldr	r4, [pc, #40]	; (8002bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba8:	e001      	b.n	8002bae <LoopFillZerobss>

08002baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bac:	3204      	adds	r2, #4

08002bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb0:	d3fb      	bcc.n	8002baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bb2:	f003 f901 	bl	8005db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bb6:	f7fe fc4b 	bl	8001450 <main>
  bx  lr    
 8002bba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002bc8:	080092f0 	.word	0x080092f0
  ldr r2, =_sbss
 8002bcc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002bd0:	20000590 	.word	0x20000590

08002bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd4:	e7fe      	b.n	8002bd4 <ADC_IRQHandler>
	...

08002bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_Init+0x40>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <HAL_Init+0x40>)
 8002be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_Init+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_Init+0x40>)
 8002bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_Init+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <HAL_Init+0x40>)
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c00:	2003      	movs	r0, #3
 8002c02:	f000 f931 	bl	8002e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c06:	200f      	movs	r0, #15
 8002c08:	f000 f808 	bl	8002c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c0c:	f7ff fcf4 	bl	80025f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023c00 	.word	0x40023c00

08002c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_InitTick+0x54>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_InitTick+0x58>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f93b 	bl	8002eb6 <HAL_SYSTICK_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00e      	b.n	8002c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	d80a      	bhi.n	8002c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c50:	2200      	movs	r2, #0
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	f000 f911 	bl	8002e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c5c:	4a06      	ldr	r2, [pc, #24]	; (8002c78 <HAL_InitTick+0x5c>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000000 	.word	0x20000000
 8002c74:	20000008 	.word	0x20000008
 8002c78:	20000004 	.word	0x20000004

08002c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_IncTick+0x20>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_IncTick+0x24>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_IncTick+0x24>)
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000008 	.word	0x20000008
 8002ca0:	20000440 	.word	0x20000440

08002ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_GetTick+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000440 	.word	0x20000440

08002cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff ffee 	bl	8002ca4 <HAL_GetTick>
 8002cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d005      	beq.n	8002ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_Delay+0x44>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ce2:	bf00      	nop
 8002ce4:	f7ff ffde 	bl	8002ca4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d8f7      	bhi.n	8002ce4 <HAL_Delay+0x28>
  {
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000008 	.word	0x20000008

08002d04 <__NVIC_SetPriorityGrouping>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d36:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	60d3      	str	r3, [r2, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_GetPriorityGrouping>:
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <__NVIC_GetPriorityGrouping+0x18>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 0307 	and.w	r3, r3, #7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_SetPriority>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0a      	blt.n	8002d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	490c      	ldr	r1, [pc, #48]	; (8002db4 <__NVIC_SetPriority+0x4c>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d90:	e00a      	b.n	8002da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4908      	ldr	r1, [pc, #32]	; (8002db8 <__NVIC_SetPriority+0x50>)
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	3b04      	subs	r3, #4
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	761a      	strb	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000e100 	.word	0xe000e100
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	; 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f1c3 0307 	rsb	r3, r3, #7
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	bf28      	it	cs
 8002dda:	2304      	movcs	r3, #4
 8002ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d902      	bls.n	8002dec <NVIC_EncodePriority+0x30>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3b03      	subs	r3, #3
 8002dea:	e000      	b.n	8002dee <NVIC_EncodePriority+0x32>
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	4313      	orrs	r3, r2
         );
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	; 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e34:	d301      	bcc.n	8002e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00f      	b.n	8002e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <SysTick_Config+0x40>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e42:	210f      	movs	r1, #15
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	f7ff ff8e 	bl	8002d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <SysTick_Config+0x40>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <SysTick_Config+0x40>)
 8002e54:	2207      	movs	r2, #7
 8002e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	e000e010 	.word	0xe000e010

08002e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff47 	bl	8002d04 <__NVIC_SetPriorityGrouping>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e90:	f7ff ff5c 	bl	8002d4c <__NVIC_GetPriorityGrouping>
 8002e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	6978      	ldr	r0, [r7, #20]
 8002e9c:	f7ff ff8e 	bl	8002dbc <NVIC_EncodePriority>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff5d 	bl	8002d68 <__NVIC_SetPriority>
}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ffb0 	bl	8002e24 <SysTick_Config>
 8002ec4:	4603      	mov	r3, r0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e159      	b.n	80031a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eec:	2201      	movs	r2, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	f040 8148 	bne.w	800319a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d005      	beq.n	8002f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d130      	bne.n	8002f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 0201 	and.w	r2, r3, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d017      	beq.n	8002fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d123      	bne.n	8003014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	69b9      	ldr	r1, [r7, #24]
 8003010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0203 	and.w	r2, r3, #3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a2 	beq.w	800319a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b57      	ldr	r3, [pc, #348]	; (80031b8 <HAL_GPIO_Init+0x2e8>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_GPIO_Init+0x2e8>)
 8003060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003064:	6453      	str	r3, [r2, #68]	; 0x44
 8003066:	4b54      	ldr	r3, [pc, #336]	; (80031b8 <HAL_GPIO_Init+0x2e8>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003072:	4a52      	ldr	r2, [pc, #328]	; (80031bc <HAL_GPIO_Init+0x2ec>)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a49      	ldr	r2, [pc, #292]	; (80031c0 <HAL_GPIO_Init+0x2f0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d019      	beq.n	80030d2 <HAL_GPIO_Init+0x202>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a48      	ldr	r2, [pc, #288]	; (80031c4 <HAL_GPIO_Init+0x2f4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <HAL_GPIO_Init+0x1fe>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a47      	ldr	r2, [pc, #284]	; (80031c8 <HAL_GPIO_Init+0x2f8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00d      	beq.n	80030ca <HAL_GPIO_Init+0x1fa>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a46      	ldr	r2, [pc, #280]	; (80031cc <HAL_GPIO_Init+0x2fc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d007      	beq.n	80030c6 <HAL_GPIO_Init+0x1f6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a45      	ldr	r2, [pc, #276]	; (80031d0 <HAL_GPIO_Init+0x300>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_GPIO_Init+0x1f2>
 80030be:	2304      	movs	r3, #4
 80030c0:	e008      	b.n	80030d4 <HAL_GPIO_Init+0x204>
 80030c2:	2307      	movs	r3, #7
 80030c4:	e006      	b.n	80030d4 <HAL_GPIO_Init+0x204>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e004      	b.n	80030d4 <HAL_GPIO_Init+0x204>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e002      	b.n	80030d4 <HAL_GPIO_Init+0x204>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_GPIO_Init+0x204>
 80030d2:	2300      	movs	r3, #0
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	f002 0203 	and.w	r2, r2, #3
 80030da:	0092      	lsls	r2, r2, #2
 80030dc:	4093      	lsls	r3, r2
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030e4:	4935      	ldr	r1, [pc, #212]	; (80031bc <HAL_GPIO_Init+0x2ec>)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	3302      	adds	r3, #2
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030f2:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <HAL_GPIO_Init+0x304>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003116:	4a2f      	ldr	r2, [pc, #188]	; (80031d4 <HAL_GPIO_Init+0x304>)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800311c:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_GPIO_Init+0x304>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003140:	4a24      	ldr	r2, [pc, #144]	; (80031d4 <HAL_GPIO_Init+0x304>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003146:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <HAL_GPIO_Init+0x304>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800316a:	4a1a      	ldr	r2, [pc, #104]	; (80031d4 <HAL_GPIO_Init+0x304>)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003170:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_GPIO_Init+0x304>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003194:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_GPIO_Init+0x304>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3301      	adds	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b0f      	cmp	r3, #15
 80031a4:	f67f aea2 	bls.w	8002eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3724      	adds	r7, #36	; 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40013800 	.word	0x40013800
 80031c0:	40020000 	.word	0x40020000
 80031c4:	40020400 	.word	0x40020400
 80031c8:	40020800 	.word	0x40020800
 80031cc:	40020c00 	.word	0x40020c00
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40013c00 	.word	0x40013c00

080031d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e8:	787b      	ldrb	r3, [r7, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031f4:	e003      	b.n	80031fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031f6:	887b      	ldrh	r3, [r7, #2]
 80031f8:	041a      	lsls	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	619a      	str	r2, [r3, #24]
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e267      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d075      	beq.n	8003316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800322a:	4b88      	ldr	r3, [pc, #544]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b04      	cmp	r3, #4
 8003234:	d00c      	beq.n	8003250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003236:	4b85      	ldr	r3, [pc, #532]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800323e:	2b08      	cmp	r3, #8
 8003240:	d112      	bne.n	8003268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003242:	4b82      	ldr	r3, [pc, #520]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324e:	d10b      	bne.n	8003268 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	4b7e      	ldr	r3, [pc, #504]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d05b      	beq.n	8003314 <HAL_RCC_OscConfig+0x108>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d157      	bne.n	8003314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e242      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003270:	d106      	bne.n	8003280 <HAL_RCC_OscConfig+0x74>
 8003272:	4b76      	ldr	r3, [pc, #472]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a75      	ldr	r2, [pc, #468]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e01d      	b.n	80032bc <HAL_RCC_OscConfig+0xb0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x98>
 800328a:	4b70      	ldr	r3, [pc, #448]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6f      	ldr	r2, [pc, #444]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b6d      	ldr	r3, [pc, #436]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6c      	ldr	r2, [pc, #432]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0xb0>
 80032a4:	4b69      	ldr	r3, [pc, #420]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a68      	ldr	r2, [pc, #416]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b66      	ldr	r3, [pc, #408]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a65      	ldr	r2, [pc, #404]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7ff fcee 	bl	8002ca4 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032cc:	f7ff fcea 	bl	8002ca4 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e207      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b5b      	ldr	r3, [pc, #364]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0xc0>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7ff fcda 	bl	8002ca4 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f4:	f7ff fcd6 	bl	8002ca4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1f3      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	4b51      	ldr	r3, [pc, #324]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0xe8>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d063      	beq.n	80033ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003322:	4b4a      	ldr	r3, [pc, #296]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003336:	2b08      	cmp	r3, #8
 8003338:	d11c      	bne.n	8003374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333a:	4b44      	ldr	r3, [pc, #272]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x152>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e1c7      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335e:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4937      	ldr	r1, [pc, #220]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003372:	e03a      	b.n	80033ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337c:	4b34      	ldr	r3, [pc, #208]	; (8003450 <HAL_RCC_OscConfig+0x244>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7ff fc8f 	bl	8002ca4 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338a:	f7ff fc8b 	bl	8002ca4 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1a8      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b28      	ldr	r3, [pc, #160]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4925      	ldr	r1, [pc, #148]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <HAL_RCC_OscConfig+0x244>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7ff fc6e 	bl	8002ca4 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033cc:	f7ff fc6a 	bl	8002ca4 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e187      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d036      	beq.n	8003464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_RCC_OscConfig+0x248>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7ff fc4e 	bl	8002ca4 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340c:	f7ff fc4a 	bl	8002ca4 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e167      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_OscConfig+0x240>)
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x200>
 800342a:	e01b      	b.n	8003464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_OscConfig+0x248>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7ff fc37 	bl	8002ca4 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	e00e      	b.n	8003458 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800343a:	f7ff fc33 	bl	8002ca4 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d907      	bls.n	8003458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e150      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
 800344c:	40023800 	.word	0x40023800
 8003450:	42470000 	.word	0x42470000
 8003454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003458:	4b88      	ldr	r3, [pc, #544]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800345a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1ea      	bne.n	800343a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8097 	beq.w	80035a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003476:	4b81      	ldr	r3, [pc, #516]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10f      	bne.n	80034a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	4b7d      	ldr	r3, [pc, #500]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a7c      	ldr	r2, [pc, #496]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
 8003492:	4b7a      	ldr	r3, [pc, #488]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a2:	4b77      	ldr	r3, [pc, #476]	; (8003680 <HAL_RCC_OscConfig+0x474>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d118      	bne.n	80034e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ae:	4b74      	ldr	r3, [pc, #464]	; (8003680 <HAL_RCC_OscConfig+0x474>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a73      	ldr	r2, [pc, #460]	; (8003680 <HAL_RCC_OscConfig+0x474>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ba:	f7ff fbf3 	bl	8002ca4 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c2:	f7ff fbef 	bl	8002ca4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e10c      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	4b6a      	ldr	r3, [pc, #424]	; (8003680 <HAL_RCC_OscConfig+0x474>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x2ea>
 80034e8:	4b64      	ldr	r3, [pc, #400]	; (800367c <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4a63      	ldr	r2, [pc, #396]	; (800367c <HAL_RCC_OscConfig+0x470>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6713      	str	r3, [r2, #112]	; 0x70
 80034f4:	e01c      	b.n	8003530 <HAL_RCC_OscConfig+0x324>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x30c>
 80034fe:	4b5f      	ldr	r3, [pc, #380]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a5e      	ldr	r2, [pc, #376]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	6713      	str	r3, [r2, #112]	; 0x70
 800350a:	4b5c      	ldr	r3, [pc, #368]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a5b      	ldr	r2, [pc, #364]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6713      	str	r3, [r2, #112]	; 0x70
 8003516:	e00b      	b.n	8003530 <HAL_RCC_OscConfig+0x324>
 8003518:	4b58      	ldr	r3, [pc, #352]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a57      	ldr	r2, [pc, #348]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	4b55      	ldr	r3, [pc, #340]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a54      	ldr	r2, [pc, #336]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800352a:	f023 0304 	bic.w	r3, r3, #4
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7ff fbb4 	bl	8002ca4 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7ff fbb0 	bl	8002ca4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0cb      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003556:	4b49      	ldr	r3, [pc, #292]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0ee      	beq.n	8003540 <HAL_RCC_OscConfig+0x334>
 8003562:	e014      	b.n	800358e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003564:	f7ff fb9e 	bl	8002ca4 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356a:	e00a      	b.n	8003582 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7ff fb9a 	bl	8002ca4 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e0b5      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003582:	4b3e      	ldr	r3, [pc, #248]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1ee      	bne.n	800356c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003594:	4b39      	ldr	r3, [pc, #228]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	4a38      	ldr	r2, [pc, #224]	; (800367c <HAL_RCC_OscConfig+0x470>)
 800359a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80a1 	beq.w	80036ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035aa:	4b34      	ldr	r3, [pc, #208]	; (800367c <HAL_RCC_OscConfig+0x470>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d05c      	beq.n	8003670 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d141      	bne.n	8003642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b31      	ldr	r3, [pc, #196]	; (8003684 <HAL_RCC_OscConfig+0x478>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7ff fb6e 	bl	8002ca4 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035cc:	f7ff fb6a 	bl	8002ca4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e087      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	4b27      	ldr	r3, [pc, #156]	; (800367c <HAL_RCC_OscConfig+0x470>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	019b      	lsls	r3, r3, #6
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	3b01      	subs	r3, #1
 8003604:	041b      	lsls	r3, r3, #16
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	491b      	ldr	r1, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x478>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7ff fb43 	bl	8002ca4 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003622:	f7ff fb3f 	bl	8002ca4 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e05c      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x416>
 8003640:	e054      	b.n	80036ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_RCC_OscConfig+0x478>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7ff fb2c 	bl	8002ca4 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003650:	f7ff fb28 	bl	8002ca4 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e045      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_OscConfig+0x470>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x444>
 800366e:	e03d      	b.n	80036ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d107      	bne.n	8003688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e038      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000
 8003684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCC_OscConfig+0x4ec>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d028      	beq.n	80036e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d121      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d11a      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d111      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	3b01      	subs	r3, #1
 80036d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d107      	bne.n	80036e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800

080036fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0cc      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003710:	4b68      	ldr	r3, [pc, #416]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d90c      	bls.n	8003738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b63      	ldr	r3, [pc, #396]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0b8      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d020      	beq.n	8003786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003750:	4b59      	ldr	r3, [pc, #356]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a58      	ldr	r2, [pc, #352]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800375a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003768:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a52      	ldr	r2, [pc, #328]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003774:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	494d      	ldr	r1, [pc, #308]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d044      	beq.n	800381c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d119      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e07f      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	4b3f      	ldr	r3, [pc, #252]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e06f      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ca:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e067      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4934      	ldr	r1, [pc, #208]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ec:	f7ff fa5a 	bl	8002ca4 <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7ff fa56 	bl	8002ca4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e04f      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 020c 	and.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d1eb      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800381c:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d20c      	bcs.n	8003844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e032      	b.n	80038aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4916      	ldr	r1, [pc, #88]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	490e      	ldr	r1, [pc, #56]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003882:	f000 f821 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8003886:	4602      	mov	r2, r0
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	490a      	ldr	r1, [pc, #40]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	5ccb      	ldrb	r3, [r1, r3]
 8003896:	fa22 f303 	lsr.w	r3, r2, r3
 800389a:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_RCC_ClockConfig+0x1c8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff f9ba 	bl	8002c1c <HAL_InitTick>

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40023c00 	.word	0x40023c00
 80038b8:	40023800 	.word	0x40023800
 80038bc:	08008d78 	.word	0x08008d78
 80038c0:	20000000 	.word	0x20000000
 80038c4:	20000004 	.word	0x20000004

080038c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038cc:	b094      	sub	sp, #80	; 0x50
 80038ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	647b      	str	r3, [r7, #68]	; 0x44
 80038d4:	2300      	movs	r3, #0
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d8:	2300      	movs	r3, #0
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e0:	4b79      	ldr	r3, [pc, #484]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 030c 	and.w	r3, r3, #12
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d00d      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x40>
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	f200 80e1 	bhi.w	8003ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x34>
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d003      	beq.n	8003902 <HAL_RCC_GetSysClockFreq+0x3a>
 80038fa:	e0db      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b73      	ldr	r3, [pc, #460]	; (8003acc <HAL_RCC_GetSysClockFreq+0x204>)
 80038fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003900:	e0db      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003902:	4b73      	ldr	r3, [pc, #460]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003906:	e0d8      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003908:	4b6f      	ldr	r3, [pc, #444]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003910:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003912:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d063      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391e:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	2200      	movs	r2, #0
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
 8003928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
 8003932:	2300      	movs	r3, #0
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
 8003936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800393a:	4622      	mov	r2, r4
 800393c:	462b      	mov	r3, r5
 800393e:	f04f 0000 	mov.w	r0, #0
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	0159      	lsls	r1, r3, #5
 8003948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800394c:	0150      	lsls	r0, r2, #5
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4621      	mov	r1, r4
 8003954:	1a51      	subs	r1, r2, r1
 8003956:	6139      	str	r1, [r7, #16]
 8003958:	4629      	mov	r1, r5
 800395a:	eb63 0301 	sbc.w	r3, r3, r1
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800396c:	4659      	mov	r1, fp
 800396e:	018b      	lsls	r3, r1, #6
 8003970:	4651      	mov	r1, sl
 8003972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003976:	4651      	mov	r1, sl
 8003978:	018a      	lsls	r2, r1, #6
 800397a:	4651      	mov	r1, sl
 800397c:	ebb2 0801 	subs.w	r8, r2, r1
 8003980:	4659      	mov	r1, fp
 8003982:	eb63 0901 	sbc.w	r9, r3, r1
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800399a:	4690      	mov	r8, r2
 800399c:	4699      	mov	r9, r3
 800399e:	4623      	mov	r3, r4
 80039a0:	eb18 0303 	adds.w	r3, r8, r3
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	462b      	mov	r3, r5
 80039a8:	eb49 0303 	adc.w	r3, r9, r3
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039ba:	4629      	mov	r1, r5
 80039bc:	024b      	lsls	r3, r1, #9
 80039be:	4621      	mov	r1, r4
 80039c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039c4:	4621      	mov	r1, r4
 80039c6:	024a      	lsls	r2, r1, #9
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ce:	2200      	movs	r2, #0
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039d8:	f7fd f95e 	bl	8000c98 <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4613      	mov	r3, r2
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e4:	e058      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	099b      	lsrs	r3, r3, #6
 80039ec:	2200      	movs	r2, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	4611      	mov	r1, r2
 80039f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039f6:	623b      	str	r3, [r7, #32]
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
 80039fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a00:	4642      	mov	r2, r8
 8003a02:	464b      	mov	r3, r9
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	0159      	lsls	r1, r3, #5
 8003a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a12:	0150      	lsls	r0, r2, #5
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4641      	mov	r1, r8
 8003a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a1e:	4649      	mov	r1, r9
 8003a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a38:	ebb2 040a 	subs.w	r4, r2, sl
 8003a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	00eb      	lsls	r3, r5, #3
 8003a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4e:	00e2      	lsls	r2, r4, #3
 8003a50:	4614      	mov	r4, r2
 8003a52:	461d      	mov	r5, r3
 8003a54:	4643      	mov	r3, r8
 8003a56:	18e3      	adds	r3, r4, r3
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	eb45 0303 	adc.w	r3, r5, r3
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a6e:	4629      	mov	r1, r5
 8003a70:	028b      	lsls	r3, r1, #10
 8003a72:	4621      	mov	r1, r4
 8003a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a78:	4621      	mov	r1, r4
 8003a7a:	028a      	lsls	r2, r1, #10
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a82:	2200      	movs	r2, #0
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	61fa      	str	r2, [r7, #28]
 8003a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a8c:	f7fd f904 	bl	8000c98 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4613      	mov	r3, r2
 8003a96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3750      	adds	r7, #80	; 0x50
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	007a1200 	.word	0x007a1200

08003ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000000 	.word	0x20000000

08003aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003af0:	f7ff fff0 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4903      	ldr	r1, [pc, #12]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	08008d88 	.word	0x08008d88

08003b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b18:	f7ff ffdc 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0b5b      	lsrs	r3, r3, #13
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4903      	ldr	r1, [pc, #12]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08008d88 	.word	0x08008d88

08003b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e041      	b.n	8003bd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fe fe40 	bl	80027e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f000 fbf4 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e041      	b.n	8003c70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d106      	bne.n	8003c06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f839 	bl	8003c78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	4619      	mov	r1, r3
 8003c18:	4610      	mov	r0, r2
 8003c1a:	f000 fba5 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <HAL_TIM_PWM_Start+0x24>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e022      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x6a>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d109      	bne.n	8003cca <HAL_TIM_PWM_Start+0x3e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	bf14      	ite	ne
 8003cc2:	2301      	movne	r3, #1
 8003cc4:	2300      	moveq	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	e015      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x6a>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d109      	bne.n	8003ce4 <HAL_TIM_PWM_Start+0x58>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	bf14      	ite	ne
 8003cdc:	2301      	movne	r3, #1
 8003cde:	2300      	moveq	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e008      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x6a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e068      	b.n	8003dd0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_PWM_Start+0x82>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d0c:	e013      	b.n	8003d36 <HAL_TIM_PWM_Start+0xaa>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_PWM_Start+0x92>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d1c:	e00b      	b.n	8003d36 <HAL_TIM_PWM_Start+0xaa>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_PWM_Start+0xa2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d2c:	e003      	b.n	8003d36 <HAL_TIM_PWM_Start+0xaa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	6839      	ldr	r1, [r7, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fdc4 	bl	80048cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a23      	ldr	r2, [pc, #140]	; (8003dd8 <HAL_TIM_PWM_Start+0x14c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d107      	bne.n	8003d5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <HAL_TIM_PWM_Start+0x14c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d018      	beq.n	8003d9a <HAL_TIM_PWM_Start+0x10e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d70:	d013      	beq.n	8003d9a <HAL_TIM_PWM_Start+0x10e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_TIM_PWM_Start+0x150>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <HAL_TIM_PWM_Start+0x10e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <HAL_TIM_PWM_Start+0x154>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_TIM_PWM_Start+0x10e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a16      	ldr	r2, [pc, #88]	; (8003de4 <HAL_TIM_PWM_Start+0x158>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_TIM_PWM_Start+0x10e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <HAL_TIM_PWM_Start+0x15c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d111      	bne.n	8003dbe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d010      	beq.n	8003dce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	e007      	b.n	8003dce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800
 8003de4:	40000c00 	.word	0x40000c00
 8003de8:	40014000 	.word	0x40014000

08003dec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e097      	b.n	8003f30 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fe fc17 	bl	8002648 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e30:	f023 0307 	bic.w	r3, r3, #7
 8003e34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f000 fa91 	bl	8004368 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e8c:	f023 030c 	bic.w	r3, r3, #12
 8003e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	011a      	lsls	r2, r3, #4
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	031b      	lsls	r3, r3, #12
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003ed2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f60:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d110      	bne.n	8003f8a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d102      	bne.n	8003f74 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f6e:	7b7b      	ldrb	r3, [r7, #13]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d001      	beq.n	8003f78 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e069      	b.n	800404c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f88:	e031      	b.n	8003fee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d110      	bne.n	8003fb2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f90:	7bbb      	ldrb	r3, [r7, #14]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d102      	bne.n	8003f9c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f96:	7b3b      	ldrb	r3, [r7, #12]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d001      	beq.n	8003fa0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e055      	b.n	800404c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fb0:	e01d      	b.n	8003fee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d108      	bne.n	8003fca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fb8:	7bbb      	ldrb	r3, [r7, #14]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d105      	bne.n	8003fca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fbe:	7b7b      	ldrb	r3, [r7, #13]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d102      	bne.n	8003fca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fc4:	7b3b      	ldrb	r3, [r7, #12]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d001      	beq.n	8003fce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e03e      	b.n	800404c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_TIM_Encoder_Start+0xc4>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d008      	beq.n	800400c <HAL_TIM_Encoder_Start+0xd4>
 8003ffa:	e00f      	b.n	800401c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fc61 	bl	80048cc <TIM_CCxChannelCmd>
      break;
 800400a:	e016      	b.n	800403a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2201      	movs	r2, #1
 8004012:	2104      	movs	r1, #4
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fc59 	bl	80048cc <TIM_CCxChannelCmd>
      break;
 800401a:	e00e      	b.n	800403a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2201      	movs	r2, #1
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fc51 	bl	80048cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2201      	movs	r2, #1
 8004030:	2104      	movs	r1, #4
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fc4a 	bl	80048cc <TIM_CCxChannelCmd>
      break;
 8004038:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800406e:	2302      	movs	r3, #2
 8004070:	e0ae      	b.n	80041d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b0c      	cmp	r3, #12
 800407e:	f200 809f 	bhi.w	80041c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004082:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	080040bd 	.word	0x080040bd
 800408c:	080041c1 	.word	0x080041c1
 8004090:	080041c1 	.word	0x080041c1
 8004094:	080041c1 	.word	0x080041c1
 8004098:	080040fd 	.word	0x080040fd
 800409c:	080041c1 	.word	0x080041c1
 80040a0:	080041c1 	.word	0x080041c1
 80040a4:	080041c1 	.word	0x080041c1
 80040a8:	0800413f 	.word	0x0800413f
 80040ac:	080041c1 	.word	0x080041c1
 80040b0:	080041c1 	.word	0x080041c1
 80040b4:	080041c1 	.word	0x080041c1
 80040b8:	0800417f 	.word	0x0800417f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 f9dc 	bl	8004480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0208 	orr.w	r2, r2, #8
 80040d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0204 	bic.w	r2, r2, #4
 80040e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6999      	ldr	r1, [r3, #24]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	619a      	str	r2, [r3, #24]
      break;
 80040fa:	e064      	b.n	80041c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fa22 	bl	800454c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6999      	ldr	r1, [r3, #24]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	021a      	lsls	r2, r3, #8
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	619a      	str	r2, [r3, #24]
      break;
 800413c:	e043      	b.n	80041c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fa6d 	bl	8004624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0208 	orr.w	r2, r2, #8
 8004158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0204 	bic.w	r2, r2, #4
 8004168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69d9      	ldr	r1, [r3, #28]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	61da      	str	r2, [r3, #28]
      break;
 800417c:	e023      	b.n	80041c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fab7 	bl	80046f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69d9      	ldr	r1, [r3, #28]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	021a      	lsls	r2, r3, #8
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	61da      	str	r2, [r3, #28]
      break;
 80041be:	e002      	b.n	80041c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]
      break;
 80041c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_TIM_ConfigClockSource+0x1c>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e0b4      	b.n	800435e <HAL_TIM_ConfigClockSource+0x186>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422c:	d03e      	beq.n	80042ac <HAL_TIM_ConfigClockSource+0xd4>
 800422e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004232:	f200 8087 	bhi.w	8004344 <HAL_TIM_ConfigClockSource+0x16c>
 8004236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423a:	f000 8086 	beq.w	800434a <HAL_TIM_ConfigClockSource+0x172>
 800423e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004242:	d87f      	bhi.n	8004344 <HAL_TIM_ConfigClockSource+0x16c>
 8004244:	2b70      	cmp	r3, #112	; 0x70
 8004246:	d01a      	beq.n	800427e <HAL_TIM_ConfigClockSource+0xa6>
 8004248:	2b70      	cmp	r3, #112	; 0x70
 800424a:	d87b      	bhi.n	8004344 <HAL_TIM_ConfigClockSource+0x16c>
 800424c:	2b60      	cmp	r3, #96	; 0x60
 800424e:	d050      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004250:	2b60      	cmp	r3, #96	; 0x60
 8004252:	d877      	bhi.n	8004344 <HAL_TIM_ConfigClockSource+0x16c>
 8004254:	2b50      	cmp	r3, #80	; 0x50
 8004256:	d03c      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004258:	2b50      	cmp	r3, #80	; 0x50
 800425a:	d873      	bhi.n	8004344 <HAL_TIM_ConfigClockSource+0x16c>
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d058      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0x13a>
 8004260:	2b40      	cmp	r3, #64	; 0x40
 8004262:	d86f      	bhi.n	8004344 <HAL_TIM_ConfigClockSource+0x16c>
 8004264:	2b30      	cmp	r3, #48	; 0x30
 8004266:	d064      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0x15a>
 8004268:	2b30      	cmp	r3, #48	; 0x30
 800426a:	d86b      	bhi.n	8004344 <HAL_TIM_ConfigClockSource+0x16c>
 800426c:	2b20      	cmp	r3, #32
 800426e:	d060      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0x15a>
 8004270:	2b20      	cmp	r3, #32
 8004272:	d867      	bhi.n	8004344 <HAL_TIM_ConfigClockSource+0x16c>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d05c      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0x15a>
 8004278:	2b10      	cmp	r3, #16
 800427a:	d05a      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0x15a>
 800427c:	e062      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800428e:	f000 fafd 	bl	800488c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	609a      	str	r2, [r3, #8]
      break;
 80042aa:	e04f      	b.n	800434c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042bc:	f000 fae6 	bl	800488c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ce:	609a      	str	r2, [r3, #8]
      break;
 80042d0:	e03c      	b.n	800434c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042de:	461a      	mov	r2, r3
 80042e0:	f000 fa5a 	bl	8004798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2150      	movs	r1, #80	; 0x50
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fab3 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 80042f0:	e02c      	b.n	800434c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042fe:	461a      	mov	r2, r3
 8004300:	f000 fa79 	bl	80047f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2160      	movs	r1, #96	; 0x60
 800430a:	4618      	mov	r0, r3
 800430c:	f000 faa3 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 8004310:	e01c      	b.n	800434c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800431e:	461a      	mov	r2, r3
 8004320:	f000 fa3a 	bl	8004798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2140      	movs	r1, #64	; 0x40
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fa93 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 8004330:	e00c      	b.n	800434c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f000 fa8a 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 8004342:	e003      	b.n	800434c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
      break;
 8004348:	e000      	b.n	800434c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800434a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a3a      	ldr	r2, [pc, #232]	; (8004464 <TIM_Base_SetConfig+0xfc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00f      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004386:	d00b      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a37      	ldr	r2, [pc, #220]	; (8004468 <TIM_Base_SetConfig+0x100>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d007      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a36      	ldr	r2, [pc, #216]	; (800446c <TIM_Base_SetConfig+0x104>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a35      	ldr	r2, [pc, #212]	; (8004470 <TIM_Base_SetConfig+0x108>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d108      	bne.n	80043b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a2b      	ldr	r2, [pc, #172]	; (8004464 <TIM_Base_SetConfig+0xfc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01b      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c0:	d017      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a28      	ldr	r2, [pc, #160]	; (8004468 <TIM_Base_SetConfig+0x100>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a27      	ldr	r2, [pc, #156]	; (800446c <TIM_Base_SetConfig+0x104>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00f      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a26      	ldr	r2, [pc, #152]	; (8004470 <TIM_Base_SetConfig+0x108>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a25      	ldr	r2, [pc, #148]	; (8004474 <TIM_Base_SetConfig+0x10c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a24      	ldr	r2, [pc, #144]	; (8004478 <TIM_Base_SetConfig+0x110>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a23      	ldr	r2, [pc, #140]	; (800447c <TIM_Base_SetConfig+0x114>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d108      	bne.n	8004404 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a0e      	ldr	r2, [pc, #56]	; (8004464 <TIM_Base_SetConfig+0xfc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d103      	bne.n	8004438 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f023 0201 	bic.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	611a      	str	r2, [r3, #16]
  }
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40010000 	.word	0x40010000
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40000c00 	.word	0x40000c00
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800

08004480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f023 0201 	bic.w	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f023 0302 	bic.w	r3, r3, #2
 80044c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <TIM_OC1_SetConfig+0xc8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10c      	bne.n	80044f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0308 	bic.w	r3, r3, #8
 80044e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f023 0304 	bic.w	r3, r3, #4
 80044f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a13      	ldr	r2, [pc, #76]	; (8004548 <TIM_OC1_SetConfig+0xc8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d111      	bne.n	8004522 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800450c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	621a      	str	r2, [r3, #32]
}
 800453c:	bf00      	nop
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40010000 	.word	0x40010000

0800454c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f023 0210 	bic.w	r2, r3, #16
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0320 	bic.w	r3, r3, #32
 8004596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <TIM_OC2_SetConfig+0xd4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d10d      	bne.n	80045c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a15      	ldr	r2, [pc, #84]	; (8004620 <TIM_OC2_SetConfig+0xd4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d113      	bne.n	80045f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000

08004624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800466c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <TIM_OC3_SetConfig+0xd0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10d      	bne.n	800469e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800469c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <TIM_OC3_SetConfig+0xd0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d113      	bne.n	80046ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	621a      	str	r2, [r3, #32]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	40010000 	.word	0x40010000

080046f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	031b      	lsls	r3, r3, #12
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a10      	ldr	r2, [pc, #64]	; (8004794 <TIM_OC4_SetConfig+0x9c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d109      	bne.n	800476c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800475e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	019b      	lsls	r3, r3, #6
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000

08004798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f023 0201 	bic.w	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f023 030a 	bic.w	r3, r3, #10
 80047d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	621a      	str	r2, [r3, #32]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b087      	sub	sp, #28
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f023 0210 	bic.w	r2, r3, #16
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	031b      	lsls	r3, r3, #12
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004832:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	f043 0307 	orr.w	r3, r3, #7
 8004878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	609a      	str	r2, [r3, #8]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	021a      	lsls	r2, r3, #8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	609a      	str	r2, [r3, #8]
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	2201      	movs	r2, #1
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1a      	ldr	r2, [r3, #32]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	401a      	ands	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	fa01 f303 	lsl.w	r3, r1, r3
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800492c:	2302      	movs	r3, #2
 800492e:	e050      	b.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1c      	ldr	r2, [pc, #112]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d018      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497c:	d013      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d009      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a15      	ldr	r2, [pc, #84]	; (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a13      	ldr	r2, [pc, #76]	; (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d10c      	bne.n	80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40014000 	.word	0x40014000

080049f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e042      	b.n	8004a8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fd ff5c 	bl	80028d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2224      	movs	r2, #36	; 0x24
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f973 	bl	8004d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	; 0x28
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d175      	bne.n	8004ba0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_UART_Transmit+0x2c>
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e06e      	b.n	8004ba2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2221      	movs	r2, #33	; 0x21
 8004ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ad2:	f7fe f8e7 	bl	8002ca4 <HAL_GetTick>
 8004ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aec:	d108      	bne.n	8004b00 <HAL_UART_Transmit+0x6c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d104      	bne.n	8004b00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	e003      	b.n	8004b08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b08:	e02e      	b.n	8004b68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	2180      	movs	r1, #128	; 0x80
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f848 	bl	8004baa <UART_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e03a      	b.n	8004ba2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10b      	bne.n	8004b4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	3302      	adds	r3, #2
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	e007      	b.n	8004b5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	781a      	ldrb	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	3301      	adds	r3, #1
 8004b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1cb      	bne.n	8004b0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2140      	movs	r1, #64	; 0x40
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f814 	bl	8004baa <UART_WaitOnFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e006      	b.n	8004ba2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e000      	b.n	8004ba2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ba0:	2302      	movs	r3, #2
  }
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b086      	sub	sp, #24
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bba:	e03b      	b.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d037      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc4:	f7fe f86e 	bl	8002ca4 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	6a3a      	ldr	r2, [r7, #32]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e03a      	b.n	8004c54 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d023      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d020      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d01d      	beq.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d116      	bne.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f81d 	bl	8004c5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2208      	movs	r2, #8
 8004c26:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e00f      	b.n	8004c54 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d0b4      	beq.n	8004bbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b095      	sub	sp, #84	; 0x54
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6e:	e853 3f00 	ldrex	r3, [r3]
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c84:	643a      	str	r2, [r7, #64]	; 0x40
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e5      	bne.n	8004c64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3314      	adds	r3, #20
 8004c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e5      	bne.n	8004c98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d119      	bne.n	8004d08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0310 	bic.w	r3, r3, #16
 8004cea:	647b      	str	r3, [r7, #68]	; 0x44
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cf4:	61ba      	str	r2, [r7, #24]
 8004cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6979      	ldr	r1, [r7, #20]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	613b      	str	r3, [r7, #16]
   return(result);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e5      	bne.n	8004cd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d16:	bf00      	nop
 8004d18:	3754      	adds	r7, #84	; 0x54
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d28:	b0c0      	sub	sp, #256	; 0x100
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d40:	68d9      	ldr	r1, [r3, #12]
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	ea40 0301 	orr.w	r3, r0, r1
 8004d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d7c:	f021 010c 	bic.w	r1, r1, #12
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	6999      	ldr	r1, [r3, #24]
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	ea40 0301 	orr.w	r3, r0, r1
 8004daa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b8f      	ldr	r3, [pc, #572]	; (8004ff0 <UART_SetConfig+0x2cc>)
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d005      	beq.n	8004dc4 <UART_SetConfig+0xa0>
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b8d      	ldr	r3, [pc, #564]	; (8004ff4 <UART_SetConfig+0x2d0>)
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d104      	bne.n	8004dce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dc4:	f7fe fea6 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 8004dc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004dcc:	e003      	b.n	8004dd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dce:	f7fe fe8d 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 8004dd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de0:	f040 810c 	bne.w	8004ffc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004df2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004df6:	4622      	mov	r2, r4
 8004df8:	462b      	mov	r3, r5
 8004dfa:	1891      	adds	r1, r2, r2
 8004dfc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dfe:	415b      	adcs	r3, r3
 8004e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e06:	4621      	mov	r1, r4
 8004e08:	eb12 0801 	adds.w	r8, r2, r1
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	eb43 0901 	adc.w	r9, r3, r1
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e26:	4690      	mov	r8, r2
 8004e28:	4699      	mov	r9, r3
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	eb18 0303 	adds.w	r3, r8, r3
 8004e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e34:	462b      	mov	r3, r5
 8004e36:	eb49 0303 	adc.w	r3, r9, r3
 8004e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e52:	460b      	mov	r3, r1
 8004e54:	18db      	adds	r3, r3, r3
 8004e56:	653b      	str	r3, [r7, #80]	; 0x50
 8004e58:	4613      	mov	r3, r2
 8004e5a:	eb42 0303 	adc.w	r3, r2, r3
 8004e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e68:	f7fb ff16 	bl	8000c98 <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <UART_SetConfig+0x2d4>)
 8004e72:	fba3 2302 	umull	r2, r3, r3, r2
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	011c      	lsls	r4, r3, #4
 8004e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	464b      	mov	r3, r9
 8004e90:	1891      	adds	r1, r2, r2
 8004e92:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e94:	415b      	adcs	r3, r3
 8004e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004eb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ebc:	4692      	mov	sl, r2
 8004ebe:	469b      	mov	fp, r3
 8004ec0:	4643      	mov	r3, r8
 8004ec2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ee0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ee4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	18db      	adds	r3, r3, r3
 8004eec:	643b      	str	r3, [r7, #64]	; 0x40
 8004eee:	4613      	mov	r3, r2
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004efa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004efe:	f7fb fecb 	bl	8000c98 <__aeabi_uldivmod>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	4b3b      	ldr	r3, [pc, #236]	; (8004ff8 <UART_SetConfig+0x2d4>)
 8004f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	2264      	movs	r2, #100	; 0x64
 8004f12:	fb02 f303 	mul.w	r3, r2, r3
 8004f16:	1acb      	subs	r3, r1, r3
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f1e:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <UART_SetConfig+0x2d4>)
 8004f20:	fba3 2302 	umull	r2, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f2c:	441c      	add	r4, r3
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f50:	4641      	mov	r1, r8
 8004f52:	1851      	adds	r1, r2, r1
 8004f54:	6339      	str	r1, [r7, #48]	; 0x30
 8004f56:	4649      	mov	r1, r9
 8004f58:	414b      	adcs	r3, r1
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f68:	4659      	mov	r1, fp
 8004f6a:	00cb      	lsls	r3, r1, #3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f72:	4651      	mov	r1, sl
 8004f74:	00ca      	lsls	r2, r1, #3
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f84:	464b      	mov	r3, r9
 8004f86:	460a      	mov	r2, r1
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	18db      	adds	r3, r3, r3
 8004fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004faa:	4613      	mov	r3, r2
 8004fac:	eb42 0303 	adc.w	r3, r2, r3
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fba:	f7fb fe6d 	bl	8000c98 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <UART_SetConfig+0x2d4>)
 8004fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	2164      	movs	r1, #100	; 0x64
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	3332      	adds	r3, #50	; 0x32
 8004fd6:	4a08      	ldr	r2, [pc, #32]	; (8004ff8 <UART_SetConfig+0x2d4>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	f003 0207 	and.w	r2, r3, #7
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4422      	add	r2, r4
 8004fea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fec:	e106      	b.n	80051fc <UART_SetConfig+0x4d8>
 8004fee:	bf00      	nop
 8004ff0:	40011000 	.word	0x40011000
 8004ff4:	40011400 	.word	0x40011400
 8004ff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005000:	2200      	movs	r2, #0
 8005002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005006:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800500a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800500e:	4642      	mov	r2, r8
 8005010:	464b      	mov	r3, r9
 8005012:	1891      	adds	r1, r2, r2
 8005014:	6239      	str	r1, [r7, #32]
 8005016:	415b      	adcs	r3, r3
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
 800501a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800501e:	4641      	mov	r1, r8
 8005020:	1854      	adds	r4, r2, r1
 8005022:	4649      	mov	r1, r9
 8005024:	eb43 0501 	adc.w	r5, r3, r1
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	00eb      	lsls	r3, r5, #3
 8005032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005036:	00e2      	lsls	r2, r4, #3
 8005038:	4614      	mov	r4, r2
 800503a:	461d      	mov	r5, r3
 800503c:	4643      	mov	r3, r8
 800503e:	18e3      	adds	r3, r4, r3
 8005040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005044:	464b      	mov	r3, r9
 8005046:	eb45 0303 	adc.w	r3, r5, r3
 800504a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800505a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800506a:	4629      	mov	r1, r5
 800506c:	008b      	lsls	r3, r1, #2
 800506e:	4621      	mov	r1, r4
 8005070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005074:	4621      	mov	r1, r4
 8005076:	008a      	lsls	r2, r1, #2
 8005078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800507c:	f7fb fe0c 	bl	8000c98 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4b60      	ldr	r3, [pc, #384]	; (8005208 <UART_SetConfig+0x4e4>)
 8005086:	fba3 2302 	umull	r2, r3, r3, r2
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	011c      	lsls	r4, r3, #4
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005098:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800509c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050a0:	4642      	mov	r2, r8
 80050a2:	464b      	mov	r3, r9
 80050a4:	1891      	adds	r1, r2, r2
 80050a6:	61b9      	str	r1, [r7, #24]
 80050a8:	415b      	adcs	r3, r3
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b0:	4641      	mov	r1, r8
 80050b2:	1851      	adds	r1, r2, r1
 80050b4:	6139      	str	r1, [r7, #16]
 80050b6:	4649      	mov	r1, r9
 80050b8:	414b      	adcs	r3, r1
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050c8:	4659      	mov	r1, fp
 80050ca:	00cb      	lsls	r3, r1, #3
 80050cc:	4651      	mov	r1, sl
 80050ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d2:	4651      	mov	r1, sl
 80050d4:	00ca      	lsls	r2, r1, #3
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	4642      	mov	r2, r8
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050e4:	464b      	mov	r3, r9
 80050e6:	460a      	mov	r2, r1
 80050e8:	eb42 0303 	adc.w	r3, r2, r3
 80050ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80050fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005108:	4649      	mov	r1, r9
 800510a:	008b      	lsls	r3, r1, #2
 800510c:	4641      	mov	r1, r8
 800510e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005112:	4641      	mov	r1, r8
 8005114:	008a      	lsls	r2, r1, #2
 8005116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800511a:	f7fb fdbd 	bl	8000c98 <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4611      	mov	r1, r2
 8005124:	4b38      	ldr	r3, [pc, #224]	; (8005208 <UART_SetConfig+0x4e4>)
 8005126:	fba3 2301 	umull	r2, r3, r3, r1
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	2264      	movs	r2, #100	; 0x64
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	1acb      	subs	r3, r1, r3
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	3332      	adds	r3, #50	; 0x32
 8005138:	4a33      	ldr	r2, [pc, #204]	; (8005208 <UART_SetConfig+0x4e4>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005144:	441c      	add	r4, r3
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	673b      	str	r3, [r7, #112]	; 0x70
 800514e:	677a      	str	r2, [r7, #116]	; 0x74
 8005150:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005154:	4642      	mov	r2, r8
 8005156:	464b      	mov	r3, r9
 8005158:	1891      	adds	r1, r2, r2
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	415b      	adcs	r3, r3
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005164:	4641      	mov	r1, r8
 8005166:	1851      	adds	r1, r2, r1
 8005168:	6039      	str	r1, [r7, #0]
 800516a:	4649      	mov	r1, r9
 800516c:	414b      	adcs	r3, r1
 800516e:	607b      	str	r3, [r7, #4]
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800517c:	4659      	mov	r1, fp
 800517e:	00cb      	lsls	r3, r1, #3
 8005180:	4651      	mov	r1, sl
 8005182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005186:	4651      	mov	r1, sl
 8005188:	00ca      	lsls	r2, r1, #3
 800518a:	4610      	mov	r0, r2
 800518c:	4619      	mov	r1, r3
 800518e:	4603      	mov	r3, r0
 8005190:	4642      	mov	r2, r8
 8005192:	189b      	adds	r3, r3, r2
 8005194:	66bb      	str	r3, [r7, #104]	; 0x68
 8005196:	464b      	mov	r3, r9
 8005198:	460a      	mov	r2, r1
 800519a:	eb42 0303 	adc.w	r3, r2, r3
 800519e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	663b      	str	r3, [r7, #96]	; 0x60
 80051aa:	667a      	str	r2, [r7, #100]	; 0x64
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051b8:	4649      	mov	r1, r9
 80051ba:	008b      	lsls	r3, r1, #2
 80051bc:	4641      	mov	r1, r8
 80051be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c2:	4641      	mov	r1, r8
 80051c4:	008a      	lsls	r2, r1, #2
 80051c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051ca:	f7fb fd65 	bl	8000c98 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <UART_SetConfig+0x4e4>)
 80051d4:	fba3 1302 	umull	r1, r3, r3, r2
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	2164      	movs	r1, #100	; 0x64
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	3332      	adds	r3, #50	; 0x32
 80051e6:	4a08      	ldr	r2, [pc, #32]	; (8005208 <UART_SetConfig+0x4e4>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f003 020f 	and.w	r2, r3, #15
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4422      	add	r2, r4
 80051fa:	609a      	str	r2, [r3, #8]
}
 80051fc:	bf00      	nop
 80051fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005202:	46bd      	mov	sp, r7
 8005204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005208:	51eb851f 	.word	0x51eb851f

0800520c <__cvt>:
 800520c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005210:	ec55 4b10 	vmov	r4, r5, d0
 8005214:	2d00      	cmp	r5, #0
 8005216:	460e      	mov	r6, r1
 8005218:	4619      	mov	r1, r3
 800521a:	462b      	mov	r3, r5
 800521c:	bfbb      	ittet	lt
 800521e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005222:	461d      	movlt	r5, r3
 8005224:	2300      	movge	r3, #0
 8005226:	232d      	movlt	r3, #45	; 0x2d
 8005228:	700b      	strb	r3, [r1, #0]
 800522a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800522c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005230:	4691      	mov	r9, r2
 8005232:	f023 0820 	bic.w	r8, r3, #32
 8005236:	bfbc      	itt	lt
 8005238:	4622      	movlt	r2, r4
 800523a:	4614      	movlt	r4, r2
 800523c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005240:	d005      	beq.n	800524e <__cvt+0x42>
 8005242:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005246:	d100      	bne.n	800524a <__cvt+0x3e>
 8005248:	3601      	adds	r6, #1
 800524a:	2102      	movs	r1, #2
 800524c:	e000      	b.n	8005250 <__cvt+0x44>
 800524e:	2103      	movs	r1, #3
 8005250:	ab03      	add	r3, sp, #12
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	ab02      	add	r3, sp, #8
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	ec45 4b10 	vmov	d0, r4, r5
 800525c:	4653      	mov	r3, sl
 800525e:	4632      	mov	r2, r6
 8005260:	f000 fe5a 	bl	8005f18 <_dtoa_r>
 8005264:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005268:	4607      	mov	r7, r0
 800526a:	d102      	bne.n	8005272 <__cvt+0x66>
 800526c:	f019 0f01 	tst.w	r9, #1
 8005270:	d022      	beq.n	80052b8 <__cvt+0xac>
 8005272:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005276:	eb07 0906 	add.w	r9, r7, r6
 800527a:	d110      	bne.n	800529e <__cvt+0x92>
 800527c:	783b      	ldrb	r3, [r7, #0]
 800527e:	2b30      	cmp	r3, #48	; 0x30
 8005280:	d10a      	bne.n	8005298 <__cvt+0x8c>
 8005282:	2200      	movs	r2, #0
 8005284:	2300      	movs	r3, #0
 8005286:	4620      	mov	r0, r4
 8005288:	4629      	mov	r1, r5
 800528a:	f7fb fc25 	bl	8000ad8 <__aeabi_dcmpeq>
 800528e:	b918      	cbnz	r0, 8005298 <__cvt+0x8c>
 8005290:	f1c6 0601 	rsb	r6, r6, #1
 8005294:	f8ca 6000 	str.w	r6, [sl]
 8005298:	f8da 3000 	ldr.w	r3, [sl]
 800529c:	4499      	add	r9, r3
 800529e:	2200      	movs	r2, #0
 80052a0:	2300      	movs	r3, #0
 80052a2:	4620      	mov	r0, r4
 80052a4:	4629      	mov	r1, r5
 80052a6:	f7fb fc17 	bl	8000ad8 <__aeabi_dcmpeq>
 80052aa:	b108      	cbz	r0, 80052b0 <__cvt+0xa4>
 80052ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80052b0:	2230      	movs	r2, #48	; 0x30
 80052b2:	9b03      	ldr	r3, [sp, #12]
 80052b4:	454b      	cmp	r3, r9
 80052b6:	d307      	bcc.n	80052c8 <__cvt+0xbc>
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052bc:	1bdb      	subs	r3, r3, r7
 80052be:	4638      	mov	r0, r7
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	b004      	add	sp, #16
 80052c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c8:	1c59      	adds	r1, r3, #1
 80052ca:	9103      	str	r1, [sp, #12]
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	e7f0      	b.n	80052b2 <__cvt+0xa6>

080052d0 <__exponent>:
 80052d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052d2:	4603      	mov	r3, r0
 80052d4:	2900      	cmp	r1, #0
 80052d6:	bfb8      	it	lt
 80052d8:	4249      	neglt	r1, r1
 80052da:	f803 2b02 	strb.w	r2, [r3], #2
 80052de:	bfb4      	ite	lt
 80052e0:	222d      	movlt	r2, #45	; 0x2d
 80052e2:	222b      	movge	r2, #43	; 0x2b
 80052e4:	2909      	cmp	r1, #9
 80052e6:	7042      	strb	r2, [r0, #1]
 80052e8:	dd2a      	ble.n	8005340 <__exponent+0x70>
 80052ea:	f10d 0207 	add.w	r2, sp, #7
 80052ee:	4617      	mov	r7, r2
 80052f0:	260a      	movs	r6, #10
 80052f2:	4694      	mov	ip, r2
 80052f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80052f8:	fb06 1415 	mls	r4, r6, r5, r1
 80052fc:	3430      	adds	r4, #48	; 0x30
 80052fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005302:	460c      	mov	r4, r1
 8005304:	2c63      	cmp	r4, #99	; 0x63
 8005306:	f102 32ff 	add.w	r2, r2, #4294967295
 800530a:	4629      	mov	r1, r5
 800530c:	dcf1      	bgt.n	80052f2 <__exponent+0x22>
 800530e:	3130      	adds	r1, #48	; 0x30
 8005310:	f1ac 0402 	sub.w	r4, ip, #2
 8005314:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005318:	1c41      	adds	r1, r0, #1
 800531a:	4622      	mov	r2, r4
 800531c:	42ba      	cmp	r2, r7
 800531e:	d30a      	bcc.n	8005336 <__exponent+0x66>
 8005320:	f10d 0209 	add.w	r2, sp, #9
 8005324:	eba2 020c 	sub.w	r2, r2, ip
 8005328:	42bc      	cmp	r4, r7
 800532a:	bf88      	it	hi
 800532c:	2200      	movhi	r2, #0
 800532e:	4413      	add	r3, r2
 8005330:	1a18      	subs	r0, r3, r0
 8005332:	b003      	add	sp, #12
 8005334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005336:	f812 5b01 	ldrb.w	r5, [r2], #1
 800533a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800533e:	e7ed      	b.n	800531c <__exponent+0x4c>
 8005340:	2330      	movs	r3, #48	; 0x30
 8005342:	3130      	adds	r1, #48	; 0x30
 8005344:	7083      	strb	r3, [r0, #2]
 8005346:	70c1      	strb	r1, [r0, #3]
 8005348:	1d03      	adds	r3, r0, #4
 800534a:	e7f1      	b.n	8005330 <__exponent+0x60>

0800534c <_printf_float>:
 800534c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005350:	ed2d 8b02 	vpush	{d8}
 8005354:	b08d      	sub	sp, #52	; 0x34
 8005356:	460c      	mov	r4, r1
 8005358:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800535c:	4616      	mov	r6, r2
 800535e:	461f      	mov	r7, r3
 8005360:	4605      	mov	r5, r0
 8005362:	f000 fcd9 	bl	8005d18 <_localeconv_r>
 8005366:	f8d0 a000 	ldr.w	sl, [r0]
 800536a:	4650      	mov	r0, sl
 800536c:	f7fa ff88 	bl	8000280 <strlen>
 8005370:	2300      	movs	r3, #0
 8005372:	930a      	str	r3, [sp, #40]	; 0x28
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	9305      	str	r3, [sp, #20]
 8005378:	f8d8 3000 	ldr.w	r3, [r8]
 800537c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005380:	3307      	adds	r3, #7
 8005382:	f023 0307 	bic.w	r3, r3, #7
 8005386:	f103 0208 	add.w	r2, r3, #8
 800538a:	f8c8 2000 	str.w	r2, [r8]
 800538e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005392:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005396:	9307      	str	r3, [sp, #28]
 8005398:	f8cd 8018 	str.w	r8, [sp, #24]
 800539c:	ee08 0a10 	vmov	s16, r0
 80053a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80053a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053a8:	4b9e      	ldr	r3, [pc, #632]	; (8005624 <_printf_float+0x2d8>)
 80053aa:	f04f 32ff 	mov.w	r2, #4294967295
 80053ae:	f7fb fbc5 	bl	8000b3c <__aeabi_dcmpun>
 80053b2:	bb88      	cbnz	r0, 8005418 <_printf_float+0xcc>
 80053b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053b8:	4b9a      	ldr	r3, [pc, #616]	; (8005624 <_printf_float+0x2d8>)
 80053ba:	f04f 32ff 	mov.w	r2, #4294967295
 80053be:	f7fb fb9f 	bl	8000b00 <__aeabi_dcmple>
 80053c2:	bb48      	cbnz	r0, 8005418 <_printf_float+0xcc>
 80053c4:	2200      	movs	r2, #0
 80053c6:	2300      	movs	r3, #0
 80053c8:	4640      	mov	r0, r8
 80053ca:	4649      	mov	r1, r9
 80053cc:	f7fb fb8e 	bl	8000aec <__aeabi_dcmplt>
 80053d0:	b110      	cbz	r0, 80053d8 <_printf_float+0x8c>
 80053d2:	232d      	movs	r3, #45	; 0x2d
 80053d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d8:	4a93      	ldr	r2, [pc, #588]	; (8005628 <_printf_float+0x2dc>)
 80053da:	4b94      	ldr	r3, [pc, #592]	; (800562c <_printf_float+0x2e0>)
 80053dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80053e0:	bf94      	ite	ls
 80053e2:	4690      	movls	r8, r2
 80053e4:	4698      	movhi	r8, r3
 80053e6:	2303      	movs	r3, #3
 80053e8:	6123      	str	r3, [r4, #16]
 80053ea:	9b05      	ldr	r3, [sp, #20]
 80053ec:	f023 0304 	bic.w	r3, r3, #4
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	f04f 0900 	mov.w	r9, #0
 80053f6:	9700      	str	r7, [sp, #0]
 80053f8:	4633      	mov	r3, r6
 80053fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80053fc:	4621      	mov	r1, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 f9da 	bl	80057b8 <_printf_common>
 8005404:	3001      	adds	r0, #1
 8005406:	f040 8090 	bne.w	800552a <_printf_float+0x1de>
 800540a:	f04f 30ff 	mov.w	r0, #4294967295
 800540e:	b00d      	add	sp, #52	; 0x34
 8005410:	ecbd 8b02 	vpop	{d8}
 8005414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005418:	4642      	mov	r2, r8
 800541a:	464b      	mov	r3, r9
 800541c:	4640      	mov	r0, r8
 800541e:	4649      	mov	r1, r9
 8005420:	f7fb fb8c 	bl	8000b3c <__aeabi_dcmpun>
 8005424:	b140      	cbz	r0, 8005438 <_printf_float+0xec>
 8005426:	464b      	mov	r3, r9
 8005428:	2b00      	cmp	r3, #0
 800542a:	bfbc      	itt	lt
 800542c:	232d      	movlt	r3, #45	; 0x2d
 800542e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005432:	4a7f      	ldr	r2, [pc, #508]	; (8005630 <_printf_float+0x2e4>)
 8005434:	4b7f      	ldr	r3, [pc, #508]	; (8005634 <_printf_float+0x2e8>)
 8005436:	e7d1      	b.n	80053dc <_printf_float+0x90>
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800543e:	9206      	str	r2, [sp, #24]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	d13f      	bne.n	80054c4 <_printf_float+0x178>
 8005444:	2306      	movs	r3, #6
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	9b05      	ldr	r3, [sp, #20]
 800544a:	6861      	ldr	r1, [r4, #4]
 800544c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005450:	2300      	movs	r3, #0
 8005452:	9303      	str	r3, [sp, #12]
 8005454:	ab0a      	add	r3, sp, #40	; 0x28
 8005456:	e9cd b301 	strd	fp, r3, [sp, #4]
 800545a:	ab09      	add	r3, sp, #36	; 0x24
 800545c:	ec49 8b10 	vmov	d0, r8, r9
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	6022      	str	r2, [r4, #0]
 8005464:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005468:	4628      	mov	r0, r5
 800546a:	f7ff fecf 	bl	800520c <__cvt>
 800546e:	9b06      	ldr	r3, [sp, #24]
 8005470:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005472:	2b47      	cmp	r3, #71	; 0x47
 8005474:	4680      	mov	r8, r0
 8005476:	d108      	bne.n	800548a <_printf_float+0x13e>
 8005478:	1cc8      	adds	r0, r1, #3
 800547a:	db02      	blt.n	8005482 <_printf_float+0x136>
 800547c:	6863      	ldr	r3, [r4, #4]
 800547e:	4299      	cmp	r1, r3
 8005480:	dd41      	ble.n	8005506 <_printf_float+0x1ba>
 8005482:	f1ab 0302 	sub.w	r3, fp, #2
 8005486:	fa5f fb83 	uxtb.w	fp, r3
 800548a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800548e:	d820      	bhi.n	80054d2 <_printf_float+0x186>
 8005490:	3901      	subs	r1, #1
 8005492:	465a      	mov	r2, fp
 8005494:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005498:	9109      	str	r1, [sp, #36]	; 0x24
 800549a:	f7ff ff19 	bl	80052d0 <__exponent>
 800549e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054a0:	1813      	adds	r3, r2, r0
 80054a2:	2a01      	cmp	r2, #1
 80054a4:	4681      	mov	r9, r0
 80054a6:	6123      	str	r3, [r4, #16]
 80054a8:	dc02      	bgt.n	80054b0 <_printf_float+0x164>
 80054aa:	6822      	ldr	r2, [r4, #0]
 80054ac:	07d2      	lsls	r2, r2, #31
 80054ae:	d501      	bpl.n	80054b4 <_printf_float+0x168>
 80054b0:	3301      	adds	r3, #1
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d09c      	beq.n	80053f6 <_printf_float+0xaa>
 80054bc:	232d      	movs	r3, #45	; 0x2d
 80054be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c2:	e798      	b.n	80053f6 <_printf_float+0xaa>
 80054c4:	9a06      	ldr	r2, [sp, #24]
 80054c6:	2a47      	cmp	r2, #71	; 0x47
 80054c8:	d1be      	bne.n	8005448 <_printf_float+0xfc>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1bc      	bne.n	8005448 <_printf_float+0xfc>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e7b9      	b.n	8005446 <_printf_float+0xfa>
 80054d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054d6:	d118      	bne.n	800550a <_printf_float+0x1be>
 80054d8:	2900      	cmp	r1, #0
 80054da:	6863      	ldr	r3, [r4, #4]
 80054dc:	dd0b      	ble.n	80054f6 <_printf_float+0x1aa>
 80054de:	6121      	str	r1, [r4, #16]
 80054e0:	b913      	cbnz	r3, 80054e8 <_printf_float+0x19c>
 80054e2:	6822      	ldr	r2, [r4, #0]
 80054e4:	07d0      	lsls	r0, r2, #31
 80054e6:	d502      	bpl.n	80054ee <_printf_float+0x1a2>
 80054e8:	3301      	adds	r3, #1
 80054ea:	440b      	add	r3, r1
 80054ec:	6123      	str	r3, [r4, #16]
 80054ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80054f0:	f04f 0900 	mov.w	r9, #0
 80054f4:	e7de      	b.n	80054b4 <_printf_float+0x168>
 80054f6:	b913      	cbnz	r3, 80054fe <_printf_float+0x1b2>
 80054f8:	6822      	ldr	r2, [r4, #0]
 80054fa:	07d2      	lsls	r2, r2, #31
 80054fc:	d501      	bpl.n	8005502 <_printf_float+0x1b6>
 80054fe:	3302      	adds	r3, #2
 8005500:	e7f4      	b.n	80054ec <_printf_float+0x1a0>
 8005502:	2301      	movs	r3, #1
 8005504:	e7f2      	b.n	80054ec <_printf_float+0x1a0>
 8005506:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800550a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800550c:	4299      	cmp	r1, r3
 800550e:	db05      	blt.n	800551c <_printf_float+0x1d0>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	6121      	str	r1, [r4, #16]
 8005514:	07d8      	lsls	r0, r3, #31
 8005516:	d5ea      	bpl.n	80054ee <_printf_float+0x1a2>
 8005518:	1c4b      	adds	r3, r1, #1
 800551a:	e7e7      	b.n	80054ec <_printf_float+0x1a0>
 800551c:	2900      	cmp	r1, #0
 800551e:	bfd4      	ite	le
 8005520:	f1c1 0202 	rsble	r2, r1, #2
 8005524:	2201      	movgt	r2, #1
 8005526:	4413      	add	r3, r2
 8005528:	e7e0      	b.n	80054ec <_printf_float+0x1a0>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	055a      	lsls	r2, r3, #21
 800552e:	d407      	bmi.n	8005540 <_printf_float+0x1f4>
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	4642      	mov	r2, r8
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	d12c      	bne.n	8005598 <_printf_float+0x24c>
 800553e:	e764      	b.n	800540a <_printf_float+0xbe>
 8005540:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005544:	f240 80e0 	bls.w	8005708 <_printf_float+0x3bc>
 8005548:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800554c:	2200      	movs	r2, #0
 800554e:	2300      	movs	r3, #0
 8005550:	f7fb fac2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005554:	2800      	cmp	r0, #0
 8005556:	d034      	beq.n	80055c2 <_printf_float+0x276>
 8005558:	4a37      	ldr	r2, [pc, #220]	; (8005638 <_printf_float+0x2ec>)
 800555a:	2301      	movs	r3, #1
 800555c:	4631      	mov	r1, r6
 800555e:	4628      	mov	r0, r5
 8005560:	47b8      	blx	r7
 8005562:	3001      	adds	r0, #1
 8005564:	f43f af51 	beq.w	800540a <_printf_float+0xbe>
 8005568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800556c:	429a      	cmp	r2, r3
 800556e:	db02      	blt.n	8005576 <_printf_float+0x22a>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	07d8      	lsls	r0, r3, #31
 8005574:	d510      	bpl.n	8005598 <_printf_float+0x24c>
 8005576:	ee18 3a10 	vmov	r3, s16
 800557a:	4652      	mov	r2, sl
 800557c:	4631      	mov	r1, r6
 800557e:	4628      	mov	r0, r5
 8005580:	47b8      	blx	r7
 8005582:	3001      	adds	r0, #1
 8005584:	f43f af41 	beq.w	800540a <_printf_float+0xbe>
 8005588:	f04f 0800 	mov.w	r8, #0
 800558c:	f104 091a 	add.w	r9, r4, #26
 8005590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005592:	3b01      	subs	r3, #1
 8005594:	4543      	cmp	r3, r8
 8005596:	dc09      	bgt.n	80055ac <_printf_float+0x260>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	079b      	lsls	r3, r3, #30
 800559c:	f100 8107 	bmi.w	80057ae <_printf_float+0x462>
 80055a0:	68e0      	ldr	r0, [r4, #12]
 80055a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055a4:	4298      	cmp	r0, r3
 80055a6:	bfb8      	it	lt
 80055a8:	4618      	movlt	r0, r3
 80055aa:	e730      	b.n	800540e <_printf_float+0xc2>
 80055ac:	2301      	movs	r3, #1
 80055ae:	464a      	mov	r2, r9
 80055b0:	4631      	mov	r1, r6
 80055b2:	4628      	mov	r0, r5
 80055b4:	47b8      	blx	r7
 80055b6:	3001      	adds	r0, #1
 80055b8:	f43f af27 	beq.w	800540a <_printf_float+0xbe>
 80055bc:	f108 0801 	add.w	r8, r8, #1
 80055c0:	e7e6      	b.n	8005590 <_printf_float+0x244>
 80055c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	dc39      	bgt.n	800563c <_printf_float+0x2f0>
 80055c8:	4a1b      	ldr	r2, [pc, #108]	; (8005638 <_printf_float+0x2ec>)
 80055ca:	2301      	movs	r3, #1
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f af19 	beq.w	800540a <_printf_float+0xbe>
 80055d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80055dc:	4313      	orrs	r3, r2
 80055de:	d102      	bne.n	80055e6 <_printf_float+0x29a>
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	07d9      	lsls	r1, r3, #31
 80055e4:	d5d8      	bpl.n	8005598 <_printf_float+0x24c>
 80055e6:	ee18 3a10 	vmov	r3, s16
 80055ea:	4652      	mov	r2, sl
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	f43f af09 	beq.w	800540a <_printf_float+0xbe>
 80055f8:	f04f 0900 	mov.w	r9, #0
 80055fc:	f104 0a1a 	add.w	sl, r4, #26
 8005600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005602:	425b      	negs	r3, r3
 8005604:	454b      	cmp	r3, r9
 8005606:	dc01      	bgt.n	800560c <_printf_float+0x2c0>
 8005608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800560a:	e792      	b.n	8005532 <_printf_float+0x1e6>
 800560c:	2301      	movs	r3, #1
 800560e:	4652      	mov	r2, sl
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	f43f aef7 	beq.w	800540a <_printf_float+0xbe>
 800561c:	f109 0901 	add.w	r9, r9, #1
 8005620:	e7ee      	b.n	8005600 <_printf_float+0x2b4>
 8005622:	bf00      	nop
 8005624:	7fefffff 	.word	0x7fefffff
 8005628:	08008d90 	.word	0x08008d90
 800562c:	08008d94 	.word	0x08008d94
 8005630:	08008d98 	.word	0x08008d98
 8005634:	08008d9c 	.word	0x08008d9c
 8005638:	08008da0 	.word	0x08008da0
 800563c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800563e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005640:	429a      	cmp	r2, r3
 8005642:	bfa8      	it	ge
 8005644:	461a      	movge	r2, r3
 8005646:	2a00      	cmp	r2, #0
 8005648:	4691      	mov	r9, r2
 800564a:	dc37      	bgt.n	80056bc <_printf_float+0x370>
 800564c:	f04f 0b00 	mov.w	fp, #0
 8005650:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005654:	f104 021a 	add.w	r2, r4, #26
 8005658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800565a:	9305      	str	r3, [sp, #20]
 800565c:	eba3 0309 	sub.w	r3, r3, r9
 8005660:	455b      	cmp	r3, fp
 8005662:	dc33      	bgt.n	80056cc <_printf_float+0x380>
 8005664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005668:	429a      	cmp	r2, r3
 800566a:	db3b      	blt.n	80056e4 <_printf_float+0x398>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	07da      	lsls	r2, r3, #31
 8005670:	d438      	bmi.n	80056e4 <_printf_float+0x398>
 8005672:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005676:	eba2 0903 	sub.w	r9, r2, r3
 800567a:	9b05      	ldr	r3, [sp, #20]
 800567c:	1ad2      	subs	r2, r2, r3
 800567e:	4591      	cmp	r9, r2
 8005680:	bfa8      	it	ge
 8005682:	4691      	movge	r9, r2
 8005684:	f1b9 0f00 	cmp.w	r9, #0
 8005688:	dc35      	bgt.n	80056f6 <_printf_float+0x3aa>
 800568a:	f04f 0800 	mov.w	r8, #0
 800568e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005692:	f104 0a1a 	add.w	sl, r4, #26
 8005696:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	eba3 0309 	sub.w	r3, r3, r9
 80056a0:	4543      	cmp	r3, r8
 80056a2:	f77f af79 	ble.w	8005598 <_printf_float+0x24c>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4652      	mov	r2, sl
 80056aa:	4631      	mov	r1, r6
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b8      	blx	r7
 80056b0:	3001      	adds	r0, #1
 80056b2:	f43f aeaa 	beq.w	800540a <_printf_float+0xbe>
 80056b6:	f108 0801 	add.w	r8, r8, #1
 80056ba:	e7ec      	b.n	8005696 <_printf_float+0x34a>
 80056bc:	4613      	mov	r3, r2
 80056be:	4631      	mov	r1, r6
 80056c0:	4642      	mov	r2, r8
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	d1c0      	bne.n	800564c <_printf_float+0x300>
 80056ca:	e69e      	b.n	800540a <_printf_float+0xbe>
 80056cc:	2301      	movs	r3, #1
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	9205      	str	r2, [sp, #20]
 80056d4:	47b8      	blx	r7
 80056d6:	3001      	adds	r0, #1
 80056d8:	f43f ae97 	beq.w	800540a <_printf_float+0xbe>
 80056dc:	9a05      	ldr	r2, [sp, #20]
 80056de:	f10b 0b01 	add.w	fp, fp, #1
 80056e2:	e7b9      	b.n	8005658 <_printf_float+0x30c>
 80056e4:	ee18 3a10 	vmov	r3, s16
 80056e8:	4652      	mov	r2, sl
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	d1be      	bne.n	8005672 <_printf_float+0x326>
 80056f4:	e689      	b.n	800540a <_printf_float+0xbe>
 80056f6:	9a05      	ldr	r2, [sp, #20]
 80056f8:	464b      	mov	r3, r9
 80056fa:	4442      	add	r2, r8
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	d1c1      	bne.n	800568a <_printf_float+0x33e>
 8005706:	e680      	b.n	800540a <_printf_float+0xbe>
 8005708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800570a:	2a01      	cmp	r2, #1
 800570c:	dc01      	bgt.n	8005712 <_printf_float+0x3c6>
 800570e:	07db      	lsls	r3, r3, #31
 8005710:	d53a      	bpl.n	8005788 <_printf_float+0x43c>
 8005712:	2301      	movs	r3, #1
 8005714:	4642      	mov	r2, r8
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	f43f ae74 	beq.w	800540a <_printf_float+0xbe>
 8005722:	ee18 3a10 	vmov	r3, s16
 8005726:	4652      	mov	r2, sl
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	f43f ae6b 	beq.w	800540a <_printf_float+0xbe>
 8005734:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005738:	2200      	movs	r2, #0
 800573a:	2300      	movs	r3, #0
 800573c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005740:	f7fb f9ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8005744:	b9d8      	cbnz	r0, 800577e <_printf_float+0x432>
 8005746:	f10a 33ff 	add.w	r3, sl, #4294967295
 800574a:	f108 0201 	add.w	r2, r8, #1
 800574e:	4631      	mov	r1, r6
 8005750:	4628      	mov	r0, r5
 8005752:	47b8      	blx	r7
 8005754:	3001      	adds	r0, #1
 8005756:	d10e      	bne.n	8005776 <_printf_float+0x42a>
 8005758:	e657      	b.n	800540a <_printf_float+0xbe>
 800575a:	2301      	movs	r3, #1
 800575c:	4652      	mov	r2, sl
 800575e:	4631      	mov	r1, r6
 8005760:	4628      	mov	r0, r5
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	f43f ae50 	beq.w	800540a <_printf_float+0xbe>
 800576a:	f108 0801 	add.w	r8, r8, #1
 800576e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005770:	3b01      	subs	r3, #1
 8005772:	4543      	cmp	r3, r8
 8005774:	dcf1      	bgt.n	800575a <_printf_float+0x40e>
 8005776:	464b      	mov	r3, r9
 8005778:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800577c:	e6da      	b.n	8005534 <_printf_float+0x1e8>
 800577e:	f04f 0800 	mov.w	r8, #0
 8005782:	f104 0a1a 	add.w	sl, r4, #26
 8005786:	e7f2      	b.n	800576e <_printf_float+0x422>
 8005788:	2301      	movs	r3, #1
 800578a:	4642      	mov	r2, r8
 800578c:	e7df      	b.n	800574e <_printf_float+0x402>
 800578e:	2301      	movs	r3, #1
 8005790:	464a      	mov	r2, r9
 8005792:	4631      	mov	r1, r6
 8005794:	4628      	mov	r0, r5
 8005796:	47b8      	blx	r7
 8005798:	3001      	adds	r0, #1
 800579a:	f43f ae36 	beq.w	800540a <_printf_float+0xbe>
 800579e:	f108 0801 	add.w	r8, r8, #1
 80057a2:	68e3      	ldr	r3, [r4, #12]
 80057a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057a6:	1a5b      	subs	r3, r3, r1
 80057a8:	4543      	cmp	r3, r8
 80057aa:	dcf0      	bgt.n	800578e <_printf_float+0x442>
 80057ac:	e6f8      	b.n	80055a0 <_printf_float+0x254>
 80057ae:	f04f 0800 	mov.w	r8, #0
 80057b2:	f104 0919 	add.w	r9, r4, #25
 80057b6:	e7f4      	b.n	80057a2 <_printf_float+0x456>

080057b8 <_printf_common>:
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	4616      	mov	r6, r2
 80057be:	4699      	mov	r9, r3
 80057c0:	688a      	ldr	r2, [r1, #8]
 80057c2:	690b      	ldr	r3, [r1, #16]
 80057c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057c8:	4293      	cmp	r3, r2
 80057ca:	bfb8      	it	lt
 80057cc:	4613      	movlt	r3, r2
 80057ce:	6033      	str	r3, [r6, #0]
 80057d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057d4:	4607      	mov	r7, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	b10a      	cbz	r2, 80057de <_printf_common+0x26>
 80057da:	3301      	adds	r3, #1
 80057dc:	6033      	str	r3, [r6, #0]
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	0699      	lsls	r1, r3, #26
 80057e2:	bf42      	ittt	mi
 80057e4:	6833      	ldrmi	r3, [r6, #0]
 80057e6:	3302      	addmi	r3, #2
 80057e8:	6033      	strmi	r3, [r6, #0]
 80057ea:	6825      	ldr	r5, [r4, #0]
 80057ec:	f015 0506 	ands.w	r5, r5, #6
 80057f0:	d106      	bne.n	8005800 <_printf_common+0x48>
 80057f2:	f104 0a19 	add.w	sl, r4, #25
 80057f6:	68e3      	ldr	r3, [r4, #12]
 80057f8:	6832      	ldr	r2, [r6, #0]
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	42ab      	cmp	r3, r5
 80057fe:	dc26      	bgt.n	800584e <_printf_common+0x96>
 8005800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005804:	1e13      	subs	r3, r2, #0
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	bf18      	it	ne
 800580a:	2301      	movne	r3, #1
 800580c:	0692      	lsls	r2, r2, #26
 800580e:	d42b      	bmi.n	8005868 <_printf_common+0xb0>
 8005810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005814:	4649      	mov	r1, r9
 8005816:	4638      	mov	r0, r7
 8005818:	47c0      	blx	r8
 800581a:	3001      	adds	r0, #1
 800581c:	d01e      	beq.n	800585c <_printf_common+0xa4>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	6922      	ldr	r2, [r4, #16]
 8005822:	f003 0306 	and.w	r3, r3, #6
 8005826:	2b04      	cmp	r3, #4
 8005828:	bf02      	ittt	eq
 800582a:	68e5      	ldreq	r5, [r4, #12]
 800582c:	6833      	ldreq	r3, [r6, #0]
 800582e:	1aed      	subeq	r5, r5, r3
 8005830:	68a3      	ldr	r3, [r4, #8]
 8005832:	bf0c      	ite	eq
 8005834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005838:	2500      	movne	r5, #0
 800583a:	4293      	cmp	r3, r2
 800583c:	bfc4      	itt	gt
 800583e:	1a9b      	subgt	r3, r3, r2
 8005840:	18ed      	addgt	r5, r5, r3
 8005842:	2600      	movs	r6, #0
 8005844:	341a      	adds	r4, #26
 8005846:	42b5      	cmp	r5, r6
 8005848:	d11a      	bne.n	8005880 <_printf_common+0xc8>
 800584a:	2000      	movs	r0, #0
 800584c:	e008      	b.n	8005860 <_printf_common+0xa8>
 800584e:	2301      	movs	r3, #1
 8005850:	4652      	mov	r2, sl
 8005852:	4649      	mov	r1, r9
 8005854:	4638      	mov	r0, r7
 8005856:	47c0      	blx	r8
 8005858:	3001      	adds	r0, #1
 800585a:	d103      	bne.n	8005864 <_printf_common+0xac>
 800585c:	f04f 30ff 	mov.w	r0, #4294967295
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	3501      	adds	r5, #1
 8005866:	e7c6      	b.n	80057f6 <_printf_common+0x3e>
 8005868:	18e1      	adds	r1, r4, r3
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	2030      	movs	r0, #48	; 0x30
 800586e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005872:	4422      	add	r2, r4
 8005874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800587c:	3302      	adds	r3, #2
 800587e:	e7c7      	b.n	8005810 <_printf_common+0x58>
 8005880:	2301      	movs	r3, #1
 8005882:	4622      	mov	r2, r4
 8005884:	4649      	mov	r1, r9
 8005886:	4638      	mov	r0, r7
 8005888:	47c0      	blx	r8
 800588a:	3001      	adds	r0, #1
 800588c:	d0e6      	beq.n	800585c <_printf_common+0xa4>
 800588e:	3601      	adds	r6, #1
 8005890:	e7d9      	b.n	8005846 <_printf_common+0x8e>
	...

08005894 <_printf_i>:
 8005894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	7e0f      	ldrb	r7, [r1, #24]
 800589a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800589c:	2f78      	cmp	r7, #120	; 0x78
 800589e:	4691      	mov	r9, r2
 80058a0:	4680      	mov	r8, r0
 80058a2:	460c      	mov	r4, r1
 80058a4:	469a      	mov	sl, r3
 80058a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058aa:	d807      	bhi.n	80058bc <_printf_i+0x28>
 80058ac:	2f62      	cmp	r7, #98	; 0x62
 80058ae:	d80a      	bhi.n	80058c6 <_printf_i+0x32>
 80058b0:	2f00      	cmp	r7, #0
 80058b2:	f000 80d4 	beq.w	8005a5e <_printf_i+0x1ca>
 80058b6:	2f58      	cmp	r7, #88	; 0x58
 80058b8:	f000 80c0 	beq.w	8005a3c <_printf_i+0x1a8>
 80058bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058c4:	e03a      	b.n	800593c <_printf_i+0xa8>
 80058c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058ca:	2b15      	cmp	r3, #21
 80058cc:	d8f6      	bhi.n	80058bc <_printf_i+0x28>
 80058ce:	a101      	add	r1, pc, #4	; (adr r1, 80058d4 <_printf_i+0x40>)
 80058d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058d4:	0800592d 	.word	0x0800592d
 80058d8:	08005941 	.word	0x08005941
 80058dc:	080058bd 	.word	0x080058bd
 80058e0:	080058bd 	.word	0x080058bd
 80058e4:	080058bd 	.word	0x080058bd
 80058e8:	080058bd 	.word	0x080058bd
 80058ec:	08005941 	.word	0x08005941
 80058f0:	080058bd 	.word	0x080058bd
 80058f4:	080058bd 	.word	0x080058bd
 80058f8:	080058bd 	.word	0x080058bd
 80058fc:	080058bd 	.word	0x080058bd
 8005900:	08005a45 	.word	0x08005a45
 8005904:	0800596d 	.word	0x0800596d
 8005908:	080059ff 	.word	0x080059ff
 800590c:	080058bd 	.word	0x080058bd
 8005910:	080058bd 	.word	0x080058bd
 8005914:	08005a67 	.word	0x08005a67
 8005918:	080058bd 	.word	0x080058bd
 800591c:	0800596d 	.word	0x0800596d
 8005920:	080058bd 	.word	0x080058bd
 8005924:	080058bd 	.word	0x080058bd
 8005928:	08005a07 	.word	0x08005a07
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	1d1a      	adds	r2, r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	602a      	str	r2, [r5, #0]
 8005934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800593c:	2301      	movs	r3, #1
 800593e:	e09f      	b.n	8005a80 <_printf_i+0x1ec>
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	682b      	ldr	r3, [r5, #0]
 8005944:	0607      	lsls	r7, r0, #24
 8005946:	f103 0104 	add.w	r1, r3, #4
 800594a:	6029      	str	r1, [r5, #0]
 800594c:	d501      	bpl.n	8005952 <_printf_i+0xbe>
 800594e:	681e      	ldr	r6, [r3, #0]
 8005950:	e003      	b.n	800595a <_printf_i+0xc6>
 8005952:	0646      	lsls	r6, r0, #25
 8005954:	d5fb      	bpl.n	800594e <_printf_i+0xba>
 8005956:	f9b3 6000 	ldrsh.w	r6, [r3]
 800595a:	2e00      	cmp	r6, #0
 800595c:	da03      	bge.n	8005966 <_printf_i+0xd2>
 800595e:	232d      	movs	r3, #45	; 0x2d
 8005960:	4276      	negs	r6, r6
 8005962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005966:	485a      	ldr	r0, [pc, #360]	; (8005ad0 <_printf_i+0x23c>)
 8005968:	230a      	movs	r3, #10
 800596a:	e012      	b.n	8005992 <_printf_i+0xfe>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	6820      	ldr	r0, [r4, #0]
 8005970:	1d19      	adds	r1, r3, #4
 8005972:	6029      	str	r1, [r5, #0]
 8005974:	0605      	lsls	r5, r0, #24
 8005976:	d501      	bpl.n	800597c <_printf_i+0xe8>
 8005978:	681e      	ldr	r6, [r3, #0]
 800597a:	e002      	b.n	8005982 <_printf_i+0xee>
 800597c:	0641      	lsls	r1, r0, #25
 800597e:	d5fb      	bpl.n	8005978 <_printf_i+0xe4>
 8005980:	881e      	ldrh	r6, [r3, #0]
 8005982:	4853      	ldr	r0, [pc, #332]	; (8005ad0 <_printf_i+0x23c>)
 8005984:	2f6f      	cmp	r7, #111	; 0x6f
 8005986:	bf0c      	ite	eq
 8005988:	2308      	moveq	r3, #8
 800598a:	230a      	movne	r3, #10
 800598c:	2100      	movs	r1, #0
 800598e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005992:	6865      	ldr	r5, [r4, #4]
 8005994:	60a5      	str	r5, [r4, #8]
 8005996:	2d00      	cmp	r5, #0
 8005998:	bfa2      	ittt	ge
 800599a:	6821      	ldrge	r1, [r4, #0]
 800599c:	f021 0104 	bicge.w	r1, r1, #4
 80059a0:	6021      	strge	r1, [r4, #0]
 80059a2:	b90e      	cbnz	r6, 80059a8 <_printf_i+0x114>
 80059a4:	2d00      	cmp	r5, #0
 80059a6:	d04b      	beq.n	8005a40 <_printf_i+0x1ac>
 80059a8:	4615      	mov	r5, r2
 80059aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ae:	fb03 6711 	mls	r7, r3, r1, r6
 80059b2:	5dc7      	ldrb	r7, [r0, r7]
 80059b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059b8:	4637      	mov	r7, r6
 80059ba:	42bb      	cmp	r3, r7
 80059bc:	460e      	mov	r6, r1
 80059be:	d9f4      	bls.n	80059aa <_printf_i+0x116>
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d10b      	bne.n	80059dc <_printf_i+0x148>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	07de      	lsls	r6, r3, #31
 80059c8:	d508      	bpl.n	80059dc <_printf_i+0x148>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	6861      	ldr	r1, [r4, #4]
 80059ce:	4299      	cmp	r1, r3
 80059d0:	bfde      	ittt	le
 80059d2:	2330      	movle	r3, #48	; 0x30
 80059d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059dc:	1b52      	subs	r2, r2, r5
 80059de:	6122      	str	r2, [r4, #16]
 80059e0:	f8cd a000 	str.w	sl, [sp]
 80059e4:	464b      	mov	r3, r9
 80059e6:	aa03      	add	r2, sp, #12
 80059e8:	4621      	mov	r1, r4
 80059ea:	4640      	mov	r0, r8
 80059ec:	f7ff fee4 	bl	80057b8 <_printf_common>
 80059f0:	3001      	adds	r0, #1
 80059f2:	d14a      	bne.n	8005a8a <_printf_i+0x1f6>
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295
 80059f8:	b004      	add	sp, #16
 80059fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f043 0320 	orr.w	r3, r3, #32
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	4833      	ldr	r0, [pc, #204]	; (8005ad4 <_printf_i+0x240>)
 8005a08:	2778      	movs	r7, #120	; 0x78
 8005a0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	6829      	ldr	r1, [r5, #0]
 8005a12:	061f      	lsls	r7, r3, #24
 8005a14:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a18:	d402      	bmi.n	8005a20 <_printf_i+0x18c>
 8005a1a:	065f      	lsls	r7, r3, #25
 8005a1c:	bf48      	it	mi
 8005a1e:	b2b6      	uxthmi	r6, r6
 8005a20:	07df      	lsls	r7, r3, #31
 8005a22:	bf48      	it	mi
 8005a24:	f043 0320 	orrmi.w	r3, r3, #32
 8005a28:	6029      	str	r1, [r5, #0]
 8005a2a:	bf48      	it	mi
 8005a2c:	6023      	strmi	r3, [r4, #0]
 8005a2e:	b91e      	cbnz	r6, 8005a38 <_printf_i+0x1a4>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	f023 0320 	bic.w	r3, r3, #32
 8005a36:	6023      	str	r3, [r4, #0]
 8005a38:	2310      	movs	r3, #16
 8005a3a:	e7a7      	b.n	800598c <_printf_i+0xf8>
 8005a3c:	4824      	ldr	r0, [pc, #144]	; (8005ad0 <_printf_i+0x23c>)
 8005a3e:	e7e4      	b.n	8005a0a <_printf_i+0x176>
 8005a40:	4615      	mov	r5, r2
 8005a42:	e7bd      	b.n	80059c0 <_printf_i+0x12c>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	6826      	ldr	r6, [r4, #0]
 8005a48:	6961      	ldr	r1, [r4, #20]
 8005a4a:	1d18      	adds	r0, r3, #4
 8005a4c:	6028      	str	r0, [r5, #0]
 8005a4e:	0635      	lsls	r5, r6, #24
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	d501      	bpl.n	8005a58 <_printf_i+0x1c4>
 8005a54:	6019      	str	r1, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <_printf_i+0x1ca>
 8005a58:	0670      	lsls	r0, r6, #25
 8005a5a:	d5fb      	bpl.n	8005a54 <_printf_i+0x1c0>
 8005a5c:	8019      	strh	r1, [r3, #0]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6123      	str	r3, [r4, #16]
 8005a62:	4615      	mov	r5, r2
 8005a64:	e7bc      	b.n	80059e0 <_printf_i+0x14c>
 8005a66:	682b      	ldr	r3, [r5, #0]
 8005a68:	1d1a      	adds	r2, r3, #4
 8005a6a:	602a      	str	r2, [r5, #0]
 8005a6c:	681d      	ldr	r5, [r3, #0]
 8005a6e:	6862      	ldr	r2, [r4, #4]
 8005a70:	2100      	movs	r1, #0
 8005a72:	4628      	mov	r0, r5
 8005a74:	f7fa fbb4 	bl	80001e0 <memchr>
 8005a78:	b108      	cbz	r0, 8005a7e <_printf_i+0x1ea>
 8005a7a:	1b40      	subs	r0, r0, r5
 8005a7c:	6060      	str	r0, [r4, #4]
 8005a7e:	6863      	ldr	r3, [r4, #4]
 8005a80:	6123      	str	r3, [r4, #16]
 8005a82:	2300      	movs	r3, #0
 8005a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a88:	e7aa      	b.n	80059e0 <_printf_i+0x14c>
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	462a      	mov	r2, r5
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4640      	mov	r0, r8
 8005a92:	47d0      	blx	sl
 8005a94:	3001      	adds	r0, #1
 8005a96:	d0ad      	beq.n	80059f4 <_printf_i+0x160>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	079b      	lsls	r3, r3, #30
 8005a9c:	d413      	bmi.n	8005ac6 <_printf_i+0x232>
 8005a9e:	68e0      	ldr	r0, [r4, #12]
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	4298      	cmp	r0, r3
 8005aa4:	bfb8      	it	lt
 8005aa6:	4618      	movlt	r0, r3
 8005aa8:	e7a6      	b.n	80059f8 <_printf_i+0x164>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	4632      	mov	r2, r6
 8005aae:	4649      	mov	r1, r9
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	47d0      	blx	sl
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d09d      	beq.n	80059f4 <_printf_i+0x160>
 8005ab8:	3501      	adds	r5, #1
 8005aba:	68e3      	ldr	r3, [r4, #12]
 8005abc:	9903      	ldr	r1, [sp, #12]
 8005abe:	1a5b      	subs	r3, r3, r1
 8005ac0:	42ab      	cmp	r3, r5
 8005ac2:	dcf2      	bgt.n	8005aaa <_printf_i+0x216>
 8005ac4:	e7eb      	b.n	8005a9e <_printf_i+0x20a>
 8005ac6:	2500      	movs	r5, #0
 8005ac8:	f104 0619 	add.w	r6, r4, #25
 8005acc:	e7f5      	b.n	8005aba <_printf_i+0x226>
 8005ace:	bf00      	nop
 8005ad0:	08008da2 	.word	0x08008da2
 8005ad4:	08008db3 	.word	0x08008db3

08005ad8 <std>:
 8005ad8:	2300      	movs	r3, #0
 8005ada:	b510      	push	{r4, lr}
 8005adc:	4604      	mov	r4, r0
 8005ade:	e9c0 3300 	strd	r3, r3, [r0]
 8005ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ae6:	6083      	str	r3, [r0, #8]
 8005ae8:	8181      	strh	r1, [r0, #12]
 8005aea:	6643      	str	r3, [r0, #100]	; 0x64
 8005aec:	81c2      	strh	r2, [r0, #14]
 8005aee:	6183      	str	r3, [r0, #24]
 8005af0:	4619      	mov	r1, r3
 8005af2:	2208      	movs	r2, #8
 8005af4:	305c      	adds	r0, #92	; 0x5c
 8005af6:	f000 f906 	bl	8005d06 <memset>
 8005afa:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <std+0x58>)
 8005afc:	6263      	str	r3, [r4, #36]	; 0x24
 8005afe:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <std+0x5c>)
 8005b00:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b02:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <std+0x60>)
 8005b04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b06:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <std+0x64>)
 8005b08:	6323      	str	r3, [r4, #48]	; 0x30
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <std+0x68>)
 8005b0c:	6224      	str	r4, [r4, #32]
 8005b0e:	429c      	cmp	r4, r3
 8005b10:	d006      	beq.n	8005b20 <std+0x48>
 8005b12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b16:	4294      	cmp	r4, r2
 8005b18:	d002      	beq.n	8005b20 <std+0x48>
 8005b1a:	33d0      	adds	r3, #208	; 0xd0
 8005b1c:	429c      	cmp	r4, r3
 8005b1e:	d105      	bne.n	8005b2c <std+0x54>
 8005b20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b28:	f000 b96a 	b.w	8005e00 <__retarget_lock_init_recursive>
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	bf00      	nop
 8005b30:	08005c81 	.word	0x08005c81
 8005b34:	08005ca3 	.word	0x08005ca3
 8005b38:	08005cdb 	.word	0x08005cdb
 8005b3c:	08005cff 	.word	0x08005cff
 8005b40:	20000444 	.word	0x20000444

08005b44 <stdio_exit_handler>:
 8005b44:	4a02      	ldr	r2, [pc, #8]	; (8005b50 <stdio_exit_handler+0xc>)
 8005b46:	4903      	ldr	r1, [pc, #12]	; (8005b54 <stdio_exit_handler+0x10>)
 8005b48:	4803      	ldr	r0, [pc, #12]	; (8005b58 <stdio_exit_handler+0x14>)
 8005b4a:	f000 b869 	b.w	8005c20 <_fwalk_sglue>
 8005b4e:	bf00      	nop
 8005b50:	2000000c 	.word	0x2000000c
 8005b54:	08007789 	.word	0x08007789
 8005b58:	20000018 	.word	0x20000018

08005b5c <cleanup_stdio>:
 8005b5c:	6841      	ldr	r1, [r0, #4]
 8005b5e:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <cleanup_stdio+0x34>)
 8005b60:	4299      	cmp	r1, r3
 8005b62:	b510      	push	{r4, lr}
 8005b64:	4604      	mov	r4, r0
 8005b66:	d001      	beq.n	8005b6c <cleanup_stdio+0x10>
 8005b68:	f001 fe0e 	bl	8007788 <_fflush_r>
 8005b6c:	68a1      	ldr	r1, [r4, #8]
 8005b6e:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <cleanup_stdio+0x38>)
 8005b70:	4299      	cmp	r1, r3
 8005b72:	d002      	beq.n	8005b7a <cleanup_stdio+0x1e>
 8005b74:	4620      	mov	r0, r4
 8005b76:	f001 fe07 	bl	8007788 <_fflush_r>
 8005b7a:	68e1      	ldr	r1, [r4, #12]
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <cleanup_stdio+0x3c>)
 8005b7e:	4299      	cmp	r1, r3
 8005b80:	d004      	beq.n	8005b8c <cleanup_stdio+0x30>
 8005b82:	4620      	mov	r0, r4
 8005b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b88:	f001 bdfe 	b.w	8007788 <_fflush_r>
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000444 	.word	0x20000444
 8005b94:	200004ac 	.word	0x200004ac
 8005b98:	20000514 	.word	0x20000514

08005b9c <global_stdio_init.part.0>:
 8005b9c:	b510      	push	{r4, lr}
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <global_stdio_init.part.0+0x30>)
 8005ba0:	4c0b      	ldr	r4, [pc, #44]	; (8005bd0 <global_stdio_init.part.0+0x34>)
 8005ba2:	4a0c      	ldr	r2, [pc, #48]	; (8005bd4 <global_stdio_init.part.0+0x38>)
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2104      	movs	r1, #4
 8005bac:	f7ff ff94 	bl	8005ad8 <std>
 8005bb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	2109      	movs	r1, #9
 8005bb8:	f7ff ff8e 	bl	8005ad8 <std>
 8005bbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc6:	2112      	movs	r1, #18
 8005bc8:	f7ff bf86 	b.w	8005ad8 <std>
 8005bcc:	2000057c 	.word	0x2000057c
 8005bd0:	20000444 	.word	0x20000444
 8005bd4:	08005b45 	.word	0x08005b45

08005bd8 <__sfp_lock_acquire>:
 8005bd8:	4801      	ldr	r0, [pc, #4]	; (8005be0 <__sfp_lock_acquire+0x8>)
 8005bda:	f000 b912 	b.w	8005e02 <__retarget_lock_acquire_recursive>
 8005bde:	bf00      	nop
 8005be0:	20000585 	.word	0x20000585

08005be4 <__sfp_lock_release>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__sfp_lock_release+0x8>)
 8005be6:	f000 b90d 	b.w	8005e04 <__retarget_lock_release_recursive>
 8005bea:	bf00      	nop
 8005bec:	20000585 	.word	0x20000585

08005bf0 <__sinit>:
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	f7ff fff0 	bl	8005bd8 <__sfp_lock_acquire>
 8005bf8:	6a23      	ldr	r3, [r4, #32]
 8005bfa:	b11b      	cbz	r3, 8005c04 <__sinit+0x14>
 8005bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c00:	f7ff bff0 	b.w	8005be4 <__sfp_lock_release>
 8005c04:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <__sinit+0x28>)
 8005c06:	6223      	str	r3, [r4, #32]
 8005c08:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <__sinit+0x2c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f5      	bne.n	8005bfc <__sinit+0xc>
 8005c10:	f7ff ffc4 	bl	8005b9c <global_stdio_init.part.0>
 8005c14:	e7f2      	b.n	8005bfc <__sinit+0xc>
 8005c16:	bf00      	nop
 8005c18:	08005b5d 	.word	0x08005b5d
 8005c1c:	2000057c 	.word	0x2000057c

08005c20 <_fwalk_sglue>:
 8005c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c24:	4607      	mov	r7, r0
 8005c26:	4688      	mov	r8, r1
 8005c28:	4614      	mov	r4, r2
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c30:	f1b9 0901 	subs.w	r9, r9, #1
 8005c34:	d505      	bpl.n	8005c42 <_fwalk_sglue+0x22>
 8005c36:	6824      	ldr	r4, [r4, #0]
 8005c38:	2c00      	cmp	r4, #0
 8005c3a:	d1f7      	bne.n	8005c2c <_fwalk_sglue+0xc>
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c42:	89ab      	ldrh	r3, [r5, #12]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d907      	bls.n	8005c58 <_fwalk_sglue+0x38>
 8005c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	d003      	beq.n	8005c58 <_fwalk_sglue+0x38>
 8005c50:	4629      	mov	r1, r5
 8005c52:	4638      	mov	r0, r7
 8005c54:	47c0      	blx	r8
 8005c56:	4306      	orrs	r6, r0
 8005c58:	3568      	adds	r5, #104	; 0x68
 8005c5a:	e7e9      	b.n	8005c30 <_fwalk_sglue+0x10>

08005c5c <iprintf>:
 8005c5c:	b40f      	push	{r0, r1, r2, r3}
 8005c5e:	b507      	push	{r0, r1, r2, lr}
 8005c60:	4906      	ldr	r1, [pc, #24]	; (8005c7c <iprintf+0x20>)
 8005c62:	ab04      	add	r3, sp, #16
 8005c64:	6808      	ldr	r0, [r1, #0]
 8005c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c6a:	6881      	ldr	r1, [r0, #8]
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	f001 fbeb 	bl	8007448 <_vfiprintf_r>
 8005c72:	b003      	add	sp, #12
 8005c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c78:	b004      	add	sp, #16
 8005c7a:	4770      	bx	lr
 8005c7c:	20000064 	.word	0x20000064

08005c80 <__sread>:
 8005c80:	b510      	push	{r4, lr}
 8005c82:	460c      	mov	r4, r1
 8005c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c88:	f000 f86c 	bl	8005d64 <_read_r>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	bfab      	itete	ge
 8005c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c92:	89a3      	ldrhlt	r3, [r4, #12]
 8005c94:	181b      	addge	r3, r3, r0
 8005c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c9a:	bfac      	ite	ge
 8005c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c9e:	81a3      	strhlt	r3, [r4, #12]
 8005ca0:	bd10      	pop	{r4, pc}

08005ca2 <__swrite>:
 8005ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	461f      	mov	r7, r3
 8005ca8:	898b      	ldrh	r3, [r1, #12]
 8005caa:	05db      	lsls	r3, r3, #23
 8005cac:	4605      	mov	r5, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	4616      	mov	r6, r2
 8005cb2:	d505      	bpl.n	8005cc0 <__swrite+0x1e>
 8005cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb8:	2302      	movs	r3, #2
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f000 f840 	bl	8005d40 <_lseek_r>
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	4632      	mov	r2, r6
 8005cce:	463b      	mov	r3, r7
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd6:	f000 b857 	b.w	8005d88 <_write_r>

08005cda <__sseek>:
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	460c      	mov	r4, r1
 8005cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce2:	f000 f82d 	bl	8005d40 <_lseek_r>
 8005ce6:	1c43      	adds	r3, r0, #1
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	bf15      	itete	ne
 8005cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cf6:	81a3      	strheq	r3, [r4, #12]
 8005cf8:	bf18      	it	ne
 8005cfa:	81a3      	strhne	r3, [r4, #12]
 8005cfc:	bd10      	pop	{r4, pc}

08005cfe <__sclose>:
 8005cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d02:	f000 b80d 	b.w	8005d20 <_close_r>

08005d06 <memset>:
 8005d06:	4402      	add	r2, r0
 8005d08:	4603      	mov	r3, r0
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d100      	bne.n	8005d10 <memset+0xa>
 8005d0e:	4770      	bx	lr
 8005d10:	f803 1b01 	strb.w	r1, [r3], #1
 8005d14:	e7f9      	b.n	8005d0a <memset+0x4>
	...

08005d18 <_localeconv_r>:
 8005d18:	4800      	ldr	r0, [pc, #0]	; (8005d1c <_localeconv_r+0x4>)
 8005d1a:	4770      	bx	lr
 8005d1c:	20000158 	.word	0x20000158

08005d20 <_close_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4d06      	ldr	r5, [pc, #24]	; (8005d3c <_close_r+0x1c>)
 8005d24:	2300      	movs	r3, #0
 8005d26:	4604      	mov	r4, r0
 8005d28:	4608      	mov	r0, r1
 8005d2a:	602b      	str	r3, [r5, #0]
 8005d2c:	f7fc fead 	bl	8002a8a <_close>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d102      	bne.n	8005d3a <_close_r+0x1a>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	b103      	cbz	r3, 8005d3a <_close_r+0x1a>
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	20000580 	.word	0x20000580

08005d40 <_lseek_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4d07      	ldr	r5, [pc, #28]	; (8005d60 <_lseek_r+0x20>)
 8005d44:	4604      	mov	r4, r0
 8005d46:	4608      	mov	r0, r1
 8005d48:	4611      	mov	r1, r2
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	602a      	str	r2, [r5, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f7fc fec2 	bl	8002ad8 <_lseek>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d102      	bne.n	8005d5e <_lseek_r+0x1e>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	b103      	cbz	r3, 8005d5e <_lseek_r+0x1e>
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	20000580 	.word	0x20000580

08005d64 <_read_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4d07      	ldr	r5, [pc, #28]	; (8005d84 <_read_r+0x20>)
 8005d68:	4604      	mov	r4, r0
 8005d6a:	4608      	mov	r0, r1
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	2200      	movs	r2, #0
 8005d70:	602a      	str	r2, [r5, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	f7fc fe50 	bl	8002a18 <_read>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_read_r+0x1e>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_read_r+0x1e>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	20000580 	.word	0x20000580

08005d88 <_write_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4d07      	ldr	r5, [pc, #28]	; (8005da8 <_write_r+0x20>)
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	4608      	mov	r0, r1
 8005d90:	4611      	mov	r1, r2
 8005d92:	2200      	movs	r2, #0
 8005d94:	602a      	str	r2, [r5, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f7fc fe5b 	bl	8002a52 <_write>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_write_r+0x1e>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_write_r+0x1e>
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	20000580 	.word	0x20000580

08005dac <__errno>:
 8005dac:	4b01      	ldr	r3, [pc, #4]	; (8005db4 <__errno+0x8>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000064 	.word	0x20000064

08005db8 <__libc_init_array>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	4d0d      	ldr	r5, [pc, #52]	; (8005df0 <__libc_init_array+0x38>)
 8005dbc:	4c0d      	ldr	r4, [pc, #52]	; (8005df4 <__libc_init_array+0x3c>)
 8005dbe:	1b64      	subs	r4, r4, r5
 8005dc0:	10a4      	asrs	r4, r4, #2
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	42a6      	cmp	r6, r4
 8005dc6:	d109      	bne.n	8005ddc <__libc_init_array+0x24>
 8005dc8:	4d0b      	ldr	r5, [pc, #44]	; (8005df8 <__libc_init_array+0x40>)
 8005dca:	4c0c      	ldr	r4, [pc, #48]	; (8005dfc <__libc_init_array+0x44>)
 8005dcc:	f002 ff84 	bl	8008cd8 <_init>
 8005dd0:	1b64      	subs	r4, r4, r5
 8005dd2:	10a4      	asrs	r4, r4, #2
 8005dd4:	2600      	movs	r6, #0
 8005dd6:	42a6      	cmp	r6, r4
 8005dd8:	d105      	bne.n	8005de6 <__libc_init_array+0x2e>
 8005dda:	bd70      	pop	{r4, r5, r6, pc}
 8005ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005de0:	4798      	blx	r3
 8005de2:	3601      	adds	r6, #1
 8005de4:	e7ee      	b.n	8005dc4 <__libc_init_array+0xc>
 8005de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dea:	4798      	blx	r3
 8005dec:	3601      	adds	r6, #1
 8005dee:	e7f2      	b.n	8005dd6 <__libc_init_array+0x1e>
 8005df0:	080092e8 	.word	0x080092e8
 8005df4:	080092e8 	.word	0x080092e8
 8005df8:	080092e8 	.word	0x080092e8
 8005dfc:	080092ec 	.word	0x080092ec

08005e00 <__retarget_lock_init_recursive>:
 8005e00:	4770      	bx	lr

08005e02 <__retarget_lock_acquire_recursive>:
 8005e02:	4770      	bx	lr

08005e04 <__retarget_lock_release_recursive>:
 8005e04:	4770      	bx	lr

08005e06 <quorem>:
 8005e06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0a:	6903      	ldr	r3, [r0, #16]
 8005e0c:	690c      	ldr	r4, [r1, #16]
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	4607      	mov	r7, r0
 8005e12:	db7e      	blt.n	8005f12 <quorem+0x10c>
 8005e14:	3c01      	subs	r4, #1
 8005e16:	f101 0814 	add.w	r8, r1, #20
 8005e1a:	f100 0514 	add.w	r5, r0, #20
 8005e1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e38:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e3c:	d331      	bcc.n	8005ea2 <quorem+0x9c>
 8005e3e:	f04f 0e00 	mov.w	lr, #0
 8005e42:	4640      	mov	r0, r8
 8005e44:	46ac      	mov	ip, r5
 8005e46:	46f2      	mov	sl, lr
 8005e48:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e4c:	b293      	uxth	r3, r2
 8005e4e:	fb06 e303 	mla	r3, r6, r3, lr
 8005e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e56:	0c1a      	lsrs	r2, r3, #16
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	ebaa 0303 	sub.w	r3, sl, r3
 8005e5e:	f8dc a000 	ldr.w	sl, [ip]
 8005e62:	fa13 f38a 	uxtah	r3, r3, sl
 8005e66:	fb06 220e 	mla	r2, r6, lr, r2
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	9b00      	ldr	r3, [sp, #0]
 8005e6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e72:	b292      	uxth	r2, r2
 8005e74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e80:	4581      	cmp	r9, r0
 8005e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e86:	f84c 3b04 	str.w	r3, [ip], #4
 8005e8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e8e:	d2db      	bcs.n	8005e48 <quorem+0x42>
 8005e90:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e94:	b92b      	cbnz	r3, 8005ea2 <quorem+0x9c>
 8005e96:	9b01      	ldr	r3, [sp, #4]
 8005e98:	3b04      	subs	r3, #4
 8005e9a:	429d      	cmp	r5, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	d32c      	bcc.n	8005efa <quorem+0xf4>
 8005ea0:	613c      	str	r4, [r7, #16]
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f001 f9a6 	bl	80071f4 <__mcmp>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	db22      	blt.n	8005ef2 <quorem+0xec>
 8005eac:	3601      	adds	r6, #1
 8005eae:	4629      	mov	r1, r5
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005eb6:	f8d1 c000 	ldr.w	ip, [r1]
 8005eba:	b293      	uxth	r3, r2
 8005ebc:	1ac3      	subs	r3, r0, r3
 8005ebe:	0c12      	lsrs	r2, r2, #16
 8005ec0:	fa13 f38c 	uxtah	r3, r3, ip
 8005ec4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ed2:	45c1      	cmp	r9, r8
 8005ed4:	f841 3b04 	str.w	r3, [r1], #4
 8005ed8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005edc:	d2e9      	bcs.n	8005eb2 <quorem+0xac>
 8005ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ee6:	b922      	cbnz	r2, 8005ef2 <quorem+0xec>
 8005ee8:	3b04      	subs	r3, #4
 8005eea:	429d      	cmp	r5, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	d30a      	bcc.n	8005f06 <quorem+0x100>
 8005ef0:	613c      	str	r4, [r7, #16]
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	b003      	add	sp, #12
 8005ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	3b04      	subs	r3, #4
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	d1ce      	bne.n	8005ea0 <quorem+0x9a>
 8005f02:	3c01      	subs	r4, #1
 8005f04:	e7c9      	b.n	8005e9a <quorem+0x94>
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <quorem+0xea>
 8005f0e:	3c01      	subs	r4, #1
 8005f10:	e7eb      	b.n	8005eea <quorem+0xe4>
 8005f12:	2000      	movs	r0, #0
 8005f14:	e7ee      	b.n	8005ef4 <quorem+0xee>
	...

08005f18 <_dtoa_r>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	ed2d 8b04 	vpush	{d8-d9}
 8005f20:	69c5      	ldr	r5, [r0, #28]
 8005f22:	b093      	sub	sp, #76	; 0x4c
 8005f24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f28:	ec57 6b10 	vmov	r6, r7, d0
 8005f2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f30:	9107      	str	r1, [sp, #28]
 8005f32:	4604      	mov	r4, r0
 8005f34:	920a      	str	r2, [sp, #40]	; 0x28
 8005f36:	930d      	str	r3, [sp, #52]	; 0x34
 8005f38:	b975      	cbnz	r5, 8005f58 <_dtoa_r+0x40>
 8005f3a:	2010      	movs	r0, #16
 8005f3c:	f000 fe2a 	bl	8006b94 <malloc>
 8005f40:	4602      	mov	r2, r0
 8005f42:	61e0      	str	r0, [r4, #28]
 8005f44:	b920      	cbnz	r0, 8005f50 <_dtoa_r+0x38>
 8005f46:	4bae      	ldr	r3, [pc, #696]	; (8006200 <_dtoa_r+0x2e8>)
 8005f48:	21ef      	movs	r1, #239	; 0xef
 8005f4a:	48ae      	ldr	r0, [pc, #696]	; (8006204 <_dtoa_r+0x2ec>)
 8005f4c:	f001 fcf8 	bl	8007940 <__assert_func>
 8005f50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f54:	6005      	str	r5, [r0, #0]
 8005f56:	60c5      	str	r5, [r0, #12]
 8005f58:	69e3      	ldr	r3, [r4, #28]
 8005f5a:	6819      	ldr	r1, [r3, #0]
 8005f5c:	b151      	cbz	r1, 8005f74 <_dtoa_r+0x5c>
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	604a      	str	r2, [r1, #4]
 8005f62:	2301      	movs	r3, #1
 8005f64:	4093      	lsls	r3, r2
 8005f66:	608b      	str	r3, [r1, #8]
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f000 ff07 	bl	8006d7c <_Bfree>
 8005f6e:	69e3      	ldr	r3, [r4, #28]
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	1e3b      	subs	r3, r7, #0
 8005f76:	bfbb      	ittet	lt
 8005f78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f7c:	9303      	strlt	r3, [sp, #12]
 8005f7e:	2300      	movge	r3, #0
 8005f80:	2201      	movlt	r2, #1
 8005f82:	bfac      	ite	ge
 8005f84:	f8c8 3000 	strge.w	r3, [r8]
 8005f88:	f8c8 2000 	strlt.w	r2, [r8]
 8005f8c:	4b9e      	ldr	r3, [pc, #632]	; (8006208 <_dtoa_r+0x2f0>)
 8005f8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f92:	ea33 0308 	bics.w	r3, r3, r8
 8005f96:	d11b      	bne.n	8005fd0 <_dtoa_r+0xb8>
 8005f98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005fa4:	4333      	orrs	r3, r6
 8005fa6:	f000 8593 	beq.w	8006ad0 <_dtoa_r+0xbb8>
 8005faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fac:	b963      	cbnz	r3, 8005fc8 <_dtoa_r+0xb0>
 8005fae:	4b97      	ldr	r3, [pc, #604]	; (800620c <_dtoa_r+0x2f4>)
 8005fb0:	e027      	b.n	8006002 <_dtoa_r+0xea>
 8005fb2:	4b97      	ldr	r3, [pc, #604]	; (8006210 <_dtoa_r+0x2f8>)
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	9800      	ldr	r0, [sp, #0]
 8005fbe:	b013      	add	sp, #76	; 0x4c
 8005fc0:	ecbd 8b04 	vpop	{d8-d9}
 8005fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc8:	4b90      	ldr	r3, [pc, #576]	; (800620c <_dtoa_r+0x2f4>)
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	3303      	adds	r3, #3
 8005fce:	e7f3      	b.n	8005fb8 <_dtoa_r+0xa0>
 8005fd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	ec51 0b17 	vmov	r0, r1, d7
 8005fda:	eeb0 8a47 	vmov.f32	s16, s14
 8005fde:	eef0 8a67 	vmov.f32	s17, s15
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f7fa fd78 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fe8:	4681      	mov	r9, r0
 8005fea:	b160      	cbz	r0, 8006006 <_dtoa_r+0xee>
 8005fec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fee:	2301      	movs	r3, #1
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8568 	beq.w	8006aca <_dtoa_r+0xbb2>
 8005ffa:	4b86      	ldr	r3, [pc, #536]	; (8006214 <_dtoa_r+0x2fc>)
 8005ffc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	3b01      	subs	r3, #1
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	e7da      	b.n	8005fbc <_dtoa_r+0xa4>
 8006006:	aa10      	add	r2, sp, #64	; 0x40
 8006008:	a911      	add	r1, sp, #68	; 0x44
 800600a:	4620      	mov	r0, r4
 800600c:	eeb0 0a48 	vmov.f32	s0, s16
 8006010:	eef0 0a68 	vmov.f32	s1, s17
 8006014:	f001 f994 	bl	8007340 <__d2b>
 8006018:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800601c:	4682      	mov	sl, r0
 800601e:	2d00      	cmp	r5, #0
 8006020:	d07f      	beq.n	8006122 <_dtoa_r+0x20a>
 8006022:	ee18 3a90 	vmov	r3, s17
 8006026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800602a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800602e:	ec51 0b18 	vmov	r0, r1, d8
 8006032:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800603a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800603e:	4619      	mov	r1, r3
 8006040:	2200      	movs	r2, #0
 8006042:	4b75      	ldr	r3, [pc, #468]	; (8006218 <_dtoa_r+0x300>)
 8006044:	f7fa f928 	bl	8000298 <__aeabi_dsub>
 8006048:	a367      	add	r3, pc, #412	; (adr r3, 80061e8 <_dtoa_r+0x2d0>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa fadb 	bl	8000608 <__aeabi_dmul>
 8006052:	a367      	add	r3, pc, #412	; (adr r3, 80061f0 <_dtoa_r+0x2d8>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f7fa f920 	bl	800029c <__adddf3>
 800605c:	4606      	mov	r6, r0
 800605e:	4628      	mov	r0, r5
 8006060:	460f      	mov	r7, r1
 8006062:	f7fa fa67 	bl	8000534 <__aeabi_i2d>
 8006066:	a364      	add	r3, pc, #400	; (adr r3, 80061f8 <_dtoa_r+0x2e0>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa facc 	bl	8000608 <__aeabi_dmul>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4630      	mov	r0, r6
 8006076:	4639      	mov	r1, r7
 8006078:	f7fa f910 	bl	800029c <__adddf3>
 800607c:	4606      	mov	r6, r0
 800607e:	460f      	mov	r7, r1
 8006080:	f7fa fd72 	bl	8000b68 <__aeabi_d2iz>
 8006084:	2200      	movs	r2, #0
 8006086:	4683      	mov	fp, r0
 8006088:	2300      	movs	r3, #0
 800608a:	4630      	mov	r0, r6
 800608c:	4639      	mov	r1, r7
 800608e:	f7fa fd2d 	bl	8000aec <__aeabi_dcmplt>
 8006092:	b148      	cbz	r0, 80060a8 <_dtoa_r+0x190>
 8006094:	4658      	mov	r0, fp
 8006096:	f7fa fa4d 	bl	8000534 <__aeabi_i2d>
 800609a:	4632      	mov	r2, r6
 800609c:	463b      	mov	r3, r7
 800609e:	f7fa fd1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80060a2:	b908      	cbnz	r0, 80060a8 <_dtoa_r+0x190>
 80060a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060a8:	f1bb 0f16 	cmp.w	fp, #22
 80060ac:	d857      	bhi.n	800615e <_dtoa_r+0x246>
 80060ae:	4b5b      	ldr	r3, [pc, #364]	; (800621c <_dtoa_r+0x304>)
 80060b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	ec51 0b18 	vmov	r0, r1, d8
 80060bc:	f7fa fd16 	bl	8000aec <__aeabi_dcmplt>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d04e      	beq.n	8006162 <_dtoa_r+0x24a>
 80060c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060c8:	2300      	movs	r3, #0
 80060ca:	930c      	str	r3, [sp, #48]	; 0x30
 80060cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060ce:	1b5b      	subs	r3, r3, r5
 80060d0:	1e5a      	subs	r2, r3, #1
 80060d2:	bf45      	ittet	mi
 80060d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80060d8:	9305      	strmi	r3, [sp, #20]
 80060da:	2300      	movpl	r3, #0
 80060dc:	2300      	movmi	r3, #0
 80060de:	9206      	str	r2, [sp, #24]
 80060e0:	bf54      	ite	pl
 80060e2:	9305      	strpl	r3, [sp, #20]
 80060e4:	9306      	strmi	r3, [sp, #24]
 80060e6:	f1bb 0f00 	cmp.w	fp, #0
 80060ea:	db3c      	blt.n	8006166 <_dtoa_r+0x24e>
 80060ec:	9b06      	ldr	r3, [sp, #24]
 80060ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80060f2:	445b      	add	r3, fp
 80060f4:	9306      	str	r3, [sp, #24]
 80060f6:	2300      	movs	r3, #0
 80060f8:	9308      	str	r3, [sp, #32]
 80060fa:	9b07      	ldr	r3, [sp, #28]
 80060fc:	2b09      	cmp	r3, #9
 80060fe:	d868      	bhi.n	80061d2 <_dtoa_r+0x2ba>
 8006100:	2b05      	cmp	r3, #5
 8006102:	bfc4      	itt	gt
 8006104:	3b04      	subgt	r3, #4
 8006106:	9307      	strgt	r3, [sp, #28]
 8006108:	9b07      	ldr	r3, [sp, #28]
 800610a:	f1a3 0302 	sub.w	r3, r3, #2
 800610e:	bfcc      	ite	gt
 8006110:	2500      	movgt	r5, #0
 8006112:	2501      	movle	r5, #1
 8006114:	2b03      	cmp	r3, #3
 8006116:	f200 8085 	bhi.w	8006224 <_dtoa_r+0x30c>
 800611a:	e8df f003 	tbb	[pc, r3]
 800611e:	3b2e      	.short	0x3b2e
 8006120:	5839      	.short	0x5839
 8006122:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006126:	441d      	add	r5, r3
 8006128:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800612c:	2b20      	cmp	r3, #32
 800612e:	bfc1      	itttt	gt
 8006130:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006134:	fa08 f803 	lslgt.w	r8, r8, r3
 8006138:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800613c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006140:	bfd6      	itet	le
 8006142:	f1c3 0320 	rsble	r3, r3, #32
 8006146:	ea48 0003 	orrgt.w	r0, r8, r3
 800614a:	fa06 f003 	lslle.w	r0, r6, r3
 800614e:	f7fa f9e1 	bl	8000514 <__aeabi_ui2d>
 8006152:	2201      	movs	r2, #1
 8006154:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006158:	3d01      	subs	r5, #1
 800615a:	920e      	str	r2, [sp, #56]	; 0x38
 800615c:	e76f      	b.n	800603e <_dtoa_r+0x126>
 800615e:	2301      	movs	r3, #1
 8006160:	e7b3      	b.n	80060ca <_dtoa_r+0x1b2>
 8006162:	900c      	str	r0, [sp, #48]	; 0x30
 8006164:	e7b2      	b.n	80060cc <_dtoa_r+0x1b4>
 8006166:	9b05      	ldr	r3, [sp, #20]
 8006168:	eba3 030b 	sub.w	r3, r3, fp
 800616c:	9305      	str	r3, [sp, #20]
 800616e:	f1cb 0300 	rsb	r3, fp, #0
 8006172:	9308      	str	r3, [sp, #32]
 8006174:	2300      	movs	r3, #0
 8006176:	930b      	str	r3, [sp, #44]	; 0x2c
 8006178:	e7bf      	b.n	80060fa <_dtoa_r+0x1e2>
 800617a:	2300      	movs	r3, #0
 800617c:	9309      	str	r3, [sp, #36]	; 0x24
 800617e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006180:	2b00      	cmp	r3, #0
 8006182:	dc52      	bgt.n	800622a <_dtoa_r+0x312>
 8006184:	2301      	movs	r3, #1
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	9304      	str	r3, [sp, #16]
 800618a:	461a      	mov	r2, r3
 800618c:	920a      	str	r2, [sp, #40]	; 0x28
 800618e:	e00b      	b.n	80061a8 <_dtoa_r+0x290>
 8006190:	2301      	movs	r3, #1
 8006192:	e7f3      	b.n	800617c <_dtoa_r+0x264>
 8006194:	2300      	movs	r3, #0
 8006196:	9309      	str	r3, [sp, #36]	; 0x24
 8006198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800619a:	445b      	add	r3, fp
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	3301      	adds	r3, #1
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	9304      	str	r3, [sp, #16]
 80061a4:	bfb8      	it	lt
 80061a6:	2301      	movlt	r3, #1
 80061a8:	69e0      	ldr	r0, [r4, #28]
 80061aa:	2100      	movs	r1, #0
 80061ac:	2204      	movs	r2, #4
 80061ae:	f102 0614 	add.w	r6, r2, #20
 80061b2:	429e      	cmp	r6, r3
 80061b4:	d93d      	bls.n	8006232 <_dtoa_r+0x31a>
 80061b6:	6041      	str	r1, [r0, #4]
 80061b8:	4620      	mov	r0, r4
 80061ba:	f000 fd9f 	bl	8006cfc <_Balloc>
 80061be:	9000      	str	r0, [sp, #0]
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d139      	bne.n	8006238 <_dtoa_r+0x320>
 80061c4:	4b16      	ldr	r3, [pc, #88]	; (8006220 <_dtoa_r+0x308>)
 80061c6:	4602      	mov	r2, r0
 80061c8:	f240 11af 	movw	r1, #431	; 0x1af
 80061cc:	e6bd      	b.n	8005f4a <_dtoa_r+0x32>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e7e1      	b.n	8006196 <_dtoa_r+0x27e>
 80061d2:	2501      	movs	r5, #1
 80061d4:	2300      	movs	r3, #0
 80061d6:	9307      	str	r3, [sp, #28]
 80061d8:	9509      	str	r5, [sp, #36]	; 0x24
 80061da:	f04f 33ff 	mov.w	r3, #4294967295
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	9304      	str	r3, [sp, #16]
 80061e2:	2200      	movs	r2, #0
 80061e4:	2312      	movs	r3, #18
 80061e6:	e7d1      	b.n	800618c <_dtoa_r+0x274>
 80061e8:	636f4361 	.word	0x636f4361
 80061ec:	3fd287a7 	.word	0x3fd287a7
 80061f0:	8b60c8b3 	.word	0x8b60c8b3
 80061f4:	3fc68a28 	.word	0x3fc68a28
 80061f8:	509f79fb 	.word	0x509f79fb
 80061fc:	3fd34413 	.word	0x3fd34413
 8006200:	08008dd1 	.word	0x08008dd1
 8006204:	08008de8 	.word	0x08008de8
 8006208:	7ff00000 	.word	0x7ff00000
 800620c:	08008dcd 	.word	0x08008dcd
 8006210:	08008dc4 	.word	0x08008dc4
 8006214:	08008da1 	.word	0x08008da1
 8006218:	3ff80000 	.word	0x3ff80000
 800621c:	08008ed8 	.word	0x08008ed8
 8006220:	08008e40 	.word	0x08008e40
 8006224:	2301      	movs	r3, #1
 8006226:	9309      	str	r3, [sp, #36]	; 0x24
 8006228:	e7d7      	b.n	80061da <_dtoa_r+0x2c2>
 800622a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	9304      	str	r3, [sp, #16]
 8006230:	e7ba      	b.n	80061a8 <_dtoa_r+0x290>
 8006232:	3101      	adds	r1, #1
 8006234:	0052      	lsls	r2, r2, #1
 8006236:	e7ba      	b.n	80061ae <_dtoa_r+0x296>
 8006238:	69e3      	ldr	r3, [r4, #28]
 800623a:	9a00      	ldr	r2, [sp, #0]
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	9b04      	ldr	r3, [sp, #16]
 8006240:	2b0e      	cmp	r3, #14
 8006242:	f200 80a8 	bhi.w	8006396 <_dtoa_r+0x47e>
 8006246:	2d00      	cmp	r5, #0
 8006248:	f000 80a5 	beq.w	8006396 <_dtoa_r+0x47e>
 800624c:	f1bb 0f00 	cmp.w	fp, #0
 8006250:	dd38      	ble.n	80062c4 <_dtoa_r+0x3ac>
 8006252:	4bc0      	ldr	r3, [pc, #768]	; (8006554 <_dtoa_r+0x63c>)
 8006254:	f00b 020f 	and.w	r2, fp, #15
 8006258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800625c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006260:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006264:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006268:	d019      	beq.n	800629e <_dtoa_r+0x386>
 800626a:	4bbb      	ldr	r3, [pc, #748]	; (8006558 <_dtoa_r+0x640>)
 800626c:	ec51 0b18 	vmov	r0, r1, d8
 8006270:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006274:	f7fa faf2 	bl	800085c <__aeabi_ddiv>
 8006278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800627c:	f008 080f 	and.w	r8, r8, #15
 8006280:	2503      	movs	r5, #3
 8006282:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006558 <_dtoa_r+0x640>
 8006286:	f1b8 0f00 	cmp.w	r8, #0
 800628a:	d10a      	bne.n	80062a2 <_dtoa_r+0x38a>
 800628c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006290:	4632      	mov	r2, r6
 8006292:	463b      	mov	r3, r7
 8006294:	f7fa fae2 	bl	800085c <__aeabi_ddiv>
 8006298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800629c:	e02b      	b.n	80062f6 <_dtoa_r+0x3de>
 800629e:	2502      	movs	r5, #2
 80062a0:	e7ef      	b.n	8006282 <_dtoa_r+0x36a>
 80062a2:	f018 0f01 	tst.w	r8, #1
 80062a6:	d008      	beq.n	80062ba <_dtoa_r+0x3a2>
 80062a8:	4630      	mov	r0, r6
 80062aa:	4639      	mov	r1, r7
 80062ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80062b0:	f7fa f9aa 	bl	8000608 <__aeabi_dmul>
 80062b4:	3501      	adds	r5, #1
 80062b6:	4606      	mov	r6, r0
 80062b8:	460f      	mov	r7, r1
 80062ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80062be:	f109 0908 	add.w	r9, r9, #8
 80062c2:	e7e0      	b.n	8006286 <_dtoa_r+0x36e>
 80062c4:	f000 809f 	beq.w	8006406 <_dtoa_r+0x4ee>
 80062c8:	f1cb 0600 	rsb	r6, fp, #0
 80062cc:	4ba1      	ldr	r3, [pc, #644]	; (8006554 <_dtoa_r+0x63c>)
 80062ce:	4fa2      	ldr	r7, [pc, #648]	; (8006558 <_dtoa_r+0x640>)
 80062d0:	f006 020f 	and.w	r2, r6, #15
 80062d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	ec51 0b18 	vmov	r0, r1, d8
 80062e0:	f7fa f992 	bl	8000608 <__aeabi_dmul>
 80062e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062e8:	1136      	asrs	r6, r6, #4
 80062ea:	2300      	movs	r3, #0
 80062ec:	2502      	movs	r5, #2
 80062ee:	2e00      	cmp	r6, #0
 80062f0:	d17e      	bne.n	80063f0 <_dtoa_r+0x4d8>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1d0      	bne.n	8006298 <_dtoa_r+0x380>
 80062f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8084 	beq.w	800640a <_dtoa_r+0x4f2>
 8006302:	4b96      	ldr	r3, [pc, #600]	; (800655c <_dtoa_r+0x644>)
 8006304:	2200      	movs	r2, #0
 8006306:	4640      	mov	r0, r8
 8006308:	4649      	mov	r1, r9
 800630a:	f7fa fbef 	bl	8000aec <__aeabi_dcmplt>
 800630e:	2800      	cmp	r0, #0
 8006310:	d07b      	beq.n	800640a <_dtoa_r+0x4f2>
 8006312:	9b04      	ldr	r3, [sp, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d078      	beq.n	800640a <_dtoa_r+0x4f2>
 8006318:	9b01      	ldr	r3, [sp, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	dd39      	ble.n	8006392 <_dtoa_r+0x47a>
 800631e:	4b90      	ldr	r3, [pc, #576]	; (8006560 <_dtoa_r+0x648>)
 8006320:	2200      	movs	r2, #0
 8006322:	4640      	mov	r0, r8
 8006324:	4649      	mov	r1, r9
 8006326:	f7fa f96f 	bl	8000608 <__aeabi_dmul>
 800632a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800632e:	9e01      	ldr	r6, [sp, #4]
 8006330:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006334:	3501      	adds	r5, #1
 8006336:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800633a:	4628      	mov	r0, r5
 800633c:	f7fa f8fa 	bl	8000534 <__aeabi_i2d>
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	f7fa f960 	bl	8000608 <__aeabi_dmul>
 8006348:	4b86      	ldr	r3, [pc, #536]	; (8006564 <_dtoa_r+0x64c>)
 800634a:	2200      	movs	r2, #0
 800634c:	f7f9 ffa6 	bl	800029c <__adddf3>
 8006350:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006358:	9303      	str	r3, [sp, #12]
 800635a:	2e00      	cmp	r6, #0
 800635c:	d158      	bne.n	8006410 <_dtoa_r+0x4f8>
 800635e:	4b82      	ldr	r3, [pc, #520]	; (8006568 <_dtoa_r+0x650>)
 8006360:	2200      	movs	r2, #0
 8006362:	4640      	mov	r0, r8
 8006364:	4649      	mov	r1, r9
 8006366:	f7f9 ff97 	bl	8000298 <__aeabi_dsub>
 800636a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800636e:	4680      	mov	r8, r0
 8006370:	4689      	mov	r9, r1
 8006372:	f7fa fbd9 	bl	8000b28 <__aeabi_dcmpgt>
 8006376:	2800      	cmp	r0, #0
 8006378:	f040 8296 	bne.w	80068a8 <_dtoa_r+0x990>
 800637c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006380:	4640      	mov	r0, r8
 8006382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006386:	4649      	mov	r1, r9
 8006388:	f7fa fbb0 	bl	8000aec <__aeabi_dcmplt>
 800638c:	2800      	cmp	r0, #0
 800638e:	f040 8289 	bne.w	80068a4 <_dtoa_r+0x98c>
 8006392:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006396:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006398:	2b00      	cmp	r3, #0
 800639a:	f2c0 814e 	blt.w	800663a <_dtoa_r+0x722>
 800639e:	f1bb 0f0e 	cmp.w	fp, #14
 80063a2:	f300 814a 	bgt.w	800663a <_dtoa_r+0x722>
 80063a6:	4b6b      	ldr	r3, [pc, #428]	; (8006554 <_dtoa_r+0x63c>)
 80063a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80063ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f280 80dc 	bge.w	8006570 <_dtoa_r+0x658>
 80063b8:	9b04      	ldr	r3, [sp, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f300 80d8 	bgt.w	8006570 <_dtoa_r+0x658>
 80063c0:	f040 826f 	bne.w	80068a2 <_dtoa_r+0x98a>
 80063c4:	4b68      	ldr	r3, [pc, #416]	; (8006568 <_dtoa_r+0x650>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	4640      	mov	r0, r8
 80063ca:	4649      	mov	r1, r9
 80063cc:	f7fa f91c 	bl	8000608 <__aeabi_dmul>
 80063d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063d4:	f7fa fb9e 	bl	8000b14 <__aeabi_dcmpge>
 80063d8:	9e04      	ldr	r6, [sp, #16]
 80063da:	4637      	mov	r7, r6
 80063dc:	2800      	cmp	r0, #0
 80063de:	f040 8245 	bne.w	800686c <_dtoa_r+0x954>
 80063e2:	9d00      	ldr	r5, [sp, #0]
 80063e4:	2331      	movs	r3, #49	; 0x31
 80063e6:	f805 3b01 	strb.w	r3, [r5], #1
 80063ea:	f10b 0b01 	add.w	fp, fp, #1
 80063ee:	e241      	b.n	8006874 <_dtoa_r+0x95c>
 80063f0:	07f2      	lsls	r2, r6, #31
 80063f2:	d505      	bpl.n	8006400 <_dtoa_r+0x4e8>
 80063f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f8:	f7fa f906 	bl	8000608 <__aeabi_dmul>
 80063fc:	3501      	adds	r5, #1
 80063fe:	2301      	movs	r3, #1
 8006400:	1076      	asrs	r6, r6, #1
 8006402:	3708      	adds	r7, #8
 8006404:	e773      	b.n	80062ee <_dtoa_r+0x3d6>
 8006406:	2502      	movs	r5, #2
 8006408:	e775      	b.n	80062f6 <_dtoa_r+0x3de>
 800640a:	9e04      	ldr	r6, [sp, #16]
 800640c:	465f      	mov	r7, fp
 800640e:	e792      	b.n	8006336 <_dtoa_r+0x41e>
 8006410:	9900      	ldr	r1, [sp, #0]
 8006412:	4b50      	ldr	r3, [pc, #320]	; (8006554 <_dtoa_r+0x63c>)
 8006414:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006418:	4431      	add	r1, r6
 800641a:	9102      	str	r1, [sp, #8]
 800641c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800641e:	eeb0 9a47 	vmov.f32	s18, s14
 8006422:	eef0 9a67 	vmov.f32	s19, s15
 8006426:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800642a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800642e:	2900      	cmp	r1, #0
 8006430:	d044      	beq.n	80064bc <_dtoa_r+0x5a4>
 8006432:	494e      	ldr	r1, [pc, #312]	; (800656c <_dtoa_r+0x654>)
 8006434:	2000      	movs	r0, #0
 8006436:	f7fa fa11 	bl	800085c <__aeabi_ddiv>
 800643a:	ec53 2b19 	vmov	r2, r3, d9
 800643e:	f7f9 ff2b 	bl	8000298 <__aeabi_dsub>
 8006442:	9d00      	ldr	r5, [sp, #0]
 8006444:	ec41 0b19 	vmov	d9, r0, r1
 8006448:	4649      	mov	r1, r9
 800644a:	4640      	mov	r0, r8
 800644c:	f7fa fb8c 	bl	8000b68 <__aeabi_d2iz>
 8006450:	4606      	mov	r6, r0
 8006452:	f7fa f86f 	bl	8000534 <__aeabi_i2d>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4640      	mov	r0, r8
 800645c:	4649      	mov	r1, r9
 800645e:	f7f9 ff1b 	bl	8000298 <__aeabi_dsub>
 8006462:	3630      	adds	r6, #48	; 0x30
 8006464:	f805 6b01 	strb.w	r6, [r5], #1
 8006468:	ec53 2b19 	vmov	r2, r3, d9
 800646c:	4680      	mov	r8, r0
 800646e:	4689      	mov	r9, r1
 8006470:	f7fa fb3c 	bl	8000aec <__aeabi_dcmplt>
 8006474:	2800      	cmp	r0, #0
 8006476:	d164      	bne.n	8006542 <_dtoa_r+0x62a>
 8006478:	4642      	mov	r2, r8
 800647a:	464b      	mov	r3, r9
 800647c:	4937      	ldr	r1, [pc, #220]	; (800655c <_dtoa_r+0x644>)
 800647e:	2000      	movs	r0, #0
 8006480:	f7f9 ff0a 	bl	8000298 <__aeabi_dsub>
 8006484:	ec53 2b19 	vmov	r2, r3, d9
 8006488:	f7fa fb30 	bl	8000aec <__aeabi_dcmplt>
 800648c:	2800      	cmp	r0, #0
 800648e:	f040 80b6 	bne.w	80065fe <_dtoa_r+0x6e6>
 8006492:	9b02      	ldr	r3, [sp, #8]
 8006494:	429d      	cmp	r5, r3
 8006496:	f43f af7c 	beq.w	8006392 <_dtoa_r+0x47a>
 800649a:	4b31      	ldr	r3, [pc, #196]	; (8006560 <_dtoa_r+0x648>)
 800649c:	ec51 0b19 	vmov	r0, r1, d9
 80064a0:	2200      	movs	r2, #0
 80064a2:	f7fa f8b1 	bl	8000608 <__aeabi_dmul>
 80064a6:	4b2e      	ldr	r3, [pc, #184]	; (8006560 <_dtoa_r+0x648>)
 80064a8:	ec41 0b19 	vmov	d9, r0, r1
 80064ac:	2200      	movs	r2, #0
 80064ae:	4640      	mov	r0, r8
 80064b0:	4649      	mov	r1, r9
 80064b2:	f7fa f8a9 	bl	8000608 <__aeabi_dmul>
 80064b6:	4680      	mov	r8, r0
 80064b8:	4689      	mov	r9, r1
 80064ba:	e7c5      	b.n	8006448 <_dtoa_r+0x530>
 80064bc:	ec51 0b17 	vmov	r0, r1, d7
 80064c0:	f7fa f8a2 	bl	8000608 <__aeabi_dmul>
 80064c4:	9b02      	ldr	r3, [sp, #8]
 80064c6:	9d00      	ldr	r5, [sp, #0]
 80064c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80064ca:	ec41 0b19 	vmov	d9, r0, r1
 80064ce:	4649      	mov	r1, r9
 80064d0:	4640      	mov	r0, r8
 80064d2:	f7fa fb49 	bl	8000b68 <__aeabi_d2iz>
 80064d6:	4606      	mov	r6, r0
 80064d8:	f7fa f82c 	bl	8000534 <__aeabi_i2d>
 80064dc:	3630      	adds	r6, #48	; 0x30
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4640      	mov	r0, r8
 80064e4:	4649      	mov	r1, r9
 80064e6:	f7f9 fed7 	bl	8000298 <__aeabi_dsub>
 80064ea:	f805 6b01 	strb.w	r6, [r5], #1
 80064ee:	9b02      	ldr	r3, [sp, #8]
 80064f0:	429d      	cmp	r5, r3
 80064f2:	4680      	mov	r8, r0
 80064f4:	4689      	mov	r9, r1
 80064f6:	f04f 0200 	mov.w	r2, #0
 80064fa:	d124      	bne.n	8006546 <_dtoa_r+0x62e>
 80064fc:	4b1b      	ldr	r3, [pc, #108]	; (800656c <_dtoa_r+0x654>)
 80064fe:	ec51 0b19 	vmov	r0, r1, d9
 8006502:	f7f9 fecb 	bl	800029c <__adddf3>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4640      	mov	r0, r8
 800650c:	4649      	mov	r1, r9
 800650e:	f7fa fb0b 	bl	8000b28 <__aeabi_dcmpgt>
 8006512:	2800      	cmp	r0, #0
 8006514:	d173      	bne.n	80065fe <_dtoa_r+0x6e6>
 8006516:	ec53 2b19 	vmov	r2, r3, d9
 800651a:	4914      	ldr	r1, [pc, #80]	; (800656c <_dtoa_r+0x654>)
 800651c:	2000      	movs	r0, #0
 800651e:	f7f9 febb 	bl	8000298 <__aeabi_dsub>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4640      	mov	r0, r8
 8006528:	4649      	mov	r1, r9
 800652a:	f7fa fadf 	bl	8000aec <__aeabi_dcmplt>
 800652e:	2800      	cmp	r0, #0
 8006530:	f43f af2f 	beq.w	8006392 <_dtoa_r+0x47a>
 8006534:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006536:	1e6b      	subs	r3, r5, #1
 8006538:	930f      	str	r3, [sp, #60]	; 0x3c
 800653a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800653e:	2b30      	cmp	r3, #48	; 0x30
 8006540:	d0f8      	beq.n	8006534 <_dtoa_r+0x61c>
 8006542:	46bb      	mov	fp, r7
 8006544:	e04a      	b.n	80065dc <_dtoa_r+0x6c4>
 8006546:	4b06      	ldr	r3, [pc, #24]	; (8006560 <_dtoa_r+0x648>)
 8006548:	f7fa f85e 	bl	8000608 <__aeabi_dmul>
 800654c:	4680      	mov	r8, r0
 800654e:	4689      	mov	r9, r1
 8006550:	e7bd      	b.n	80064ce <_dtoa_r+0x5b6>
 8006552:	bf00      	nop
 8006554:	08008ed8 	.word	0x08008ed8
 8006558:	08008eb0 	.word	0x08008eb0
 800655c:	3ff00000 	.word	0x3ff00000
 8006560:	40240000 	.word	0x40240000
 8006564:	401c0000 	.word	0x401c0000
 8006568:	40140000 	.word	0x40140000
 800656c:	3fe00000 	.word	0x3fe00000
 8006570:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006574:	9d00      	ldr	r5, [sp, #0]
 8006576:	4642      	mov	r2, r8
 8006578:	464b      	mov	r3, r9
 800657a:	4630      	mov	r0, r6
 800657c:	4639      	mov	r1, r7
 800657e:	f7fa f96d 	bl	800085c <__aeabi_ddiv>
 8006582:	f7fa faf1 	bl	8000b68 <__aeabi_d2iz>
 8006586:	9001      	str	r0, [sp, #4]
 8006588:	f7f9 ffd4 	bl	8000534 <__aeabi_i2d>
 800658c:	4642      	mov	r2, r8
 800658e:	464b      	mov	r3, r9
 8006590:	f7fa f83a 	bl	8000608 <__aeabi_dmul>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4630      	mov	r0, r6
 800659a:	4639      	mov	r1, r7
 800659c:	f7f9 fe7c 	bl	8000298 <__aeabi_dsub>
 80065a0:	9e01      	ldr	r6, [sp, #4]
 80065a2:	9f04      	ldr	r7, [sp, #16]
 80065a4:	3630      	adds	r6, #48	; 0x30
 80065a6:	f805 6b01 	strb.w	r6, [r5], #1
 80065aa:	9e00      	ldr	r6, [sp, #0]
 80065ac:	1bae      	subs	r6, r5, r6
 80065ae:	42b7      	cmp	r7, r6
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	d134      	bne.n	8006620 <_dtoa_r+0x708>
 80065b6:	f7f9 fe71 	bl	800029c <__adddf3>
 80065ba:	4642      	mov	r2, r8
 80065bc:	464b      	mov	r3, r9
 80065be:	4606      	mov	r6, r0
 80065c0:	460f      	mov	r7, r1
 80065c2:	f7fa fab1 	bl	8000b28 <__aeabi_dcmpgt>
 80065c6:	b9c8      	cbnz	r0, 80065fc <_dtoa_r+0x6e4>
 80065c8:	4642      	mov	r2, r8
 80065ca:	464b      	mov	r3, r9
 80065cc:	4630      	mov	r0, r6
 80065ce:	4639      	mov	r1, r7
 80065d0:	f7fa fa82 	bl	8000ad8 <__aeabi_dcmpeq>
 80065d4:	b110      	cbz	r0, 80065dc <_dtoa_r+0x6c4>
 80065d6:	9b01      	ldr	r3, [sp, #4]
 80065d8:	07db      	lsls	r3, r3, #31
 80065da:	d40f      	bmi.n	80065fc <_dtoa_r+0x6e4>
 80065dc:	4651      	mov	r1, sl
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 fbcc 	bl	8006d7c <_Bfree>
 80065e4:	2300      	movs	r3, #0
 80065e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065e8:	702b      	strb	r3, [r5, #0]
 80065ea:	f10b 0301 	add.w	r3, fp, #1
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f43f ace2 	beq.w	8005fbc <_dtoa_r+0xa4>
 80065f8:	601d      	str	r5, [r3, #0]
 80065fa:	e4df      	b.n	8005fbc <_dtoa_r+0xa4>
 80065fc:	465f      	mov	r7, fp
 80065fe:	462b      	mov	r3, r5
 8006600:	461d      	mov	r5, r3
 8006602:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006606:	2a39      	cmp	r2, #57	; 0x39
 8006608:	d106      	bne.n	8006618 <_dtoa_r+0x700>
 800660a:	9a00      	ldr	r2, [sp, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d1f7      	bne.n	8006600 <_dtoa_r+0x6e8>
 8006610:	9900      	ldr	r1, [sp, #0]
 8006612:	2230      	movs	r2, #48	; 0x30
 8006614:	3701      	adds	r7, #1
 8006616:	700a      	strb	r2, [r1, #0]
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	3201      	adds	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e790      	b.n	8006542 <_dtoa_r+0x62a>
 8006620:	4ba3      	ldr	r3, [pc, #652]	; (80068b0 <_dtoa_r+0x998>)
 8006622:	2200      	movs	r2, #0
 8006624:	f7f9 fff0 	bl	8000608 <__aeabi_dmul>
 8006628:	2200      	movs	r2, #0
 800662a:	2300      	movs	r3, #0
 800662c:	4606      	mov	r6, r0
 800662e:	460f      	mov	r7, r1
 8006630:	f7fa fa52 	bl	8000ad8 <__aeabi_dcmpeq>
 8006634:	2800      	cmp	r0, #0
 8006636:	d09e      	beq.n	8006576 <_dtoa_r+0x65e>
 8006638:	e7d0      	b.n	80065dc <_dtoa_r+0x6c4>
 800663a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800663c:	2a00      	cmp	r2, #0
 800663e:	f000 80ca 	beq.w	80067d6 <_dtoa_r+0x8be>
 8006642:	9a07      	ldr	r2, [sp, #28]
 8006644:	2a01      	cmp	r2, #1
 8006646:	f300 80ad 	bgt.w	80067a4 <_dtoa_r+0x88c>
 800664a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800664c:	2a00      	cmp	r2, #0
 800664e:	f000 80a5 	beq.w	800679c <_dtoa_r+0x884>
 8006652:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006656:	9e08      	ldr	r6, [sp, #32]
 8006658:	9d05      	ldr	r5, [sp, #20]
 800665a:	9a05      	ldr	r2, [sp, #20]
 800665c:	441a      	add	r2, r3
 800665e:	9205      	str	r2, [sp, #20]
 8006660:	9a06      	ldr	r2, [sp, #24]
 8006662:	2101      	movs	r1, #1
 8006664:	441a      	add	r2, r3
 8006666:	4620      	mov	r0, r4
 8006668:	9206      	str	r2, [sp, #24]
 800666a:	f000 fc3d 	bl	8006ee8 <__i2b>
 800666e:	4607      	mov	r7, r0
 8006670:	b165      	cbz	r5, 800668c <_dtoa_r+0x774>
 8006672:	9b06      	ldr	r3, [sp, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	dd09      	ble.n	800668c <_dtoa_r+0x774>
 8006678:	42ab      	cmp	r3, r5
 800667a:	9a05      	ldr	r2, [sp, #20]
 800667c:	bfa8      	it	ge
 800667e:	462b      	movge	r3, r5
 8006680:	1ad2      	subs	r2, r2, r3
 8006682:	9205      	str	r2, [sp, #20]
 8006684:	9a06      	ldr	r2, [sp, #24]
 8006686:	1aed      	subs	r5, r5, r3
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	9306      	str	r3, [sp, #24]
 800668c:	9b08      	ldr	r3, [sp, #32]
 800668e:	b1f3      	cbz	r3, 80066ce <_dtoa_r+0x7b6>
 8006690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80a3 	beq.w	80067de <_dtoa_r+0x8c6>
 8006698:	2e00      	cmp	r6, #0
 800669a:	dd10      	ble.n	80066be <_dtoa_r+0x7a6>
 800669c:	4639      	mov	r1, r7
 800669e:	4632      	mov	r2, r6
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 fce1 	bl	8007068 <__pow5mult>
 80066a6:	4652      	mov	r2, sl
 80066a8:	4601      	mov	r1, r0
 80066aa:	4607      	mov	r7, r0
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 fc31 	bl	8006f14 <__multiply>
 80066b2:	4651      	mov	r1, sl
 80066b4:	4680      	mov	r8, r0
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 fb60 	bl	8006d7c <_Bfree>
 80066bc:	46c2      	mov	sl, r8
 80066be:	9b08      	ldr	r3, [sp, #32]
 80066c0:	1b9a      	subs	r2, r3, r6
 80066c2:	d004      	beq.n	80066ce <_dtoa_r+0x7b6>
 80066c4:	4651      	mov	r1, sl
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 fcce 	bl	8007068 <__pow5mult>
 80066cc:	4682      	mov	sl, r0
 80066ce:	2101      	movs	r1, #1
 80066d0:	4620      	mov	r0, r4
 80066d2:	f000 fc09 	bl	8006ee8 <__i2b>
 80066d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	4606      	mov	r6, r0
 80066dc:	f340 8081 	ble.w	80067e2 <_dtoa_r+0x8ca>
 80066e0:	461a      	mov	r2, r3
 80066e2:	4601      	mov	r1, r0
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fcbf 	bl	8007068 <__pow5mult>
 80066ea:	9b07      	ldr	r3, [sp, #28]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	4606      	mov	r6, r0
 80066f0:	dd7a      	ble.n	80067e8 <_dtoa_r+0x8d0>
 80066f2:	f04f 0800 	mov.w	r8, #0
 80066f6:	6933      	ldr	r3, [r6, #16]
 80066f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066fc:	6918      	ldr	r0, [r3, #16]
 80066fe:	f000 fba5 	bl	8006e4c <__hi0bits>
 8006702:	f1c0 0020 	rsb	r0, r0, #32
 8006706:	9b06      	ldr	r3, [sp, #24]
 8006708:	4418      	add	r0, r3
 800670a:	f010 001f 	ands.w	r0, r0, #31
 800670e:	f000 8094 	beq.w	800683a <_dtoa_r+0x922>
 8006712:	f1c0 0320 	rsb	r3, r0, #32
 8006716:	2b04      	cmp	r3, #4
 8006718:	f340 8085 	ble.w	8006826 <_dtoa_r+0x90e>
 800671c:	9b05      	ldr	r3, [sp, #20]
 800671e:	f1c0 001c 	rsb	r0, r0, #28
 8006722:	4403      	add	r3, r0
 8006724:	9305      	str	r3, [sp, #20]
 8006726:	9b06      	ldr	r3, [sp, #24]
 8006728:	4403      	add	r3, r0
 800672a:	4405      	add	r5, r0
 800672c:	9306      	str	r3, [sp, #24]
 800672e:	9b05      	ldr	r3, [sp, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dd05      	ble.n	8006740 <_dtoa_r+0x828>
 8006734:	4651      	mov	r1, sl
 8006736:	461a      	mov	r2, r3
 8006738:	4620      	mov	r0, r4
 800673a:	f000 fcef 	bl	800711c <__lshift>
 800673e:	4682      	mov	sl, r0
 8006740:	9b06      	ldr	r3, [sp, #24]
 8006742:	2b00      	cmp	r3, #0
 8006744:	dd05      	ble.n	8006752 <_dtoa_r+0x83a>
 8006746:	4631      	mov	r1, r6
 8006748:	461a      	mov	r2, r3
 800674a:	4620      	mov	r0, r4
 800674c:	f000 fce6 	bl	800711c <__lshift>
 8006750:	4606      	mov	r6, r0
 8006752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006754:	2b00      	cmp	r3, #0
 8006756:	d072      	beq.n	800683e <_dtoa_r+0x926>
 8006758:	4631      	mov	r1, r6
 800675a:	4650      	mov	r0, sl
 800675c:	f000 fd4a 	bl	80071f4 <__mcmp>
 8006760:	2800      	cmp	r0, #0
 8006762:	da6c      	bge.n	800683e <_dtoa_r+0x926>
 8006764:	2300      	movs	r3, #0
 8006766:	4651      	mov	r1, sl
 8006768:	220a      	movs	r2, #10
 800676a:	4620      	mov	r0, r4
 800676c:	f000 fb28 	bl	8006dc0 <__multadd>
 8006770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006772:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006776:	4682      	mov	sl, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 81b0 	beq.w	8006ade <_dtoa_r+0xbc6>
 800677e:	2300      	movs	r3, #0
 8006780:	4639      	mov	r1, r7
 8006782:	220a      	movs	r2, #10
 8006784:	4620      	mov	r0, r4
 8006786:	f000 fb1b 	bl	8006dc0 <__multadd>
 800678a:	9b01      	ldr	r3, [sp, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	4607      	mov	r7, r0
 8006790:	f300 8096 	bgt.w	80068c0 <_dtoa_r+0x9a8>
 8006794:	9b07      	ldr	r3, [sp, #28]
 8006796:	2b02      	cmp	r3, #2
 8006798:	dc59      	bgt.n	800684e <_dtoa_r+0x936>
 800679a:	e091      	b.n	80068c0 <_dtoa_r+0x9a8>
 800679c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800679e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067a2:	e758      	b.n	8006656 <_dtoa_r+0x73e>
 80067a4:	9b04      	ldr	r3, [sp, #16]
 80067a6:	1e5e      	subs	r6, r3, #1
 80067a8:	9b08      	ldr	r3, [sp, #32]
 80067aa:	42b3      	cmp	r3, r6
 80067ac:	bfbf      	itttt	lt
 80067ae:	9b08      	ldrlt	r3, [sp, #32]
 80067b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80067b2:	9608      	strlt	r6, [sp, #32]
 80067b4:	1af3      	sublt	r3, r6, r3
 80067b6:	bfb4      	ite	lt
 80067b8:	18d2      	addlt	r2, r2, r3
 80067ba:	1b9e      	subge	r6, r3, r6
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	bfbc      	itt	lt
 80067c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80067c2:	2600      	movlt	r6, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bfb7      	itett	lt
 80067c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80067cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80067d0:	1a9d      	sublt	r5, r3, r2
 80067d2:	2300      	movlt	r3, #0
 80067d4:	e741      	b.n	800665a <_dtoa_r+0x742>
 80067d6:	9e08      	ldr	r6, [sp, #32]
 80067d8:	9d05      	ldr	r5, [sp, #20]
 80067da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067dc:	e748      	b.n	8006670 <_dtoa_r+0x758>
 80067de:	9a08      	ldr	r2, [sp, #32]
 80067e0:	e770      	b.n	80066c4 <_dtoa_r+0x7ac>
 80067e2:	9b07      	ldr	r3, [sp, #28]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	dc19      	bgt.n	800681c <_dtoa_r+0x904>
 80067e8:	9b02      	ldr	r3, [sp, #8]
 80067ea:	b9bb      	cbnz	r3, 800681c <_dtoa_r+0x904>
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067f2:	b99b      	cbnz	r3, 800681c <_dtoa_r+0x904>
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067fa:	0d1b      	lsrs	r3, r3, #20
 80067fc:	051b      	lsls	r3, r3, #20
 80067fe:	b183      	cbz	r3, 8006822 <_dtoa_r+0x90a>
 8006800:	9b05      	ldr	r3, [sp, #20]
 8006802:	3301      	adds	r3, #1
 8006804:	9305      	str	r3, [sp, #20]
 8006806:	9b06      	ldr	r3, [sp, #24]
 8006808:	3301      	adds	r3, #1
 800680a:	9306      	str	r3, [sp, #24]
 800680c:	f04f 0801 	mov.w	r8, #1
 8006810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006812:	2b00      	cmp	r3, #0
 8006814:	f47f af6f 	bne.w	80066f6 <_dtoa_r+0x7de>
 8006818:	2001      	movs	r0, #1
 800681a:	e774      	b.n	8006706 <_dtoa_r+0x7ee>
 800681c:	f04f 0800 	mov.w	r8, #0
 8006820:	e7f6      	b.n	8006810 <_dtoa_r+0x8f8>
 8006822:	4698      	mov	r8, r3
 8006824:	e7f4      	b.n	8006810 <_dtoa_r+0x8f8>
 8006826:	d082      	beq.n	800672e <_dtoa_r+0x816>
 8006828:	9a05      	ldr	r2, [sp, #20]
 800682a:	331c      	adds	r3, #28
 800682c:	441a      	add	r2, r3
 800682e:	9205      	str	r2, [sp, #20]
 8006830:	9a06      	ldr	r2, [sp, #24]
 8006832:	441a      	add	r2, r3
 8006834:	441d      	add	r5, r3
 8006836:	9206      	str	r2, [sp, #24]
 8006838:	e779      	b.n	800672e <_dtoa_r+0x816>
 800683a:	4603      	mov	r3, r0
 800683c:	e7f4      	b.n	8006828 <_dtoa_r+0x910>
 800683e:	9b04      	ldr	r3, [sp, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	dc37      	bgt.n	80068b4 <_dtoa_r+0x99c>
 8006844:	9b07      	ldr	r3, [sp, #28]
 8006846:	2b02      	cmp	r3, #2
 8006848:	dd34      	ble.n	80068b4 <_dtoa_r+0x99c>
 800684a:	9b04      	ldr	r3, [sp, #16]
 800684c:	9301      	str	r3, [sp, #4]
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	b963      	cbnz	r3, 800686c <_dtoa_r+0x954>
 8006852:	4631      	mov	r1, r6
 8006854:	2205      	movs	r2, #5
 8006856:	4620      	mov	r0, r4
 8006858:	f000 fab2 	bl	8006dc0 <__multadd>
 800685c:	4601      	mov	r1, r0
 800685e:	4606      	mov	r6, r0
 8006860:	4650      	mov	r0, sl
 8006862:	f000 fcc7 	bl	80071f4 <__mcmp>
 8006866:	2800      	cmp	r0, #0
 8006868:	f73f adbb 	bgt.w	80063e2 <_dtoa_r+0x4ca>
 800686c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800686e:	9d00      	ldr	r5, [sp, #0]
 8006870:	ea6f 0b03 	mvn.w	fp, r3
 8006874:	f04f 0800 	mov.w	r8, #0
 8006878:	4631      	mov	r1, r6
 800687a:	4620      	mov	r0, r4
 800687c:	f000 fa7e 	bl	8006d7c <_Bfree>
 8006880:	2f00      	cmp	r7, #0
 8006882:	f43f aeab 	beq.w	80065dc <_dtoa_r+0x6c4>
 8006886:	f1b8 0f00 	cmp.w	r8, #0
 800688a:	d005      	beq.n	8006898 <_dtoa_r+0x980>
 800688c:	45b8      	cmp	r8, r7
 800688e:	d003      	beq.n	8006898 <_dtoa_r+0x980>
 8006890:	4641      	mov	r1, r8
 8006892:	4620      	mov	r0, r4
 8006894:	f000 fa72 	bl	8006d7c <_Bfree>
 8006898:	4639      	mov	r1, r7
 800689a:	4620      	mov	r0, r4
 800689c:	f000 fa6e 	bl	8006d7c <_Bfree>
 80068a0:	e69c      	b.n	80065dc <_dtoa_r+0x6c4>
 80068a2:	2600      	movs	r6, #0
 80068a4:	4637      	mov	r7, r6
 80068a6:	e7e1      	b.n	800686c <_dtoa_r+0x954>
 80068a8:	46bb      	mov	fp, r7
 80068aa:	4637      	mov	r7, r6
 80068ac:	e599      	b.n	80063e2 <_dtoa_r+0x4ca>
 80068ae:	bf00      	nop
 80068b0:	40240000 	.word	0x40240000
 80068b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 80c8 	beq.w	8006a4c <_dtoa_r+0xb34>
 80068bc:	9b04      	ldr	r3, [sp, #16]
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	2d00      	cmp	r5, #0
 80068c2:	dd05      	ble.n	80068d0 <_dtoa_r+0x9b8>
 80068c4:	4639      	mov	r1, r7
 80068c6:	462a      	mov	r2, r5
 80068c8:	4620      	mov	r0, r4
 80068ca:	f000 fc27 	bl	800711c <__lshift>
 80068ce:	4607      	mov	r7, r0
 80068d0:	f1b8 0f00 	cmp.w	r8, #0
 80068d4:	d05b      	beq.n	800698e <_dtoa_r+0xa76>
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4620      	mov	r0, r4
 80068da:	f000 fa0f 	bl	8006cfc <_Balloc>
 80068de:	4605      	mov	r5, r0
 80068e0:	b928      	cbnz	r0, 80068ee <_dtoa_r+0x9d6>
 80068e2:	4b83      	ldr	r3, [pc, #524]	; (8006af0 <_dtoa_r+0xbd8>)
 80068e4:	4602      	mov	r2, r0
 80068e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80068ea:	f7ff bb2e 	b.w	8005f4a <_dtoa_r+0x32>
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	3202      	adds	r2, #2
 80068f2:	0092      	lsls	r2, r2, #2
 80068f4:	f107 010c 	add.w	r1, r7, #12
 80068f8:	300c      	adds	r0, #12
 80068fa:	f001 f813 	bl	8007924 <memcpy>
 80068fe:	2201      	movs	r2, #1
 8006900:	4629      	mov	r1, r5
 8006902:	4620      	mov	r0, r4
 8006904:	f000 fc0a 	bl	800711c <__lshift>
 8006908:	9b00      	ldr	r3, [sp, #0]
 800690a:	3301      	adds	r3, #1
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006912:	4413      	add	r3, r2
 8006914:	9308      	str	r3, [sp, #32]
 8006916:	9b02      	ldr	r3, [sp, #8]
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	46b8      	mov	r8, r7
 800691e:	9306      	str	r3, [sp, #24]
 8006920:	4607      	mov	r7, r0
 8006922:	9b04      	ldr	r3, [sp, #16]
 8006924:	4631      	mov	r1, r6
 8006926:	3b01      	subs	r3, #1
 8006928:	4650      	mov	r0, sl
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	f7ff fa6b 	bl	8005e06 <quorem>
 8006930:	4641      	mov	r1, r8
 8006932:	9002      	str	r0, [sp, #8]
 8006934:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006938:	4650      	mov	r0, sl
 800693a:	f000 fc5b 	bl	80071f4 <__mcmp>
 800693e:	463a      	mov	r2, r7
 8006940:	9005      	str	r0, [sp, #20]
 8006942:	4631      	mov	r1, r6
 8006944:	4620      	mov	r0, r4
 8006946:	f000 fc71 	bl	800722c <__mdiff>
 800694a:	68c2      	ldr	r2, [r0, #12]
 800694c:	4605      	mov	r5, r0
 800694e:	bb02      	cbnz	r2, 8006992 <_dtoa_r+0xa7a>
 8006950:	4601      	mov	r1, r0
 8006952:	4650      	mov	r0, sl
 8006954:	f000 fc4e 	bl	80071f4 <__mcmp>
 8006958:	4602      	mov	r2, r0
 800695a:	4629      	mov	r1, r5
 800695c:	4620      	mov	r0, r4
 800695e:	9209      	str	r2, [sp, #36]	; 0x24
 8006960:	f000 fa0c 	bl	8006d7c <_Bfree>
 8006964:	9b07      	ldr	r3, [sp, #28]
 8006966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006968:	9d04      	ldr	r5, [sp, #16]
 800696a:	ea43 0102 	orr.w	r1, r3, r2
 800696e:	9b06      	ldr	r3, [sp, #24]
 8006970:	4319      	orrs	r1, r3
 8006972:	d110      	bne.n	8006996 <_dtoa_r+0xa7e>
 8006974:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006978:	d029      	beq.n	80069ce <_dtoa_r+0xab6>
 800697a:	9b05      	ldr	r3, [sp, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	dd02      	ble.n	8006986 <_dtoa_r+0xa6e>
 8006980:	9b02      	ldr	r3, [sp, #8]
 8006982:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006986:	9b01      	ldr	r3, [sp, #4]
 8006988:	f883 9000 	strb.w	r9, [r3]
 800698c:	e774      	b.n	8006878 <_dtoa_r+0x960>
 800698e:	4638      	mov	r0, r7
 8006990:	e7ba      	b.n	8006908 <_dtoa_r+0x9f0>
 8006992:	2201      	movs	r2, #1
 8006994:	e7e1      	b.n	800695a <_dtoa_r+0xa42>
 8006996:	9b05      	ldr	r3, [sp, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	db04      	blt.n	80069a6 <_dtoa_r+0xa8e>
 800699c:	9907      	ldr	r1, [sp, #28]
 800699e:	430b      	orrs	r3, r1
 80069a0:	9906      	ldr	r1, [sp, #24]
 80069a2:	430b      	orrs	r3, r1
 80069a4:	d120      	bne.n	80069e8 <_dtoa_r+0xad0>
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	dded      	ble.n	8006986 <_dtoa_r+0xa6e>
 80069aa:	4651      	mov	r1, sl
 80069ac:	2201      	movs	r2, #1
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 fbb4 	bl	800711c <__lshift>
 80069b4:	4631      	mov	r1, r6
 80069b6:	4682      	mov	sl, r0
 80069b8:	f000 fc1c 	bl	80071f4 <__mcmp>
 80069bc:	2800      	cmp	r0, #0
 80069be:	dc03      	bgt.n	80069c8 <_dtoa_r+0xab0>
 80069c0:	d1e1      	bne.n	8006986 <_dtoa_r+0xa6e>
 80069c2:	f019 0f01 	tst.w	r9, #1
 80069c6:	d0de      	beq.n	8006986 <_dtoa_r+0xa6e>
 80069c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069cc:	d1d8      	bne.n	8006980 <_dtoa_r+0xa68>
 80069ce:	9a01      	ldr	r2, [sp, #4]
 80069d0:	2339      	movs	r3, #57	; 0x39
 80069d2:	7013      	strb	r3, [r2, #0]
 80069d4:	462b      	mov	r3, r5
 80069d6:	461d      	mov	r5, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069de:	2a39      	cmp	r2, #57	; 0x39
 80069e0:	d06c      	beq.n	8006abc <_dtoa_r+0xba4>
 80069e2:	3201      	adds	r2, #1
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	e747      	b.n	8006878 <_dtoa_r+0x960>
 80069e8:	2a00      	cmp	r2, #0
 80069ea:	dd07      	ble.n	80069fc <_dtoa_r+0xae4>
 80069ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069f0:	d0ed      	beq.n	80069ce <_dtoa_r+0xab6>
 80069f2:	9a01      	ldr	r2, [sp, #4]
 80069f4:	f109 0301 	add.w	r3, r9, #1
 80069f8:	7013      	strb	r3, [r2, #0]
 80069fa:	e73d      	b.n	8006878 <_dtoa_r+0x960>
 80069fc:	9b04      	ldr	r3, [sp, #16]
 80069fe:	9a08      	ldr	r2, [sp, #32]
 8006a00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d043      	beq.n	8006a90 <_dtoa_r+0xb78>
 8006a08:	4651      	mov	r1, sl
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	220a      	movs	r2, #10
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f000 f9d6 	bl	8006dc0 <__multadd>
 8006a14:	45b8      	cmp	r8, r7
 8006a16:	4682      	mov	sl, r0
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	f04f 020a 	mov.w	r2, #10
 8006a20:	4641      	mov	r1, r8
 8006a22:	4620      	mov	r0, r4
 8006a24:	d107      	bne.n	8006a36 <_dtoa_r+0xb1e>
 8006a26:	f000 f9cb 	bl	8006dc0 <__multadd>
 8006a2a:	4680      	mov	r8, r0
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	9b04      	ldr	r3, [sp, #16]
 8006a30:	3301      	adds	r3, #1
 8006a32:	9304      	str	r3, [sp, #16]
 8006a34:	e775      	b.n	8006922 <_dtoa_r+0xa0a>
 8006a36:	f000 f9c3 	bl	8006dc0 <__multadd>
 8006a3a:	4639      	mov	r1, r7
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	220a      	movs	r2, #10
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 f9bc 	bl	8006dc0 <__multadd>
 8006a48:	4607      	mov	r7, r0
 8006a4a:	e7f0      	b.n	8006a2e <_dtoa_r+0xb16>
 8006a4c:	9b04      	ldr	r3, [sp, #16]
 8006a4e:	9301      	str	r3, [sp, #4]
 8006a50:	9d00      	ldr	r5, [sp, #0]
 8006a52:	4631      	mov	r1, r6
 8006a54:	4650      	mov	r0, sl
 8006a56:	f7ff f9d6 	bl	8005e06 <quorem>
 8006a5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a5e:	9b00      	ldr	r3, [sp, #0]
 8006a60:	f805 9b01 	strb.w	r9, [r5], #1
 8006a64:	1aea      	subs	r2, r5, r3
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	dd07      	ble.n	8006a7c <_dtoa_r+0xb64>
 8006a6c:	4651      	mov	r1, sl
 8006a6e:	2300      	movs	r3, #0
 8006a70:	220a      	movs	r2, #10
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 f9a4 	bl	8006dc0 <__multadd>
 8006a78:	4682      	mov	sl, r0
 8006a7a:	e7ea      	b.n	8006a52 <_dtoa_r+0xb3a>
 8006a7c:	9b01      	ldr	r3, [sp, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bfc8      	it	gt
 8006a82:	461d      	movgt	r5, r3
 8006a84:	9b00      	ldr	r3, [sp, #0]
 8006a86:	bfd8      	it	le
 8006a88:	2501      	movle	r5, #1
 8006a8a:	441d      	add	r5, r3
 8006a8c:	f04f 0800 	mov.w	r8, #0
 8006a90:	4651      	mov	r1, sl
 8006a92:	2201      	movs	r2, #1
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fb41 	bl	800711c <__lshift>
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4682      	mov	sl, r0
 8006a9e:	f000 fba9 	bl	80071f4 <__mcmp>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	dc96      	bgt.n	80069d4 <_dtoa_r+0xabc>
 8006aa6:	d102      	bne.n	8006aae <_dtoa_r+0xb96>
 8006aa8:	f019 0f01 	tst.w	r9, #1
 8006aac:	d192      	bne.n	80069d4 <_dtoa_r+0xabc>
 8006aae:	462b      	mov	r3, r5
 8006ab0:	461d      	mov	r5, r3
 8006ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ab6:	2a30      	cmp	r2, #48	; 0x30
 8006ab8:	d0fa      	beq.n	8006ab0 <_dtoa_r+0xb98>
 8006aba:	e6dd      	b.n	8006878 <_dtoa_r+0x960>
 8006abc:	9a00      	ldr	r2, [sp, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d189      	bne.n	80069d6 <_dtoa_r+0xabe>
 8006ac2:	f10b 0b01 	add.w	fp, fp, #1
 8006ac6:	2331      	movs	r3, #49	; 0x31
 8006ac8:	e796      	b.n	80069f8 <_dtoa_r+0xae0>
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <_dtoa_r+0xbdc>)
 8006acc:	f7ff ba99 	b.w	8006002 <_dtoa_r+0xea>
 8006ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f47f aa6d 	bne.w	8005fb2 <_dtoa_r+0x9a>
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <_dtoa_r+0xbe0>)
 8006ada:	f7ff ba92 	b.w	8006002 <_dtoa_r+0xea>
 8006ade:	9b01      	ldr	r3, [sp, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dcb5      	bgt.n	8006a50 <_dtoa_r+0xb38>
 8006ae4:	9b07      	ldr	r3, [sp, #28]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	f73f aeb1 	bgt.w	800684e <_dtoa_r+0x936>
 8006aec:	e7b0      	b.n	8006a50 <_dtoa_r+0xb38>
 8006aee:	bf00      	nop
 8006af0:	08008e40 	.word	0x08008e40
 8006af4:	08008da0 	.word	0x08008da0
 8006af8:	08008dc4 	.word	0x08008dc4

08006afc <_free_r>:
 8006afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006afe:	2900      	cmp	r1, #0
 8006b00:	d044      	beq.n	8006b8c <_free_r+0x90>
 8006b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b06:	9001      	str	r0, [sp, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b0e:	bfb8      	it	lt
 8006b10:	18e4      	addlt	r4, r4, r3
 8006b12:	f000 f8e7 	bl	8006ce4 <__malloc_lock>
 8006b16:	4a1e      	ldr	r2, [pc, #120]	; (8006b90 <_free_r+0x94>)
 8006b18:	9801      	ldr	r0, [sp, #4]
 8006b1a:	6813      	ldr	r3, [r2, #0]
 8006b1c:	b933      	cbnz	r3, 8006b2c <_free_r+0x30>
 8006b1e:	6063      	str	r3, [r4, #4]
 8006b20:	6014      	str	r4, [r2, #0]
 8006b22:	b003      	add	sp, #12
 8006b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b28:	f000 b8e2 	b.w	8006cf0 <__malloc_unlock>
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	d908      	bls.n	8006b42 <_free_r+0x46>
 8006b30:	6825      	ldr	r5, [r4, #0]
 8006b32:	1961      	adds	r1, r4, r5
 8006b34:	428b      	cmp	r3, r1
 8006b36:	bf01      	itttt	eq
 8006b38:	6819      	ldreq	r1, [r3, #0]
 8006b3a:	685b      	ldreq	r3, [r3, #4]
 8006b3c:	1949      	addeq	r1, r1, r5
 8006b3e:	6021      	streq	r1, [r4, #0]
 8006b40:	e7ed      	b.n	8006b1e <_free_r+0x22>
 8006b42:	461a      	mov	r2, r3
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	b10b      	cbz	r3, 8006b4c <_free_r+0x50>
 8006b48:	42a3      	cmp	r3, r4
 8006b4a:	d9fa      	bls.n	8006b42 <_free_r+0x46>
 8006b4c:	6811      	ldr	r1, [r2, #0]
 8006b4e:	1855      	adds	r5, r2, r1
 8006b50:	42a5      	cmp	r5, r4
 8006b52:	d10b      	bne.n	8006b6c <_free_r+0x70>
 8006b54:	6824      	ldr	r4, [r4, #0]
 8006b56:	4421      	add	r1, r4
 8006b58:	1854      	adds	r4, r2, r1
 8006b5a:	42a3      	cmp	r3, r4
 8006b5c:	6011      	str	r1, [r2, #0]
 8006b5e:	d1e0      	bne.n	8006b22 <_free_r+0x26>
 8006b60:	681c      	ldr	r4, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	6053      	str	r3, [r2, #4]
 8006b66:	440c      	add	r4, r1
 8006b68:	6014      	str	r4, [r2, #0]
 8006b6a:	e7da      	b.n	8006b22 <_free_r+0x26>
 8006b6c:	d902      	bls.n	8006b74 <_free_r+0x78>
 8006b6e:	230c      	movs	r3, #12
 8006b70:	6003      	str	r3, [r0, #0]
 8006b72:	e7d6      	b.n	8006b22 <_free_r+0x26>
 8006b74:	6825      	ldr	r5, [r4, #0]
 8006b76:	1961      	adds	r1, r4, r5
 8006b78:	428b      	cmp	r3, r1
 8006b7a:	bf04      	itt	eq
 8006b7c:	6819      	ldreq	r1, [r3, #0]
 8006b7e:	685b      	ldreq	r3, [r3, #4]
 8006b80:	6063      	str	r3, [r4, #4]
 8006b82:	bf04      	itt	eq
 8006b84:	1949      	addeq	r1, r1, r5
 8006b86:	6021      	streq	r1, [r4, #0]
 8006b88:	6054      	str	r4, [r2, #4]
 8006b8a:	e7ca      	b.n	8006b22 <_free_r+0x26>
 8006b8c:	b003      	add	sp, #12
 8006b8e:	bd30      	pop	{r4, r5, pc}
 8006b90:	20000588 	.word	0x20000588

08006b94 <malloc>:
 8006b94:	4b02      	ldr	r3, [pc, #8]	; (8006ba0 <malloc+0xc>)
 8006b96:	4601      	mov	r1, r0
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	f000 b823 	b.w	8006be4 <_malloc_r>
 8006b9e:	bf00      	nop
 8006ba0:	20000064 	.word	0x20000064

08006ba4 <sbrk_aligned>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	4e0e      	ldr	r6, [pc, #56]	; (8006be0 <sbrk_aligned+0x3c>)
 8006ba8:	460c      	mov	r4, r1
 8006baa:	6831      	ldr	r1, [r6, #0]
 8006bac:	4605      	mov	r5, r0
 8006bae:	b911      	cbnz	r1, 8006bb6 <sbrk_aligned+0x12>
 8006bb0:	f000 fea8 	bl	8007904 <_sbrk_r>
 8006bb4:	6030      	str	r0, [r6, #0]
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f000 fea3 	bl	8007904 <_sbrk_r>
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	d00a      	beq.n	8006bd8 <sbrk_aligned+0x34>
 8006bc2:	1cc4      	adds	r4, r0, #3
 8006bc4:	f024 0403 	bic.w	r4, r4, #3
 8006bc8:	42a0      	cmp	r0, r4
 8006bca:	d007      	beq.n	8006bdc <sbrk_aligned+0x38>
 8006bcc:	1a21      	subs	r1, r4, r0
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 fe98 	bl	8007904 <_sbrk_r>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d101      	bne.n	8006bdc <sbrk_aligned+0x38>
 8006bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8006bdc:	4620      	mov	r0, r4
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	2000058c 	.word	0x2000058c

08006be4 <_malloc_r>:
 8006be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be8:	1ccd      	adds	r5, r1, #3
 8006bea:	f025 0503 	bic.w	r5, r5, #3
 8006bee:	3508      	adds	r5, #8
 8006bf0:	2d0c      	cmp	r5, #12
 8006bf2:	bf38      	it	cc
 8006bf4:	250c      	movcc	r5, #12
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	db01      	blt.n	8006c00 <_malloc_r+0x1c>
 8006bfc:	42a9      	cmp	r1, r5
 8006bfe:	d905      	bls.n	8006c0c <_malloc_r+0x28>
 8006c00:	230c      	movs	r3, #12
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	2600      	movs	r6, #0
 8006c06:	4630      	mov	r0, r6
 8006c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ce0 <_malloc_r+0xfc>
 8006c10:	f000 f868 	bl	8006ce4 <__malloc_lock>
 8006c14:	f8d8 3000 	ldr.w	r3, [r8]
 8006c18:	461c      	mov	r4, r3
 8006c1a:	bb5c      	cbnz	r4, 8006c74 <_malloc_r+0x90>
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	4638      	mov	r0, r7
 8006c20:	f7ff ffc0 	bl	8006ba4 <sbrk_aligned>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	4604      	mov	r4, r0
 8006c28:	d155      	bne.n	8006cd6 <_malloc_r+0xf2>
 8006c2a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c2e:	4626      	mov	r6, r4
 8006c30:	2e00      	cmp	r6, #0
 8006c32:	d145      	bne.n	8006cc0 <_malloc_r+0xdc>
 8006c34:	2c00      	cmp	r4, #0
 8006c36:	d048      	beq.n	8006cca <_malloc_r+0xe6>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	eb04 0903 	add.w	r9, r4, r3
 8006c42:	f000 fe5f 	bl	8007904 <_sbrk_r>
 8006c46:	4581      	cmp	r9, r0
 8006c48:	d13f      	bne.n	8006cca <_malloc_r+0xe6>
 8006c4a:	6821      	ldr	r1, [r4, #0]
 8006c4c:	1a6d      	subs	r5, r5, r1
 8006c4e:	4629      	mov	r1, r5
 8006c50:	4638      	mov	r0, r7
 8006c52:	f7ff ffa7 	bl	8006ba4 <sbrk_aligned>
 8006c56:	3001      	adds	r0, #1
 8006c58:	d037      	beq.n	8006cca <_malloc_r+0xe6>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	442b      	add	r3, r5
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	f8d8 3000 	ldr.w	r3, [r8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d038      	beq.n	8006cda <_malloc_r+0xf6>
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	42a2      	cmp	r2, r4
 8006c6c:	d12b      	bne.n	8006cc6 <_malloc_r+0xe2>
 8006c6e:	2200      	movs	r2, #0
 8006c70:	605a      	str	r2, [r3, #4]
 8006c72:	e00f      	b.n	8006c94 <_malloc_r+0xb0>
 8006c74:	6822      	ldr	r2, [r4, #0]
 8006c76:	1b52      	subs	r2, r2, r5
 8006c78:	d41f      	bmi.n	8006cba <_malloc_r+0xd6>
 8006c7a:	2a0b      	cmp	r2, #11
 8006c7c:	d917      	bls.n	8006cae <_malloc_r+0xca>
 8006c7e:	1961      	adds	r1, r4, r5
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	6025      	str	r5, [r4, #0]
 8006c84:	bf18      	it	ne
 8006c86:	6059      	strne	r1, [r3, #4]
 8006c88:	6863      	ldr	r3, [r4, #4]
 8006c8a:	bf08      	it	eq
 8006c8c:	f8c8 1000 	streq.w	r1, [r8]
 8006c90:	5162      	str	r2, [r4, r5]
 8006c92:	604b      	str	r3, [r1, #4]
 8006c94:	4638      	mov	r0, r7
 8006c96:	f104 060b 	add.w	r6, r4, #11
 8006c9a:	f000 f829 	bl	8006cf0 <__malloc_unlock>
 8006c9e:	f026 0607 	bic.w	r6, r6, #7
 8006ca2:	1d23      	adds	r3, r4, #4
 8006ca4:	1af2      	subs	r2, r6, r3
 8006ca6:	d0ae      	beq.n	8006c06 <_malloc_r+0x22>
 8006ca8:	1b9b      	subs	r3, r3, r6
 8006caa:	50a3      	str	r3, [r4, r2]
 8006cac:	e7ab      	b.n	8006c06 <_malloc_r+0x22>
 8006cae:	42a3      	cmp	r3, r4
 8006cb0:	6862      	ldr	r2, [r4, #4]
 8006cb2:	d1dd      	bne.n	8006c70 <_malloc_r+0x8c>
 8006cb4:	f8c8 2000 	str.w	r2, [r8]
 8006cb8:	e7ec      	b.n	8006c94 <_malloc_r+0xb0>
 8006cba:	4623      	mov	r3, r4
 8006cbc:	6864      	ldr	r4, [r4, #4]
 8006cbe:	e7ac      	b.n	8006c1a <_malloc_r+0x36>
 8006cc0:	4634      	mov	r4, r6
 8006cc2:	6876      	ldr	r6, [r6, #4]
 8006cc4:	e7b4      	b.n	8006c30 <_malloc_r+0x4c>
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	e7cc      	b.n	8006c64 <_malloc_r+0x80>
 8006cca:	230c      	movs	r3, #12
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	4638      	mov	r0, r7
 8006cd0:	f000 f80e 	bl	8006cf0 <__malloc_unlock>
 8006cd4:	e797      	b.n	8006c06 <_malloc_r+0x22>
 8006cd6:	6025      	str	r5, [r4, #0]
 8006cd8:	e7dc      	b.n	8006c94 <_malloc_r+0xb0>
 8006cda:	605b      	str	r3, [r3, #4]
 8006cdc:	deff      	udf	#255	; 0xff
 8006cde:	bf00      	nop
 8006ce0:	20000588 	.word	0x20000588

08006ce4 <__malloc_lock>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <__malloc_lock+0x8>)
 8006ce6:	f7ff b88c 	b.w	8005e02 <__retarget_lock_acquire_recursive>
 8006cea:	bf00      	nop
 8006cec:	20000584 	.word	0x20000584

08006cf0 <__malloc_unlock>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <__malloc_unlock+0x8>)
 8006cf2:	f7ff b887 	b.w	8005e04 <__retarget_lock_release_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	20000584 	.word	0x20000584

08006cfc <_Balloc>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	69c6      	ldr	r6, [r0, #28]
 8006d00:	4604      	mov	r4, r0
 8006d02:	460d      	mov	r5, r1
 8006d04:	b976      	cbnz	r6, 8006d24 <_Balloc+0x28>
 8006d06:	2010      	movs	r0, #16
 8006d08:	f7ff ff44 	bl	8006b94 <malloc>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	61e0      	str	r0, [r4, #28]
 8006d10:	b920      	cbnz	r0, 8006d1c <_Balloc+0x20>
 8006d12:	4b18      	ldr	r3, [pc, #96]	; (8006d74 <_Balloc+0x78>)
 8006d14:	4818      	ldr	r0, [pc, #96]	; (8006d78 <_Balloc+0x7c>)
 8006d16:	216b      	movs	r1, #107	; 0x6b
 8006d18:	f000 fe12 	bl	8007940 <__assert_func>
 8006d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d20:	6006      	str	r6, [r0, #0]
 8006d22:	60c6      	str	r6, [r0, #12]
 8006d24:	69e6      	ldr	r6, [r4, #28]
 8006d26:	68f3      	ldr	r3, [r6, #12]
 8006d28:	b183      	cbz	r3, 8006d4c <_Balloc+0x50>
 8006d2a:	69e3      	ldr	r3, [r4, #28]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d32:	b9b8      	cbnz	r0, 8006d64 <_Balloc+0x68>
 8006d34:	2101      	movs	r1, #1
 8006d36:	fa01 f605 	lsl.w	r6, r1, r5
 8006d3a:	1d72      	adds	r2, r6, #5
 8006d3c:	0092      	lsls	r2, r2, #2
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 fe1c 	bl	800797c <_calloc_r>
 8006d44:	b160      	cbz	r0, 8006d60 <_Balloc+0x64>
 8006d46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d4a:	e00e      	b.n	8006d6a <_Balloc+0x6e>
 8006d4c:	2221      	movs	r2, #33	; 0x21
 8006d4e:	2104      	movs	r1, #4
 8006d50:	4620      	mov	r0, r4
 8006d52:	f000 fe13 	bl	800797c <_calloc_r>
 8006d56:	69e3      	ldr	r3, [r4, #28]
 8006d58:	60f0      	str	r0, [r6, #12]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e4      	bne.n	8006d2a <_Balloc+0x2e>
 8006d60:	2000      	movs	r0, #0
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	6802      	ldr	r2, [r0, #0]
 8006d66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d70:	e7f7      	b.n	8006d62 <_Balloc+0x66>
 8006d72:	bf00      	nop
 8006d74:	08008dd1 	.word	0x08008dd1
 8006d78:	08008e51 	.word	0x08008e51

08006d7c <_Bfree>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	69c6      	ldr	r6, [r0, #28]
 8006d80:	4605      	mov	r5, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	b976      	cbnz	r6, 8006da4 <_Bfree+0x28>
 8006d86:	2010      	movs	r0, #16
 8006d88:	f7ff ff04 	bl	8006b94 <malloc>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	61e8      	str	r0, [r5, #28]
 8006d90:	b920      	cbnz	r0, 8006d9c <_Bfree+0x20>
 8006d92:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <_Bfree+0x3c>)
 8006d94:	4809      	ldr	r0, [pc, #36]	; (8006dbc <_Bfree+0x40>)
 8006d96:	218f      	movs	r1, #143	; 0x8f
 8006d98:	f000 fdd2 	bl	8007940 <__assert_func>
 8006d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006da0:	6006      	str	r6, [r0, #0]
 8006da2:	60c6      	str	r6, [r0, #12]
 8006da4:	b13c      	cbz	r4, 8006db6 <_Bfree+0x3a>
 8006da6:	69eb      	ldr	r3, [r5, #28]
 8006da8:	6862      	ldr	r2, [r4, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006db0:	6021      	str	r1, [r4, #0]
 8006db2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	08008dd1 	.word	0x08008dd1
 8006dbc:	08008e51 	.word	0x08008e51

08006dc0 <__multadd>:
 8006dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc4:	690d      	ldr	r5, [r1, #16]
 8006dc6:	4607      	mov	r7, r0
 8006dc8:	460c      	mov	r4, r1
 8006dca:	461e      	mov	r6, r3
 8006dcc:	f101 0c14 	add.w	ip, r1, #20
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	f8dc 3000 	ldr.w	r3, [ip]
 8006dd6:	b299      	uxth	r1, r3
 8006dd8:	fb02 6101 	mla	r1, r2, r1, r6
 8006ddc:	0c1e      	lsrs	r6, r3, #16
 8006dde:	0c0b      	lsrs	r3, r1, #16
 8006de0:	fb02 3306 	mla	r3, r2, r6, r3
 8006de4:	b289      	uxth	r1, r1
 8006de6:	3001      	adds	r0, #1
 8006de8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006dec:	4285      	cmp	r5, r0
 8006dee:	f84c 1b04 	str.w	r1, [ip], #4
 8006df2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006df6:	dcec      	bgt.n	8006dd2 <__multadd+0x12>
 8006df8:	b30e      	cbz	r6, 8006e3e <__multadd+0x7e>
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	42ab      	cmp	r3, r5
 8006dfe:	dc19      	bgt.n	8006e34 <__multadd+0x74>
 8006e00:	6861      	ldr	r1, [r4, #4]
 8006e02:	4638      	mov	r0, r7
 8006e04:	3101      	adds	r1, #1
 8006e06:	f7ff ff79 	bl	8006cfc <_Balloc>
 8006e0a:	4680      	mov	r8, r0
 8006e0c:	b928      	cbnz	r0, 8006e1a <__multadd+0x5a>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <__multadd+0x84>)
 8006e12:	480d      	ldr	r0, [pc, #52]	; (8006e48 <__multadd+0x88>)
 8006e14:	21ba      	movs	r1, #186	; 0xba
 8006e16:	f000 fd93 	bl	8007940 <__assert_func>
 8006e1a:	6922      	ldr	r2, [r4, #16]
 8006e1c:	3202      	adds	r2, #2
 8006e1e:	f104 010c 	add.w	r1, r4, #12
 8006e22:	0092      	lsls	r2, r2, #2
 8006e24:	300c      	adds	r0, #12
 8006e26:	f000 fd7d 	bl	8007924 <memcpy>
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	f7ff ffa5 	bl	8006d7c <_Bfree>
 8006e32:	4644      	mov	r4, r8
 8006e34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e38:	3501      	adds	r5, #1
 8006e3a:	615e      	str	r6, [r3, #20]
 8006e3c:	6125      	str	r5, [r4, #16]
 8006e3e:	4620      	mov	r0, r4
 8006e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e44:	08008e40 	.word	0x08008e40
 8006e48:	08008e51 	.word	0x08008e51

08006e4c <__hi0bits>:
 8006e4c:	0c03      	lsrs	r3, r0, #16
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	b9d3      	cbnz	r3, 8006e88 <__hi0bits+0x3c>
 8006e52:	0400      	lsls	r0, r0, #16
 8006e54:	2310      	movs	r3, #16
 8006e56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e5a:	bf04      	itt	eq
 8006e5c:	0200      	lsleq	r0, r0, #8
 8006e5e:	3308      	addeq	r3, #8
 8006e60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e64:	bf04      	itt	eq
 8006e66:	0100      	lsleq	r0, r0, #4
 8006e68:	3304      	addeq	r3, #4
 8006e6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e6e:	bf04      	itt	eq
 8006e70:	0080      	lsleq	r0, r0, #2
 8006e72:	3302      	addeq	r3, #2
 8006e74:	2800      	cmp	r0, #0
 8006e76:	db05      	blt.n	8006e84 <__hi0bits+0x38>
 8006e78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e7c:	f103 0301 	add.w	r3, r3, #1
 8006e80:	bf08      	it	eq
 8006e82:	2320      	moveq	r3, #32
 8006e84:	4618      	mov	r0, r3
 8006e86:	4770      	bx	lr
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e7e4      	b.n	8006e56 <__hi0bits+0xa>

08006e8c <__lo0bits>:
 8006e8c:	6803      	ldr	r3, [r0, #0]
 8006e8e:	f013 0207 	ands.w	r2, r3, #7
 8006e92:	d00c      	beq.n	8006eae <__lo0bits+0x22>
 8006e94:	07d9      	lsls	r1, r3, #31
 8006e96:	d422      	bmi.n	8006ede <__lo0bits+0x52>
 8006e98:	079a      	lsls	r2, r3, #30
 8006e9a:	bf49      	itett	mi
 8006e9c:	085b      	lsrmi	r3, r3, #1
 8006e9e:	089b      	lsrpl	r3, r3, #2
 8006ea0:	6003      	strmi	r3, [r0, #0]
 8006ea2:	2201      	movmi	r2, #1
 8006ea4:	bf5c      	itt	pl
 8006ea6:	6003      	strpl	r3, [r0, #0]
 8006ea8:	2202      	movpl	r2, #2
 8006eaa:	4610      	mov	r0, r2
 8006eac:	4770      	bx	lr
 8006eae:	b299      	uxth	r1, r3
 8006eb0:	b909      	cbnz	r1, 8006eb6 <__lo0bits+0x2a>
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	2210      	movs	r2, #16
 8006eb6:	b2d9      	uxtb	r1, r3
 8006eb8:	b909      	cbnz	r1, 8006ebe <__lo0bits+0x32>
 8006eba:	3208      	adds	r2, #8
 8006ebc:	0a1b      	lsrs	r3, r3, #8
 8006ebe:	0719      	lsls	r1, r3, #28
 8006ec0:	bf04      	itt	eq
 8006ec2:	091b      	lsreq	r3, r3, #4
 8006ec4:	3204      	addeq	r2, #4
 8006ec6:	0799      	lsls	r1, r3, #30
 8006ec8:	bf04      	itt	eq
 8006eca:	089b      	lsreq	r3, r3, #2
 8006ecc:	3202      	addeq	r2, #2
 8006ece:	07d9      	lsls	r1, r3, #31
 8006ed0:	d403      	bmi.n	8006eda <__lo0bits+0x4e>
 8006ed2:	085b      	lsrs	r3, r3, #1
 8006ed4:	f102 0201 	add.w	r2, r2, #1
 8006ed8:	d003      	beq.n	8006ee2 <__lo0bits+0x56>
 8006eda:	6003      	str	r3, [r0, #0]
 8006edc:	e7e5      	b.n	8006eaa <__lo0bits+0x1e>
 8006ede:	2200      	movs	r2, #0
 8006ee0:	e7e3      	b.n	8006eaa <__lo0bits+0x1e>
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	e7e1      	b.n	8006eaa <__lo0bits+0x1e>
	...

08006ee8 <__i2b>:
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	460c      	mov	r4, r1
 8006eec:	2101      	movs	r1, #1
 8006eee:	f7ff ff05 	bl	8006cfc <_Balloc>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	b928      	cbnz	r0, 8006f02 <__i2b+0x1a>
 8006ef6:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <__i2b+0x24>)
 8006ef8:	4805      	ldr	r0, [pc, #20]	; (8006f10 <__i2b+0x28>)
 8006efa:	f240 1145 	movw	r1, #325	; 0x145
 8006efe:	f000 fd1f 	bl	8007940 <__assert_func>
 8006f02:	2301      	movs	r3, #1
 8006f04:	6144      	str	r4, [r0, #20]
 8006f06:	6103      	str	r3, [r0, #16]
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	bf00      	nop
 8006f0c:	08008e40 	.word	0x08008e40
 8006f10:	08008e51 	.word	0x08008e51

08006f14 <__multiply>:
 8006f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f18:	4691      	mov	r9, r2
 8006f1a:	690a      	ldr	r2, [r1, #16]
 8006f1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	bfb8      	it	lt
 8006f24:	460b      	movlt	r3, r1
 8006f26:	460c      	mov	r4, r1
 8006f28:	bfbc      	itt	lt
 8006f2a:	464c      	movlt	r4, r9
 8006f2c:	4699      	movlt	r9, r3
 8006f2e:	6927      	ldr	r7, [r4, #16]
 8006f30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f34:	68a3      	ldr	r3, [r4, #8]
 8006f36:	6861      	ldr	r1, [r4, #4]
 8006f38:	eb07 060a 	add.w	r6, r7, sl
 8006f3c:	42b3      	cmp	r3, r6
 8006f3e:	b085      	sub	sp, #20
 8006f40:	bfb8      	it	lt
 8006f42:	3101      	addlt	r1, #1
 8006f44:	f7ff feda 	bl	8006cfc <_Balloc>
 8006f48:	b930      	cbnz	r0, 8006f58 <__multiply+0x44>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	4b44      	ldr	r3, [pc, #272]	; (8007060 <__multiply+0x14c>)
 8006f4e:	4845      	ldr	r0, [pc, #276]	; (8007064 <__multiply+0x150>)
 8006f50:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006f54:	f000 fcf4 	bl	8007940 <__assert_func>
 8006f58:	f100 0514 	add.w	r5, r0, #20
 8006f5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f60:	462b      	mov	r3, r5
 8006f62:	2200      	movs	r2, #0
 8006f64:	4543      	cmp	r3, r8
 8006f66:	d321      	bcc.n	8006fac <__multiply+0x98>
 8006f68:	f104 0314 	add.w	r3, r4, #20
 8006f6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f70:	f109 0314 	add.w	r3, r9, #20
 8006f74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f78:	9202      	str	r2, [sp, #8]
 8006f7a:	1b3a      	subs	r2, r7, r4
 8006f7c:	3a15      	subs	r2, #21
 8006f7e:	f022 0203 	bic.w	r2, r2, #3
 8006f82:	3204      	adds	r2, #4
 8006f84:	f104 0115 	add.w	r1, r4, #21
 8006f88:	428f      	cmp	r7, r1
 8006f8a:	bf38      	it	cc
 8006f8c:	2204      	movcc	r2, #4
 8006f8e:	9201      	str	r2, [sp, #4]
 8006f90:	9a02      	ldr	r2, [sp, #8]
 8006f92:	9303      	str	r3, [sp, #12]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d80c      	bhi.n	8006fb2 <__multiply+0x9e>
 8006f98:	2e00      	cmp	r6, #0
 8006f9a:	dd03      	ble.n	8006fa4 <__multiply+0x90>
 8006f9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d05b      	beq.n	800705c <__multiply+0x148>
 8006fa4:	6106      	str	r6, [r0, #16]
 8006fa6:	b005      	add	sp, #20
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fac:	f843 2b04 	str.w	r2, [r3], #4
 8006fb0:	e7d8      	b.n	8006f64 <__multiply+0x50>
 8006fb2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fb6:	f1ba 0f00 	cmp.w	sl, #0
 8006fba:	d024      	beq.n	8007006 <__multiply+0xf2>
 8006fbc:	f104 0e14 	add.w	lr, r4, #20
 8006fc0:	46a9      	mov	r9, r5
 8006fc2:	f04f 0c00 	mov.w	ip, #0
 8006fc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006fca:	f8d9 1000 	ldr.w	r1, [r9]
 8006fce:	fa1f fb82 	uxth.w	fp, r2
 8006fd2:	b289      	uxth	r1, r1
 8006fd4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006fd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8006fe0:	4461      	add	r1, ip
 8006fe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fe6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006fea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006fee:	b289      	uxth	r1, r1
 8006ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ff4:	4577      	cmp	r7, lr
 8006ff6:	f849 1b04 	str.w	r1, [r9], #4
 8006ffa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ffe:	d8e2      	bhi.n	8006fc6 <__multiply+0xb2>
 8007000:	9a01      	ldr	r2, [sp, #4]
 8007002:	f845 c002 	str.w	ip, [r5, r2]
 8007006:	9a03      	ldr	r2, [sp, #12]
 8007008:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800700c:	3304      	adds	r3, #4
 800700e:	f1b9 0f00 	cmp.w	r9, #0
 8007012:	d021      	beq.n	8007058 <__multiply+0x144>
 8007014:	6829      	ldr	r1, [r5, #0]
 8007016:	f104 0c14 	add.w	ip, r4, #20
 800701a:	46ae      	mov	lr, r5
 800701c:	f04f 0a00 	mov.w	sl, #0
 8007020:	f8bc b000 	ldrh.w	fp, [ip]
 8007024:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007028:	fb09 220b 	mla	r2, r9, fp, r2
 800702c:	4452      	add	r2, sl
 800702e:	b289      	uxth	r1, r1
 8007030:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007034:	f84e 1b04 	str.w	r1, [lr], #4
 8007038:	f85c 1b04 	ldr.w	r1, [ip], #4
 800703c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007040:	f8be 1000 	ldrh.w	r1, [lr]
 8007044:	fb09 110a 	mla	r1, r9, sl, r1
 8007048:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800704c:	4567      	cmp	r7, ip
 800704e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007052:	d8e5      	bhi.n	8007020 <__multiply+0x10c>
 8007054:	9a01      	ldr	r2, [sp, #4]
 8007056:	50a9      	str	r1, [r5, r2]
 8007058:	3504      	adds	r5, #4
 800705a:	e799      	b.n	8006f90 <__multiply+0x7c>
 800705c:	3e01      	subs	r6, #1
 800705e:	e79b      	b.n	8006f98 <__multiply+0x84>
 8007060:	08008e40 	.word	0x08008e40
 8007064:	08008e51 	.word	0x08008e51

08007068 <__pow5mult>:
 8007068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800706c:	4615      	mov	r5, r2
 800706e:	f012 0203 	ands.w	r2, r2, #3
 8007072:	4606      	mov	r6, r0
 8007074:	460f      	mov	r7, r1
 8007076:	d007      	beq.n	8007088 <__pow5mult+0x20>
 8007078:	4c25      	ldr	r4, [pc, #148]	; (8007110 <__pow5mult+0xa8>)
 800707a:	3a01      	subs	r2, #1
 800707c:	2300      	movs	r3, #0
 800707e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007082:	f7ff fe9d 	bl	8006dc0 <__multadd>
 8007086:	4607      	mov	r7, r0
 8007088:	10ad      	asrs	r5, r5, #2
 800708a:	d03d      	beq.n	8007108 <__pow5mult+0xa0>
 800708c:	69f4      	ldr	r4, [r6, #28]
 800708e:	b97c      	cbnz	r4, 80070b0 <__pow5mult+0x48>
 8007090:	2010      	movs	r0, #16
 8007092:	f7ff fd7f 	bl	8006b94 <malloc>
 8007096:	4602      	mov	r2, r0
 8007098:	61f0      	str	r0, [r6, #28]
 800709a:	b928      	cbnz	r0, 80070a8 <__pow5mult+0x40>
 800709c:	4b1d      	ldr	r3, [pc, #116]	; (8007114 <__pow5mult+0xac>)
 800709e:	481e      	ldr	r0, [pc, #120]	; (8007118 <__pow5mult+0xb0>)
 80070a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80070a4:	f000 fc4c 	bl	8007940 <__assert_func>
 80070a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070ac:	6004      	str	r4, [r0, #0]
 80070ae:	60c4      	str	r4, [r0, #12]
 80070b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80070b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070b8:	b94c      	cbnz	r4, 80070ce <__pow5mult+0x66>
 80070ba:	f240 2171 	movw	r1, #625	; 0x271
 80070be:	4630      	mov	r0, r6
 80070c0:	f7ff ff12 	bl	8006ee8 <__i2b>
 80070c4:	2300      	movs	r3, #0
 80070c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80070ca:	4604      	mov	r4, r0
 80070cc:	6003      	str	r3, [r0, #0]
 80070ce:	f04f 0900 	mov.w	r9, #0
 80070d2:	07eb      	lsls	r3, r5, #31
 80070d4:	d50a      	bpl.n	80070ec <__pow5mult+0x84>
 80070d6:	4639      	mov	r1, r7
 80070d8:	4622      	mov	r2, r4
 80070da:	4630      	mov	r0, r6
 80070dc:	f7ff ff1a 	bl	8006f14 <__multiply>
 80070e0:	4639      	mov	r1, r7
 80070e2:	4680      	mov	r8, r0
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff fe49 	bl	8006d7c <_Bfree>
 80070ea:	4647      	mov	r7, r8
 80070ec:	106d      	asrs	r5, r5, #1
 80070ee:	d00b      	beq.n	8007108 <__pow5mult+0xa0>
 80070f0:	6820      	ldr	r0, [r4, #0]
 80070f2:	b938      	cbnz	r0, 8007104 <__pow5mult+0x9c>
 80070f4:	4622      	mov	r2, r4
 80070f6:	4621      	mov	r1, r4
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7ff ff0b 	bl	8006f14 <__multiply>
 80070fe:	6020      	str	r0, [r4, #0]
 8007100:	f8c0 9000 	str.w	r9, [r0]
 8007104:	4604      	mov	r4, r0
 8007106:	e7e4      	b.n	80070d2 <__pow5mult+0x6a>
 8007108:	4638      	mov	r0, r7
 800710a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710e:	bf00      	nop
 8007110:	08008fa0 	.word	0x08008fa0
 8007114:	08008dd1 	.word	0x08008dd1
 8007118:	08008e51 	.word	0x08008e51

0800711c <__lshift>:
 800711c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007120:	460c      	mov	r4, r1
 8007122:	6849      	ldr	r1, [r1, #4]
 8007124:	6923      	ldr	r3, [r4, #16]
 8007126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800712a:	68a3      	ldr	r3, [r4, #8]
 800712c:	4607      	mov	r7, r0
 800712e:	4691      	mov	r9, r2
 8007130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007134:	f108 0601 	add.w	r6, r8, #1
 8007138:	42b3      	cmp	r3, r6
 800713a:	db0b      	blt.n	8007154 <__lshift+0x38>
 800713c:	4638      	mov	r0, r7
 800713e:	f7ff fddd 	bl	8006cfc <_Balloc>
 8007142:	4605      	mov	r5, r0
 8007144:	b948      	cbnz	r0, 800715a <__lshift+0x3e>
 8007146:	4602      	mov	r2, r0
 8007148:	4b28      	ldr	r3, [pc, #160]	; (80071ec <__lshift+0xd0>)
 800714a:	4829      	ldr	r0, [pc, #164]	; (80071f0 <__lshift+0xd4>)
 800714c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007150:	f000 fbf6 	bl	8007940 <__assert_func>
 8007154:	3101      	adds	r1, #1
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	e7ee      	b.n	8007138 <__lshift+0x1c>
 800715a:	2300      	movs	r3, #0
 800715c:	f100 0114 	add.w	r1, r0, #20
 8007160:	f100 0210 	add.w	r2, r0, #16
 8007164:	4618      	mov	r0, r3
 8007166:	4553      	cmp	r3, sl
 8007168:	db33      	blt.n	80071d2 <__lshift+0xb6>
 800716a:	6920      	ldr	r0, [r4, #16]
 800716c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007170:	f104 0314 	add.w	r3, r4, #20
 8007174:	f019 091f 	ands.w	r9, r9, #31
 8007178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800717c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007180:	d02b      	beq.n	80071da <__lshift+0xbe>
 8007182:	f1c9 0e20 	rsb	lr, r9, #32
 8007186:	468a      	mov	sl, r1
 8007188:	2200      	movs	r2, #0
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	fa00 f009 	lsl.w	r0, r0, r9
 8007190:	4310      	orrs	r0, r2
 8007192:	f84a 0b04 	str.w	r0, [sl], #4
 8007196:	f853 2b04 	ldr.w	r2, [r3], #4
 800719a:	459c      	cmp	ip, r3
 800719c:	fa22 f20e 	lsr.w	r2, r2, lr
 80071a0:	d8f3      	bhi.n	800718a <__lshift+0x6e>
 80071a2:	ebac 0304 	sub.w	r3, ip, r4
 80071a6:	3b15      	subs	r3, #21
 80071a8:	f023 0303 	bic.w	r3, r3, #3
 80071ac:	3304      	adds	r3, #4
 80071ae:	f104 0015 	add.w	r0, r4, #21
 80071b2:	4584      	cmp	ip, r0
 80071b4:	bf38      	it	cc
 80071b6:	2304      	movcc	r3, #4
 80071b8:	50ca      	str	r2, [r1, r3]
 80071ba:	b10a      	cbz	r2, 80071c0 <__lshift+0xa4>
 80071bc:	f108 0602 	add.w	r6, r8, #2
 80071c0:	3e01      	subs	r6, #1
 80071c2:	4638      	mov	r0, r7
 80071c4:	612e      	str	r6, [r5, #16]
 80071c6:	4621      	mov	r1, r4
 80071c8:	f7ff fdd8 	bl	8006d7c <_Bfree>
 80071cc:	4628      	mov	r0, r5
 80071ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80071d6:	3301      	adds	r3, #1
 80071d8:	e7c5      	b.n	8007166 <__lshift+0x4a>
 80071da:	3904      	subs	r1, #4
 80071dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80071e4:	459c      	cmp	ip, r3
 80071e6:	d8f9      	bhi.n	80071dc <__lshift+0xc0>
 80071e8:	e7ea      	b.n	80071c0 <__lshift+0xa4>
 80071ea:	bf00      	nop
 80071ec:	08008e40 	.word	0x08008e40
 80071f0:	08008e51 	.word	0x08008e51

080071f4 <__mcmp>:
 80071f4:	b530      	push	{r4, r5, lr}
 80071f6:	6902      	ldr	r2, [r0, #16]
 80071f8:	690c      	ldr	r4, [r1, #16]
 80071fa:	1b12      	subs	r2, r2, r4
 80071fc:	d10e      	bne.n	800721c <__mcmp+0x28>
 80071fe:	f100 0314 	add.w	r3, r0, #20
 8007202:	3114      	adds	r1, #20
 8007204:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007208:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800720c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007210:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007214:	42a5      	cmp	r5, r4
 8007216:	d003      	beq.n	8007220 <__mcmp+0x2c>
 8007218:	d305      	bcc.n	8007226 <__mcmp+0x32>
 800721a:	2201      	movs	r2, #1
 800721c:	4610      	mov	r0, r2
 800721e:	bd30      	pop	{r4, r5, pc}
 8007220:	4283      	cmp	r3, r0
 8007222:	d3f3      	bcc.n	800720c <__mcmp+0x18>
 8007224:	e7fa      	b.n	800721c <__mcmp+0x28>
 8007226:	f04f 32ff 	mov.w	r2, #4294967295
 800722a:	e7f7      	b.n	800721c <__mcmp+0x28>

0800722c <__mdiff>:
 800722c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007230:	460c      	mov	r4, r1
 8007232:	4606      	mov	r6, r0
 8007234:	4611      	mov	r1, r2
 8007236:	4620      	mov	r0, r4
 8007238:	4690      	mov	r8, r2
 800723a:	f7ff ffdb 	bl	80071f4 <__mcmp>
 800723e:	1e05      	subs	r5, r0, #0
 8007240:	d110      	bne.n	8007264 <__mdiff+0x38>
 8007242:	4629      	mov	r1, r5
 8007244:	4630      	mov	r0, r6
 8007246:	f7ff fd59 	bl	8006cfc <_Balloc>
 800724a:	b930      	cbnz	r0, 800725a <__mdiff+0x2e>
 800724c:	4b3a      	ldr	r3, [pc, #232]	; (8007338 <__mdiff+0x10c>)
 800724e:	4602      	mov	r2, r0
 8007250:	f240 2137 	movw	r1, #567	; 0x237
 8007254:	4839      	ldr	r0, [pc, #228]	; (800733c <__mdiff+0x110>)
 8007256:	f000 fb73 	bl	8007940 <__assert_func>
 800725a:	2301      	movs	r3, #1
 800725c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007264:	bfa4      	itt	ge
 8007266:	4643      	movge	r3, r8
 8007268:	46a0      	movge	r8, r4
 800726a:	4630      	mov	r0, r6
 800726c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007270:	bfa6      	itte	ge
 8007272:	461c      	movge	r4, r3
 8007274:	2500      	movge	r5, #0
 8007276:	2501      	movlt	r5, #1
 8007278:	f7ff fd40 	bl	8006cfc <_Balloc>
 800727c:	b920      	cbnz	r0, 8007288 <__mdiff+0x5c>
 800727e:	4b2e      	ldr	r3, [pc, #184]	; (8007338 <__mdiff+0x10c>)
 8007280:	4602      	mov	r2, r0
 8007282:	f240 2145 	movw	r1, #581	; 0x245
 8007286:	e7e5      	b.n	8007254 <__mdiff+0x28>
 8007288:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800728c:	6926      	ldr	r6, [r4, #16]
 800728e:	60c5      	str	r5, [r0, #12]
 8007290:	f104 0914 	add.w	r9, r4, #20
 8007294:	f108 0514 	add.w	r5, r8, #20
 8007298:	f100 0e14 	add.w	lr, r0, #20
 800729c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80072a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072a4:	f108 0210 	add.w	r2, r8, #16
 80072a8:	46f2      	mov	sl, lr
 80072aa:	2100      	movs	r1, #0
 80072ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80072b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80072b4:	fa11 f88b 	uxtah	r8, r1, fp
 80072b8:	b299      	uxth	r1, r3
 80072ba:	0c1b      	lsrs	r3, r3, #16
 80072bc:	eba8 0801 	sub.w	r8, r8, r1
 80072c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072c8:	fa1f f888 	uxth.w	r8, r8
 80072cc:	1419      	asrs	r1, r3, #16
 80072ce:	454e      	cmp	r6, r9
 80072d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80072d4:	f84a 3b04 	str.w	r3, [sl], #4
 80072d8:	d8e8      	bhi.n	80072ac <__mdiff+0x80>
 80072da:	1b33      	subs	r3, r6, r4
 80072dc:	3b15      	subs	r3, #21
 80072de:	f023 0303 	bic.w	r3, r3, #3
 80072e2:	3304      	adds	r3, #4
 80072e4:	3415      	adds	r4, #21
 80072e6:	42a6      	cmp	r6, r4
 80072e8:	bf38      	it	cc
 80072ea:	2304      	movcc	r3, #4
 80072ec:	441d      	add	r5, r3
 80072ee:	4473      	add	r3, lr
 80072f0:	469e      	mov	lr, r3
 80072f2:	462e      	mov	r6, r5
 80072f4:	4566      	cmp	r6, ip
 80072f6:	d30e      	bcc.n	8007316 <__mdiff+0xea>
 80072f8:	f10c 0203 	add.w	r2, ip, #3
 80072fc:	1b52      	subs	r2, r2, r5
 80072fe:	f022 0203 	bic.w	r2, r2, #3
 8007302:	3d03      	subs	r5, #3
 8007304:	45ac      	cmp	ip, r5
 8007306:	bf38      	it	cc
 8007308:	2200      	movcc	r2, #0
 800730a:	4413      	add	r3, r2
 800730c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007310:	b17a      	cbz	r2, 8007332 <__mdiff+0x106>
 8007312:	6107      	str	r7, [r0, #16]
 8007314:	e7a4      	b.n	8007260 <__mdiff+0x34>
 8007316:	f856 8b04 	ldr.w	r8, [r6], #4
 800731a:	fa11 f288 	uxtah	r2, r1, r8
 800731e:	1414      	asrs	r4, r2, #16
 8007320:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007324:	b292      	uxth	r2, r2
 8007326:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800732a:	f84e 2b04 	str.w	r2, [lr], #4
 800732e:	1421      	asrs	r1, r4, #16
 8007330:	e7e0      	b.n	80072f4 <__mdiff+0xc8>
 8007332:	3f01      	subs	r7, #1
 8007334:	e7ea      	b.n	800730c <__mdiff+0xe0>
 8007336:	bf00      	nop
 8007338:	08008e40 	.word	0x08008e40
 800733c:	08008e51 	.word	0x08008e51

08007340 <__d2b>:
 8007340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007344:	460f      	mov	r7, r1
 8007346:	2101      	movs	r1, #1
 8007348:	ec59 8b10 	vmov	r8, r9, d0
 800734c:	4616      	mov	r6, r2
 800734e:	f7ff fcd5 	bl	8006cfc <_Balloc>
 8007352:	4604      	mov	r4, r0
 8007354:	b930      	cbnz	r0, 8007364 <__d2b+0x24>
 8007356:	4602      	mov	r2, r0
 8007358:	4b24      	ldr	r3, [pc, #144]	; (80073ec <__d2b+0xac>)
 800735a:	4825      	ldr	r0, [pc, #148]	; (80073f0 <__d2b+0xb0>)
 800735c:	f240 310f 	movw	r1, #783	; 0x30f
 8007360:	f000 faee 	bl	8007940 <__assert_func>
 8007364:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007368:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800736c:	bb2d      	cbnz	r5, 80073ba <__d2b+0x7a>
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	f1b8 0300 	subs.w	r3, r8, #0
 8007374:	d026      	beq.n	80073c4 <__d2b+0x84>
 8007376:	4668      	mov	r0, sp
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	f7ff fd87 	bl	8006e8c <__lo0bits>
 800737e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007382:	b1e8      	cbz	r0, 80073c0 <__d2b+0x80>
 8007384:	f1c0 0320 	rsb	r3, r0, #32
 8007388:	fa02 f303 	lsl.w	r3, r2, r3
 800738c:	430b      	orrs	r3, r1
 800738e:	40c2      	lsrs	r2, r0
 8007390:	6163      	str	r3, [r4, #20]
 8007392:	9201      	str	r2, [sp, #4]
 8007394:	9b01      	ldr	r3, [sp, #4]
 8007396:	61a3      	str	r3, [r4, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	bf14      	ite	ne
 800739c:	2202      	movne	r2, #2
 800739e:	2201      	moveq	r2, #1
 80073a0:	6122      	str	r2, [r4, #16]
 80073a2:	b1bd      	cbz	r5, 80073d4 <__d2b+0x94>
 80073a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073a8:	4405      	add	r5, r0
 80073aa:	603d      	str	r5, [r7, #0]
 80073ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073b0:	6030      	str	r0, [r6, #0]
 80073b2:	4620      	mov	r0, r4
 80073b4:	b003      	add	sp, #12
 80073b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073be:	e7d6      	b.n	800736e <__d2b+0x2e>
 80073c0:	6161      	str	r1, [r4, #20]
 80073c2:	e7e7      	b.n	8007394 <__d2b+0x54>
 80073c4:	a801      	add	r0, sp, #4
 80073c6:	f7ff fd61 	bl	8006e8c <__lo0bits>
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	6163      	str	r3, [r4, #20]
 80073ce:	3020      	adds	r0, #32
 80073d0:	2201      	movs	r2, #1
 80073d2:	e7e5      	b.n	80073a0 <__d2b+0x60>
 80073d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073dc:	6038      	str	r0, [r7, #0]
 80073de:	6918      	ldr	r0, [r3, #16]
 80073e0:	f7ff fd34 	bl	8006e4c <__hi0bits>
 80073e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073e8:	e7e2      	b.n	80073b0 <__d2b+0x70>
 80073ea:	bf00      	nop
 80073ec:	08008e40 	.word	0x08008e40
 80073f0:	08008e51 	.word	0x08008e51

080073f4 <__sfputc_r>:
 80073f4:	6893      	ldr	r3, [r2, #8]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	b410      	push	{r4}
 80073fc:	6093      	str	r3, [r2, #8]
 80073fe:	da08      	bge.n	8007412 <__sfputc_r+0x1e>
 8007400:	6994      	ldr	r4, [r2, #24]
 8007402:	42a3      	cmp	r3, r4
 8007404:	db01      	blt.n	800740a <__sfputc_r+0x16>
 8007406:	290a      	cmp	r1, #10
 8007408:	d103      	bne.n	8007412 <__sfputc_r+0x1e>
 800740a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800740e:	f000 b9e3 	b.w	80077d8 <__swbuf_r>
 8007412:	6813      	ldr	r3, [r2, #0]
 8007414:	1c58      	adds	r0, r3, #1
 8007416:	6010      	str	r0, [r2, #0]
 8007418:	7019      	strb	r1, [r3, #0]
 800741a:	4608      	mov	r0, r1
 800741c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007420:	4770      	bx	lr

08007422 <__sfputs_r>:
 8007422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007424:	4606      	mov	r6, r0
 8007426:	460f      	mov	r7, r1
 8007428:	4614      	mov	r4, r2
 800742a:	18d5      	adds	r5, r2, r3
 800742c:	42ac      	cmp	r4, r5
 800742e:	d101      	bne.n	8007434 <__sfputs_r+0x12>
 8007430:	2000      	movs	r0, #0
 8007432:	e007      	b.n	8007444 <__sfputs_r+0x22>
 8007434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007438:	463a      	mov	r2, r7
 800743a:	4630      	mov	r0, r6
 800743c:	f7ff ffda 	bl	80073f4 <__sfputc_r>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d1f3      	bne.n	800742c <__sfputs_r+0xa>
 8007444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007448 <_vfiprintf_r>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	460d      	mov	r5, r1
 800744e:	b09d      	sub	sp, #116	; 0x74
 8007450:	4614      	mov	r4, r2
 8007452:	4698      	mov	r8, r3
 8007454:	4606      	mov	r6, r0
 8007456:	b118      	cbz	r0, 8007460 <_vfiprintf_r+0x18>
 8007458:	6a03      	ldr	r3, [r0, #32]
 800745a:	b90b      	cbnz	r3, 8007460 <_vfiprintf_r+0x18>
 800745c:	f7fe fbc8 	bl	8005bf0 <__sinit>
 8007460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	d405      	bmi.n	8007472 <_vfiprintf_r+0x2a>
 8007466:	89ab      	ldrh	r3, [r5, #12]
 8007468:	059a      	lsls	r2, r3, #22
 800746a:	d402      	bmi.n	8007472 <_vfiprintf_r+0x2a>
 800746c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800746e:	f7fe fcc8 	bl	8005e02 <__retarget_lock_acquire_recursive>
 8007472:	89ab      	ldrh	r3, [r5, #12]
 8007474:	071b      	lsls	r3, r3, #28
 8007476:	d501      	bpl.n	800747c <_vfiprintf_r+0x34>
 8007478:	692b      	ldr	r3, [r5, #16]
 800747a:	b99b      	cbnz	r3, 80074a4 <_vfiprintf_r+0x5c>
 800747c:	4629      	mov	r1, r5
 800747e:	4630      	mov	r0, r6
 8007480:	f000 f9e8 	bl	8007854 <__swsetup_r>
 8007484:	b170      	cbz	r0, 80074a4 <_vfiprintf_r+0x5c>
 8007486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007488:	07dc      	lsls	r4, r3, #31
 800748a:	d504      	bpl.n	8007496 <_vfiprintf_r+0x4e>
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	b01d      	add	sp, #116	; 0x74
 8007492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007496:	89ab      	ldrh	r3, [r5, #12]
 8007498:	0598      	lsls	r0, r3, #22
 800749a:	d4f7      	bmi.n	800748c <_vfiprintf_r+0x44>
 800749c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800749e:	f7fe fcb1 	bl	8005e04 <__retarget_lock_release_recursive>
 80074a2:	e7f3      	b.n	800748c <_vfiprintf_r+0x44>
 80074a4:	2300      	movs	r3, #0
 80074a6:	9309      	str	r3, [sp, #36]	; 0x24
 80074a8:	2320      	movs	r3, #32
 80074aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80074b2:	2330      	movs	r3, #48	; 0x30
 80074b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007668 <_vfiprintf_r+0x220>
 80074b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074bc:	f04f 0901 	mov.w	r9, #1
 80074c0:	4623      	mov	r3, r4
 80074c2:	469a      	mov	sl, r3
 80074c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074c8:	b10a      	cbz	r2, 80074ce <_vfiprintf_r+0x86>
 80074ca:	2a25      	cmp	r2, #37	; 0x25
 80074cc:	d1f9      	bne.n	80074c2 <_vfiprintf_r+0x7a>
 80074ce:	ebba 0b04 	subs.w	fp, sl, r4
 80074d2:	d00b      	beq.n	80074ec <_vfiprintf_r+0xa4>
 80074d4:	465b      	mov	r3, fp
 80074d6:	4622      	mov	r2, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	4630      	mov	r0, r6
 80074dc:	f7ff ffa1 	bl	8007422 <__sfputs_r>
 80074e0:	3001      	adds	r0, #1
 80074e2:	f000 80a9 	beq.w	8007638 <_vfiprintf_r+0x1f0>
 80074e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074e8:	445a      	add	r2, fp
 80074ea:	9209      	str	r2, [sp, #36]	; 0x24
 80074ec:	f89a 3000 	ldrb.w	r3, [sl]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 80a1 	beq.w	8007638 <_vfiprintf_r+0x1f0>
 80074f6:	2300      	movs	r3, #0
 80074f8:	f04f 32ff 	mov.w	r2, #4294967295
 80074fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007500:	f10a 0a01 	add.w	sl, sl, #1
 8007504:	9304      	str	r3, [sp, #16]
 8007506:	9307      	str	r3, [sp, #28]
 8007508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800750c:	931a      	str	r3, [sp, #104]	; 0x68
 800750e:	4654      	mov	r4, sl
 8007510:	2205      	movs	r2, #5
 8007512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007516:	4854      	ldr	r0, [pc, #336]	; (8007668 <_vfiprintf_r+0x220>)
 8007518:	f7f8 fe62 	bl	80001e0 <memchr>
 800751c:	9a04      	ldr	r2, [sp, #16]
 800751e:	b9d8      	cbnz	r0, 8007558 <_vfiprintf_r+0x110>
 8007520:	06d1      	lsls	r1, r2, #27
 8007522:	bf44      	itt	mi
 8007524:	2320      	movmi	r3, #32
 8007526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800752a:	0713      	lsls	r3, r2, #28
 800752c:	bf44      	itt	mi
 800752e:	232b      	movmi	r3, #43	; 0x2b
 8007530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007534:	f89a 3000 	ldrb.w	r3, [sl]
 8007538:	2b2a      	cmp	r3, #42	; 0x2a
 800753a:	d015      	beq.n	8007568 <_vfiprintf_r+0x120>
 800753c:	9a07      	ldr	r2, [sp, #28]
 800753e:	4654      	mov	r4, sl
 8007540:	2000      	movs	r0, #0
 8007542:	f04f 0c0a 	mov.w	ip, #10
 8007546:	4621      	mov	r1, r4
 8007548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800754c:	3b30      	subs	r3, #48	; 0x30
 800754e:	2b09      	cmp	r3, #9
 8007550:	d94d      	bls.n	80075ee <_vfiprintf_r+0x1a6>
 8007552:	b1b0      	cbz	r0, 8007582 <_vfiprintf_r+0x13a>
 8007554:	9207      	str	r2, [sp, #28]
 8007556:	e014      	b.n	8007582 <_vfiprintf_r+0x13a>
 8007558:	eba0 0308 	sub.w	r3, r0, r8
 800755c:	fa09 f303 	lsl.w	r3, r9, r3
 8007560:	4313      	orrs	r3, r2
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	46a2      	mov	sl, r4
 8007566:	e7d2      	b.n	800750e <_vfiprintf_r+0xc6>
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	1d19      	adds	r1, r3, #4
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	9103      	str	r1, [sp, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	bfbb      	ittet	lt
 8007574:	425b      	neglt	r3, r3
 8007576:	f042 0202 	orrlt.w	r2, r2, #2
 800757a:	9307      	strge	r3, [sp, #28]
 800757c:	9307      	strlt	r3, [sp, #28]
 800757e:	bfb8      	it	lt
 8007580:	9204      	strlt	r2, [sp, #16]
 8007582:	7823      	ldrb	r3, [r4, #0]
 8007584:	2b2e      	cmp	r3, #46	; 0x2e
 8007586:	d10c      	bne.n	80075a2 <_vfiprintf_r+0x15a>
 8007588:	7863      	ldrb	r3, [r4, #1]
 800758a:	2b2a      	cmp	r3, #42	; 0x2a
 800758c:	d134      	bne.n	80075f8 <_vfiprintf_r+0x1b0>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	1d1a      	adds	r2, r3, #4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	9203      	str	r2, [sp, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	bfb8      	it	lt
 800759a:	f04f 33ff 	movlt.w	r3, #4294967295
 800759e:	3402      	adds	r4, #2
 80075a0:	9305      	str	r3, [sp, #20]
 80075a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007678 <_vfiprintf_r+0x230>
 80075a6:	7821      	ldrb	r1, [r4, #0]
 80075a8:	2203      	movs	r2, #3
 80075aa:	4650      	mov	r0, sl
 80075ac:	f7f8 fe18 	bl	80001e0 <memchr>
 80075b0:	b138      	cbz	r0, 80075c2 <_vfiprintf_r+0x17a>
 80075b2:	9b04      	ldr	r3, [sp, #16]
 80075b4:	eba0 000a 	sub.w	r0, r0, sl
 80075b8:	2240      	movs	r2, #64	; 0x40
 80075ba:	4082      	lsls	r2, r0
 80075bc:	4313      	orrs	r3, r2
 80075be:	3401      	adds	r4, #1
 80075c0:	9304      	str	r3, [sp, #16]
 80075c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c6:	4829      	ldr	r0, [pc, #164]	; (800766c <_vfiprintf_r+0x224>)
 80075c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075cc:	2206      	movs	r2, #6
 80075ce:	f7f8 fe07 	bl	80001e0 <memchr>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d03f      	beq.n	8007656 <_vfiprintf_r+0x20e>
 80075d6:	4b26      	ldr	r3, [pc, #152]	; (8007670 <_vfiprintf_r+0x228>)
 80075d8:	bb1b      	cbnz	r3, 8007622 <_vfiprintf_r+0x1da>
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	3307      	adds	r3, #7
 80075de:	f023 0307 	bic.w	r3, r3, #7
 80075e2:	3308      	adds	r3, #8
 80075e4:	9303      	str	r3, [sp, #12]
 80075e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e8:	443b      	add	r3, r7
 80075ea:	9309      	str	r3, [sp, #36]	; 0x24
 80075ec:	e768      	b.n	80074c0 <_vfiprintf_r+0x78>
 80075ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80075f2:	460c      	mov	r4, r1
 80075f4:	2001      	movs	r0, #1
 80075f6:	e7a6      	b.n	8007546 <_vfiprintf_r+0xfe>
 80075f8:	2300      	movs	r3, #0
 80075fa:	3401      	adds	r4, #1
 80075fc:	9305      	str	r3, [sp, #20]
 80075fe:	4619      	mov	r1, r3
 8007600:	f04f 0c0a 	mov.w	ip, #10
 8007604:	4620      	mov	r0, r4
 8007606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800760a:	3a30      	subs	r2, #48	; 0x30
 800760c:	2a09      	cmp	r2, #9
 800760e:	d903      	bls.n	8007618 <_vfiprintf_r+0x1d0>
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0c6      	beq.n	80075a2 <_vfiprintf_r+0x15a>
 8007614:	9105      	str	r1, [sp, #20]
 8007616:	e7c4      	b.n	80075a2 <_vfiprintf_r+0x15a>
 8007618:	fb0c 2101 	mla	r1, ip, r1, r2
 800761c:	4604      	mov	r4, r0
 800761e:	2301      	movs	r3, #1
 8007620:	e7f0      	b.n	8007604 <_vfiprintf_r+0x1bc>
 8007622:	ab03      	add	r3, sp, #12
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	462a      	mov	r2, r5
 8007628:	4b12      	ldr	r3, [pc, #72]	; (8007674 <_vfiprintf_r+0x22c>)
 800762a:	a904      	add	r1, sp, #16
 800762c:	4630      	mov	r0, r6
 800762e:	f7fd fe8d 	bl	800534c <_printf_float>
 8007632:	4607      	mov	r7, r0
 8007634:	1c78      	adds	r0, r7, #1
 8007636:	d1d6      	bne.n	80075e6 <_vfiprintf_r+0x19e>
 8007638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800763a:	07d9      	lsls	r1, r3, #31
 800763c:	d405      	bmi.n	800764a <_vfiprintf_r+0x202>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	059a      	lsls	r2, r3, #22
 8007642:	d402      	bmi.n	800764a <_vfiprintf_r+0x202>
 8007644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007646:	f7fe fbdd 	bl	8005e04 <__retarget_lock_release_recursive>
 800764a:	89ab      	ldrh	r3, [r5, #12]
 800764c:	065b      	lsls	r3, r3, #25
 800764e:	f53f af1d 	bmi.w	800748c <_vfiprintf_r+0x44>
 8007652:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007654:	e71c      	b.n	8007490 <_vfiprintf_r+0x48>
 8007656:	ab03      	add	r3, sp, #12
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	462a      	mov	r2, r5
 800765c:	4b05      	ldr	r3, [pc, #20]	; (8007674 <_vfiprintf_r+0x22c>)
 800765e:	a904      	add	r1, sp, #16
 8007660:	4630      	mov	r0, r6
 8007662:	f7fe f917 	bl	8005894 <_printf_i>
 8007666:	e7e4      	b.n	8007632 <_vfiprintf_r+0x1ea>
 8007668:	08008fac 	.word	0x08008fac
 800766c:	08008fb6 	.word	0x08008fb6
 8007670:	0800534d 	.word	0x0800534d
 8007674:	08007423 	.word	0x08007423
 8007678:	08008fb2 	.word	0x08008fb2

0800767c <__sflush_r>:
 800767c:	898a      	ldrh	r2, [r1, #12]
 800767e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007682:	4605      	mov	r5, r0
 8007684:	0710      	lsls	r0, r2, #28
 8007686:	460c      	mov	r4, r1
 8007688:	d458      	bmi.n	800773c <__sflush_r+0xc0>
 800768a:	684b      	ldr	r3, [r1, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	dc05      	bgt.n	800769c <__sflush_r+0x20>
 8007690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007692:	2b00      	cmp	r3, #0
 8007694:	dc02      	bgt.n	800769c <__sflush_r+0x20>
 8007696:	2000      	movs	r0, #0
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800769e:	2e00      	cmp	r6, #0
 80076a0:	d0f9      	beq.n	8007696 <__sflush_r+0x1a>
 80076a2:	2300      	movs	r3, #0
 80076a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076a8:	682f      	ldr	r7, [r5, #0]
 80076aa:	6a21      	ldr	r1, [r4, #32]
 80076ac:	602b      	str	r3, [r5, #0]
 80076ae:	d032      	beq.n	8007716 <__sflush_r+0x9a>
 80076b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	075a      	lsls	r2, r3, #29
 80076b6:	d505      	bpl.n	80076c4 <__sflush_r+0x48>
 80076b8:	6863      	ldr	r3, [r4, #4]
 80076ba:	1ac0      	subs	r0, r0, r3
 80076bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076be:	b10b      	cbz	r3, 80076c4 <__sflush_r+0x48>
 80076c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076c2:	1ac0      	subs	r0, r0, r3
 80076c4:	2300      	movs	r3, #0
 80076c6:	4602      	mov	r2, r0
 80076c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ca:	6a21      	ldr	r1, [r4, #32]
 80076cc:	4628      	mov	r0, r5
 80076ce:	47b0      	blx	r6
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	d106      	bne.n	80076e4 <__sflush_r+0x68>
 80076d6:	6829      	ldr	r1, [r5, #0]
 80076d8:	291d      	cmp	r1, #29
 80076da:	d82b      	bhi.n	8007734 <__sflush_r+0xb8>
 80076dc:	4a29      	ldr	r2, [pc, #164]	; (8007784 <__sflush_r+0x108>)
 80076de:	410a      	asrs	r2, r1
 80076e0:	07d6      	lsls	r6, r2, #31
 80076e2:	d427      	bmi.n	8007734 <__sflush_r+0xb8>
 80076e4:	2200      	movs	r2, #0
 80076e6:	6062      	str	r2, [r4, #4]
 80076e8:	04d9      	lsls	r1, r3, #19
 80076ea:	6922      	ldr	r2, [r4, #16]
 80076ec:	6022      	str	r2, [r4, #0]
 80076ee:	d504      	bpl.n	80076fa <__sflush_r+0x7e>
 80076f0:	1c42      	adds	r2, r0, #1
 80076f2:	d101      	bne.n	80076f8 <__sflush_r+0x7c>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	b903      	cbnz	r3, 80076fa <__sflush_r+0x7e>
 80076f8:	6560      	str	r0, [r4, #84]	; 0x54
 80076fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076fc:	602f      	str	r7, [r5, #0]
 80076fe:	2900      	cmp	r1, #0
 8007700:	d0c9      	beq.n	8007696 <__sflush_r+0x1a>
 8007702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007706:	4299      	cmp	r1, r3
 8007708:	d002      	beq.n	8007710 <__sflush_r+0x94>
 800770a:	4628      	mov	r0, r5
 800770c:	f7ff f9f6 	bl	8006afc <_free_r>
 8007710:	2000      	movs	r0, #0
 8007712:	6360      	str	r0, [r4, #52]	; 0x34
 8007714:	e7c0      	b.n	8007698 <__sflush_r+0x1c>
 8007716:	2301      	movs	r3, #1
 8007718:	4628      	mov	r0, r5
 800771a:	47b0      	blx	r6
 800771c:	1c41      	adds	r1, r0, #1
 800771e:	d1c8      	bne.n	80076b2 <__sflush_r+0x36>
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0c5      	beq.n	80076b2 <__sflush_r+0x36>
 8007726:	2b1d      	cmp	r3, #29
 8007728:	d001      	beq.n	800772e <__sflush_r+0xb2>
 800772a:	2b16      	cmp	r3, #22
 800772c:	d101      	bne.n	8007732 <__sflush_r+0xb6>
 800772e:	602f      	str	r7, [r5, #0]
 8007730:	e7b1      	b.n	8007696 <__sflush_r+0x1a>
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007738:	81a3      	strh	r3, [r4, #12]
 800773a:	e7ad      	b.n	8007698 <__sflush_r+0x1c>
 800773c:	690f      	ldr	r7, [r1, #16]
 800773e:	2f00      	cmp	r7, #0
 8007740:	d0a9      	beq.n	8007696 <__sflush_r+0x1a>
 8007742:	0793      	lsls	r3, r2, #30
 8007744:	680e      	ldr	r6, [r1, #0]
 8007746:	bf08      	it	eq
 8007748:	694b      	ldreq	r3, [r1, #20]
 800774a:	600f      	str	r7, [r1, #0]
 800774c:	bf18      	it	ne
 800774e:	2300      	movne	r3, #0
 8007750:	eba6 0807 	sub.w	r8, r6, r7
 8007754:	608b      	str	r3, [r1, #8]
 8007756:	f1b8 0f00 	cmp.w	r8, #0
 800775a:	dd9c      	ble.n	8007696 <__sflush_r+0x1a>
 800775c:	6a21      	ldr	r1, [r4, #32]
 800775e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007760:	4643      	mov	r3, r8
 8007762:	463a      	mov	r2, r7
 8007764:	4628      	mov	r0, r5
 8007766:	47b0      	blx	r6
 8007768:	2800      	cmp	r0, #0
 800776a:	dc06      	bgt.n	800777a <__sflush_r+0xfe>
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007772:	81a3      	strh	r3, [r4, #12]
 8007774:	f04f 30ff 	mov.w	r0, #4294967295
 8007778:	e78e      	b.n	8007698 <__sflush_r+0x1c>
 800777a:	4407      	add	r7, r0
 800777c:	eba8 0800 	sub.w	r8, r8, r0
 8007780:	e7e9      	b.n	8007756 <__sflush_r+0xda>
 8007782:	bf00      	nop
 8007784:	dfbffffe 	.word	0xdfbffffe

08007788 <_fflush_r>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	690b      	ldr	r3, [r1, #16]
 800778c:	4605      	mov	r5, r0
 800778e:	460c      	mov	r4, r1
 8007790:	b913      	cbnz	r3, 8007798 <_fflush_r+0x10>
 8007792:	2500      	movs	r5, #0
 8007794:	4628      	mov	r0, r5
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	b118      	cbz	r0, 80077a2 <_fflush_r+0x1a>
 800779a:	6a03      	ldr	r3, [r0, #32]
 800779c:	b90b      	cbnz	r3, 80077a2 <_fflush_r+0x1a>
 800779e:	f7fe fa27 	bl	8005bf0 <__sinit>
 80077a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0f3      	beq.n	8007792 <_fflush_r+0xa>
 80077aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077ac:	07d0      	lsls	r0, r2, #31
 80077ae:	d404      	bmi.n	80077ba <_fflush_r+0x32>
 80077b0:	0599      	lsls	r1, r3, #22
 80077b2:	d402      	bmi.n	80077ba <_fflush_r+0x32>
 80077b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077b6:	f7fe fb24 	bl	8005e02 <__retarget_lock_acquire_recursive>
 80077ba:	4628      	mov	r0, r5
 80077bc:	4621      	mov	r1, r4
 80077be:	f7ff ff5d 	bl	800767c <__sflush_r>
 80077c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077c4:	07da      	lsls	r2, r3, #31
 80077c6:	4605      	mov	r5, r0
 80077c8:	d4e4      	bmi.n	8007794 <_fflush_r+0xc>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	059b      	lsls	r3, r3, #22
 80077ce:	d4e1      	bmi.n	8007794 <_fflush_r+0xc>
 80077d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077d2:	f7fe fb17 	bl	8005e04 <__retarget_lock_release_recursive>
 80077d6:	e7dd      	b.n	8007794 <_fflush_r+0xc>

080077d8 <__swbuf_r>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	460e      	mov	r6, r1
 80077dc:	4614      	mov	r4, r2
 80077de:	4605      	mov	r5, r0
 80077e0:	b118      	cbz	r0, 80077ea <__swbuf_r+0x12>
 80077e2:	6a03      	ldr	r3, [r0, #32]
 80077e4:	b90b      	cbnz	r3, 80077ea <__swbuf_r+0x12>
 80077e6:	f7fe fa03 	bl	8005bf0 <__sinit>
 80077ea:	69a3      	ldr	r3, [r4, #24]
 80077ec:	60a3      	str	r3, [r4, #8]
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	071a      	lsls	r2, r3, #28
 80077f2:	d525      	bpl.n	8007840 <__swbuf_r+0x68>
 80077f4:	6923      	ldr	r3, [r4, #16]
 80077f6:	b31b      	cbz	r3, 8007840 <__swbuf_r+0x68>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	6922      	ldr	r2, [r4, #16]
 80077fc:	1a98      	subs	r0, r3, r2
 80077fe:	6963      	ldr	r3, [r4, #20]
 8007800:	b2f6      	uxtb	r6, r6
 8007802:	4283      	cmp	r3, r0
 8007804:	4637      	mov	r7, r6
 8007806:	dc04      	bgt.n	8007812 <__swbuf_r+0x3a>
 8007808:	4621      	mov	r1, r4
 800780a:	4628      	mov	r0, r5
 800780c:	f7ff ffbc 	bl	8007788 <_fflush_r>
 8007810:	b9e0      	cbnz	r0, 800784c <__swbuf_r+0x74>
 8007812:	68a3      	ldr	r3, [r4, #8]
 8007814:	3b01      	subs	r3, #1
 8007816:	60a3      	str	r3, [r4, #8]
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	6022      	str	r2, [r4, #0]
 800781e:	701e      	strb	r6, [r3, #0]
 8007820:	6962      	ldr	r2, [r4, #20]
 8007822:	1c43      	adds	r3, r0, #1
 8007824:	429a      	cmp	r2, r3
 8007826:	d004      	beq.n	8007832 <__swbuf_r+0x5a>
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	07db      	lsls	r3, r3, #31
 800782c:	d506      	bpl.n	800783c <__swbuf_r+0x64>
 800782e:	2e0a      	cmp	r6, #10
 8007830:	d104      	bne.n	800783c <__swbuf_r+0x64>
 8007832:	4621      	mov	r1, r4
 8007834:	4628      	mov	r0, r5
 8007836:	f7ff ffa7 	bl	8007788 <_fflush_r>
 800783a:	b938      	cbnz	r0, 800784c <__swbuf_r+0x74>
 800783c:	4638      	mov	r0, r7
 800783e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007840:	4621      	mov	r1, r4
 8007842:	4628      	mov	r0, r5
 8007844:	f000 f806 	bl	8007854 <__swsetup_r>
 8007848:	2800      	cmp	r0, #0
 800784a:	d0d5      	beq.n	80077f8 <__swbuf_r+0x20>
 800784c:	f04f 37ff 	mov.w	r7, #4294967295
 8007850:	e7f4      	b.n	800783c <__swbuf_r+0x64>
	...

08007854 <__swsetup_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	4b2a      	ldr	r3, [pc, #168]	; (8007900 <__swsetup_r+0xac>)
 8007858:	4605      	mov	r5, r0
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	460c      	mov	r4, r1
 800785e:	b118      	cbz	r0, 8007868 <__swsetup_r+0x14>
 8007860:	6a03      	ldr	r3, [r0, #32]
 8007862:	b90b      	cbnz	r3, 8007868 <__swsetup_r+0x14>
 8007864:	f7fe f9c4 	bl	8005bf0 <__sinit>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800786e:	0718      	lsls	r0, r3, #28
 8007870:	d422      	bmi.n	80078b8 <__swsetup_r+0x64>
 8007872:	06d9      	lsls	r1, r3, #27
 8007874:	d407      	bmi.n	8007886 <__swsetup_r+0x32>
 8007876:	2309      	movs	r3, #9
 8007878:	602b      	str	r3, [r5, #0]
 800787a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800787e:	81a3      	strh	r3, [r4, #12]
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	e034      	b.n	80078f0 <__swsetup_r+0x9c>
 8007886:	0758      	lsls	r0, r3, #29
 8007888:	d512      	bpl.n	80078b0 <__swsetup_r+0x5c>
 800788a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800788c:	b141      	cbz	r1, 80078a0 <__swsetup_r+0x4c>
 800788e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007892:	4299      	cmp	r1, r3
 8007894:	d002      	beq.n	800789c <__swsetup_r+0x48>
 8007896:	4628      	mov	r0, r5
 8007898:	f7ff f930 	bl	8006afc <_free_r>
 800789c:	2300      	movs	r3, #0
 800789e:	6363      	str	r3, [r4, #52]	; 0x34
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	2300      	movs	r3, #0
 80078aa:	6063      	str	r3, [r4, #4]
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	f043 0308 	orr.w	r3, r3, #8
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	b94b      	cbnz	r3, 80078d0 <__swsetup_r+0x7c>
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c6:	d003      	beq.n	80078d0 <__swsetup_r+0x7c>
 80078c8:	4621      	mov	r1, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	f000 f8c4 	bl	8007a58 <__smakebuf_r>
 80078d0:	89a0      	ldrh	r0, [r4, #12]
 80078d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078d6:	f010 0301 	ands.w	r3, r0, #1
 80078da:	d00a      	beq.n	80078f2 <__swsetup_r+0x9e>
 80078dc:	2300      	movs	r3, #0
 80078de:	60a3      	str	r3, [r4, #8]
 80078e0:	6963      	ldr	r3, [r4, #20]
 80078e2:	425b      	negs	r3, r3
 80078e4:	61a3      	str	r3, [r4, #24]
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	b943      	cbnz	r3, 80078fc <__swsetup_r+0xa8>
 80078ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078ee:	d1c4      	bne.n	800787a <__swsetup_r+0x26>
 80078f0:	bd38      	pop	{r3, r4, r5, pc}
 80078f2:	0781      	lsls	r1, r0, #30
 80078f4:	bf58      	it	pl
 80078f6:	6963      	ldrpl	r3, [r4, #20]
 80078f8:	60a3      	str	r3, [r4, #8]
 80078fa:	e7f4      	b.n	80078e6 <__swsetup_r+0x92>
 80078fc:	2000      	movs	r0, #0
 80078fe:	e7f7      	b.n	80078f0 <__swsetup_r+0x9c>
 8007900:	20000064 	.word	0x20000064

08007904 <_sbrk_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d06      	ldr	r5, [pc, #24]	; (8007920 <_sbrk_r+0x1c>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	f7fb f8f0 	bl	8002af4 <_sbrk>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_sbrk_r+0x1a>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_sbrk_r+0x1a>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	20000580 	.word	0x20000580

08007924 <memcpy>:
 8007924:	440a      	add	r2, r1
 8007926:	4291      	cmp	r1, r2
 8007928:	f100 33ff 	add.w	r3, r0, #4294967295
 800792c:	d100      	bne.n	8007930 <memcpy+0xc>
 800792e:	4770      	bx	lr
 8007930:	b510      	push	{r4, lr}
 8007932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800793a:	4291      	cmp	r1, r2
 800793c:	d1f9      	bne.n	8007932 <memcpy+0xe>
 800793e:	bd10      	pop	{r4, pc}

08007940 <__assert_func>:
 8007940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007942:	4614      	mov	r4, r2
 8007944:	461a      	mov	r2, r3
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <__assert_func+0x2c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4605      	mov	r5, r0
 800794c:	68d8      	ldr	r0, [r3, #12]
 800794e:	b14c      	cbz	r4, 8007964 <__assert_func+0x24>
 8007950:	4b07      	ldr	r3, [pc, #28]	; (8007970 <__assert_func+0x30>)
 8007952:	9100      	str	r1, [sp, #0]
 8007954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007958:	4906      	ldr	r1, [pc, #24]	; (8007974 <__assert_func+0x34>)
 800795a:	462b      	mov	r3, r5
 800795c:	f000 f844 	bl	80079e8 <fiprintf>
 8007960:	f000 f8d8 	bl	8007b14 <abort>
 8007964:	4b04      	ldr	r3, [pc, #16]	; (8007978 <__assert_func+0x38>)
 8007966:	461c      	mov	r4, r3
 8007968:	e7f3      	b.n	8007952 <__assert_func+0x12>
 800796a:	bf00      	nop
 800796c:	20000064 	.word	0x20000064
 8007970:	08008fc7 	.word	0x08008fc7
 8007974:	08008fd4 	.word	0x08008fd4
 8007978:	08009002 	.word	0x08009002

0800797c <_calloc_r>:
 800797c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800797e:	fba1 2402 	umull	r2, r4, r1, r2
 8007982:	b94c      	cbnz	r4, 8007998 <_calloc_r+0x1c>
 8007984:	4611      	mov	r1, r2
 8007986:	9201      	str	r2, [sp, #4]
 8007988:	f7ff f92c 	bl	8006be4 <_malloc_r>
 800798c:	9a01      	ldr	r2, [sp, #4]
 800798e:	4605      	mov	r5, r0
 8007990:	b930      	cbnz	r0, 80079a0 <_calloc_r+0x24>
 8007992:	4628      	mov	r0, r5
 8007994:	b003      	add	sp, #12
 8007996:	bd30      	pop	{r4, r5, pc}
 8007998:	220c      	movs	r2, #12
 800799a:	6002      	str	r2, [r0, #0]
 800799c:	2500      	movs	r5, #0
 800799e:	e7f8      	b.n	8007992 <_calloc_r+0x16>
 80079a0:	4621      	mov	r1, r4
 80079a2:	f7fe f9b0 	bl	8005d06 <memset>
 80079a6:	e7f4      	b.n	8007992 <_calloc_r+0x16>

080079a8 <__ascii_mbtowc>:
 80079a8:	b082      	sub	sp, #8
 80079aa:	b901      	cbnz	r1, 80079ae <__ascii_mbtowc+0x6>
 80079ac:	a901      	add	r1, sp, #4
 80079ae:	b142      	cbz	r2, 80079c2 <__ascii_mbtowc+0x1a>
 80079b0:	b14b      	cbz	r3, 80079c6 <__ascii_mbtowc+0x1e>
 80079b2:	7813      	ldrb	r3, [r2, #0]
 80079b4:	600b      	str	r3, [r1, #0]
 80079b6:	7812      	ldrb	r2, [r2, #0]
 80079b8:	1e10      	subs	r0, r2, #0
 80079ba:	bf18      	it	ne
 80079bc:	2001      	movne	r0, #1
 80079be:	b002      	add	sp, #8
 80079c0:	4770      	bx	lr
 80079c2:	4610      	mov	r0, r2
 80079c4:	e7fb      	b.n	80079be <__ascii_mbtowc+0x16>
 80079c6:	f06f 0001 	mvn.w	r0, #1
 80079ca:	e7f8      	b.n	80079be <__ascii_mbtowc+0x16>

080079cc <__ascii_wctomb>:
 80079cc:	b149      	cbz	r1, 80079e2 <__ascii_wctomb+0x16>
 80079ce:	2aff      	cmp	r2, #255	; 0xff
 80079d0:	bf85      	ittet	hi
 80079d2:	238a      	movhi	r3, #138	; 0x8a
 80079d4:	6003      	strhi	r3, [r0, #0]
 80079d6:	700a      	strbls	r2, [r1, #0]
 80079d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80079dc:	bf98      	it	ls
 80079de:	2001      	movls	r0, #1
 80079e0:	4770      	bx	lr
 80079e2:	4608      	mov	r0, r1
 80079e4:	4770      	bx	lr
	...

080079e8 <fiprintf>:
 80079e8:	b40e      	push	{r1, r2, r3}
 80079ea:	b503      	push	{r0, r1, lr}
 80079ec:	4601      	mov	r1, r0
 80079ee:	ab03      	add	r3, sp, #12
 80079f0:	4805      	ldr	r0, [pc, #20]	; (8007a08 <fiprintf+0x20>)
 80079f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f6:	6800      	ldr	r0, [r0, #0]
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	f7ff fd25 	bl	8007448 <_vfiprintf_r>
 80079fe:	b002      	add	sp, #8
 8007a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a04:	b003      	add	sp, #12
 8007a06:	4770      	bx	lr
 8007a08:	20000064 	.word	0x20000064

08007a0c <__swhatbuf_r>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	460c      	mov	r4, r1
 8007a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a14:	2900      	cmp	r1, #0
 8007a16:	b096      	sub	sp, #88	; 0x58
 8007a18:	4615      	mov	r5, r2
 8007a1a:	461e      	mov	r6, r3
 8007a1c:	da0d      	bge.n	8007a3a <__swhatbuf_r+0x2e>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a24:	f04f 0100 	mov.w	r1, #0
 8007a28:	bf0c      	ite	eq
 8007a2a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a2e:	2340      	movne	r3, #64	; 0x40
 8007a30:	2000      	movs	r0, #0
 8007a32:	6031      	str	r1, [r6, #0]
 8007a34:	602b      	str	r3, [r5, #0]
 8007a36:	b016      	add	sp, #88	; 0x58
 8007a38:	bd70      	pop	{r4, r5, r6, pc}
 8007a3a:	466a      	mov	r2, sp
 8007a3c:	f000 f848 	bl	8007ad0 <_fstat_r>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	dbec      	blt.n	8007a1e <__swhatbuf_r+0x12>
 8007a44:	9901      	ldr	r1, [sp, #4]
 8007a46:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a4a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a4e:	4259      	negs	r1, r3
 8007a50:	4159      	adcs	r1, r3
 8007a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a56:	e7eb      	b.n	8007a30 <__swhatbuf_r+0x24>

08007a58 <__smakebuf_r>:
 8007a58:	898b      	ldrh	r3, [r1, #12]
 8007a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a5c:	079d      	lsls	r5, r3, #30
 8007a5e:	4606      	mov	r6, r0
 8007a60:	460c      	mov	r4, r1
 8007a62:	d507      	bpl.n	8007a74 <__smakebuf_r+0x1c>
 8007a64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a68:	6023      	str	r3, [r4, #0]
 8007a6a:	6123      	str	r3, [r4, #16]
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	6163      	str	r3, [r4, #20]
 8007a70:	b002      	add	sp, #8
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	ab01      	add	r3, sp, #4
 8007a76:	466a      	mov	r2, sp
 8007a78:	f7ff ffc8 	bl	8007a0c <__swhatbuf_r>
 8007a7c:	9900      	ldr	r1, [sp, #0]
 8007a7e:	4605      	mov	r5, r0
 8007a80:	4630      	mov	r0, r6
 8007a82:	f7ff f8af 	bl	8006be4 <_malloc_r>
 8007a86:	b948      	cbnz	r0, 8007a9c <__smakebuf_r+0x44>
 8007a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a8c:	059a      	lsls	r2, r3, #22
 8007a8e:	d4ef      	bmi.n	8007a70 <__smakebuf_r+0x18>
 8007a90:	f023 0303 	bic.w	r3, r3, #3
 8007a94:	f043 0302 	orr.w	r3, r3, #2
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	e7e3      	b.n	8007a64 <__smakebuf_r+0xc>
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	6020      	str	r0, [r4, #0]
 8007aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa4:	81a3      	strh	r3, [r4, #12]
 8007aa6:	9b00      	ldr	r3, [sp, #0]
 8007aa8:	6163      	str	r3, [r4, #20]
 8007aaa:	9b01      	ldr	r3, [sp, #4]
 8007aac:	6120      	str	r0, [r4, #16]
 8007aae:	b15b      	cbz	r3, 8007ac8 <__smakebuf_r+0x70>
 8007ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f000 f81d 	bl	8007af4 <_isatty_r>
 8007aba:	b128      	cbz	r0, 8007ac8 <__smakebuf_r+0x70>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	f023 0303 	bic.w	r3, r3, #3
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	431d      	orrs	r5, r3
 8007acc:	81a5      	strh	r5, [r4, #12]
 8007ace:	e7cf      	b.n	8007a70 <__smakebuf_r+0x18>

08007ad0 <_fstat_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4d07      	ldr	r5, [pc, #28]	; (8007af0 <_fstat_r+0x20>)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4608      	mov	r0, r1
 8007ada:	4611      	mov	r1, r2
 8007adc:	602b      	str	r3, [r5, #0]
 8007ade:	f7fa ffe0 	bl	8002aa2 <_fstat>
 8007ae2:	1c43      	adds	r3, r0, #1
 8007ae4:	d102      	bne.n	8007aec <_fstat_r+0x1c>
 8007ae6:	682b      	ldr	r3, [r5, #0]
 8007ae8:	b103      	cbz	r3, 8007aec <_fstat_r+0x1c>
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	bd38      	pop	{r3, r4, r5, pc}
 8007aee:	bf00      	nop
 8007af0:	20000580 	.word	0x20000580

08007af4 <_isatty_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4d06      	ldr	r5, [pc, #24]	; (8007b10 <_isatty_r+0x1c>)
 8007af8:	2300      	movs	r3, #0
 8007afa:	4604      	mov	r4, r0
 8007afc:	4608      	mov	r0, r1
 8007afe:	602b      	str	r3, [r5, #0]
 8007b00:	f7fa ffdf 	bl	8002ac2 <_isatty>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d102      	bne.n	8007b0e <_isatty_r+0x1a>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	b103      	cbz	r3, 8007b0e <_isatty_r+0x1a>
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	20000580 	.word	0x20000580

08007b14 <abort>:
 8007b14:	b508      	push	{r3, lr}
 8007b16:	2006      	movs	r0, #6
 8007b18:	f000 f82c 	bl	8007b74 <raise>
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	f7fa ff71 	bl	8002a04 <_exit>

08007b22 <_raise_r>:
 8007b22:	291f      	cmp	r1, #31
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4604      	mov	r4, r0
 8007b28:	460d      	mov	r5, r1
 8007b2a:	d904      	bls.n	8007b36 <_raise_r+0x14>
 8007b2c:	2316      	movs	r3, #22
 8007b2e:	6003      	str	r3, [r0, #0]
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295
 8007b34:	bd38      	pop	{r3, r4, r5, pc}
 8007b36:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007b38:	b112      	cbz	r2, 8007b40 <_raise_r+0x1e>
 8007b3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b3e:	b94b      	cbnz	r3, 8007b54 <_raise_r+0x32>
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 f831 	bl	8007ba8 <_getpid_r>
 8007b46:	462a      	mov	r2, r5
 8007b48:	4601      	mov	r1, r0
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b50:	f000 b818 	b.w	8007b84 <_kill_r>
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d00a      	beq.n	8007b6e <_raise_r+0x4c>
 8007b58:	1c59      	adds	r1, r3, #1
 8007b5a:	d103      	bne.n	8007b64 <_raise_r+0x42>
 8007b5c:	2316      	movs	r3, #22
 8007b5e:	6003      	str	r3, [r0, #0]
 8007b60:	2001      	movs	r0, #1
 8007b62:	e7e7      	b.n	8007b34 <_raise_r+0x12>
 8007b64:	2400      	movs	r4, #0
 8007b66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	4798      	blx	r3
 8007b6e:	2000      	movs	r0, #0
 8007b70:	e7e0      	b.n	8007b34 <_raise_r+0x12>
	...

08007b74 <raise>:
 8007b74:	4b02      	ldr	r3, [pc, #8]	; (8007b80 <raise+0xc>)
 8007b76:	4601      	mov	r1, r0
 8007b78:	6818      	ldr	r0, [r3, #0]
 8007b7a:	f7ff bfd2 	b.w	8007b22 <_raise_r>
 8007b7e:	bf00      	nop
 8007b80:	20000064 	.word	0x20000064

08007b84 <_kill_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4d07      	ldr	r5, [pc, #28]	; (8007ba4 <_kill_r+0x20>)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	602b      	str	r3, [r5, #0]
 8007b92:	f7fa ff27 	bl	80029e4 <_kill>
 8007b96:	1c43      	adds	r3, r0, #1
 8007b98:	d102      	bne.n	8007ba0 <_kill_r+0x1c>
 8007b9a:	682b      	ldr	r3, [r5, #0]
 8007b9c:	b103      	cbz	r3, 8007ba0 <_kill_r+0x1c>
 8007b9e:	6023      	str	r3, [r4, #0]
 8007ba0:	bd38      	pop	{r3, r4, r5, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000580 	.word	0x20000580

08007ba8 <_getpid_r>:
 8007ba8:	f7fa bf14 	b.w	80029d4 <_getpid>
 8007bac:	0000      	movs	r0, r0
	...

08007bb0 <cos>:
 8007bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bb2:	ec53 2b10 	vmov	r2, r3, d0
 8007bb6:	4826      	ldr	r0, [pc, #152]	; (8007c50 <cos+0xa0>)
 8007bb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007bbc:	4281      	cmp	r1, r0
 8007bbe:	dc06      	bgt.n	8007bce <cos+0x1e>
 8007bc0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007c48 <cos+0x98>
 8007bc4:	b005      	add	sp, #20
 8007bc6:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bca:	f000 b89d 	b.w	8007d08 <__kernel_cos>
 8007bce:	4821      	ldr	r0, [pc, #132]	; (8007c54 <cos+0xa4>)
 8007bd0:	4281      	cmp	r1, r0
 8007bd2:	dd09      	ble.n	8007be8 <cos+0x38>
 8007bd4:	ee10 0a10 	vmov	r0, s0
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f7f8 fb5d 	bl	8000298 <__aeabi_dsub>
 8007bde:	ec41 0b10 	vmov	d0, r0, r1
 8007be2:	b005      	add	sp, #20
 8007be4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007be8:	4668      	mov	r0, sp
 8007bea:	f000 fa15 	bl	8008018 <__ieee754_rem_pio2>
 8007bee:	f000 0003 	and.w	r0, r0, #3
 8007bf2:	2801      	cmp	r0, #1
 8007bf4:	d00b      	beq.n	8007c0e <cos+0x5e>
 8007bf6:	2802      	cmp	r0, #2
 8007bf8:	d016      	beq.n	8007c28 <cos+0x78>
 8007bfa:	b9e0      	cbnz	r0, 8007c36 <cos+0x86>
 8007bfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c00:	ed9d 0b00 	vldr	d0, [sp]
 8007c04:	f000 f880 	bl	8007d08 <__kernel_cos>
 8007c08:	ec51 0b10 	vmov	r0, r1, d0
 8007c0c:	e7e7      	b.n	8007bde <cos+0x2e>
 8007c0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c12:	ed9d 0b00 	vldr	d0, [sp]
 8007c16:	f000 f93f 	bl	8007e98 <__kernel_sin>
 8007c1a:	ec53 2b10 	vmov	r2, r3, d0
 8007c1e:	ee10 0a10 	vmov	r0, s0
 8007c22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007c26:	e7da      	b.n	8007bde <cos+0x2e>
 8007c28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c2c:	ed9d 0b00 	vldr	d0, [sp]
 8007c30:	f000 f86a 	bl	8007d08 <__kernel_cos>
 8007c34:	e7f1      	b.n	8007c1a <cos+0x6a>
 8007c36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c3a:	ed9d 0b00 	vldr	d0, [sp]
 8007c3e:	2001      	movs	r0, #1
 8007c40:	f000 f92a 	bl	8007e98 <__kernel_sin>
 8007c44:	e7e0      	b.n	8007c08 <cos+0x58>
 8007c46:	bf00      	nop
	...
 8007c50:	3fe921fb 	.word	0x3fe921fb
 8007c54:	7fefffff 	.word	0x7fefffff

08007c58 <sin>:
 8007c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c5a:	ec53 2b10 	vmov	r2, r3, d0
 8007c5e:	4828      	ldr	r0, [pc, #160]	; (8007d00 <sin+0xa8>)
 8007c60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c64:	4281      	cmp	r1, r0
 8007c66:	dc07      	bgt.n	8007c78 <sin+0x20>
 8007c68:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007cf8 <sin+0xa0>
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	b005      	add	sp, #20
 8007c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c74:	f000 b910 	b.w	8007e98 <__kernel_sin>
 8007c78:	4822      	ldr	r0, [pc, #136]	; (8007d04 <sin+0xac>)
 8007c7a:	4281      	cmp	r1, r0
 8007c7c:	dd09      	ble.n	8007c92 <sin+0x3a>
 8007c7e:	ee10 0a10 	vmov	r0, s0
 8007c82:	4619      	mov	r1, r3
 8007c84:	f7f8 fb08 	bl	8000298 <__aeabi_dsub>
 8007c88:	ec41 0b10 	vmov	d0, r0, r1
 8007c8c:	b005      	add	sp, #20
 8007c8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c92:	4668      	mov	r0, sp
 8007c94:	f000 f9c0 	bl	8008018 <__ieee754_rem_pio2>
 8007c98:	f000 0003 	and.w	r0, r0, #3
 8007c9c:	2801      	cmp	r0, #1
 8007c9e:	d00c      	beq.n	8007cba <sin+0x62>
 8007ca0:	2802      	cmp	r0, #2
 8007ca2:	d011      	beq.n	8007cc8 <sin+0x70>
 8007ca4:	b9f0      	cbnz	r0, 8007ce4 <sin+0x8c>
 8007ca6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007caa:	ed9d 0b00 	vldr	d0, [sp]
 8007cae:	2001      	movs	r0, #1
 8007cb0:	f000 f8f2 	bl	8007e98 <__kernel_sin>
 8007cb4:	ec51 0b10 	vmov	r0, r1, d0
 8007cb8:	e7e6      	b.n	8007c88 <sin+0x30>
 8007cba:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cbe:	ed9d 0b00 	vldr	d0, [sp]
 8007cc2:	f000 f821 	bl	8007d08 <__kernel_cos>
 8007cc6:	e7f5      	b.n	8007cb4 <sin+0x5c>
 8007cc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ccc:	ed9d 0b00 	vldr	d0, [sp]
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	f000 f8e1 	bl	8007e98 <__kernel_sin>
 8007cd6:	ec53 2b10 	vmov	r2, r3, d0
 8007cda:	ee10 0a10 	vmov	r0, s0
 8007cde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ce2:	e7d1      	b.n	8007c88 <sin+0x30>
 8007ce4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ce8:	ed9d 0b00 	vldr	d0, [sp]
 8007cec:	f000 f80c 	bl	8007d08 <__kernel_cos>
 8007cf0:	e7f1      	b.n	8007cd6 <sin+0x7e>
 8007cf2:	bf00      	nop
 8007cf4:	f3af 8000 	nop.w
	...
 8007d00:	3fe921fb 	.word	0x3fe921fb
 8007d04:	7fefffff 	.word	0x7fefffff

08007d08 <__kernel_cos>:
 8007d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	ec57 6b10 	vmov	r6, r7, d0
 8007d10:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007d14:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007d18:	ed8d 1b00 	vstr	d1, [sp]
 8007d1c:	da07      	bge.n	8007d2e <__kernel_cos+0x26>
 8007d1e:	ee10 0a10 	vmov	r0, s0
 8007d22:	4639      	mov	r1, r7
 8007d24:	f7f8 ff20 	bl	8000b68 <__aeabi_d2iz>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	f000 8088 	beq.w	8007e3e <__kernel_cos+0x136>
 8007d2e:	4632      	mov	r2, r6
 8007d30:	463b      	mov	r3, r7
 8007d32:	4630      	mov	r0, r6
 8007d34:	4639      	mov	r1, r7
 8007d36:	f7f8 fc67 	bl	8000608 <__aeabi_dmul>
 8007d3a:	4b51      	ldr	r3, [pc, #324]	; (8007e80 <__kernel_cos+0x178>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4604      	mov	r4, r0
 8007d40:	460d      	mov	r5, r1
 8007d42:	f7f8 fc61 	bl	8000608 <__aeabi_dmul>
 8007d46:	a340      	add	r3, pc, #256	; (adr r3, 8007e48 <__kernel_cos+0x140>)
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	4682      	mov	sl, r0
 8007d4e:	468b      	mov	fp, r1
 8007d50:	4620      	mov	r0, r4
 8007d52:	4629      	mov	r1, r5
 8007d54:	f7f8 fc58 	bl	8000608 <__aeabi_dmul>
 8007d58:	a33d      	add	r3, pc, #244	; (adr r3, 8007e50 <__kernel_cos+0x148>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fa9d 	bl	800029c <__adddf3>
 8007d62:	4622      	mov	r2, r4
 8007d64:	462b      	mov	r3, r5
 8007d66:	f7f8 fc4f 	bl	8000608 <__aeabi_dmul>
 8007d6a:	a33b      	add	r3, pc, #236	; (adr r3, 8007e58 <__kernel_cos+0x150>)
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	f7f8 fa92 	bl	8000298 <__aeabi_dsub>
 8007d74:	4622      	mov	r2, r4
 8007d76:	462b      	mov	r3, r5
 8007d78:	f7f8 fc46 	bl	8000608 <__aeabi_dmul>
 8007d7c:	a338      	add	r3, pc, #224	; (adr r3, 8007e60 <__kernel_cos+0x158>)
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	f7f8 fa8b 	bl	800029c <__adddf3>
 8007d86:	4622      	mov	r2, r4
 8007d88:	462b      	mov	r3, r5
 8007d8a:	f7f8 fc3d 	bl	8000608 <__aeabi_dmul>
 8007d8e:	a336      	add	r3, pc, #216	; (adr r3, 8007e68 <__kernel_cos+0x160>)
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	f7f8 fa80 	bl	8000298 <__aeabi_dsub>
 8007d98:	4622      	mov	r2, r4
 8007d9a:	462b      	mov	r3, r5
 8007d9c:	f7f8 fc34 	bl	8000608 <__aeabi_dmul>
 8007da0:	a333      	add	r3, pc, #204	; (adr r3, 8007e70 <__kernel_cos+0x168>)
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	f7f8 fa79 	bl	800029c <__adddf3>
 8007daa:	4622      	mov	r2, r4
 8007dac:	462b      	mov	r3, r5
 8007dae:	f7f8 fc2b 	bl	8000608 <__aeabi_dmul>
 8007db2:	4622      	mov	r2, r4
 8007db4:	462b      	mov	r3, r5
 8007db6:	f7f8 fc27 	bl	8000608 <__aeabi_dmul>
 8007dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	f7f8 fc1f 	bl	8000608 <__aeabi_dmul>
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4602      	mov	r2, r0
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f7f8 fa61 	bl	8000298 <__aeabi_dsub>
 8007dd6:	4b2b      	ldr	r3, [pc, #172]	; (8007e84 <__kernel_cos+0x17c>)
 8007dd8:	4598      	cmp	r8, r3
 8007dda:	4606      	mov	r6, r0
 8007ddc:	460f      	mov	r7, r1
 8007dde:	dc10      	bgt.n	8007e02 <__kernel_cos+0xfa>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4650      	mov	r0, sl
 8007de6:	4659      	mov	r1, fp
 8007de8:	f7f8 fa56 	bl	8000298 <__aeabi_dsub>
 8007dec:	460b      	mov	r3, r1
 8007dee:	4926      	ldr	r1, [pc, #152]	; (8007e88 <__kernel_cos+0x180>)
 8007df0:	4602      	mov	r2, r0
 8007df2:	2000      	movs	r0, #0
 8007df4:	f7f8 fa50 	bl	8000298 <__aeabi_dsub>
 8007df8:	ec41 0b10 	vmov	d0, r0, r1
 8007dfc:	b003      	add	sp, #12
 8007dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	4b22      	ldr	r3, [pc, #136]	; (8007e8c <__kernel_cos+0x184>)
 8007e04:	4920      	ldr	r1, [pc, #128]	; (8007e88 <__kernel_cos+0x180>)
 8007e06:	4598      	cmp	r8, r3
 8007e08:	bfcc      	ite	gt
 8007e0a:	4d21      	ldrgt	r5, [pc, #132]	; (8007e90 <__kernel_cos+0x188>)
 8007e0c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007e10:	2400      	movs	r4, #0
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	2000      	movs	r0, #0
 8007e18:	f7f8 fa3e 	bl	8000298 <__aeabi_dsub>
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	4680      	mov	r8, r0
 8007e20:	4689      	mov	r9, r1
 8007e22:	462b      	mov	r3, r5
 8007e24:	4650      	mov	r0, sl
 8007e26:	4659      	mov	r1, fp
 8007e28:	f7f8 fa36 	bl	8000298 <__aeabi_dsub>
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	463b      	mov	r3, r7
 8007e30:	f7f8 fa32 	bl	8000298 <__aeabi_dsub>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4640      	mov	r0, r8
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	e7da      	b.n	8007df4 <__kernel_cos+0xec>
 8007e3e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007e78 <__kernel_cos+0x170>
 8007e42:	e7db      	b.n	8007dfc <__kernel_cos+0xf4>
 8007e44:	f3af 8000 	nop.w
 8007e48:	be8838d4 	.word	0xbe8838d4
 8007e4c:	bda8fae9 	.word	0xbda8fae9
 8007e50:	bdb4b1c4 	.word	0xbdb4b1c4
 8007e54:	3e21ee9e 	.word	0x3e21ee9e
 8007e58:	809c52ad 	.word	0x809c52ad
 8007e5c:	3e927e4f 	.word	0x3e927e4f
 8007e60:	19cb1590 	.word	0x19cb1590
 8007e64:	3efa01a0 	.word	0x3efa01a0
 8007e68:	16c15177 	.word	0x16c15177
 8007e6c:	3f56c16c 	.word	0x3f56c16c
 8007e70:	5555554c 	.word	0x5555554c
 8007e74:	3fa55555 	.word	0x3fa55555
 8007e78:	00000000 	.word	0x00000000
 8007e7c:	3ff00000 	.word	0x3ff00000
 8007e80:	3fe00000 	.word	0x3fe00000
 8007e84:	3fd33332 	.word	0x3fd33332
 8007e88:	3ff00000 	.word	0x3ff00000
 8007e8c:	3fe90000 	.word	0x3fe90000
 8007e90:	3fd20000 	.word	0x3fd20000
 8007e94:	00000000 	.word	0x00000000

08007e98 <__kernel_sin>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	ed2d 8b04 	vpush	{d8-d9}
 8007ea0:	eeb0 8a41 	vmov.f32	s16, s2
 8007ea4:	eef0 8a61 	vmov.f32	s17, s3
 8007ea8:	ec55 4b10 	vmov	r4, r5, d0
 8007eac:	b083      	sub	sp, #12
 8007eae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007eb2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007eb6:	9001      	str	r0, [sp, #4]
 8007eb8:	da06      	bge.n	8007ec8 <__kernel_sin+0x30>
 8007eba:	ee10 0a10 	vmov	r0, s0
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	f7f8 fe52 	bl	8000b68 <__aeabi_d2iz>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d051      	beq.n	8007f6c <__kernel_sin+0xd4>
 8007ec8:	4622      	mov	r2, r4
 8007eca:	462b      	mov	r3, r5
 8007ecc:	4620      	mov	r0, r4
 8007ece:	4629      	mov	r1, r5
 8007ed0:	f7f8 fb9a 	bl	8000608 <__aeabi_dmul>
 8007ed4:	4682      	mov	sl, r0
 8007ed6:	468b      	mov	fp, r1
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 fb92 	bl	8000608 <__aeabi_dmul>
 8007ee4:	a341      	add	r3, pc, #260	; (adr r3, 8007fec <__kernel_sin+0x154>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	4680      	mov	r8, r0
 8007eec:	4689      	mov	r9, r1
 8007eee:	4650      	mov	r0, sl
 8007ef0:	4659      	mov	r1, fp
 8007ef2:	f7f8 fb89 	bl	8000608 <__aeabi_dmul>
 8007ef6:	a33f      	add	r3, pc, #252	; (adr r3, 8007ff4 <__kernel_sin+0x15c>)
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f7f8 f9cc 	bl	8000298 <__aeabi_dsub>
 8007f00:	4652      	mov	r2, sl
 8007f02:	465b      	mov	r3, fp
 8007f04:	f7f8 fb80 	bl	8000608 <__aeabi_dmul>
 8007f08:	a33c      	add	r3, pc, #240	; (adr r3, 8007ffc <__kernel_sin+0x164>)
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	f7f8 f9c5 	bl	800029c <__adddf3>
 8007f12:	4652      	mov	r2, sl
 8007f14:	465b      	mov	r3, fp
 8007f16:	f7f8 fb77 	bl	8000608 <__aeabi_dmul>
 8007f1a:	a33a      	add	r3, pc, #232	; (adr r3, 8008004 <__kernel_sin+0x16c>)
 8007f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f20:	f7f8 f9ba 	bl	8000298 <__aeabi_dsub>
 8007f24:	4652      	mov	r2, sl
 8007f26:	465b      	mov	r3, fp
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	a337      	add	r3, pc, #220	; (adr r3, 800800c <__kernel_sin+0x174>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 f9b3 	bl	800029c <__adddf3>
 8007f36:	9b01      	ldr	r3, [sp, #4]
 8007f38:	4606      	mov	r6, r0
 8007f3a:	460f      	mov	r7, r1
 8007f3c:	b9eb      	cbnz	r3, 8007f7a <__kernel_sin+0xe2>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4650      	mov	r0, sl
 8007f44:	4659      	mov	r1, fp
 8007f46:	f7f8 fb5f 	bl	8000608 <__aeabi_dmul>
 8007f4a:	a325      	add	r3, pc, #148	; (adr r3, 8007fe0 <__kernel_sin+0x148>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 f9a2 	bl	8000298 <__aeabi_dsub>
 8007f54:	4642      	mov	r2, r8
 8007f56:	464b      	mov	r3, r9
 8007f58:	f7f8 fb56 	bl	8000608 <__aeabi_dmul>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4620      	mov	r0, r4
 8007f62:	4629      	mov	r1, r5
 8007f64:	f7f8 f99a 	bl	800029c <__adddf3>
 8007f68:	4604      	mov	r4, r0
 8007f6a:	460d      	mov	r5, r1
 8007f6c:	ec45 4b10 	vmov	d0, r4, r5
 8007f70:	b003      	add	sp, #12
 8007f72:	ecbd 8b04 	vpop	{d8-d9}
 8007f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7a:	4b1b      	ldr	r3, [pc, #108]	; (8007fe8 <__kernel_sin+0x150>)
 8007f7c:	ec51 0b18 	vmov	r0, r1, d8
 8007f80:	2200      	movs	r2, #0
 8007f82:	f7f8 fb41 	bl	8000608 <__aeabi_dmul>
 8007f86:	4632      	mov	r2, r6
 8007f88:	ec41 0b19 	vmov	d9, r0, r1
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4649      	mov	r1, r9
 8007f92:	f7f8 fb39 	bl	8000608 <__aeabi_dmul>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	ec51 0b19 	vmov	r0, r1, d9
 8007f9e:	f7f8 f97b 	bl	8000298 <__aeabi_dsub>
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	465b      	mov	r3, fp
 8007fa6:	f7f8 fb2f 	bl	8000608 <__aeabi_dmul>
 8007faa:	ec53 2b18 	vmov	r2, r3, d8
 8007fae:	f7f8 f973 	bl	8000298 <__aeabi_dsub>
 8007fb2:	a30b      	add	r3, pc, #44	; (adr r3, 8007fe0 <__kernel_sin+0x148>)
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	4606      	mov	r6, r0
 8007fba:	460f      	mov	r7, r1
 8007fbc:	4640      	mov	r0, r8
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	f7f8 fb22 	bl	8000608 <__aeabi_dmul>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4639      	mov	r1, r7
 8007fcc:	f7f8 f966 	bl	800029c <__adddf3>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 f95e 	bl	8000298 <__aeabi_dsub>
 8007fdc:	e7c4      	b.n	8007f68 <__kernel_sin+0xd0>
 8007fde:	bf00      	nop
 8007fe0:	55555549 	.word	0x55555549
 8007fe4:	3fc55555 	.word	0x3fc55555
 8007fe8:	3fe00000 	.word	0x3fe00000
 8007fec:	5acfd57c 	.word	0x5acfd57c
 8007ff0:	3de5d93a 	.word	0x3de5d93a
 8007ff4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ff8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007ffc:	57b1fe7d 	.word	0x57b1fe7d
 8008000:	3ec71de3 	.word	0x3ec71de3
 8008004:	19c161d5 	.word	0x19c161d5
 8008008:	3f2a01a0 	.word	0x3f2a01a0
 800800c:	1110f8a6 	.word	0x1110f8a6
 8008010:	3f811111 	.word	0x3f811111
 8008014:	00000000 	.word	0x00000000

08008018 <__ieee754_rem_pio2>:
 8008018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	ed2d 8b02 	vpush	{d8}
 8008020:	ec55 4b10 	vmov	r4, r5, d0
 8008024:	4bca      	ldr	r3, [pc, #808]	; (8008350 <__ieee754_rem_pio2+0x338>)
 8008026:	b08b      	sub	sp, #44	; 0x2c
 8008028:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800802c:	4598      	cmp	r8, r3
 800802e:	4682      	mov	sl, r0
 8008030:	9502      	str	r5, [sp, #8]
 8008032:	dc08      	bgt.n	8008046 <__ieee754_rem_pio2+0x2e>
 8008034:	2200      	movs	r2, #0
 8008036:	2300      	movs	r3, #0
 8008038:	ed80 0b00 	vstr	d0, [r0]
 800803c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008040:	f04f 0b00 	mov.w	fp, #0
 8008044:	e028      	b.n	8008098 <__ieee754_rem_pio2+0x80>
 8008046:	4bc3      	ldr	r3, [pc, #780]	; (8008354 <__ieee754_rem_pio2+0x33c>)
 8008048:	4598      	cmp	r8, r3
 800804a:	dc78      	bgt.n	800813e <__ieee754_rem_pio2+0x126>
 800804c:	9b02      	ldr	r3, [sp, #8]
 800804e:	4ec2      	ldr	r6, [pc, #776]	; (8008358 <__ieee754_rem_pio2+0x340>)
 8008050:	2b00      	cmp	r3, #0
 8008052:	ee10 0a10 	vmov	r0, s0
 8008056:	a3b0      	add	r3, pc, #704	; (adr r3, 8008318 <__ieee754_rem_pio2+0x300>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	4629      	mov	r1, r5
 800805e:	dd39      	ble.n	80080d4 <__ieee754_rem_pio2+0xbc>
 8008060:	f7f8 f91a 	bl	8000298 <__aeabi_dsub>
 8008064:	45b0      	cmp	r8, r6
 8008066:	4604      	mov	r4, r0
 8008068:	460d      	mov	r5, r1
 800806a:	d01b      	beq.n	80080a4 <__ieee754_rem_pio2+0x8c>
 800806c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008320 <__ieee754_rem_pio2+0x308>)
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f7f8 f911 	bl	8000298 <__aeabi_dsub>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	e9ca 2300 	strd	r2, r3, [sl]
 800807e:	4620      	mov	r0, r4
 8008080:	4629      	mov	r1, r5
 8008082:	f7f8 f909 	bl	8000298 <__aeabi_dsub>
 8008086:	a3a6      	add	r3, pc, #664	; (adr r3, 8008320 <__ieee754_rem_pio2+0x308>)
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	f7f8 f904 	bl	8000298 <__aeabi_dsub>
 8008090:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008094:	f04f 0b01 	mov.w	fp, #1
 8008098:	4658      	mov	r0, fp
 800809a:	b00b      	add	sp, #44	; 0x2c
 800809c:	ecbd 8b02 	vpop	{d8}
 80080a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008328 <__ieee754_rem_pio2+0x310>)
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f7f8 f8f5 	bl	8000298 <__aeabi_dsub>
 80080ae:	a3a0      	add	r3, pc, #640	; (adr r3, 8008330 <__ieee754_rem_pio2+0x318>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	4604      	mov	r4, r0
 80080b6:	460d      	mov	r5, r1
 80080b8:	f7f8 f8ee 	bl	8000298 <__aeabi_dsub>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	e9ca 2300 	strd	r2, r3, [sl]
 80080c4:	4620      	mov	r0, r4
 80080c6:	4629      	mov	r1, r5
 80080c8:	f7f8 f8e6 	bl	8000298 <__aeabi_dsub>
 80080cc:	a398      	add	r3, pc, #608	; (adr r3, 8008330 <__ieee754_rem_pio2+0x318>)
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	e7db      	b.n	800808c <__ieee754_rem_pio2+0x74>
 80080d4:	f7f8 f8e2 	bl	800029c <__adddf3>
 80080d8:	45b0      	cmp	r8, r6
 80080da:	4604      	mov	r4, r0
 80080dc:	460d      	mov	r5, r1
 80080de:	d016      	beq.n	800810e <__ieee754_rem_pio2+0xf6>
 80080e0:	a38f      	add	r3, pc, #572	; (adr r3, 8008320 <__ieee754_rem_pio2+0x308>)
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	f7f8 f8d9 	bl	800029c <__adddf3>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	e9ca 2300 	strd	r2, r3, [sl]
 80080f2:	4620      	mov	r0, r4
 80080f4:	4629      	mov	r1, r5
 80080f6:	f7f8 f8cf 	bl	8000298 <__aeabi_dsub>
 80080fa:	a389      	add	r3, pc, #548	; (adr r3, 8008320 <__ieee754_rem_pio2+0x308>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f7f8 f8cc 	bl	800029c <__adddf3>
 8008104:	f04f 3bff 	mov.w	fp, #4294967295
 8008108:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800810c:	e7c4      	b.n	8008098 <__ieee754_rem_pio2+0x80>
 800810e:	a386      	add	r3, pc, #536	; (adr r3, 8008328 <__ieee754_rem_pio2+0x310>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f7f8 f8c2 	bl	800029c <__adddf3>
 8008118:	a385      	add	r3, pc, #532	; (adr r3, 8008330 <__ieee754_rem_pio2+0x318>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	4604      	mov	r4, r0
 8008120:	460d      	mov	r5, r1
 8008122:	f7f8 f8bb 	bl	800029c <__adddf3>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	e9ca 2300 	strd	r2, r3, [sl]
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 f8b1 	bl	8000298 <__aeabi_dsub>
 8008136:	a37e      	add	r3, pc, #504	; (adr r3, 8008330 <__ieee754_rem_pio2+0x318>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	e7e0      	b.n	8008100 <__ieee754_rem_pio2+0xe8>
 800813e:	4b87      	ldr	r3, [pc, #540]	; (800835c <__ieee754_rem_pio2+0x344>)
 8008140:	4598      	cmp	r8, r3
 8008142:	f300 80d8 	bgt.w	80082f6 <__ieee754_rem_pio2+0x2de>
 8008146:	f000 f96d 	bl	8008424 <fabs>
 800814a:	ec55 4b10 	vmov	r4, r5, d0
 800814e:	ee10 0a10 	vmov	r0, s0
 8008152:	a379      	add	r3, pc, #484	; (adr r3, 8008338 <__ieee754_rem_pio2+0x320>)
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	4629      	mov	r1, r5
 800815a:	f7f8 fa55 	bl	8000608 <__aeabi_dmul>
 800815e:	4b80      	ldr	r3, [pc, #512]	; (8008360 <__ieee754_rem_pio2+0x348>)
 8008160:	2200      	movs	r2, #0
 8008162:	f7f8 f89b 	bl	800029c <__adddf3>
 8008166:	f7f8 fcff 	bl	8000b68 <__aeabi_d2iz>
 800816a:	4683      	mov	fp, r0
 800816c:	f7f8 f9e2 	bl	8000534 <__aeabi_i2d>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	ec43 2b18 	vmov	d8, r2, r3
 8008178:	a367      	add	r3, pc, #412	; (adr r3, 8008318 <__ieee754_rem_pio2+0x300>)
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	f7f8 fa43 	bl	8000608 <__aeabi_dmul>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	4620      	mov	r0, r4
 8008188:	4629      	mov	r1, r5
 800818a:	f7f8 f885 	bl	8000298 <__aeabi_dsub>
 800818e:	a364      	add	r3, pc, #400	; (adr r3, 8008320 <__ieee754_rem_pio2+0x308>)
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	4606      	mov	r6, r0
 8008196:	460f      	mov	r7, r1
 8008198:	ec51 0b18 	vmov	r0, r1, d8
 800819c:	f7f8 fa34 	bl	8000608 <__aeabi_dmul>
 80081a0:	f1bb 0f1f 	cmp.w	fp, #31
 80081a4:	4604      	mov	r4, r0
 80081a6:	460d      	mov	r5, r1
 80081a8:	dc0d      	bgt.n	80081c6 <__ieee754_rem_pio2+0x1ae>
 80081aa:	4b6e      	ldr	r3, [pc, #440]	; (8008364 <__ieee754_rem_pio2+0x34c>)
 80081ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 80081b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b4:	4543      	cmp	r3, r8
 80081b6:	d006      	beq.n	80081c6 <__ieee754_rem_pio2+0x1ae>
 80081b8:	4622      	mov	r2, r4
 80081ba:	462b      	mov	r3, r5
 80081bc:	4630      	mov	r0, r6
 80081be:	4639      	mov	r1, r7
 80081c0:	f7f8 f86a 	bl	8000298 <__aeabi_dsub>
 80081c4:	e00e      	b.n	80081e4 <__ieee754_rem_pio2+0x1cc>
 80081c6:	462b      	mov	r3, r5
 80081c8:	4622      	mov	r2, r4
 80081ca:	4630      	mov	r0, r6
 80081cc:	4639      	mov	r1, r7
 80081ce:	f7f8 f863 	bl	8000298 <__aeabi_dsub>
 80081d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80081dc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80081e0:	2b10      	cmp	r3, #16
 80081e2:	dc02      	bgt.n	80081ea <__ieee754_rem_pio2+0x1d2>
 80081e4:	e9ca 0100 	strd	r0, r1, [sl]
 80081e8:	e039      	b.n	800825e <__ieee754_rem_pio2+0x246>
 80081ea:	a34f      	add	r3, pc, #316	; (adr r3, 8008328 <__ieee754_rem_pio2+0x310>)
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	ec51 0b18 	vmov	r0, r1, d8
 80081f4:	f7f8 fa08 	bl	8000608 <__aeabi_dmul>
 80081f8:	4604      	mov	r4, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 f848 	bl	8000298 <__aeabi_dsub>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4680      	mov	r8, r0
 800820e:	4689      	mov	r9, r1
 8008210:	4630      	mov	r0, r6
 8008212:	4639      	mov	r1, r7
 8008214:	f7f8 f840 	bl	8000298 <__aeabi_dsub>
 8008218:	4622      	mov	r2, r4
 800821a:	462b      	mov	r3, r5
 800821c:	f7f8 f83c 	bl	8000298 <__aeabi_dsub>
 8008220:	a343      	add	r3, pc, #268	; (adr r3, 8008330 <__ieee754_rem_pio2+0x318>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	4604      	mov	r4, r0
 8008228:	460d      	mov	r5, r1
 800822a:	ec51 0b18 	vmov	r0, r1, d8
 800822e:	f7f8 f9eb 	bl	8000608 <__aeabi_dmul>
 8008232:	4622      	mov	r2, r4
 8008234:	462b      	mov	r3, r5
 8008236:	f7f8 f82f 	bl	8000298 <__aeabi_dsub>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4604      	mov	r4, r0
 8008240:	460d      	mov	r5, r1
 8008242:	4640      	mov	r0, r8
 8008244:	4649      	mov	r1, r9
 8008246:	f7f8 f827 	bl	8000298 <__aeabi_dsub>
 800824a:	9a03      	ldr	r2, [sp, #12]
 800824c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b31      	cmp	r3, #49	; 0x31
 8008254:	dc24      	bgt.n	80082a0 <__ieee754_rem_pio2+0x288>
 8008256:	e9ca 0100 	strd	r0, r1, [sl]
 800825a:	4646      	mov	r6, r8
 800825c:	464f      	mov	r7, r9
 800825e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008262:	4630      	mov	r0, r6
 8008264:	4642      	mov	r2, r8
 8008266:	464b      	mov	r3, r9
 8008268:	4639      	mov	r1, r7
 800826a:	f7f8 f815 	bl	8000298 <__aeabi_dsub>
 800826e:	462b      	mov	r3, r5
 8008270:	4622      	mov	r2, r4
 8008272:	f7f8 f811 	bl	8000298 <__aeabi_dsub>
 8008276:	9b02      	ldr	r3, [sp, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800827e:	f6bf af0b 	bge.w	8008098 <__ieee754_rem_pio2+0x80>
 8008282:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008286:	f8ca 3004 	str.w	r3, [sl, #4]
 800828a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800828e:	f8ca 8000 	str.w	r8, [sl]
 8008292:	f8ca 0008 	str.w	r0, [sl, #8]
 8008296:	f8ca 300c 	str.w	r3, [sl, #12]
 800829a:	f1cb 0b00 	rsb	fp, fp, #0
 800829e:	e6fb      	b.n	8008098 <__ieee754_rem_pio2+0x80>
 80082a0:	a327      	add	r3, pc, #156	; (adr r3, 8008340 <__ieee754_rem_pio2+0x328>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	ec51 0b18 	vmov	r0, r1, d8
 80082aa:	f7f8 f9ad 	bl	8000608 <__aeabi_dmul>
 80082ae:	4604      	mov	r4, r0
 80082b0:	460d      	mov	r5, r1
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4640      	mov	r0, r8
 80082b8:	4649      	mov	r1, r9
 80082ba:	f7f7 ffed 	bl	8000298 <__aeabi_dsub>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4606      	mov	r6, r0
 80082c4:	460f      	mov	r7, r1
 80082c6:	4640      	mov	r0, r8
 80082c8:	4649      	mov	r1, r9
 80082ca:	f7f7 ffe5 	bl	8000298 <__aeabi_dsub>
 80082ce:	4622      	mov	r2, r4
 80082d0:	462b      	mov	r3, r5
 80082d2:	f7f7 ffe1 	bl	8000298 <__aeabi_dsub>
 80082d6:	a31c      	add	r3, pc, #112	; (adr r3, 8008348 <__ieee754_rem_pio2+0x330>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	4604      	mov	r4, r0
 80082de:	460d      	mov	r5, r1
 80082e0:	ec51 0b18 	vmov	r0, r1, d8
 80082e4:	f7f8 f990 	bl	8000608 <__aeabi_dmul>
 80082e8:	4622      	mov	r2, r4
 80082ea:	462b      	mov	r3, r5
 80082ec:	f7f7 ffd4 	bl	8000298 <__aeabi_dsub>
 80082f0:	4604      	mov	r4, r0
 80082f2:	460d      	mov	r5, r1
 80082f4:	e760      	b.n	80081b8 <__ieee754_rem_pio2+0x1a0>
 80082f6:	4b1c      	ldr	r3, [pc, #112]	; (8008368 <__ieee754_rem_pio2+0x350>)
 80082f8:	4598      	cmp	r8, r3
 80082fa:	dd37      	ble.n	800836c <__ieee754_rem_pio2+0x354>
 80082fc:	ee10 2a10 	vmov	r2, s0
 8008300:	462b      	mov	r3, r5
 8008302:	4620      	mov	r0, r4
 8008304:	4629      	mov	r1, r5
 8008306:	f7f7 ffc7 	bl	8000298 <__aeabi_dsub>
 800830a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800830e:	e9ca 0100 	strd	r0, r1, [sl]
 8008312:	e695      	b.n	8008040 <__ieee754_rem_pio2+0x28>
 8008314:	f3af 8000 	nop.w
 8008318:	54400000 	.word	0x54400000
 800831c:	3ff921fb 	.word	0x3ff921fb
 8008320:	1a626331 	.word	0x1a626331
 8008324:	3dd0b461 	.word	0x3dd0b461
 8008328:	1a600000 	.word	0x1a600000
 800832c:	3dd0b461 	.word	0x3dd0b461
 8008330:	2e037073 	.word	0x2e037073
 8008334:	3ba3198a 	.word	0x3ba3198a
 8008338:	6dc9c883 	.word	0x6dc9c883
 800833c:	3fe45f30 	.word	0x3fe45f30
 8008340:	2e000000 	.word	0x2e000000
 8008344:	3ba3198a 	.word	0x3ba3198a
 8008348:	252049c1 	.word	0x252049c1
 800834c:	397b839a 	.word	0x397b839a
 8008350:	3fe921fb 	.word	0x3fe921fb
 8008354:	4002d97b 	.word	0x4002d97b
 8008358:	3ff921fb 	.word	0x3ff921fb
 800835c:	413921fb 	.word	0x413921fb
 8008360:	3fe00000 	.word	0x3fe00000
 8008364:	08009104 	.word	0x08009104
 8008368:	7fefffff 	.word	0x7fefffff
 800836c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008370:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8008374:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008378:	4620      	mov	r0, r4
 800837a:	460d      	mov	r5, r1
 800837c:	f7f8 fbf4 	bl	8000b68 <__aeabi_d2iz>
 8008380:	f7f8 f8d8 	bl	8000534 <__aeabi_i2d>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4620      	mov	r0, r4
 800838a:	4629      	mov	r1, r5
 800838c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008390:	f7f7 ff82 	bl	8000298 <__aeabi_dsub>
 8008394:	4b21      	ldr	r3, [pc, #132]	; (800841c <__ieee754_rem_pio2+0x404>)
 8008396:	2200      	movs	r2, #0
 8008398:	f7f8 f936 	bl	8000608 <__aeabi_dmul>
 800839c:	460d      	mov	r5, r1
 800839e:	4604      	mov	r4, r0
 80083a0:	f7f8 fbe2 	bl	8000b68 <__aeabi_d2iz>
 80083a4:	f7f8 f8c6 	bl	8000534 <__aeabi_i2d>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4620      	mov	r0, r4
 80083ae:	4629      	mov	r1, r5
 80083b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80083b4:	f7f7 ff70 	bl	8000298 <__aeabi_dsub>
 80083b8:	4b18      	ldr	r3, [pc, #96]	; (800841c <__ieee754_rem_pio2+0x404>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	f7f8 f924 	bl	8000608 <__aeabi_dmul>
 80083c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083c4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80083c8:	2703      	movs	r7, #3
 80083ca:	2400      	movs	r4, #0
 80083cc:	2500      	movs	r5, #0
 80083ce:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80083d2:	4622      	mov	r2, r4
 80083d4:	462b      	mov	r3, r5
 80083d6:	46b9      	mov	r9, r7
 80083d8:	3f01      	subs	r7, #1
 80083da:	f7f8 fb7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d1f5      	bne.n	80083ce <__ieee754_rem_pio2+0x3b6>
 80083e2:	4b0f      	ldr	r3, [pc, #60]	; (8008420 <__ieee754_rem_pio2+0x408>)
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	2302      	movs	r3, #2
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	4632      	mov	r2, r6
 80083ec:	464b      	mov	r3, r9
 80083ee:	4651      	mov	r1, sl
 80083f0:	a804      	add	r0, sp, #16
 80083f2:	f000 f821 	bl	8008438 <__kernel_rem_pio2>
 80083f6:	9b02      	ldr	r3, [sp, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	4683      	mov	fp, r0
 80083fc:	f6bf ae4c 	bge.w	8008098 <__ieee754_rem_pio2+0x80>
 8008400:	e9da 2100 	ldrd	r2, r1, [sl]
 8008404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008408:	e9ca 2300 	strd	r2, r3, [sl]
 800840c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008410:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008414:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008418:	e73f      	b.n	800829a <__ieee754_rem_pio2+0x282>
 800841a:	bf00      	nop
 800841c:	41700000 	.word	0x41700000
 8008420:	08009184 	.word	0x08009184

08008424 <fabs>:
 8008424:	ec51 0b10 	vmov	r0, r1, d0
 8008428:	ee10 2a10 	vmov	r2, s0
 800842c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008430:	ec43 2b10 	vmov	d0, r2, r3
 8008434:	4770      	bx	lr
	...

08008438 <__kernel_rem_pio2>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	ed2d 8b02 	vpush	{d8}
 8008440:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008444:	f112 0f14 	cmn.w	r2, #20
 8008448:	9306      	str	r3, [sp, #24]
 800844a:	9104      	str	r1, [sp, #16]
 800844c:	4bc2      	ldr	r3, [pc, #776]	; (8008758 <__kernel_rem_pio2+0x320>)
 800844e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008450:	9009      	str	r0, [sp, #36]	; 0x24
 8008452:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	9b06      	ldr	r3, [sp, #24]
 800845a:	f103 33ff 	add.w	r3, r3, #4294967295
 800845e:	bfa8      	it	ge
 8008460:	1ed4      	subge	r4, r2, #3
 8008462:	9305      	str	r3, [sp, #20]
 8008464:	bfb2      	itee	lt
 8008466:	2400      	movlt	r4, #0
 8008468:	2318      	movge	r3, #24
 800846a:	fb94 f4f3 	sdivge	r4, r4, r3
 800846e:	f06f 0317 	mvn.w	r3, #23
 8008472:	fb04 3303 	mla	r3, r4, r3, r3
 8008476:	eb03 0a02 	add.w	sl, r3, r2
 800847a:	9b00      	ldr	r3, [sp, #0]
 800847c:	9a05      	ldr	r2, [sp, #20]
 800847e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008748 <__kernel_rem_pio2+0x310>
 8008482:	eb03 0802 	add.w	r8, r3, r2
 8008486:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008488:	1aa7      	subs	r7, r4, r2
 800848a:	ae20      	add	r6, sp, #128	; 0x80
 800848c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008490:	2500      	movs	r5, #0
 8008492:	4545      	cmp	r5, r8
 8008494:	dd13      	ble.n	80084be <__kernel_rem_pio2+0x86>
 8008496:	9b06      	ldr	r3, [sp, #24]
 8008498:	aa20      	add	r2, sp, #128	; 0x80
 800849a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800849e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80084a2:	f04f 0800 	mov.w	r8, #0
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	4598      	cmp	r8, r3
 80084aa:	dc31      	bgt.n	8008510 <__kernel_rem_pio2+0xd8>
 80084ac:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008748 <__kernel_rem_pio2+0x310>
 80084b0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80084b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084b8:	462f      	mov	r7, r5
 80084ba:	2600      	movs	r6, #0
 80084bc:	e01b      	b.n	80084f6 <__kernel_rem_pio2+0xbe>
 80084be:	42ef      	cmn	r7, r5
 80084c0:	d407      	bmi.n	80084d2 <__kernel_rem_pio2+0x9a>
 80084c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80084c6:	f7f8 f835 	bl	8000534 <__aeabi_i2d>
 80084ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80084ce:	3501      	adds	r5, #1
 80084d0:	e7df      	b.n	8008492 <__kernel_rem_pio2+0x5a>
 80084d2:	ec51 0b18 	vmov	r0, r1, d8
 80084d6:	e7f8      	b.n	80084ca <__kernel_rem_pio2+0x92>
 80084d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80084e0:	f7f8 f892 	bl	8000608 <__aeabi_dmul>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ec:	f7f7 fed6 	bl	800029c <__adddf3>
 80084f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084f4:	3601      	adds	r6, #1
 80084f6:	9b05      	ldr	r3, [sp, #20]
 80084f8:	429e      	cmp	r6, r3
 80084fa:	f1a7 0708 	sub.w	r7, r7, #8
 80084fe:	ddeb      	ble.n	80084d8 <__kernel_rem_pio2+0xa0>
 8008500:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008504:	f108 0801 	add.w	r8, r8, #1
 8008508:	ecab 7b02 	vstmia	fp!, {d7}
 800850c:	3508      	adds	r5, #8
 800850e:	e7ca      	b.n	80084a6 <__kernel_rem_pio2+0x6e>
 8008510:	9b00      	ldr	r3, [sp, #0]
 8008512:	aa0c      	add	r2, sp, #48	; 0x30
 8008514:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008518:	930b      	str	r3, [sp, #44]	; 0x2c
 800851a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800851c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008520:	9c00      	ldr	r4, [sp, #0]
 8008522:	930a      	str	r3, [sp, #40]	; 0x28
 8008524:	00e3      	lsls	r3, r4, #3
 8008526:	9308      	str	r3, [sp, #32]
 8008528:	ab98      	add	r3, sp, #608	; 0x260
 800852a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800852e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008532:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008536:	ab70      	add	r3, sp, #448	; 0x1c0
 8008538:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800853c:	46c3      	mov	fp, r8
 800853e:	46a1      	mov	r9, r4
 8008540:	f1b9 0f00 	cmp.w	r9, #0
 8008544:	f1a5 0508 	sub.w	r5, r5, #8
 8008548:	dc77      	bgt.n	800863a <__kernel_rem_pio2+0x202>
 800854a:	ec47 6b10 	vmov	d0, r6, r7
 800854e:	4650      	mov	r0, sl
 8008550:	f000 fac2 	bl	8008ad8 <scalbn>
 8008554:	ec57 6b10 	vmov	r6, r7, d0
 8008558:	2200      	movs	r2, #0
 800855a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800855e:	ee10 0a10 	vmov	r0, s0
 8008562:	4639      	mov	r1, r7
 8008564:	f7f8 f850 	bl	8000608 <__aeabi_dmul>
 8008568:	ec41 0b10 	vmov	d0, r0, r1
 800856c:	f000 fb34 	bl	8008bd8 <floor>
 8008570:	4b7a      	ldr	r3, [pc, #488]	; (800875c <__kernel_rem_pio2+0x324>)
 8008572:	ec51 0b10 	vmov	r0, r1, d0
 8008576:	2200      	movs	r2, #0
 8008578:	f7f8 f846 	bl	8000608 <__aeabi_dmul>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4630      	mov	r0, r6
 8008582:	4639      	mov	r1, r7
 8008584:	f7f7 fe88 	bl	8000298 <__aeabi_dsub>
 8008588:	460f      	mov	r7, r1
 800858a:	4606      	mov	r6, r0
 800858c:	f7f8 faec 	bl	8000b68 <__aeabi_d2iz>
 8008590:	9002      	str	r0, [sp, #8]
 8008592:	f7f7 ffcf 	bl	8000534 <__aeabi_i2d>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4630      	mov	r0, r6
 800859c:	4639      	mov	r1, r7
 800859e:	f7f7 fe7b 	bl	8000298 <__aeabi_dsub>
 80085a2:	f1ba 0f00 	cmp.w	sl, #0
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	dd6d      	ble.n	8008688 <__kernel_rem_pio2+0x250>
 80085ac:	1e61      	subs	r1, r4, #1
 80085ae:	ab0c      	add	r3, sp, #48	; 0x30
 80085b0:	9d02      	ldr	r5, [sp, #8]
 80085b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085b6:	f1ca 0018 	rsb	r0, sl, #24
 80085ba:	fa43 f200 	asr.w	r2, r3, r0
 80085be:	4415      	add	r5, r2
 80085c0:	4082      	lsls	r2, r0
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	aa0c      	add	r2, sp, #48	; 0x30
 80085c6:	9502      	str	r5, [sp, #8]
 80085c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80085cc:	f1ca 0217 	rsb	r2, sl, #23
 80085d0:	fa43 fb02 	asr.w	fp, r3, r2
 80085d4:	f1bb 0f00 	cmp.w	fp, #0
 80085d8:	dd65      	ble.n	80086a6 <__kernel_rem_pio2+0x26e>
 80085da:	9b02      	ldr	r3, [sp, #8]
 80085dc:	2200      	movs	r2, #0
 80085de:	3301      	adds	r3, #1
 80085e0:	9302      	str	r3, [sp, #8]
 80085e2:	4615      	mov	r5, r2
 80085e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80085e8:	4294      	cmp	r4, r2
 80085ea:	f300 809f 	bgt.w	800872c <__kernel_rem_pio2+0x2f4>
 80085ee:	f1ba 0f00 	cmp.w	sl, #0
 80085f2:	dd07      	ble.n	8008604 <__kernel_rem_pio2+0x1cc>
 80085f4:	f1ba 0f01 	cmp.w	sl, #1
 80085f8:	f000 80c1 	beq.w	800877e <__kernel_rem_pio2+0x346>
 80085fc:	f1ba 0f02 	cmp.w	sl, #2
 8008600:	f000 80c7 	beq.w	8008792 <__kernel_rem_pio2+0x35a>
 8008604:	f1bb 0f02 	cmp.w	fp, #2
 8008608:	d14d      	bne.n	80086a6 <__kernel_rem_pio2+0x26e>
 800860a:	4632      	mov	r2, r6
 800860c:	463b      	mov	r3, r7
 800860e:	4954      	ldr	r1, [pc, #336]	; (8008760 <__kernel_rem_pio2+0x328>)
 8008610:	2000      	movs	r0, #0
 8008612:	f7f7 fe41 	bl	8000298 <__aeabi_dsub>
 8008616:	4606      	mov	r6, r0
 8008618:	460f      	mov	r7, r1
 800861a:	2d00      	cmp	r5, #0
 800861c:	d043      	beq.n	80086a6 <__kernel_rem_pio2+0x26e>
 800861e:	4650      	mov	r0, sl
 8008620:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008750 <__kernel_rem_pio2+0x318>
 8008624:	f000 fa58 	bl	8008ad8 <scalbn>
 8008628:	4630      	mov	r0, r6
 800862a:	4639      	mov	r1, r7
 800862c:	ec53 2b10 	vmov	r2, r3, d0
 8008630:	f7f7 fe32 	bl	8000298 <__aeabi_dsub>
 8008634:	4606      	mov	r6, r0
 8008636:	460f      	mov	r7, r1
 8008638:	e035      	b.n	80086a6 <__kernel_rem_pio2+0x26e>
 800863a:	4b4a      	ldr	r3, [pc, #296]	; (8008764 <__kernel_rem_pio2+0x32c>)
 800863c:	2200      	movs	r2, #0
 800863e:	4630      	mov	r0, r6
 8008640:	4639      	mov	r1, r7
 8008642:	f7f7 ffe1 	bl	8000608 <__aeabi_dmul>
 8008646:	f7f8 fa8f 	bl	8000b68 <__aeabi_d2iz>
 800864a:	f7f7 ff73 	bl	8000534 <__aeabi_i2d>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	ec43 2b18 	vmov	d8, r2, r3
 8008656:	4b44      	ldr	r3, [pc, #272]	; (8008768 <__kernel_rem_pio2+0x330>)
 8008658:	2200      	movs	r2, #0
 800865a:	f7f7 ffd5 	bl	8000608 <__aeabi_dmul>
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	4630      	mov	r0, r6
 8008664:	4639      	mov	r1, r7
 8008666:	f7f7 fe17 	bl	8000298 <__aeabi_dsub>
 800866a:	f7f8 fa7d 	bl	8000b68 <__aeabi_d2iz>
 800866e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008672:	f84b 0b04 	str.w	r0, [fp], #4
 8008676:	ec51 0b18 	vmov	r0, r1, d8
 800867a:	f7f7 fe0f 	bl	800029c <__adddf3>
 800867e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008682:	4606      	mov	r6, r0
 8008684:	460f      	mov	r7, r1
 8008686:	e75b      	b.n	8008540 <__kernel_rem_pio2+0x108>
 8008688:	d106      	bne.n	8008698 <__kernel_rem_pio2+0x260>
 800868a:	1e63      	subs	r3, r4, #1
 800868c:	aa0c      	add	r2, sp, #48	; 0x30
 800868e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008692:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008696:	e79d      	b.n	80085d4 <__kernel_rem_pio2+0x19c>
 8008698:	4b34      	ldr	r3, [pc, #208]	; (800876c <__kernel_rem_pio2+0x334>)
 800869a:	2200      	movs	r2, #0
 800869c:	f7f8 fa3a 	bl	8000b14 <__aeabi_dcmpge>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d140      	bne.n	8008726 <__kernel_rem_pio2+0x2ee>
 80086a4:	4683      	mov	fp, r0
 80086a6:	2200      	movs	r2, #0
 80086a8:	2300      	movs	r3, #0
 80086aa:	4630      	mov	r0, r6
 80086ac:	4639      	mov	r1, r7
 80086ae:	f7f8 fa13 	bl	8000ad8 <__aeabi_dcmpeq>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	f000 80c1 	beq.w	800883a <__kernel_rem_pio2+0x402>
 80086b8:	1e65      	subs	r5, r4, #1
 80086ba:	462b      	mov	r3, r5
 80086bc:	2200      	movs	r2, #0
 80086be:	9900      	ldr	r1, [sp, #0]
 80086c0:	428b      	cmp	r3, r1
 80086c2:	da6d      	bge.n	80087a0 <__kernel_rem_pio2+0x368>
 80086c4:	2a00      	cmp	r2, #0
 80086c6:	f000 808a 	beq.w	80087de <__kernel_rem_pio2+0x3a6>
 80086ca:	ab0c      	add	r3, sp, #48	; 0x30
 80086cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80086d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 80ae 	beq.w	8008836 <__kernel_rem_pio2+0x3fe>
 80086da:	4650      	mov	r0, sl
 80086dc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008750 <__kernel_rem_pio2+0x318>
 80086e0:	f000 f9fa 	bl	8008ad8 <scalbn>
 80086e4:	1c6b      	adds	r3, r5, #1
 80086e6:	00da      	lsls	r2, r3, #3
 80086e8:	9205      	str	r2, [sp, #20]
 80086ea:	ec57 6b10 	vmov	r6, r7, d0
 80086ee:	aa70      	add	r2, sp, #448	; 0x1c0
 80086f0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008764 <__kernel_rem_pio2+0x32c>
 80086f4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80086f8:	462c      	mov	r4, r5
 80086fa:	f04f 0800 	mov.w	r8, #0
 80086fe:	2c00      	cmp	r4, #0
 8008700:	f280 80d4 	bge.w	80088ac <__kernel_rem_pio2+0x474>
 8008704:	462c      	mov	r4, r5
 8008706:	2c00      	cmp	r4, #0
 8008708:	f2c0 8102 	blt.w	8008910 <__kernel_rem_pio2+0x4d8>
 800870c:	4b18      	ldr	r3, [pc, #96]	; (8008770 <__kernel_rem_pio2+0x338>)
 800870e:	461e      	mov	r6, r3
 8008710:	ab70      	add	r3, sp, #448	; 0x1c0
 8008712:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008716:	1b2b      	subs	r3, r5, r4
 8008718:	f04f 0900 	mov.w	r9, #0
 800871c:	f04f 0a00 	mov.w	sl, #0
 8008720:	2700      	movs	r7, #0
 8008722:	9306      	str	r3, [sp, #24]
 8008724:	e0e6      	b.n	80088f4 <__kernel_rem_pio2+0x4bc>
 8008726:	f04f 0b02 	mov.w	fp, #2
 800872a:	e756      	b.n	80085da <__kernel_rem_pio2+0x1a2>
 800872c:	f8d8 3000 	ldr.w	r3, [r8]
 8008730:	bb05      	cbnz	r5, 8008774 <__kernel_rem_pio2+0x33c>
 8008732:	b123      	cbz	r3, 800873e <__kernel_rem_pio2+0x306>
 8008734:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008738:	f8c8 3000 	str.w	r3, [r8]
 800873c:	2301      	movs	r3, #1
 800873e:	3201      	adds	r2, #1
 8008740:	f108 0804 	add.w	r8, r8, #4
 8008744:	461d      	mov	r5, r3
 8008746:	e74f      	b.n	80085e8 <__kernel_rem_pio2+0x1b0>
	...
 8008754:	3ff00000 	.word	0x3ff00000
 8008758:	080092d0 	.word	0x080092d0
 800875c:	40200000 	.word	0x40200000
 8008760:	3ff00000 	.word	0x3ff00000
 8008764:	3e700000 	.word	0x3e700000
 8008768:	41700000 	.word	0x41700000
 800876c:	3fe00000 	.word	0x3fe00000
 8008770:	08009290 	.word	0x08009290
 8008774:	1acb      	subs	r3, r1, r3
 8008776:	f8c8 3000 	str.w	r3, [r8]
 800877a:	462b      	mov	r3, r5
 800877c:	e7df      	b.n	800873e <__kernel_rem_pio2+0x306>
 800877e:	1e62      	subs	r2, r4, #1
 8008780:	ab0c      	add	r3, sp, #48	; 0x30
 8008782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008786:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800878a:	a90c      	add	r1, sp, #48	; 0x30
 800878c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008790:	e738      	b.n	8008604 <__kernel_rem_pio2+0x1cc>
 8008792:	1e62      	subs	r2, r4, #1
 8008794:	ab0c      	add	r3, sp, #48	; 0x30
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800879e:	e7f4      	b.n	800878a <__kernel_rem_pio2+0x352>
 80087a0:	a90c      	add	r1, sp, #48	; 0x30
 80087a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	430a      	orrs	r2, r1
 80087aa:	e788      	b.n	80086be <__kernel_rem_pio2+0x286>
 80087ac:	3301      	adds	r3, #1
 80087ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80087b2:	2900      	cmp	r1, #0
 80087b4:	d0fa      	beq.n	80087ac <__kernel_rem_pio2+0x374>
 80087b6:	9a08      	ldr	r2, [sp, #32]
 80087b8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80087bc:	446a      	add	r2, sp
 80087be:	3a98      	subs	r2, #152	; 0x98
 80087c0:	9208      	str	r2, [sp, #32]
 80087c2:	9a06      	ldr	r2, [sp, #24]
 80087c4:	a920      	add	r1, sp, #128	; 0x80
 80087c6:	18a2      	adds	r2, r4, r2
 80087c8:	18e3      	adds	r3, r4, r3
 80087ca:	f104 0801 	add.w	r8, r4, #1
 80087ce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	9b02      	ldr	r3, [sp, #8]
 80087d6:	4543      	cmp	r3, r8
 80087d8:	da04      	bge.n	80087e4 <__kernel_rem_pio2+0x3ac>
 80087da:	461c      	mov	r4, r3
 80087dc:	e6a2      	b.n	8008524 <__kernel_rem_pio2+0xec>
 80087de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087e0:	2301      	movs	r3, #1
 80087e2:	e7e4      	b.n	80087ae <__kernel_rem_pio2+0x376>
 80087e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80087ea:	f7f7 fea3 	bl	8000534 <__aeabi_i2d>
 80087ee:	e8e5 0102 	strd	r0, r1, [r5], #8
 80087f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f4:	46ab      	mov	fp, r5
 80087f6:	461c      	mov	r4, r3
 80087f8:	f04f 0900 	mov.w	r9, #0
 80087fc:	2600      	movs	r6, #0
 80087fe:	2700      	movs	r7, #0
 8008800:	9b05      	ldr	r3, [sp, #20]
 8008802:	4599      	cmp	r9, r3
 8008804:	dd06      	ble.n	8008814 <__kernel_rem_pio2+0x3dc>
 8008806:	9b08      	ldr	r3, [sp, #32]
 8008808:	e8e3 6702 	strd	r6, r7, [r3], #8
 800880c:	f108 0801 	add.w	r8, r8, #1
 8008810:	9308      	str	r3, [sp, #32]
 8008812:	e7df      	b.n	80087d4 <__kernel_rem_pio2+0x39c>
 8008814:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008818:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800881c:	f7f7 fef4 	bl	8000608 <__aeabi_dmul>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4630      	mov	r0, r6
 8008826:	4639      	mov	r1, r7
 8008828:	f7f7 fd38 	bl	800029c <__adddf3>
 800882c:	f109 0901 	add.w	r9, r9, #1
 8008830:	4606      	mov	r6, r0
 8008832:	460f      	mov	r7, r1
 8008834:	e7e4      	b.n	8008800 <__kernel_rem_pio2+0x3c8>
 8008836:	3d01      	subs	r5, #1
 8008838:	e747      	b.n	80086ca <__kernel_rem_pio2+0x292>
 800883a:	ec47 6b10 	vmov	d0, r6, r7
 800883e:	f1ca 0000 	rsb	r0, sl, #0
 8008842:	f000 f949 	bl	8008ad8 <scalbn>
 8008846:	ec57 6b10 	vmov	r6, r7, d0
 800884a:	4ba0      	ldr	r3, [pc, #640]	; (8008acc <__kernel_rem_pio2+0x694>)
 800884c:	ee10 0a10 	vmov	r0, s0
 8008850:	2200      	movs	r2, #0
 8008852:	4639      	mov	r1, r7
 8008854:	f7f8 f95e 	bl	8000b14 <__aeabi_dcmpge>
 8008858:	b1f8      	cbz	r0, 800889a <__kernel_rem_pio2+0x462>
 800885a:	4b9d      	ldr	r3, [pc, #628]	; (8008ad0 <__kernel_rem_pio2+0x698>)
 800885c:	2200      	movs	r2, #0
 800885e:	4630      	mov	r0, r6
 8008860:	4639      	mov	r1, r7
 8008862:	f7f7 fed1 	bl	8000608 <__aeabi_dmul>
 8008866:	f7f8 f97f 	bl	8000b68 <__aeabi_d2iz>
 800886a:	4680      	mov	r8, r0
 800886c:	f7f7 fe62 	bl	8000534 <__aeabi_i2d>
 8008870:	4b96      	ldr	r3, [pc, #600]	; (8008acc <__kernel_rem_pio2+0x694>)
 8008872:	2200      	movs	r2, #0
 8008874:	f7f7 fec8 	bl	8000608 <__aeabi_dmul>
 8008878:	460b      	mov	r3, r1
 800887a:	4602      	mov	r2, r0
 800887c:	4639      	mov	r1, r7
 800887e:	4630      	mov	r0, r6
 8008880:	f7f7 fd0a 	bl	8000298 <__aeabi_dsub>
 8008884:	f7f8 f970 	bl	8000b68 <__aeabi_d2iz>
 8008888:	1c65      	adds	r5, r4, #1
 800888a:	ab0c      	add	r3, sp, #48	; 0x30
 800888c:	f10a 0a18 	add.w	sl, sl, #24
 8008890:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008894:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008898:	e71f      	b.n	80086da <__kernel_rem_pio2+0x2a2>
 800889a:	4630      	mov	r0, r6
 800889c:	4639      	mov	r1, r7
 800889e:	f7f8 f963 	bl	8000b68 <__aeabi_d2iz>
 80088a2:	ab0c      	add	r3, sp, #48	; 0x30
 80088a4:	4625      	mov	r5, r4
 80088a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80088aa:	e716      	b.n	80086da <__kernel_rem_pio2+0x2a2>
 80088ac:	ab0c      	add	r3, sp, #48	; 0x30
 80088ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80088b2:	f7f7 fe3f 	bl	8000534 <__aeabi_i2d>
 80088b6:	4632      	mov	r2, r6
 80088b8:	463b      	mov	r3, r7
 80088ba:	f7f7 fea5 	bl	8000608 <__aeabi_dmul>
 80088be:	4642      	mov	r2, r8
 80088c0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80088c4:	464b      	mov	r3, r9
 80088c6:	4630      	mov	r0, r6
 80088c8:	4639      	mov	r1, r7
 80088ca:	f7f7 fe9d 	bl	8000608 <__aeabi_dmul>
 80088ce:	3c01      	subs	r4, #1
 80088d0:	4606      	mov	r6, r0
 80088d2:	460f      	mov	r7, r1
 80088d4:	e713      	b.n	80086fe <__kernel_rem_pio2+0x2c6>
 80088d6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80088da:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80088de:	f7f7 fe93 	bl	8000608 <__aeabi_dmul>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4648      	mov	r0, r9
 80088e8:	4651      	mov	r1, sl
 80088ea:	f7f7 fcd7 	bl	800029c <__adddf3>
 80088ee:	3701      	adds	r7, #1
 80088f0:	4681      	mov	r9, r0
 80088f2:	468a      	mov	sl, r1
 80088f4:	9b00      	ldr	r3, [sp, #0]
 80088f6:	429f      	cmp	r7, r3
 80088f8:	dc02      	bgt.n	8008900 <__kernel_rem_pio2+0x4c8>
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	429f      	cmp	r7, r3
 80088fe:	ddea      	ble.n	80088d6 <__kernel_rem_pio2+0x49e>
 8008900:	9a06      	ldr	r2, [sp, #24]
 8008902:	ab48      	add	r3, sp, #288	; 0x120
 8008904:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008908:	e9c6 9a00 	strd	r9, sl, [r6]
 800890c:	3c01      	subs	r4, #1
 800890e:	e6fa      	b.n	8008706 <__kernel_rem_pio2+0x2ce>
 8008910:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008912:	2b02      	cmp	r3, #2
 8008914:	dc0b      	bgt.n	800892e <__kernel_rem_pio2+0x4f6>
 8008916:	2b00      	cmp	r3, #0
 8008918:	dc39      	bgt.n	800898e <__kernel_rem_pio2+0x556>
 800891a:	d05d      	beq.n	80089d8 <__kernel_rem_pio2+0x5a0>
 800891c:	9b02      	ldr	r3, [sp, #8]
 800891e:	f003 0007 	and.w	r0, r3, #7
 8008922:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008926:	ecbd 8b02 	vpop	{d8}
 800892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008930:	2b03      	cmp	r3, #3
 8008932:	d1f3      	bne.n	800891c <__kernel_rem_pio2+0x4e4>
 8008934:	9b05      	ldr	r3, [sp, #20]
 8008936:	9500      	str	r5, [sp, #0]
 8008938:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800893c:	eb0d 0403 	add.w	r4, sp, r3
 8008940:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008944:	46a2      	mov	sl, r4
 8008946:	9b00      	ldr	r3, [sp, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	f1aa 0a08 	sub.w	sl, sl, #8
 800894e:	dc69      	bgt.n	8008a24 <__kernel_rem_pio2+0x5ec>
 8008950:	46aa      	mov	sl, r5
 8008952:	f1ba 0f01 	cmp.w	sl, #1
 8008956:	f1a4 0408 	sub.w	r4, r4, #8
 800895a:	f300 8083 	bgt.w	8008a64 <__kernel_rem_pio2+0x62c>
 800895e:	9c05      	ldr	r4, [sp, #20]
 8008960:	ab48      	add	r3, sp, #288	; 0x120
 8008962:	441c      	add	r4, r3
 8008964:	2000      	movs	r0, #0
 8008966:	2100      	movs	r1, #0
 8008968:	2d01      	cmp	r5, #1
 800896a:	f300 809a 	bgt.w	8008aa2 <__kernel_rem_pio2+0x66a>
 800896e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008972:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008976:	f1bb 0f00 	cmp.w	fp, #0
 800897a:	f040 8098 	bne.w	8008aae <__kernel_rem_pio2+0x676>
 800897e:	9b04      	ldr	r3, [sp, #16]
 8008980:	e9c3 7800 	strd	r7, r8, [r3]
 8008984:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008988:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800898c:	e7c6      	b.n	800891c <__kernel_rem_pio2+0x4e4>
 800898e:	9e05      	ldr	r6, [sp, #20]
 8008990:	ab48      	add	r3, sp, #288	; 0x120
 8008992:	441e      	add	r6, r3
 8008994:	462c      	mov	r4, r5
 8008996:	2000      	movs	r0, #0
 8008998:	2100      	movs	r1, #0
 800899a:	2c00      	cmp	r4, #0
 800899c:	da33      	bge.n	8008a06 <__kernel_rem_pio2+0x5ce>
 800899e:	f1bb 0f00 	cmp.w	fp, #0
 80089a2:	d036      	beq.n	8008a12 <__kernel_rem_pio2+0x5da>
 80089a4:	4602      	mov	r2, r0
 80089a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089aa:	9c04      	ldr	r4, [sp, #16]
 80089ac:	e9c4 2300 	strd	r2, r3, [r4]
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80089b8:	f7f7 fc6e 	bl	8000298 <__aeabi_dsub>
 80089bc:	ae4a      	add	r6, sp, #296	; 0x128
 80089be:	2401      	movs	r4, #1
 80089c0:	42a5      	cmp	r5, r4
 80089c2:	da29      	bge.n	8008a18 <__kernel_rem_pio2+0x5e0>
 80089c4:	f1bb 0f00 	cmp.w	fp, #0
 80089c8:	d002      	beq.n	80089d0 <__kernel_rem_pio2+0x598>
 80089ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089ce:	4619      	mov	r1, r3
 80089d0:	9b04      	ldr	r3, [sp, #16]
 80089d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80089d6:	e7a1      	b.n	800891c <__kernel_rem_pio2+0x4e4>
 80089d8:	9c05      	ldr	r4, [sp, #20]
 80089da:	ab48      	add	r3, sp, #288	; 0x120
 80089dc:	441c      	add	r4, r3
 80089de:	2000      	movs	r0, #0
 80089e0:	2100      	movs	r1, #0
 80089e2:	2d00      	cmp	r5, #0
 80089e4:	da09      	bge.n	80089fa <__kernel_rem_pio2+0x5c2>
 80089e6:	f1bb 0f00 	cmp.w	fp, #0
 80089ea:	d002      	beq.n	80089f2 <__kernel_rem_pio2+0x5ba>
 80089ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089f0:	4619      	mov	r1, r3
 80089f2:	9b04      	ldr	r3, [sp, #16]
 80089f4:	e9c3 0100 	strd	r0, r1, [r3]
 80089f8:	e790      	b.n	800891c <__kernel_rem_pio2+0x4e4>
 80089fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80089fe:	f7f7 fc4d 	bl	800029c <__adddf3>
 8008a02:	3d01      	subs	r5, #1
 8008a04:	e7ed      	b.n	80089e2 <__kernel_rem_pio2+0x5aa>
 8008a06:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008a0a:	f7f7 fc47 	bl	800029c <__adddf3>
 8008a0e:	3c01      	subs	r4, #1
 8008a10:	e7c3      	b.n	800899a <__kernel_rem_pio2+0x562>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	e7c8      	b.n	80089aa <__kernel_rem_pio2+0x572>
 8008a18:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008a1c:	f7f7 fc3e 	bl	800029c <__adddf3>
 8008a20:	3401      	adds	r4, #1
 8008a22:	e7cd      	b.n	80089c0 <__kernel_rem_pio2+0x588>
 8008a24:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a28:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008a2c:	9b00      	ldr	r3, [sp, #0]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	4632      	mov	r2, r6
 8008a34:	463b      	mov	r3, r7
 8008a36:	4640      	mov	r0, r8
 8008a38:	4649      	mov	r1, r9
 8008a3a:	f7f7 fc2f 	bl	800029c <__adddf3>
 8008a3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4640      	mov	r0, r8
 8008a48:	4649      	mov	r1, r9
 8008a4a:	f7f7 fc25 	bl	8000298 <__aeabi_dsub>
 8008a4e:	4632      	mov	r2, r6
 8008a50:	463b      	mov	r3, r7
 8008a52:	f7f7 fc23 	bl	800029c <__adddf3>
 8008a56:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008a5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a5e:	ed8a 7b00 	vstr	d7, [sl]
 8008a62:	e770      	b.n	8008946 <__kernel_rem_pio2+0x50e>
 8008a64:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008a68:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	4632      	mov	r2, r6
 8008a70:	463b      	mov	r3, r7
 8008a72:	4649      	mov	r1, r9
 8008a74:	f7f7 fc12 	bl	800029c <__adddf3>
 8008a78:	e9cd 0100 	strd	r0, r1, [sp]
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4640      	mov	r0, r8
 8008a82:	4649      	mov	r1, r9
 8008a84:	f7f7 fc08 	bl	8000298 <__aeabi_dsub>
 8008a88:	4632      	mov	r2, r6
 8008a8a:	463b      	mov	r3, r7
 8008a8c:	f7f7 fc06 	bl	800029c <__adddf3>
 8008a90:	ed9d 7b00 	vldr	d7, [sp]
 8008a94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a98:	ed84 7b00 	vstr	d7, [r4]
 8008a9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aa0:	e757      	b.n	8008952 <__kernel_rem_pio2+0x51a>
 8008aa2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008aa6:	f7f7 fbf9 	bl	800029c <__adddf3>
 8008aaa:	3d01      	subs	r5, #1
 8008aac:	e75c      	b.n	8008968 <__kernel_rem_pio2+0x530>
 8008aae:	9b04      	ldr	r3, [sp, #16]
 8008ab0:	9a04      	ldr	r2, [sp, #16]
 8008ab2:	601f      	str	r7, [r3, #0]
 8008ab4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008ab8:	605c      	str	r4, [r3, #4]
 8008aba:	609d      	str	r5, [r3, #8]
 8008abc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ac0:	60d3      	str	r3, [r2, #12]
 8008ac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ac6:	6110      	str	r0, [r2, #16]
 8008ac8:	6153      	str	r3, [r2, #20]
 8008aca:	e727      	b.n	800891c <__kernel_rem_pio2+0x4e4>
 8008acc:	41700000 	.word	0x41700000
 8008ad0:	3e700000 	.word	0x3e700000
 8008ad4:	00000000 	.word	0x00000000

08008ad8 <scalbn>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	ec55 4b10 	vmov	r4, r5, d0
 8008ade:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	462b      	mov	r3, r5
 8008ae6:	b999      	cbnz	r1, 8008b10 <scalbn+0x38>
 8008ae8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008aec:	4323      	orrs	r3, r4
 8008aee:	d03f      	beq.n	8008b70 <scalbn+0x98>
 8008af0:	4b35      	ldr	r3, [pc, #212]	; (8008bc8 <scalbn+0xf0>)
 8008af2:	4629      	mov	r1, r5
 8008af4:	ee10 0a10 	vmov	r0, s0
 8008af8:	2200      	movs	r2, #0
 8008afa:	f7f7 fd85 	bl	8000608 <__aeabi_dmul>
 8008afe:	4b33      	ldr	r3, [pc, #204]	; (8008bcc <scalbn+0xf4>)
 8008b00:	429e      	cmp	r6, r3
 8008b02:	4604      	mov	r4, r0
 8008b04:	460d      	mov	r5, r1
 8008b06:	da10      	bge.n	8008b2a <scalbn+0x52>
 8008b08:	a327      	add	r3, pc, #156	; (adr r3, 8008ba8 <scalbn+0xd0>)
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	e01f      	b.n	8008b50 <scalbn+0x78>
 8008b10:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008b14:	4291      	cmp	r1, r2
 8008b16:	d10c      	bne.n	8008b32 <scalbn+0x5a>
 8008b18:	ee10 2a10 	vmov	r2, s0
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f7f7 fbbc 	bl	800029c <__adddf3>
 8008b24:	4604      	mov	r4, r0
 8008b26:	460d      	mov	r5, r1
 8008b28:	e022      	b.n	8008b70 <scalbn+0x98>
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008b30:	3936      	subs	r1, #54	; 0x36
 8008b32:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008b36:	4296      	cmp	r6, r2
 8008b38:	dd0d      	ble.n	8008b56 <scalbn+0x7e>
 8008b3a:	2d00      	cmp	r5, #0
 8008b3c:	a11c      	add	r1, pc, #112	; (adr r1, 8008bb0 <scalbn+0xd8>)
 8008b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b42:	da02      	bge.n	8008b4a <scalbn+0x72>
 8008b44:	a11c      	add	r1, pc, #112	; (adr r1, 8008bb8 <scalbn+0xe0>)
 8008b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b4a:	a319      	add	r3, pc, #100	; (adr r3, 8008bb0 <scalbn+0xd8>)
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f7f7 fd5a 	bl	8000608 <__aeabi_dmul>
 8008b54:	e7e6      	b.n	8008b24 <scalbn+0x4c>
 8008b56:	1872      	adds	r2, r6, r1
 8008b58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008b5c:	428a      	cmp	r2, r1
 8008b5e:	dcec      	bgt.n	8008b3a <scalbn+0x62>
 8008b60:	2a00      	cmp	r2, #0
 8008b62:	dd08      	ble.n	8008b76 <scalbn+0x9e>
 8008b64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b70:	ec45 4b10 	vmov	d0, r4, r5
 8008b74:	bd70      	pop	{r4, r5, r6, pc}
 8008b76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008b7a:	da08      	bge.n	8008b8e <scalbn+0xb6>
 8008b7c:	2d00      	cmp	r5, #0
 8008b7e:	a10a      	add	r1, pc, #40	; (adr r1, 8008ba8 <scalbn+0xd0>)
 8008b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b84:	dac0      	bge.n	8008b08 <scalbn+0x30>
 8008b86:	a10e      	add	r1, pc, #56	; (adr r1, 8008bc0 <scalbn+0xe8>)
 8008b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b8c:	e7bc      	b.n	8008b08 <scalbn+0x30>
 8008b8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b92:	3236      	adds	r2, #54	; 0x36
 8008b94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	4b0c      	ldr	r3, [pc, #48]	; (8008bd0 <scalbn+0xf8>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	e7d5      	b.n	8008b50 <scalbn+0x78>
 8008ba4:	f3af 8000 	nop.w
 8008ba8:	c2f8f359 	.word	0xc2f8f359
 8008bac:	01a56e1f 	.word	0x01a56e1f
 8008bb0:	8800759c 	.word	0x8800759c
 8008bb4:	7e37e43c 	.word	0x7e37e43c
 8008bb8:	8800759c 	.word	0x8800759c
 8008bbc:	fe37e43c 	.word	0xfe37e43c
 8008bc0:	c2f8f359 	.word	0xc2f8f359
 8008bc4:	81a56e1f 	.word	0x81a56e1f
 8008bc8:	43500000 	.word	0x43500000
 8008bcc:	ffff3cb0 	.word	0xffff3cb0
 8008bd0:	3c900000 	.word	0x3c900000
 8008bd4:	00000000 	.word	0x00000000

08008bd8 <floor>:
 8008bd8:	ec51 0b10 	vmov	r0, r1, d0
 8008bdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008be8:	2e13      	cmp	r6, #19
 8008bea:	ee10 5a10 	vmov	r5, s0
 8008bee:	ee10 8a10 	vmov	r8, s0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	dc31      	bgt.n	8008c5a <floor+0x82>
 8008bf6:	2e00      	cmp	r6, #0
 8008bf8:	da14      	bge.n	8008c24 <floor+0x4c>
 8008bfa:	a333      	add	r3, pc, #204	; (adr r3, 8008cc8 <floor+0xf0>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	f7f7 fb4c 	bl	800029c <__adddf3>
 8008c04:	2200      	movs	r2, #0
 8008c06:	2300      	movs	r3, #0
 8008c08:	f7f7 ff8e 	bl	8000b28 <__aeabi_dcmpgt>
 8008c0c:	b138      	cbz	r0, 8008c1e <floor+0x46>
 8008c0e:	2c00      	cmp	r4, #0
 8008c10:	da53      	bge.n	8008cba <floor+0xe2>
 8008c12:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008c16:	4325      	orrs	r5, r4
 8008c18:	d052      	beq.n	8008cc0 <floor+0xe8>
 8008c1a:	4c2d      	ldr	r4, [pc, #180]	; (8008cd0 <floor+0xf8>)
 8008c1c:	2500      	movs	r5, #0
 8008c1e:	4621      	mov	r1, r4
 8008c20:	4628      	mov	r0, r5
 8008c22:	e024      	b.n	8008c6e <floor+0x96>
 8008c24:	4f2b      	ldr	r7, [pc, #172]	; (8008cd4 <floor+0xfc>)
 8008c26:	4137      	asrs	r7, r6
 8008c28:	ea01 0307 	and.w	r3, r1, r7
 8008c2c:	4303      	orrs	r3, r0
 8008c2e:	d01e      	beq.n	8008c6e <floor+0x96>
 8008c30:	a325      	add	r3, pc, #148	; (adr r3, 8008cc8 <floor+0xf0>)
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	f7f7 fb31 	bl	800029c <__adddf3>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f7f7 ff73 	bl	8000b28 <__aeabi_dcmpgt>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d0eb      	beq.n	8008c1e <floor+0x46>
 8008c46:	2c00      	cmp	r4, #0
 8008c48:	bfbe      	ittt	lt
 8008c4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008c4e:	4133      	asrlt	r3, r6
 8008c50:	18e4      	addlt	r4, r4, r3
 8008c52:	ea24 0407 	bic.w	r4, r4, r7
 8008c56:	2500      	movs	r5, #0
 8008c58:	e7e1      	b.n	8008c1e <floor+0x46>
 8008c5a:	2e33      	cmp	r6, #51	; 0x33
 8008c5c:	dd0b      	ble.n	8008c76 <floor+0x9e>
 8008c5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008c62:	d104      	bne.n	8008c6e <floor+0x96>
 8008c64:	ee10 2a10 	vmov	r2, s0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	f7f7 fb17 	bl	800029c <__adddf3>
 8008c6e:	ec41 0b10 	vmov	d0, r0, r1
 8008c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c76:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008c7a:	f04f 37ff 	mov.w	r7, #4294967295
 8008c7e:	40df      	lsrs	r7, r3
 8008c80:	4238      	tst	r0, r7
 8008c82:	d0f4      	beq.n	8008c6e <floor+0x96>
 8008c84:	a310      	add	r3, pc, #64	; (adr r3, 8008cc8 <floor+0xf0>)
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	f7f7 fb07 	bl	800029c <__adddf3>
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2300      	movs	r3, #0
 8008c92:	f7f7 ff49 	bl	8000b28 <__aeabi_dcmpgt>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0c1      	beq.n	8008c1e <floor+0x46>
 8008c9a:	2c00      	cmp	r4, #0
 8008c9c:	da0a      	bge.n	8008cb4 <floor+0xdc>
 8008c9e:	2e14      	cmp	r6, #20
 8008ca0:	d101      	bne.n	8008ca6 <floor+0xce>
 8008ca2:	3401      	adds	r4, #1
 8008ca4:	e006      	b.n	8008cb4 <floor+0xdc>
 8008ca6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008caa:	2301      	movs	r3, #1
 8008cac:	40b3      	lsls	r3, r6
 8008cae:	441d      	add	r5, r3
 8008cb0:	45a8      	cmp	r8, r5
 8008cb2:	d8f6      	bhi.n	8008ca2 <floor+0xca>
 8008cb4:	ea25 0507 	bic.w	r5, r5, r7
 8008cb8:	e7b1      	b.n	8008c1e <floor+0x46>
 8008cba:	2500      	movs	r5, #0
 8008cbc:	462c      	mov	r4, r5
 8008cbe:	e7ae      	b.n	8008c1e <floor+0x46>
 8008cc0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008cc4:	e7ab      	b.n	8008c1e <floor+0x46>
 8008cc6:	bf00      	nop
 8008cc8:	8800759c 	.word	0x8800759c
 8008ccc:	7e37e43c 	.word	0x7e37e43c
 8008cd0:	bff00000 	.word	0xbff00000
 8008cd4:	000fffff 	.word	0x000fffff

08008cd8 <_init>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	bf00      	nop
 8008cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cde:	bc08      	pop	{r3}
 8008ce0:	469e      	mov	lr, r3
 8008ce2:	4770      	bx	lr

08008ce4 <_fini>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr
