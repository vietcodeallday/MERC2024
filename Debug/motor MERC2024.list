
motor MERC2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08009768  08009768  00019768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d68  08009d68  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009d68  08009d68  00019d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d70  08009d70  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d70  08009d70  00019d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d74  08009d74  00019d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009d78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  200001e8  08009f5c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08009f5c  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5f5  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000285c  00000000  00000000  0002f84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  000320a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b00  00000000  00000000  00032ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187f2  00000000  00000000  000339d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123da  00000000  00000000  0004c1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090c66  00000000  00000000  0005e5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d14  00000000  00000000  000ef20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f3f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009750 	.word	0x08009750

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009750 	.word	0x08009750

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	0000      	movs	r0, r0
	...

08000ef8 <get_rpm>:
	double rpm;
	uint16_t cnt=0;
	uint16_t preCnt=0;
	int loop=0;
	bool flag_rot;
double get_rpm(int motor){
 8000ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
	reset_tick();
 8000f02:	f000 f9b9 	bl	8001278 <reset_tick>

	switch (motor){
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d029      	beq.n	8000f60 <get_rpm+0x68>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	dc36      	bgt.n	8000f80 <get_rpm+0x88>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d003      	beq.n	8000f20 <get_rpm+0x28>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d010      	beq.n	8000f40 <get_rpm+0x48>
 8000f1e:	e02f      	b.n	8000f80 <get_rpm+0x88>
		case MOTOR_1:
			__HAL_TIM_SET_COUNTER(&htim1, (flag_rot_1)?65535:0);
 8000f20:	4b69      	ldr	r3, [pc, #420]	; (80010c8 <get_rpm+0x1d0>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <get_rpm+0x36>
 8000f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f2c:	e000      	b.n	8000f30 <get_rpm+0x38>
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4b66      	ldr	r3, [pc, #408]	; (80010cc <get_rpm+0x1d4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_1;
 8000f36:	4b64      	ldr	r3, [pc, #400]	; (80010c8 <get_rpm+0x1d0>)
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <get_rpm+0x1d8>)
 8000f3c:	701a      	strb	r2, [r3, #0]
			break;
 8000f3e:	e01f      	b.n	8000f80 <get_rpm+0x88>
		case MOTOR_2:
			__HAL_TIM_SET_COUNTER(&htim3, (flag_rot_2)?65535:0);
 8000f40:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <get_rpm+0x1dc>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <get_rpm+0x56>
 8000f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4c:	e000      	b.n	8000f50 <get_rpm+0x58>
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <get_rpm+0x1e0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_2;
 8000f56:	4b5f      	ldr	r3, [pc, #380]	; (80010d4 <get_rpm+0x1dc>)
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <get_rpm+0x1d8>)
 8000f5c:	701a      	strb	r2, [r3, #0]
			break;
 8000f5e:	e00f      	b.n	8000f80 <get_rpm+0x88>
		case MOTOR_3:
			__HAL_TIM_SET_COUNTER(&htim4, (flag_rot_3)?65535:0);
 8000f60:	4b5e      	ldr	r3, [pc, #376]	; (80010dc <get_rpm+0x1e4>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <get_rpm+0x76>
 8000f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6c:	e000      	b.n	8000f70 <get_rpm+0x78>
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4b5b      	ldr	r3, [pc, #364]	; (80010e0 <get_rpm+0x1e8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
			flag_rot=flag_rot_3;
 8000f76:	4b59      	ldr	r3, [pc, #356]	; (80010dc <get_rpm+0x1e4>)
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <get_rpm+0x1d8>)
 8000f7c:	701a      	strb	r2, [r3, #0]
			break;
 8000f7e:	bf00      	nop
	}
	ResetLoop(flag_rot);
 8000f80:	4b53      	ldr	r3, [pc, #332]	; (80010d0 <get_rpm+0x1d8>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f8eb 	bl	8001160 <ResetLoop>
	volatile uint16_t a=millis();
 8000f8a:	f000 f95b 	bl	8001244 <millis>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	b293      	uxth	r3, r2
 8000f94:	81fb      	strh	r3, [r7, #14]

	while(millis()- a <=20){
 8000f96:	e029      	b.n	8000fec <get_rpm+0xf4>
		switch (motor){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d017      	beq.n	8000fce <get_rpm+0xd6>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	dc1b      	bgt.n	8000fdc <get_rpm+0xe4>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d003      	beq.n	8000fb2 <get_rpm+0xba>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d007      	beq.n	8000fc0 <get_rpm+0xc8>
 8000fb0:	e014      	b.n	8000fdc <get_rpm+0xe4>
			case MOTOR_1:
				cnt = __HAL_TIM_GET_COUNTER(&htim1);
 8000fb2:	4b46      	ldr	r3, [pc, #280]	; (80010cc <get_rpm+0x1d4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <get_rpm+0x1ec>)
 8000fbc:	801a      	strh	r2, [r3, #0]
				break;
 8000fbe:	e00d      	b.n	8000fdc <get_rpm+0xe4>

			case MOTOR_2:
				cnt = __HAL_TIM_GET_COUNTER(&htim3);
 8000fc0:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <get_rpm+0x1e0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <get_rpm+0x1ec>)
 8000fca:	801a      	strh	r2, [r3, #0]
				break;
 8000fcc:	e006      	b.n	8000fdc <get_rpm+0xe4>

			case MOTOR_3:
				cnt = __HAL_TIM_GET_COUNTER(&htim4);
 8000fce:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <get_rpm+0x1e8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <get_rpm+0x1ec>)
 8000fd8:	801a      	strh	r2, [r3, #0]
				break;
 8000fda:	bf00      	nop
		}
		CountLoop(cnt, flag_rot);
 8000fdc:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <get_rpm+0x1ec>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	4a3b      	ldr	r2, [pc, #236]	; (80010d0 <get_rpm+0x1d8>)
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f886 	bl	80010f8 <CountLoop>
	while(millis()- a <=20){
 8000fec:	f000 f92a 	bl	8001244 <millis>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	89f9      	ldrh	r1, [r7, #14]
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	b289      	uxth	r1, r1
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	4688      	mov	r8, r1
 8000ffe:	4681      	mov	r9, r0
 8001000:	ebb2 0408 	subs.w	r4, r2, r8
 8001004:	eb63 0509 	sbc.w	r5, r3, r9
 8001008:	2c15      	cmp	r4, #21
 800100a:	f175 0300 	sbcs.w	r3, r5, #0
 800100e:	d3c3      	bcc.n	8000f98 <get_rpm+0xa0>
	}
	rpm= ((double)loop*65000+((flag_rot)?(double)(65535-cnt):(double)cnt))/47000*50*60;
 8001010:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <get_rpm+0x1f0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa8d 	bl	8000534 <__aeabi_i2d>
 800101a:	a327      	add	r3, pc, #156	; (adr r3, 80010b8 <get_rpm+0x1c0>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f7ff faf2 	bl	8000608 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4614      	mov	r4, r2
 800102a:	461d      	mov	r5, r3
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <get_rpm+0x1d8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d008      	beq.n	8001046 <get_rpm+0x14e>
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <get_rpm+0x1ec>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800103c:	33ff      	adds	r3, #255	; 0xff
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa78 	bl	8000534 <__aeabi_i2d>
 8001044:	e004      	b.n	8001050 <get_rpm+0x158>
 8001046:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <get_rpm+0x1ec>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa62 	bl	8000514 <__aeabi_ui2d>
 8001050:	4622      	mov	r2, r4
 8001052:	462b      	mov	r3, r5
 8001054:	f7ff f922 	bl	800029c <__adddf3>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	a317      	add	r3, pc, #92	; (adr r3, 80010c0 <get_rpm+0x1c8>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff fbf9 	bl	800085c <__aeabi_ddiv>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <get_rpm+0x1f4>)
 8001078:	f7ff fac6 	bl	8000608 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <get_rpm+0x1f8>)
 800108a:	f7ff fabd 	bl	8000608 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4918      	ldr	r1, [pc, #96]	; (80010f4 <get_rpm+0x1fc>)
 8001094:	e9c1 2300 	strd	r2, r3, [r1]

	return rpm;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <get_rpm+0x1fc>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	ec43 2b17 	vmov	d7, r2, r3
}
 80010a2:	eeb0 0a47 	vmov.f32	s0, s14
 80010a6:	eef0 0a67 	vmov.f32	s1, s15
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010b2:	bf00      	nop
 80010b4:	f3af 8000 	nop.w
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40efbd00 	.word	0x40efbd00
 80010c0:	00000000 	.word	0x00000000
 80010c4:	40e6f300 	.word	0x40e6f300
 80010c8:	20000460 	.word	0x20000460
 80010cc:	20000230 	.word	0x20000230
 80010d0:	20000218 	.word	0x20000218
 80010d4:	20000461 	.word	0x20000461
 80010d8:	200002c0 	.word	0x200002c0
 80010dc:	20000462 	.word	0x20000462
 80010e0:	20000308 	.word	0x20000308
 80010e4:	20000210 	.word	0x20000210
 80010e8:	20000214 	.word	0x20000214
 80010ec:	40490000 	.word	0x40490000
 80010f0:	404e0000 	.word	0x404e0000
 80010f4:	20000208 	.word	0x20000208

080010f8 <CountLoop>:
void CountLoop(uint16_t cnt, bool flag){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	80fb      	strh	r3, [r7, #6]
 8001104:	4613      	mov	r3, r2
 8001106:	717b      	strb	r3, [r7, #5]
	if (!flag){
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	f083 0301 	eor.w	r3, r3, #1
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00d      	beq.n	8001130 <CountLoop+0x38>
		if(cnt<preCnt){ //working as MOTOR1=RESET, MOTOR2=RESET, MOTOR3=RESET
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <CountLoop+0x60>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	429a      	cmp	r2, r3
 800111c:	d204      	bcs.n	8001128 <CountLoop+0x30>
			loop++;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <CountLoop+0x64>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <CountLoop+0x64>)
 8001126:	6013      	str	r3, [r2, #0]
		}
		preCnt=cnt;
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <CountLoop+0x60>)
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	8013      	strh	r3, [r2, #0]
		if(cnt>preCnt){	//
			loop++;
		}
		preCnt=cnt;
	}
}
 800112e:	e00c      	b.n	800114a <CountLoop+0x52>
		if(cnt>preCnt){	//
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <CountLoop+0x60>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	88fa      	ldrh	r2, [r7, #6]
 8001136:	429a      	cmp	r2, r3
 8001138:	d904      	bls.n	8001144 <CountLoop+0x4c>
			loop++;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <CountLoop+0x64>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <CountLoop+0x64>)
 8001142:	6013      	str	r3, [r2, #0]
		preCnt=cnt;
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <CountLoop+0x60>)
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	8013      	strh	r3, [r2, #0]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000212 	.word	0x20000212
 800115c:	20000214 	.word	0x20000214

08001160 <ResetLoop>:
void ResetLoop(bool flag){
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	if(!flag){
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f083 0301 	eor.w	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <ResetLoop+0x24>
		loop=0;
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <ResetLoop+0x40>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
		preCnt=0;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <ResetLoop+0x44>)
 800117e:	2200      	movs	r2, #0
 8001180:	801a      	strh	r2, [r3, #0]
	}else{
		loop=0;
		preCnt=65535;
	}
}
 8001182:	e006      	b.n	8001192 <ResetLoop+0x32>
		loop=0;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <ResetLoop+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
		preCnt=65535;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <ResetLoop+0x44>)
 800118c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001190:	801a      	strh	r2, [r3, #0]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000214 	.word	0x20000214
 80011a4:	20000212 	.word	0x20000212

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <systick_init_ms>:
#include "stm32f4xx.h"                  // Device header
#include "stm32f4xx_it.h"

volatile uint64_t ms,rms;
void systick_init_ms(uint32_t freq) /*Frequency in MHz*/
	{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
	__disable_irq();
	SysTick->LOAD=(freq/1000)-1;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a0c      	ldr	r2, [pc, #48]	; (800123c <systick_init_ms+0x40>)
 800120c:	fba2 2303 	umull	r2, r3, r2, r3
 8001210:	099b      	lsrs	r3, r3, #6
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <systick_init_ms+0x44>)
 8001214:	3b01      	subs	r3, #1
 8001216:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <systick_init_ms+0x44>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=7; //0b00000111;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <systick_init_ms+0x44>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(SysTick_IRQn,7);
 8001224:	2107      	movs	r1, #7
 8001226:	f04f 30ff 	mov.w	r0, #4294967295
 800122a:	f7ff ffbd 	bl	80011a8 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800122e:	b662      	cpsie	i
}
 8001230:	bf00      	nop
	__enable_irq();	
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	10624dd3 	.word	0x10624dd3
 8001240:	e000e010 	.word	0xe000e010

08001244 <millis>:

uint64_t millis(void)
	{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
}
 800124a:	bf00      	nop
	__disable_irq();
	rms=ms; //store current ms in rms
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <millis+0x2c>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <millis+0x30>)
 8001254:	e9c1 2300 	strd	r2, r3, [r1]
  __ASM volatile ("cpsie i" : : : "memory");
 8001258:	b662      	cpsie	i
}
 800125a:	bf00      	nop
	__enable_irq();
	return rms;
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <millis+0x30>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
	}
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000220 	.word	0x20000220
 8001274:	20000228 	.word	0x20000228

08001278 <reset_tick>:

void reset_tick(void){
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	ms=0;
 800127c:	4909      	ldr	r1, [pc, #36]	; (80012a4 <reset_tick+0x2c>)
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	e9c1 2300 	strd	r2, r3, [r1]
	rms=0;
 800128a:	4907      	ldr	r1, [pc, #28]	; (80012a8 <reset_tick+0x30>)
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000220 	.word	0x20000220
 80012a8:	20000228 	.word	0x20000228

080012ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012b4:	1d39      	adds	r1, r7, #4
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	2201      	movs	r2, #1
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <__io_putchar+0x20>)
 80012be:	f003 fc97 	bl	8004bf0 <HAL_UART_Transmit>
  return ch;
 80012c2:	687b      	ldr	r3, [r7, #4]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000398 	.word	0x20000398

080012d0 <pid_config>:
void pid_config(void){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	pid.Kp=0.3;
 80012d4:	491a      	ldr	r1, [pc, #104]	; (8001340 <pid_config+0x70>)
 80012d6:	a314      	add	r3, pc, #80	; (adr r3, 8001328 <pid_config+0x58>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	e9c1 2300 	strd	r2, r3, [r1]
	pid.Ki=0.2;
 80012e0:	4917      	ldr	r1, [pc, #92]	; (8001340 <pid_config+0x70>)
 80012e2:	a313      	add	r3, pc, #76	; (adr r3, 8001330 <pid_config+0x60>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid.Kd=0.005;
 80012ec:	4914      	ldr	r1, [pc, #80]	; (8001340 <pid_config+0x70>)
 80012ee:	a312      	add	r3, pc, #72	; (adr r3, 8001338 <pid_config+0x68>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pid.target_val_1=V1;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <pid_config+0x74>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	4910      	ldr	r1, [pc, #64]	; (8001340 <pid_config+0x70>)
 8001300:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid.target_val_2=V2;
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <pid_config+0x78>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <pid_config+0x70>)
 800130c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	pid.target_val_3=V3;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <pid_config+0x7c>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	490a      	ldr	r1, [pc, #40]	; (8001340 <pid_config+0x70>)
 8001318:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID_init(&pid);
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <pid_config+0x70>)
 800131e:	f000 fe8f 	bl	8002040 <PID_init>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	33333333 	.word	0x33333333
 800132c:	3fd33333 	.word	0x3fd33333
 8001330:	9999999a 	.word	0x9999999a
 8001334:	3fc99999 	.word	0x3fc99999
 8001338:	47ae147b 	.word	0x47ae147b
 800133c:	3f747ae1 	.word	0x3f747ae1
 8001340:	200003e0 	.word	0x200003e0
 8001344:	20000448 	.word	0x20000448
 8001348:	20000450 	.word	0x20000450
 800134c:	20000458 	.word	0x20000458

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001354:	f001 fc30 	bl	8002bb8 <HAL_Init>
  /* USER CODE BEGIN Init */
  //init_State();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001358:	f000 f85a 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135c:	f000 fa92 	bl	8001884 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001360:	f000 f994 	bl	800168c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001364:	f000 f908 	bl	8001578 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001368:	f000 f8ae 	bl	80014c8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800136c:	f000 fa60 	bl	8001830 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001370:	f000 f9e0 	bl	8001734 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001374:	f000 fa32 	bl	80017dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  memset(buffer, 0, sizeof(buffer));
//  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);

  systick_init_ms(8000000);
 8001378:	481d      	ldr	r0, [pc, #116]	; (80013f0 <main+0xa0>)
 800137a:	f7ff ff3f 	bl	80011fc <systick_init_ms>
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 100);
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <main+0xa4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2264      	movs	r2, #100	; 0x64
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, 0); //motor 2
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <main+0xa4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 100); //motor 3
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <main+0xa4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2264      	movs	r2, #100	; 0x64
 8001394:	63da      	str	r2, [r3, #60]	; 0x3c

//	HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	2104      	movs	r1, #4
 800139a:	4817      	ldr	r0, [pc, #92]	; (80013f8 <main+0xa8>)
 800139c:	f001 ffca 	bl	8003334 <HAL_GPIO_WritePin>
//
//	flag_rot_1=false;
//	flag_rot_2=false;
//	flag_rot_3=false;

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013a0:	2100      	movs	r1, #0
 80013a2:	4814      	ldr	r0, [pc, #80]	; (80013f4 <main+0xa4>)
 80013a4:	f002 fd20 	bl	8003de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80013a8:	2104      	movs	r1, #4
 80013aa:	4812      	ldr	r0, [pc, #72]	; (80013f4 <main+0xa4>)
 80013ac:	f002 fd1c 	bl	8003de8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013b0:	2108      	movs	r1, #8
 80013b2:	4810      	ldr	r0, [pc, #64]	; (80013f4 <main+0xa4>)
 80013b4:	f002 fd18 	bl	8003de8 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80013b8:	2104      	movs	r1, #4
 80013ba:	4810      	ldr	r0, [pc, #64]	; (80013fc <main+0xac>)
 80013bc:	f002 fe6a 	bl	8004094 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80013c0:	2104      	movs	r1, #4
 80013c2:	480f      	ldr	r0, [pc, #60]	; (8001400 <main+0xb0>)
 80013c4:	f002 fe66 	bl	8004094 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80013c8:	2104      	movs	r1, #4
 80013ca:	480e      	ldr	r0, [pc, #56]	; (8001404 <main+0xb4>)
 80013cc:	f002 fe62 	bl	8004094 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /*
   * max is 1m/s
   */HAL_Delay(1000);
 80013d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d4:	f001 fc62 	bl	8002c9c <HAL_Delay>
	Robot_Move(1, 225, 0);
 80013d8:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8001408 <main+0xb8>
 80013dc:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800140c <main+0xbc>
 80013e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80013e4:	f000 fabc 	bl	8001960 <Robot_Move>

  while (1)
  {
    /* USER CODE END WHILE */
	  PID();
 80013e8:	f001 f808 	bl	80023fc <PID>
 80013ec:	e7fc      	b.n	80013e8 <main+0x98>
 80013ee:	bf00      	nop
 80013f0:	007a1200 	.word	0x007a1200
 80013f4:	20000278 	.word	0x20000278
 80013f8:	40020400 	.word	0x40020400
 80013fc:	20000230 	.word	0x20000230
 8001400:	200002c0 	.word	0x200002c0
 8001404:	20000308 	.word	0x20000308
 8001408:	00000000 	.word	0x00000000
 800140c:	43610000 	.word	0x43610000

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b094      	sub	sp, #80	; 0x50
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	2230      	movs	r2, #48	; 0x30
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f005 f9ab 	bl	800677a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <SystemClock_Config+0xb0>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <SystemClock_Config+0xb0>)
 800143e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <SystemClock_Config+0xb0>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <SystemClock_Config+0xb4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <SystemClock_Config+0xb4>)
 800145a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <SystemClock_Config+0xb4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800146c:	2301      	movs	r3, #1
 800146e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001476:	2300      	movs	r3, #0
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	4618      	mov	r0, r3
 8001480:	f001 ff72 	bl	8003368 <HAL_RCC_OscConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800148a:	f000 fa63 	bl	8001954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148e:	230f      	movs	r3, #15
 8001490:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001492:	2301      	movs	r3, #1
 8001494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 f9d5 	bl	8003858 <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80014b4:	f000 fa4e 	bl	8001954 <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3750      	adds	r7, #80	; 0x50
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	2224      	movs	r2, #36	; 0x24
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f005 f94f 	bl	800677a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_TIM1_Init+0xa8>)
 80014e6:	4a23      	ldr	r2, [pc, #140]	; (8001574 <MX_TIM1_Init+0xac>)
 80014e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_TIM1_Init+0xa8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_TIM1_Init+0xa8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_TIM1_Init+0xa8>)
 80014f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_TIM1_Init+0xa8>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_TIM1_Init+0xa8>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_TIM1_Init+0xa8>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001510:	2303      	movs	r3, #3
 8001512:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001518:	2301      	movs	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001528:	2301      	movs	r3, #1
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_TIM1_Init+0xa8>)
 800153c:	f002 fd04 	bl	8003f48 <HAL_TIM_Encoder_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001546:	f000 fa05 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <MX_TIM1_Init+0xa8>)
 8001558:	f003 fa8c 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001562:	f000 f9f7 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	3730      	adds	r7, #48	; 0x30
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000230 	.word	0x20000230
 8001574:	40010000 	.word	0x40010000

08001578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	615a      	str	r2, [r3, #20]
 80015a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a8:	4b37      	ldr	r3, [pc, #220]	; (8001688 <MX_TIM2_Init+0x110>)
 80015aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <MX_TIM2_Init+0x110>)
 80015b2:	2207      	movs	r2, #7
 80015b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <MX_TIM2_Init+0x110>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80015bc:	4b32      	ldr	r3, [pc, #200]	; (8001688 <MX_TIM2_Init+0x110>)
 80015be:	2263      	movs	r2, #99	; 0x63
 80015c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <MX_TIM2_Init+0x110>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <MX_TIM2_Init+0x110>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ce:	482e      	ldr	r0, [pc, #184]	; (8001688 <MX_TIM2_Init+0x110>)
 80015d0:	f002 fb62 	bl	8003c98 <HAL_TIM_Base_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80015da:	f000 f9bb 	bl	8001954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4827      	ldr	r0, [pc, #156]	; (8001688 <MX_TIM2_Init+0x110>)
 80015ec:	f002 fea2 	bl	8004334 <HAL_TIM_ConfigClockSource>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80015f6:	f000 f9ad 	bl	8001954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015fa:	4823      	ldr	r0, [pc, #140]	; (8001688 <MX_TIM2_Init+0x110>)
 80015fc:	f002 fb9b 	bl	8003d36 <HAL_TIM_PWM_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001606:	f000 f9a5 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	4619      	mov	r1, r3
 8001618:	481b      	ldr	r0, [pc, #108]	; (8001688 <MX_TIM2_Init+0x110>)
 800161a:	f003 fa2b 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001624:	f000 f996 	bl	8001954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001628:	2360      	movs	r3, #96	; 0x60
 800162a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	4619      	mov	r1, r3
 800163e:	4812      	ldr	r0, [pc, #72]	; (8001688 <MX_TIM2_Init+0x110>)
 8001640:	f002 fdb6 	bl	80041b0 <HAL_TIM_PWM_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800164a:	f000 f983 	bl	8001954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2204      	movs	r2, #4
 8001652:	4619      	mov	r1, r3
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <MX_TIM2_Init+0x110>)
 8001656:	f002 fdab 	bl	80041b0 <HAL_TIM_PWM_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001660:	f000 f978 	bl	8001954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2208      	movs	r2, #8
 8001668:	4619      	mov	r1, r3
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <MX_TIM2_Init+0x110>)
 800166c:	f002 fda0 	bl	80041b0 <HAL_TIM_PWM_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8001676:	f000 f96d 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <MX_TIM2_Init+0x110>)
 800167c:	f001 f864 	bl	8002748 <HAL_TIM_MspPostInit>

}
 8001680:	bf00      	nop
 8001682:	3738      	adds	r7, #56	; 0x38
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000278 	.word	0x20000278

0800168c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	2224      	movs	r2, #36	; 0x24
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f005 f86d 	bl	800677a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <MX_TIM3_Init+0xa0>)
 80016aa:	4a21      	ldr	r2, [pc, #132]	; (8001730 <MX_TIM3_Init+0xa4>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <MX_TIM3_Init+0xa0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <MX_TIM3_Init+0xa0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_TIM3_Init+0xa0>)
 80016bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_TIM3_Init+0xa0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <MX_TIM3_Init+0xa0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ce:	2303      	movs	r3, #3
 80016d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016d6:	2301      	movs	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016e6:	2301      	movs	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <MX_TIM3_Init+0xa0>)
 80016fa:	f002 fc25 	bl	8003f48 <HAL_TIM_Encoder_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001704:	f000 f926 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_TIM3_Init+0xa0>)
 8001716:	f003 f9ad 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001720:	f000 f918 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	3730      	adds	r7, #48	; 0x30
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200002c0 	.word	0x200002c0
 8001730:	40000400 	.word	0x40000400

08001734 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	2224      	movs	r2, #36	; 0x24
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f005 f819 	bl	800677a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <MX_TIM4_Init+0xa0>)
 8001752:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <MX_TIM4_Init+0xa4>)
 8001754:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <MX_TIM4_Init+0xa0>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <MX_TIM4_Init+0xa0>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_TIM4_Init+0xa0>)
 8001764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001768:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_TIM4_Init+0xa0>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_TIM4_Init+0xa0>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001776:	2303      	movs	r3, #3
 8001778:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800177e:	2301      	movs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800178e:	2301      	movs	r3, #1
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4619      	mov	r1, r3
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <MX_TIM4_Init+0xa0>)
 80017a2:	f002 fbd1 	bl	8003f48 <HAL_TIM_Encoder_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80017ac:	f000 f8d2 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_TIM4_Init+0xa0>)
 80017be:	f003 f959 	bl	8004a74 <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80017c8:	f000 f8c4 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	3730      	adds	r7, #48	; 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000308 	.word	0x20000308
 80017d8:	40000800 	.word	0x40000800

080017dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_USART1_UART_Init+0x4c>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <MX_USART1_UART_Init+0x50>)
 80017e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <MX_USART1_UART_Init+0x4c>)
 80017e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_USART1_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_USART1_UART_Init+0x4c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_USART1_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_USART1_UART_Init+0x4c>)
 8001802:	220c      	movs	r2, #12
 8001804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_USART1_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_USART1_UART_Init+0x4c>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_USART1_UART_Init+0x4c>)
 8001814:	f003 f99c 	bl	8004b50 <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800181e:	f000 f899 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000350 	.word	0x20000350
 800182c:	40011000 	.word	0x40011000

08001830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_USART2_UART_Init+0x4c>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <MX_USART2_UART_Init+0x50>)
 8001838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <MX_USART2_UART_Init+0x4c>)
 800183c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_USART2_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_USART2_UART_Init+0x4c>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <MX_USART2_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_USART2_UART_Init+0x4c>)
 8001856:	220c      	movs	r2, #12
 8001858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <MX_USART2_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_USART2_UART_Init+0x4c>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_USART2_UART_Init+0x4c>)
 8001868:	f003 f972 	bl	8004b50 <HAL_UART_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001872:	f000 f86f 	bl	8001954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000398 	.word	0x20000398
 8001880:	40004400 	.word	0x40004400

08001884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <MX_GPIO_Init+0xc4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a29      	ldr	r2, [pc, #164]	; (8001948 <MX_GPIO_Init+0xc4>)
 80018a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b27      	ldr	r3, [pc, #156]	; (8001948 <MX_GPIO_Init+0xc4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <MX_GPIO_Init+0xc4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a22      	ldr	r2, [pc, #136]	; (8001948 <MX_GPIO_Init+0xc4>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <MX_GPIO_Init+0xc4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <MX_GPIO_Init+0xc4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <MX_GPIO_Init+0xc4>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <MX_GPIO_Init+0xc4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIRECTION_3_Pin|DIRECTION_2_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2106      	movs	r1, #6
 80018f2:	4816      	ldr	r0, [pc, #88]	; (800194c <MX_GPIO_Init+0xc8>)
 80018f4:	f001 fd1e 	bl	8003334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018fe:	4814      	ldr	r0, [pc, #80]	; (8001950 <MX_GPIO_Init+0xcc>)
 8001900:	f001 fd18 	bl	8003334 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIRECTION_3_Pin DIRECTION_2_Pin */
  GPIO_InitStruct.Pin = DIRECTION_3_Pin|DIRECTION_2_Pin;
 8001904:	2306      	movs	r3, #6
 8001906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001908:	2301      	movs	r3, #1
 800190a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	4619      	mov	r1, r3
 800191a:	480c      	ldr	r0, [pc, #48]	; (800194c <MX_GPIO_Init+0xc8>)
 800191c:	f001 fb86 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECTION_1_Pin */
  GPIO_InitStruct.Pin = DIRECTION_1_Pin;
 8001920:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001926:	2301      	movs	r3, #1
 8001928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIRECTION_1_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_GPIO_Init+0xcc>)
 800193a:	f001 fb77 	bl	800302c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800193e:	bf00      	nop
 8001940:	3720      	adds	r7, #32
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40020400 	.word	0x40020400
 8001950:	40020000 	.word	0x40020000

08001954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001958:	b672      	cpsid	i
}
 800195a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800195c:	e7fe      	b.n	800195c <Error_Handler+0x8>
	...

08001960 <Robot_Move>:
flag_rot_2,
flag_rot_3=false;

double prev_duty_1, prev_duty_2=0, prev_duty_3=100;
double duty=100;
void Robot_Move(float Vd, float Theta, float Vtheta){
 8001960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001964:	b092      	sub	sp, #72	; 0x48
 8001966:	af00      	add	r7, sp, #0
 8001968:	ed87 0a07 	vstr	s0, [r7, #28]
 800196c:	edc7 0a06 	vstr	s1, [r7, #24]
 8001970:	ed87 1a05 	vstr	s2, [r7, #20]
	double V1_abs, V2_abs, V3_abs, Vmax, Temp;

	V2=Vd*(-0.87*cos(Theta*PI/180)-0.5*sin(Theta*PI/180));
 8001974:	69f8      	ldr	r0, [r7, #28]
 8001976:	f7fe fdef 	bl	8000558 <__aeabi_f2d>
 800197a:	4604      	mov	r4, r0
 800197c:	460d      	mov	r5, r1
 800197e:	69b8      	ldr	r0, [r7, #24]
 8001980:	f7fe fdea 	bl	8000558 <__aeabi_f2d>
 8001984:	a3ba      	add	r3, pc, #744	; (adr r3, 8001c70 <Robot_Move+0x310>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fe3d 	bl	8000608 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4bbb      	ldr	r3, [pc, #748]	; (8001c88 <Robot_Move+0x328>)
 800199c:	f7fe ff5e 	bl	800085c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	ec43 2b17 	vmov	d7, r2, r3
 80019a8:	eeb0 0a47 	vmov.f32	s0, s14
 80019ac:	eef0 0a67 	vmov.f32	s1, s15
 80019b0:	f006 fe3a 	bl	8008628 <cos>
 80019b4:	ec51 0b10 	vmov	r0, r1, d0
 80019b8:	a3ab      	add	r3, pc, #684	; (adr r3, 8001c68 <Robot_Move+0x308>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fe23 	bl	8000608 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4690      	mov	r8, r2
 80019c8:	4699      	mov	r9, r3
 80019ca:	69b8      	ldr	r0, [r7, #24]
 80019cc:	f7fe fdc4 	bl	8000558 <__aeabi_f2d>
 80019d0:	a3a7      	add	r3, pc, #668	; (adr r3, 8001c70 <Robot_Move+0x310>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fe17 	bl	8000608 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	4ba8      	ldr	r3, [pc, #672]	; (8001c88 <Robot_Move+0x328>)
 80019e8:	f7fe ff38 	bl	800085c <__aeabi_ddiv>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	ec43 2b17 	vmov	d7, r2, r3
 80019f4:	eeb0 0a47 	vmov.f32	s0, s14
 80019f8:	eef0 0a67 	vmov.f32	s1, s15
 80019fc:	f006 fe68 	bl	80086d0 <sin>
 8001a00:	ec51 0b10 	vmov	r0, r1, d0
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4ba0      	ldr	r3, [pc, #640]	; (8001c8c <Robot_Move+0x32c>)
 8001a0a:	f7fe fdfd 	bl	8000608 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4640      	mov	r0, r8
 8001a14:	4649      	mov	r1, r9
 8001a16:	f7fe fc3f 	bl	8000298 <__aeabi_dsub>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4620      	mov	r0, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	f7fe fdf1 	bl	8000608 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4999      	ldr	r1, [pc, #612]	; (8001c90 <Robot_Move+0x330>)
 8001a2c:	e9c1 2300 	strd	r2, r3, [r1]
	V3=Vd*(0.87*cos(Theta*PI/180)-0.5*sin(Theta*PI/180));
 8001a30:	69f8      	ldr	r0, [r7, #28]
 8001a32:	f7fe fd91 	bl	8000558 <__aeabi_f2d>
 8001a36:	4604      	mov	r4, r0
 8001a38:	460d      	mov	r5, r1
 8001a3a:	69b8      	ldr	r0, [r7, #24]
 8001a3c:	f7fe fd8c 	bl	8000558 <__aeabi_f2d>
 8001a40:	a38b      	add	r3, pc, #556	; (adr r3, 8001c70 <Robot_Move+0x310>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe fddf 	bl	8000608 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4b8c      	ldr	r3, [pc, #560]	; (8001c88 <Robot_Move+0x328>)
 8001a58:	f7fe ff00 	bl	800085c <__aeabi_ddiv>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	ec43 2b17 	vmov	d7, r2, r3
 8001a64:	eeb0 0a47 	vmov.f32	s0, s14
 8001a68:	eef0 0a67 	vmov.f32	s1, s15
 8001a6c:	f006 fddc 	bl	8008628 <cos>
 8001a70:	ec51 0b10 	vmov	r0, r1, d0
 8001a74:	a380      	add	r3, pc, #512	; (adr r3, 8001c78 <Robot_Move+0x318>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fdc5 	bl	8000608 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4690      	mov	r8, r2
 8001a84:	4699      	mov	r9, r3
 8001a86:	69b8      	ldr	r0, [r7, #24]
 8001a88:	f7fe fd66 	bl	8000558 <__aeabi_f2d>
 8001a8c:	a378      	add	r3, pc, #480	; (adr r3, 8001c70 <Robot_Move+0x310>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fdb9 	bl	8000608 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b79      	ldr	r3, [pc, #484]	; (8001c88 <Robot_Move+0x328>)
 8001aa4:	f7fe feda 	bl	800085c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	ec43 2b17 	vmov	d7, r2, r3
 8001ab0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab4:	eef0 0a67 	vmov.f32	s1, s15
 8001ab8:	f006 fe0a 	bl	80086d0 <sin>
 8001abc:	ec51 0b10 	vmov	r0, r1, d0
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b71      	ldr	r3, [pc, #452]	; (8001c8c <Robot_Move+0x32c>)
 8001ac6:	f7fe fd9f 	bl	8000608 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4640      	mov	r0, r8
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	f7fe fbe1 	bl	8000298 <__aeabi_dsub>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fd93 	bl	8000608 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	496b      	ldr	r1, [pc, #428]	; (8001c94 <Robot_Move+0x334>)
 8001ae8:	e9c1 2300 	strd	r2, r3, [r1]
	V1=Vd*sin(Theta*PI/180);
 8001aec:	69f8      	ldr	r0, [r7, #28]
 8001aee:	f7fe fd33 	bl	8000558 <__aeabi_f2d>
 8001af2:	4604      	mov	r4, r0
 8001af4:	460d      	mov	r5, r1
 8001af6:	69b8      	ldr	r0, [r7, #24]
 8001af8:	f7fe fd2e 	bl	8000558 <__aeabi_f2d>
 8001afc:	a35c      	add	r3, pc, #368	; (adr r3, 8001c70 <Robot_Move+0x310>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fd81 	bl	8000608 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b5d      	ldr	r3, [pc, #372]	; (8001c88 <Robot_Move+0x328>)
 8001b14:	f7fe fea2 	bl	800085c <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	ec43 2b17 	vmov	d7, r2, r3
 8001b20:	eeb0 0a47 	vmov.f32	s0, s14
 8001b24:	eef0 0a67 	vmov.f32	s1, s15
 8001b28:	f006 fdd2 	bl	80086d0 <sin>
 8001b2c:	ec53 2b10 	vmov	r2, r3, d0
 8001b30:	4620      	mov	r0, r4
 8001b32:	4629      	mov	r1, r5
 8001b34:	f7fe fd68 	bl	8000608 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4956      	ldr	r1, [pc, #344]	; (8001c98 <Robot_Move+0x338>)
 8001b3e:	e9c1 2300 	strd	r2, r3, [r1]

	V1_abs=fabs(V1);
 8001b42:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <Robot_Move+0x338>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	6439      	str	r1, [r7, #64]	; 0x40
 8001b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b50:	647b      	str	r3, [r7, #68]	; 0x44
	V2_abs=fabs(V2);
 8001b52:	4b4f      	ldr	r3, [pc, #316]	; (8001c90 <Robot_Move+0x330>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b60:	63fb      	str	r3, [r7, #60]	; 0x3c
	V3_abs=fabs(V3);
 8001b62:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <Robot_Move+0x334>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	6339      	str	r1, [r7, #48]	; 0x30
 8001b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34

	Vmax=V1_abs;
 8001b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V2_abs > Vmax) ? V2_abs : Vmax;
 8001b7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b7e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b82:	f7fe ffd1 	bl	8000b28 <__aeabi_dcmpgt>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <Robot_Move+0x232>
 8001b8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b90:	e001      	b.n	8001b96 <Robot_Move+0x236>
 8001b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b96:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	Vmax = (V3_abs > Vmax) ? V3_abs : Vmax;
 8001b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b9e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ba2:	f7fe ffc1 	bl	8000b28 <__aeabi_dcmpgt>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <Robot_Move+0x252>
 8001bac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001bb0:	e001      	b.n	8001bb6 <Robot_Move+0x256>
 8001bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (Vmax>10000){
 8001bba:	a331      	add	r3, pc, #196	; (adr r3, 8001c80 <Robot_Move+0x320>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bc4:	f7fe ffb0 	bl	8000b28 <__aeabi_dcmpgt>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d02e      	beq.n	8001c2c <Robot_Move+0x2cc>
	Temp=10000/Vmax;
 8001bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bd2:	a12b      	add	r1, pc, #172	; (adr r1, 8001c80 <Robot_Move+0x320>)
 8001bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bd8:	f7fe fe40 	bl	800085c <__aeabi_ddiv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	e9c7 2308 	strd	r2, r3, [r7, #32]
		V1= V1*Temp;
 8001be4:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <Robot_Move+0x338>)
 8001be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bee:	f7fe fd0b 	bl	8000608 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4928      	ldr	r1, [pc, #160]	; (8001c98 <Robot_Move+0x338>)
 8001bf8:	e9c1 2300 	strd	r2, r3, [r1]
		V2= V2*Temp;
 8001bfc:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <Robot_Move+0x330>)
 8001bfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c06:	f7fe fcff 	bl	8000608 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4920      	ldr	r1, [pc, #128]	; (8001c90 <Robot_Move+0x330>)
 8001c10:	e9c1 2300 	strd	r2, r3, [r1]
		V3= V3*Temp;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <Robot_Move+0x334>)
 8001c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c1e:	f7fe fcf3 	bl	8000608 <__aeabi_dmul>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	491b      	ldr	r1, [pc, #108]	; (8001c94 <Robot_Move+0x334>)
 8001c28:	e9c1 2300 	strd	r2, r3, [r1]
//	 V1 = Vmax*V1/10000;
//	 V2 = Vmax*V2/10000;
//	 V3 = Vmax*V3/10000;

//	 printf("V1= %.2f m/s \t V2= %.2f m/s \t V3= %.2f m/s \r\n", V1,V2,V3);
	if(V1<0){
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <Robot_Move+0x338>)
 8001c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	f7fe ff57 	bl	8000aec <__aeabi_dcmplt>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d02b      	beq.n	8001c9c <Robot_Move+0x33c>
	 Rotation(MOTOR_1, !CLOCK_WISE);
 8001c44:	2100      	movs	r1, #0
 8001c46:	2001      	movs	r0, #1
 8001c48:	f000 f94e 	bl	8001ee8 <Rotation>
	 V1=fabs(V1);
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <Robot_Move+0x338>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	60ba      	str	r2, [r7, #8]
 8001c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <Robot_Move+0x338>)
 8001c5c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c60:	ed83 7b00 	vstr	d7, [r3]
 8001c64:	e01e      	b.n	8001ca4 <Robot_Move+0x344>
 8001c66:	bf00      	nop
 8001c68:	3d70a3d7 	.word	0x3d70a3d7
 8001c6c:	bfebd70a 	.word	0xbfebd70a
 8001c70:	54524550 	.word	0x54524550
 8001c74:	400921fb 	.word	0x400921fb
 8001c78:	3d70a3d7 	.word	0x3d70a3d7
 8001c7c:	3febd70a 	.word	0x3febd70a
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40c38800 	.word	0x40c38800
 8001c88:	40668000 	.word	0x40668000
 8001c8c:	3fe00000 	.word	0x3fe00000
 8001c90:	20000450 	.word	0x20000450
 8001c94:	20000458 	.word	0x20000458
 8001c98:	20000448 	.word	0x20000448
	} else{
	 Rotation(MOTOR_1, CLOCK_WISE);
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f000 f922 	bl	8001ee8 <Rotation>
	}
	if(V2<0){
 8001ca4:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <Robot_Move+0x43c>)
 8001ca6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	f7fe ff1b 	bl	8000aec <__aeabi_dcmplt>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d010      	beq.n	8001cde <Robot_Move+0x37e>
	 Rotation(MOTOR_2, !CLOCK_WISE);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f000 f912 	bl	8001ee8 <Rotation>
	 V2=fabs(V2);
 8001cc4:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <Robot_Move+0x43c>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	603a      	str	r2, [r7, #0]
 8001ccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <Robot_Move+0x43c>)
 8001cd4:	ed97 7b00 	vldr	d7, [r7]
 8001cd8:	ed83 7b00 	vstr	d7, [r3]
 8001cdc:	e003      	b.n	8001ce6 <Robot_Move+0x386>
	} else{
	 Rotation(MOTOR_2, CLOCK_WISE);
 8001cde:	2101      	movs	r1, #1
 8001ce0:	2002      	movs	r0, #2
 8001ce2:	f000 f901 	bl	8001ee8 <Rotation>
	}
	if(V3<0){
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <Robot_Move+0x440>)
 8001ce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	f7fe fefa 	bl	8000aec <__aeabi_dcmplt>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00d      	beq.n	8001d1a <Robot_Move+0x3ba>
	 Rotation(MOTOR_3, !CLOCK_WISE);
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 f8f1 	bl	8001ee8 <Rotation>
	 V3=fabs(V3);
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <Robot_Move+0x440>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	4692      	mov	sl, r2
 8001d0e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <Robot_Move+0x440>)
 8001d14:	e9c3 ab00 	strd	sl, fp, [r3]
 8001d18:	e003      	b.n	8001d22 <Robot_Move+0x3c2>
	} else{
	 Rotation(MOTOR_3, CLOCK_WISE);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f000 f8e3 	bl	8001ee8 <Rotation>
	}

	V1=v2rpm(V1);
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <Robot_Move+0x444>)
 8001d24:	ed93 7b00 	vldr	d7, [r3]
 8001d28:	eeb0 0a47 	vmov.f32	s0, s14
 8001d2c:	eef0 0a67 	vmov.f32	s1, s15
 8001d30:	f000 f936 	bl	8001fa0 <v2rpm>
 8001d34:	eeb0 7a40 	vmov.f32	s14, s0
 8001d38:	eef0 7a60 	vmov.f32	s15, s1
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <Robot_Move+0x444>)
 8001d3e:	ed83 7b00 	vstr	d7, [r3]
	V2=v2rpm(V2);
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <Robot_Move+0x43c>)
 8001d44:	ed93 7b00 	vldr	d7, [r3]
 8001d48:	eeb0 0a47 	vmov.f32	s0, s14
 8001d4c:	eef0 0a67 	vmov.f32	s1, s15
 8001d50:	f000 f926 	bl	8001fa0 <v2rpm>
 8001d54:	eeb0 7a40 	vmov.f32	s14, s0
 8001d58:	eef0 7a60 	vmov.f32	s15, s1
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <Robot_Move+0x43c>)
 8001d5e:	ed83 7b00 	vstr	d7, [r3]
	V3=v2rpm(V3);
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <Robot_Move+0x440>)
 8001d64:	ed93 7b00 	vldr	d7, [r3]
 8001d68:	eeb0 0a47 	vmov.f32	s0, s14
 8001d6c:	eef0 0a67 	vmov.f32	s1, s15
 8001d70:	f000 f916 	bl	8001fa0 <v2rpm>
 8001d74:	eeb0 7a40 	vmov.f32	s14, s0
 8001d78:	eef0 7a60 	vmov.f32	s15, s1
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <Robot_Move+0x440>)
 8001d7e:	ed83 7b00 	vstr	d7, [r3]
	V2=20;
 8001d82:	4906      	ldr	r1, [pc, #24]	; (8001d9c <Robot_Move+0x43c>)
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <Robot_Move+0x448>)
 8001d8a:	e9c1 2300 	strd	r2, r3, [r1]
	pid_config();
 8001d8e:	f7ff fa9f 	bl	80012d0 <pid_config>
//	prev_duty_1=duty_V1;
//	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, duty_V2);
//	prev_duty_2=duty_V2;
//	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, duty_V3);
//	prev_duty_3=duty_V3;
}
 8001d92:	bf00      	nop
 8001d94:	3748      	adds	r7, #72	; 0x48
 8001d96:	46bd      	mov	sp, r7
 8001d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d9c:	20000450 	.word	0x20000450
 8001da0:	20000458 	.word	0x20000458
 8001da4:	20000448 	.word	0x20000448
 8001da8:	40340000 	.word	0x40340000

08001dac <set_duty_cycle>:
double rpm_to_duty(double rpm){
	double duty=(98.15-0.6*rpm);
	return duty;
}
void set_duty_cycle(int motor, double out){
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	ed87 0b00 	vstr	d0, [r7]
	double prev_duty;
	if(motor==MOTOR_1){
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d105      	bne.n	8001dca <set_duty_cycle+0x1e>
		prev_duty=prev_duty_1;
 8001dbe:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <set_duty_cycle+0x124>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001dc8:	e010      	b.n	8001dec <set_duty_cycle+0x40>
	}
	else if(motor==MOTOR_2){
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d105      	bne.n	8001ddc <set_duty_cycle+0x30>
		prev_duty=prev_duty_2;
 8001dd0:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <set_duty_cycle+0x128>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001dda:	e007      	b.n	8001dec <set_duty_cycle+0x40>
	}
	else if(motor==MOTOR_3){
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d104      	bne.n	8001dec <set_duty_cycle+0x40>
		prev_duty=prev_duty_3;
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <set_duty_cycle+0x12c>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}
//	double duty = rpm_to_duty(rpm,out)-out;

	duty=prev_duty-out;
 8001dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001df0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001df4:	f7fe fa50 	bl	8000298 <__aeabi_dsub>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4937      	ldr	r1, [pc, #220]	; (8001edc <set_duty_cycle+0x130>)
 8001dfe:	e9c1 2300 	strd	r2, r3, [r1]
	if(duty>100){duty=100;}
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <set_duty_cycle+0x130>)
 8001e04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <set_duty_cycle+0x134>)
 8001e0e:	f7fe fe8b 	bl	8000b28 <__aeabi_dcmpgt>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <set_duty_cycle+0x78>
 8001e18:	4930      	ldr	r1, [pc, #192]	; (8001edc <set_duty_cycle+0x130>)
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <set_duty_cycle+0x134>)
 8001e20:	e9c1 2300 	strd	r2, r3, [r1]
	if(duty<0){duty=0;}
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <set_duty_cycle+0x130>)
 8001e26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	f7fe fe5b 	bl	8000aec <__aeabi_dcmplt>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <set_duty_cycle+0x9e>
 8001e3c:	4927      	ldr	r1, [pc, #156]	; (8001edc <set_duty_cycle+0x130>)
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	e9c1 2300 	strd	r2, r3, [r1]

	if(motor==MOTOR_1){
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d111      	bne.n	8001e74 <set_duty_cycle+0xc8>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, duty);
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <set_duty_cycle+0x130>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	4923      	ldr	r1, [pc, #140]	; (8001ee4 <set_duty_cycle+0x138>)
 8001e58:	680c      	ldr	r4, [r1, #0]
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7fe feab 	bl	8000bb8 <__aeabi_d2uiz>
 8001e62:	4603      	mov	r3, r0
 8001e64:	6363      	str	r3, [r4, #52]	; 0x34
		prev_duty_1=duty;
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <set_duty_cycle+0x130>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	4918      	ldr	r1, [pc, #96]	; (8001ed0 <set_duty_cycle+0x124>)
 8001e6e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	else if(motor==MOTOR_3){
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, duty);
		prev_duty_3=duty;
	}
}
 8001e72:	e028      	b.n	8001ec6 <set_duty_cycle+0x11a>
	else if(motor==MOTOR_2){
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d111      	bne.n	8001e9e <set_duty_cycle+0xf2>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, duty);
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <set_duty_cycle+0x130>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	4918      	ldr	r1, [pc, #96]	; (8001ee4 <set_duty_cycle+0x138>)
 8001e82:	680c      	ldr	r4, [r1, #0]
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f7fe fe96 	bl	8000bb8 <__aeabi_d2uiz>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	63a3      	str	r3, [r4, #56]	; 0x38
		prev_duty_2=duty;
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <set_duty_cycle+0x130>)
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	490f      	ldr	r1, [pc, #60]	; (8001ed4 <set_duty_cycle+0x128>)
 8001e98:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001e9c:	e013      	b.n	8001ec6 <set_duty_cycle+0x11a>
	else if(motor==MOTOR_3){
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d110      	bne.n	8001ec6 <set_duty_cycle+0x11a>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, duty);
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <set_duty_cycle+0x130>)
 8001ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eaa:	490e      	ldr	r1, [pc, #56]	; (8001ee4 <set_duty_cycle+0x138>)
 8001eac:	680c      	ldr	r4, [r1, #0]
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fe81 	bl	8000bb8 <__aeabi_d2uiz>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	63e3      	str	r3, [r4, #60]	; 0x3c
		prev_duty_3=duty;
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <set_duty_cycle+0x130>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	4905      	ldr	r1, [pc, #20]	; (8001ed8 <set_duty_cycle+0x12c>)
 8001ec2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001ec6:	bf00      	nop
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd90      	pop	{r4, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000468 	.word	0x20000468
 8001ed4:	20000470 	.word	0x20000470
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	40590000 	.word	0x40590000
 8001ee4:	20000278 	.word	0x20000278

08001ee8 <Rotation>:
void Rotation(int motor, int rotation){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
	if(motor==MOTOR_1){
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d115      	bne.n	8001f24 <Rotation+0x3c>
		if(rotation==CLOCK_WISE){
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d109      	bne.n	8001f12 <Rotation+0x2a>
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, CLOCK_WISE);
 8001efe:	2201      	movs	r2, #1
 8001f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f04:	4820      	ldr	r0, [pc, #128]	; (8001f88 <Rotation+0xa0>)
 8001f06:	f001 fa15 	bl	8003334 <HAL_GPIO_WritePin>
			flag_rot_1=true;
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <Rotation+0xa4>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	e008      	b.n	8001f24 <Rotation+0x3c>
		} else {
			HAL_GPIO_WritePin(DIRECTION_1_GPIO_Port, DIRECTION_1_Pin, !CLOCK_WISE);
 8001f12:	2200      	movs	r2, #0
 8001f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f18:	481b      	ldr	r0, [pc, #108]	; (8001f88 <Rotation+0xa0>)
 8001f1a:	f001 fa0b 	bl	8003334 <HAL_GPIO_WritePin>
			flag_rot_1=false;
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <Rotation+0xa4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_2){
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d113      	bne.n	8001f52 <Rotation+0x6a>
		if(rotation==CLOCK_WISE){
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d108      	bne.n	8001f42 <Rotation+0x5a>
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, CLOCK_WISE);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2104      	movs	r1, #4
 8001f34:	4816      	ldr	r0, [pc, #88]	; (8001f90 <Rotation+0xa8>)
 8001f36:	f001 f9fd 	bl	8003334 <HAL_GPIO_WritePin>
			flag_rot_2=true;
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <Rotation+0xac>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e007      	b.n	8001f52 <Rotation+0x6a>
		} else {
			HAL_GPIO_WritePin(DIRECTION_2_GPIO_Port, DIRECTION_2_Pin, !CLOCK_WISE);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2104      	movs	r1, #4
 8001f46:	4812      	ldr	r0, [pc, #72]	; (8001f90 <Rotation+0xa8>)
 8001f48:	f001 f9f4 	bl	8003334 <HAL_GPIO_WritePin>
			flag_rot_2=false;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <Rotation+0xac>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
		}
	}
	if(motor==MOTOR_3){
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d113      	bne.n	8001f80 <Rotation+0x98>
		if(rotation==CLOCK_WISE){
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d108      	bne.n	8001f70 <Rotation+0x88>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, CLOCK_WISE);
 8001f5e:	2201      	movs	r2, #1
 8001f60:	2102      	movs	r1, #2
 8001f62:	480b      	ldr	r0, [pc, #44]	; (8001f90 <Rotation+0xa8>)
 8001f64:	f001 f9e6 	bl	8003334 <HAL_GPIO_WritePin>
			flag_rot_3=true;
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <Rotation+0xb0>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
		} else {
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
			flag_rot_3=false;
		}
	}
}
 8001f6e:	e007      	b.n	8001f80 <Rotation+0x98>
			HAL_GPIO_WritePin(DIRECTION_3_GPIO_Port, DIRECTION_3_Pin, !CLOCK_WISE);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2102      	movs	r1, #2
 8001f74:	4806      	ldr	r0, [pc, #24]	; (8001f90 <Rotation+0xa8>)
 8001f76:	f001 f9dd 	bl	8003334 <HAL_GPIO_WritePin>
			flag_rot_3=false;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <Rotation+0xb0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	20000460 	.word	0x20000460
 8001f90:	40020400 	.word	0x40020400
 8001f94:	20000461 	.word	0x20000461
 8001f98:	20000462 	.word	0x20000462
 8001f9c:	00000000 	.word	0x00000000

08001fa0 <v2rpm>:

double v2rpm (double vantoc){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0b00 	vstr	d0, [r7]
    return (vantoc/(PI*diameter))*60;
 8001faa:	a30e      	add	r3, pc, #56	; (adr r3, 8001fe4 <v2rpm+0x44>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fb4:	f7fe fc52 	bl	800085c <__aeabi_ddiv>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <v2rpm+0x40>)
 8001fc6:	f7fe fb1f 	bl	8000608 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fd6:	eef0 0a67 	vmov.f32	s1, s15
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	404e0000 	.word	0x404e0000
 8001fe4:	5b30428a 	.word	0x5b30428a
 8001fe8:	3fd8209f 	.word	0x3fd8209f

08001fec <Message_handler>:
	 if (comVAR==length)
		 	return 1;
	 else 	return 0;
}

void Message_handler(){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	printf("buffer: %c \r\n", buffer);
 8001ff0:	490d      	ldr	r1, [pc, #52]	; (8002028 <Message_handler+0x3c>)
 8001ff2:	480e      	ldr	r0, [pc, #56]	; (800202c <Message_handler+0x40>)
 8001ff4:	f004 fb6c 	bl	80066d0 <iprintf>
	switch (buffer[0]){
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <Message_handler+0x3c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b46      	cmp	r3, #70	; 0x46
 8001ffe:	d108      	bne.n	8002012 <Message_handler+0x26>
	case FORWARD:
		Robot_Move(0.2, 225, 0);
 8002000:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8002030 <Message_handler+0x44>
 8002004:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002034 <Message_handler+0x48>
 8002008:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002038 <Message_handler+0x4c>
 800200c:	f7ff fca8 	bl	8001960 <Robot_Move>
		break;
 8002010:	bf00      	nop
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
//		strcpy(bufC, pop_child_str(pop_str_last(buffer),"C"));
//		dataC = atoi(bufC);
//	}

	memset(buffer, 0, sizeof(buffer));
 8002012:	2232      	movs	r2, #50	; 0x32
 8002014:	2100      	movs	r1, #0
 8002016:	4804      	ldr	r0, [pc, #16]	; (8002028 <Message_handler+0x3c>)
 8002018:	f004 fbaf 	bl	800677a <memset>
	buffer_index = 0;
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <Message_handler+0x50>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000478 	.word	0x20000478
 800202c:	08009768 	.word	0x08009768
 8002030:	00000000 	.word	0x00000000
 8002034:	43610000 	.word	0x43610000
 8002038:	3e4ccccd 	.word	0x3e4ccccd
 800203c:	200004aa 	.word	0x200004aa

08002040 <PID_init>:
,err_next
,actual_val
,pre_actual_val_1=0
,pre_actual_val_2=0
,pre_actual_val_3=0;
void PID_init(PID_Param_t *par){
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	Kp=par->Kp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	4913      	ldr	r1, [pc, #76]	; (800209c <PID_init+0x5c>)
 8002050:	e9c1 2300 	strd	r2, r3, [r1]
	Ki=par->Ki;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800205a:	4911      	ldr	r1, [pc, #68]	; (80020a0 <PID_init+0x60>)
 800205c:	e9c1 2300 	strd	r2, r3, [r1]
	Kd=par->Kd;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002066:	490f      	ldr	r1, [pc, #60]	; (80020a4 <PID_init+0x64>)
 8002068:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_1=par->target_val_1;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002072:	490d      	ldr	r1, [pc, #52]	; (80020a8 <PID_init+0x68>)
 8002074:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_2=par->target_val_2;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800207e:	490b      	ldr	r1, [pc, #44]	; (80020ac <PID_init+0x6c>)
 8002080:	e9c1 2300 	strd	r2, r3, [r1]
	target_val_3=par->target_val_3;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800208a:	4909      	ldr	r1, [pc, #36]	; (80020b0 <PID_init+0x70>)
 800208c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	200004b0 	.word	0x200004b0
 80020a0:	200004b8 	.word	0x200004b8
 80020a4:	200004c0 	.word	0x200004c0
 80020a8:	200004c8 	.word	0x200004c8
 80020ac:	200004d0 	.word	0x200004d0
 80020b0:	200004d8 	.word	0x200004d8

080020b4 <update_motor_values>:

double update_motor_values(double target_val, double actual_val, double prev_actual_val) {
 80020b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	ed87 0b04 	vstr	d0, [r7, #16]
 80020c0:	ed87 1b02 	vstr	d1, [r7, #8]
 80020c4:	ed87 2b00 	vstr	d2, [r7]

	if(target_val==0){
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020d4:	f7fe fd00 	bl	8000ad8 <__aeabi_dcmpeq>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <update_motor_values+0x3a>
		actual_val=-100;
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	4b54      	ldr	r3, [pc, #336]	; (8002234 <update_motor_values+0x180>)
 80020e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
		return actual_val;
 80020e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ec:	e097      	b.n	800221e <update_motor_values+0x16a>
	}
	err=target_val-actual_val;
 80020ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f6:	f7fe f8cf 	bl	8000298 <__aeabi_dsub>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	494e      	ldr	r1, [pc, #312]	; (8002238 <update_motor_values+0x184>)
 8002100:	e9c1 2300 	strd	r2, r3, [r1]
	actual_val = prev_actual_val + pid.Kp*(err - err_next)
 8002104:	4b4d      	ldr	r3, [pc, #308]	; (800223c <update_motor_values+0x188>)
 8002106:	e9d3 4500 	ldrd	r4, r5, [r3]
 800210a:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <update_motor_values+0x184>)
 800210c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002110:	4b4b      	ldr	r3, [pc, #300]	; (8002240 <update_motor_values+0x18c>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe f8bf 	bl	8000298 <__aeabi_dsub>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4620      	mov	r0, r4
 8002120:	4629      	mov	r1, r5
 8002122:	f7fe fa71 	bl	8000608 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002132:	f7fe f8b3 	bl	800029c <__adddf3>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4614      	mov	r4, r2
 800213c:	461d      	mov	r5, r3
				  + pid.Ki*err
 800213e:	4b3f      	ldr	r3, [pc, #252]	; (800223c <update_motor_values+0x188>)
 8002140:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002144:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <update_motor_values+0x184>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe fa5d 	bl	8000608 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f7fe f8a1 	bl	800029c <__adddf3>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4692      	mov	sl, r2
 8002160:	469b      	mov	fp, r3
				  + pid.Kd*(err - 2 * err_next + err_last);
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <update_motor_values+0x188>)
 8002164:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002168:	4b33      	ldr	r3, [pc, #204]	; (8002238 <update_motor_values+0x184>)
 800216a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800216e:	4b34      	ldr	r3, [pc, #208]	; (8002240 <update_motor_values+0x18c>)
 8002170:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	f7fe f890 	bl	800029c <__adddf3>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4640      	mov	r0, r8
 8002182:	4649      	mov	r1, r9
 8002184:	f7fe f888 	bl	8000298 <__aeabi_dsub>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <update_motor_values+0x190>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe f881 	bl	800029c <__adddf3>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4620      	mov	r0, r4
 80021a0:	4629      	mov	r1, r5
 80021a2:	f7fe fa31 	bl	8000608 <__aeabi_dmul>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
	actual_val = prev_actual_val + pid.Kp*(err - err_next)
 80021aa:	4650      	mov	r0, sl
 80021ac:	4659      	mov	r1, fp
 80021ae:	f7fe f875 	bl	800029c <__adddf3>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	err_last = err_next;
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <update_motor_values+0x18c>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	4920      	ldr	r1, [pc, #128]	; (8002244 <update_motor_values+0x190>)
 80021c2:	e9c1 2300 	strd	r2, r3, [r1]
	err_next = err;
 80021c6:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <update_motor_values+0x184>)
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	491c      	ldr	r1, [pc, #112]	; (8002240 <update_motor_values+0x18c>)
 80021ce:	e9c1 2300 	strd	r2, r3, [r1]
	actual_val=(actual_val>10)?10:actual_val;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <update_motor_values+0x194>)
 80021d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021dc:	f7fe fca4 	bl	8000b28 <__aeabi_dcmpgt>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <update_motor_values+0x13a>
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <update_motor_values+0x194>)
 80021ec:	e001      	b.n	80021f2 <update_motor_values+0x13e>
 80021ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	actual_val=(actual_val<-10)?-10:actual_val;
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <update_motor_values+0x198>)
 80021fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002200:	f7fe fc74 	bl	8000aec <__aeabi_dcmplt>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <update_motor_values+0x15e>
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <update_motor_values+0x198>)
 8002210:	e001      	b.n	8002216 <update_motor_values+0x162>
 8002212:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002216:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return actual_val;
 800221a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800221e:	ec43 2b17 	vmov	d7, r2, r3
 8002222:	eeb0 0a47 	vmov.f32	s0, s14
 8002226:	eef0 0a67 	vmov.f32	s1, s15
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002232:	bf00      	nop
 8002234:	c0590000 	.word	0xc0590000
 8002238:	200004e8 	.word	0x200004e8
 800223c:	200003e0 	.word	0x200003e0
 8002240:	20000528 	.word	0x20000528
 8002244:	20000508 	.word	0x20000508
 8002248:	40240000 	.word	0x40240000
 800224c:	c0240000 	.word	0xc0240000

08002250 <PID_Calculation>:
double PID_Calculation(int motor, double actual_val){
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	ed87 0b00 	vstr	d0, [r7]

	switch(motor) {
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d072      	beq.n	8002348 <PID_Calculation+0xf8>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b03      	cmp	r3, #3
 8002266:	f300 809f 	bgt.w	80023a8 <PID_Calculation+0x158>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d003      	beq.n	8002278 <PID_Calculation+0x28>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d036      	beq.n	80022e4 <PID_Calculation+0x94>
 8002276:	e097      	b.n	80023a8 <PID_Calculation+0x158>
	    case MOTOR_1:
			err_last=err_last_1;
 8002278:	4b51      	ldr	r3, [pc, #324]	; (80023c0 <PID_Calculation+0x170>)
 800227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227e:	4951      	ldr	r1, [pc, #324]	; (80023c4 <PID_Calculation+0x174>)
 8002280:	e9c1 2300 	strd	r2, r3, [r1]
			err_next=err_next_1;
 8002284:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <PID_Calculation+0x178>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	4950      	ldr	r1, [pc, #320]	; (80023cc <PID_Calculation+0x17c>)
 800228c:	e9c1 2300 	strd	r2, r3, [r1]
			prev_actual_val=pre_actual_val_1;
 8002290:	4b4f      	ldr	r3, [pc, #316]	; (80023d0 <PID_Calculation+0x180>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	494f      	ldr	r1, [pc, #316]	; (80023d4 <PID_Calculation+0x184>)
 8002298:	e9c1 2300 	strd	r2, r3, [r1]

			update_motor_values(target_val_1, actual_val,pre_actual_val_1);
 800229c:	4b4e      	ldr	r3, [pc, #312]	; (80023d8 <PID_Calculation+0x188>)
 800229e:	ed93 7b00 	vldr	d7, [r3]
 80022a2:	4b4b      	ldr	r3, [pc, #300]	; (80023d0 <PID_Calculation+0x180>)
 80022a4:	ed93 6b00 	vldr	d6, [r3]
 80022a8:	eeb0 2a46 	vmov.f32	s4, s12
 80022ac:	eef0 2a66 	vmov.f32	s5, s13
 80022b0:	ed97 1b00 	vldr	d1, [r7]
 80022b4:	eeb0 0a47 	vmov.f32	s0, s14
 80022b8:	eef0 0a67 	vmov.f32	s1, s15
 80022bc:	f7ff fefa 	bl	80020b4 <update_motor_values>

			pre_actual_val_1=actual_val;
 80022c0:	4943      	ldr	r1, [pc, #268]	; (80023d0 <PID_Calculation+0x180>)
 80022c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022c6:	e9c1 2300 	strd	r2, r3, [r1]
			err_last_1=err_last;
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <PID_Calculation+0x174>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	493b      	ldr	r1, [pc, #236]	; (80023c0 <PID_Calculation+0x170>)
 80022d2:	e9c1 2300 	strd	r2, r3, [r1]
			err_next_1=err_next;
 80022d6:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <PID_Calculation+0x17c>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	493a      	ldr	r1, [pc, #232]	; (80023c8 <PID_Calculation+0x178>)
 80022de:	e9c1 2300 	strd	r2, r3, [r1]

	        break;
 80022e2:	e061      	b.n	80023a8 <PID_Calculation+0x158>
	    case MOTOR_2:
			err_last=err_last_2;
 80022e4:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <PID_Calculation+0x18c>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	4936      	ldr	r1, [pc, #216]	; (80023c4 <PID_Calculation+0x174>)
 80022ec:	e9c1 2300 	strd	r2, r3, [r1]
			err_next=err_next_2;
 80022f0:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <PID_Calculation+0x190>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	4935      	ldr	r1, [pc, #212]	; (80023cc <PID_Calculation+0x17c>)
 80022f8:	e9c1 2300 	strd	r2, r3, [r1]

			actual_val=update_motor_values(target_val_2, actual_val, pre_actual_val_2);
 80022fc:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <PID_Calculation+0x194>)
 80022fe:	ed93 7b00 	vldr	d7, [r3]
 8002302:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <PID_Calculation+0x198>)
 8002304:	ed93 6b00 	vldr	d6, [r3]
 8002308:	eeb0 2a46 	vmov.f32	s4, s12
 800230c:	eef0 2a66 	vmov.f32	s5, s13
 8002310:	ed97 1b00 	vldr	d1, [r7]
 8002314:	eeb0 0a47 	vmov.f32	s0, s14
 8002318:	eef0 0a67 	vmov.f32	s1, s15
 800231c:	f7ff feca 	bl	80020b4 <update_motor_values>
 8002320:	ed87 0b00 	vstr	d0, [r7]

			pre_actual_val_2=actual_val;
 8002324:	4930      	ldr	r1, [pc, #192]	; (80023e8 <PID_Calculation+0x198>)
 8002326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800232a:	e9c1 2300 	strd	r2, r3, [r1]
			err_last_2=err_last;
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <PID_Calculation+0x174>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	4929      	ldr	r1, [pc, #164]	; (80023dc <PID_Calculation+0x18c>)
 8002336:	e9c1 2300 	strd	r2, r3, [r1]
			err_next_2=err_next;
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <PID_Calculation+0x17c>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	4927      	ldr	r1, [pc, #156]	; (80023e0 <PID_Calculation+0x190>)
 8002342:	e9c1 2300 	strd	r2, r3, [r1]

	        break;
 8002346:	e02f      	b.n	80023a8 <PID_Calculation+0x158>
	    case MOTOR_3:
			err_last=err_last_3;
 8002348:	4b28      	ldr	r3, [pc, #160]	; (80023ec <PID_Calculation+0x19c>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	491d      	ldr	r1, [pc, #116]	; (80023c4 <PID_Calculation+0x174>)
 8002350:	e9c1 2300 	strd	r2, r3, [r1]
			err_next=err_next_3;
 8002354:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <PID_Calculation+0x1a0>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	491c      	ldr	r1, [pc, #112]	; (80023cc <PID_Calculation+0x17c>)
 800235c:	e9c1 2300 	strd	r2, r3, [r1]

			update_motor_values(target_val_3, actual_val, pre_actual_val_3);
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <PID_Calculation+0x1a4>)
 8002362:	ed93 7b00 	vldr	d7, [r3]
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <PID_Calculation+0x1a8>)
 8002368:	ed93 6b00 	vldr	d6, [r3]
 800236c:	eeb0 2a46 	vmov.f32	s4, s12
 8002370:	eef0 2a66 	vmov.f32	s5, s13
 8002374:	ed97 1b00 	vldr	d1, [r7]
 8002378:	eeb0 0a47 	vmov.f32	s0, s14
 800237c:	eef0 0a67 	vmov.f32	s1, s15
 8002380:	f7ff fe98 	bl	80020b4 <update_motor_values>

			pre_actual_val_3=actual_val;
 8002384:	491c      	ldr	r1, [pc, #112]	; (80023f8 <PID_Calculation+0x1a8>)
 8002386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800238a:	e9c1 2300 	strd	r2, r3, [r1]
			err_last_3=err_last;
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <PID_Calculation+0x174>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	4915      	ldr	r1, [pc, #84]	; (80023ec <PID_Calculation+0x19c>)
 8002396:	e9c1 2300 	strd	r2, r3, [r1]
			err_next_3=err_next;
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <PID_Calculation+0x17c>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	4913      	ldr	r1, [pc, #76]	; (80023f0 <PID_Calculation+0x1a0>)
 80023a2:	e9c1 2300 	strd	r2, r3, [r1]

	        break;
 80023a6:	bf00      	nop
	}
	return actual_val;
 80023a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80023b0:	eeb0 0a47 	vmov.f32	s0, s14
 80023b4:	eef0 0a67 	vmov.f32	s1, s15
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200004f0 	.word	0x200004f0
 80023c4:	20000508 	.word	0x20000508
 80023c8:	20000510 	.word	0x20000510
 80023cc:	20000528 	.word	0x20000528
 80023d0:	20000530 	.word	0x20000530
 80023d4:	200004e0 	.word	0x200004e0
 80023d8:	200004c8 	.word	0x200004c8
 80023dc:	200004f8 	.word	0x200004f8
 80023e0:	20000518 	.word	0x20000518
 80023e4:	200004d0 	.word	0x200004d0
 80023e8:	20000538 	.word	0x20000538
 80023ec:	20000500 	.word	0x20000500
 80023f0:	20000520 	.word	0x20000520
 80023f4:	200004d8 	.word	0x200004d8
 80023f8:	20000540 	.word	0x20000540

080023fc <PID>:

void PID(void){
 80023fc:	b5b0      	push	{r4, r5, r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af04      	add	r7, sp, #16
	printf("V1= %.2f rpm \t V2= %.2f rpm \t V3= %.2f rpm \r\n", V1,V2,V3);
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <PID+0xec>)
 8002404:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002408:	4b38      	ldr	r3, [pc, #224]	; (80024ec <PID+0xf0>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	4938      	ldr	r1, [pc, #224]	; (80024f0 <PID+0xf4>)
 8002410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002418:	e9cd 2300 	strd	r2, r3, [sp]
 800241c:	4622      	mov	r2, r4
 800241e:	462b      	mov	r3, r5
 8002420:	4834      	ldr	r0, [pc, #208]	; (80024f4 <PID+0xf8>)
 8002422:	f004 f955 	bl	80066d0 <iprintf>

	rpm_1=get_rpm(MOTOR_1);
 8002426:	2001      	movs	r0, #1
 8002428:	f7fe fd66 	bl	8000ef8 <get_rpm>
 800242c:	eeb0 7a40 	vmov.f32	s14, s0
 8002430:	eef0 7a60 	vmov.f32	s15, s1
 8002434:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <PID+0xfc>)
 8002436:	ed83 7b00 	vstr	d7, [r3]
	rpm_2=get_rpm(MOTOR_2);
 800243a:	2002      	movs	r0, #2
 800243c:	f7fe fd5c 	bl	8000ef8 <get_rpm>
 8002440:	eeb0 7a40 	vmov.f32	s14, s0
 8002444:	eef0 7a60 	vmov.f32	s15, s1
 8002448:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <PID+0x100>)
 800244a:	ed83 7b00 	vstr	d7, [r3]
	rpm_3=get_rpm(MOTOR_3);
 800244e:	2003      	movs	r0, #3
 8002450:	f7fe fd52 	bl	8000ef8 <get_rpm>
 8002454:	eeb0 7a40 	vmov.f32	s14, s0
 8002458:	eef0 7a60 	vmov.f32	s15, s1
 800245c:	4b28      	ldr	r3, [pc, #160]	; (8002500 <PID+0x104>)
 800245e:	ed83 7b00 	vstr	d7, [r3]

//	out_1=PID_Calculation(MOTOR_1, rpm_1);
	out_2=PID_Calculation(MOTOR_2, rpm_2);
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <PID+0x100>)
 8002464:	ed93 7b00 	vldr	d7, [r3]
 8002468:	eeb0 0a47 	vmov.f32	s0, s14
 800246c:	eef0 0a67 	vmov.f32	s1, s15
 8002470:	2002      	movs	r0, #2
 8002472:	f7ff feed 	bl	8002250 <PID_Calculation>
 8002476:	eeb0 7a40 	vmov.f32	s14, s0
 800247a:	eef0 7a60 	vmov.f32	s15, s1
 800247e:	4b21      	ldr	r3, [pc, #132]	; (8002504 <PID+0x108>)
 8002480:	ed83 7b00 	vstr	d7, [r3]
//	out_3=PID_Calculation(MOTOR_3, rpm_3);

//	set_duty_cycle(MOTOR_1, out_1);
	set_duty_cycle(MOTOR_2, out_2);
 8002484:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <PID+0x108>)
 8002486:	ed93 7b00 	vldr	d7, [r3]
 800248a:	eeb0 0a47 	vmov.f32	s0, s14
 800248e:	eef0 0a67 	vmov.f32	s1, s15
 8002492:	2002      	movs	r0, #2
 8002494:	f7ff fc8a 	bl	8001dac <set_duty_cycle>
//	set_duty_cycle(MOTOR_3, out_3);

	printf("out_1: %f \t out_2: %f \t out_3: %f \r \n",out_1,out_2,out_3);
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <PID+0x10c>)
 800249a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <PID+0x108>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	4919      	ldr	r1, [pc, #100]	; (800250c <PID+0x110>)
 80024a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80024ae:	e9cd 2300 	strd	r2, r3, [sp]
 80024b2:	4622      	mov	r2, r4
 80024b4:	462b      	mov	r3, r5
 80024b6:	4816      	ldr	r0, [pc, #88]	; (8002510 <PID+0x114>)
 80024b8:	f004 f90a 	bl	80066d0 <iprintf>
	printf("rpm_1: %.2f \t rpm_2: %.2f \t rpm_3: %.2f \r \n \r\n", rpm_1, rpm_2, rpm_3);
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <PID+0xfc>)
 80024be:	e9d3 4500 	ldrd	r4, r5, [r3]
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <PID+0x100>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	490d      	ldr	r1, [pc, #52]	; (8002500 <PID+0x104>)
 80024ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80024d2:	e9cd 2300 	strd	r2, r3, [sp]
 80024d6:	4622      	mov	r2, r4
 80024d8:	462b      	mov	r3, r5
 80024da:	480e      	ldr	r0, [pc, #56]	; (8002514 <PID+0x118>)
 80024dc:	f004 f8f8 	bl	80066d0 <iprintf>
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bdb0      	pop	{r4, r5, r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000448 	.word	0x20000448
 80024ec:	20000450 	.word	0x20000450
 80024f0:	20000458 	.word	0x20000458
 80024f4:	08009778 	.word	0x08009778
 80024f8:	20000430 	.word	0x20000430
 80024fc:	20000438 	.word	0x20000438
 8002500:	20000440 	.word	0x20000440
 8002504:	20000420 	.word	0x20000420
 8002508:	20000418 	.word	0x20000418
 800250c:	20000428 	.word	0x20000428
 8002510:	080097a8 	.word	0x080097a8
 8002514:	080097d0 	.word	0x080097d0

08002518 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_MspInit+0x4c>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_MspInit+0x4c>)
 8002528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800252c:	6453      	str	r3, [r2, #68]	; 0x44
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_MspInit+0x4c>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_MspInit+0x4c>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a08      	ldr	r2, [pc, #32]	; (8002564 <HAL_MspInit+0x4c>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_MspInit+0x4c>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800

08002568 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08e      	sub	sp, #56	; 0x38
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5a      	ldr	r2, [pc, #360]	; (80026f0 <HAL_TIM_Encoder_MspInit+0x188>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d12d      	bne.n	80025e6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
 800258e:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	4b52      	ldr	r3, [pc, #328]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a51      	ldr	r2, [pc, #324]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b4f      	ldr	r3, [pc, #316]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	61fb      	str	r3, [r7, #28]
 80025c0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025d4:	2301      	movs	r3, #1
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025dc:	4619      	mov	r1, r3
 80025de:	4846      	ldr	r0, [pc, #280]	; (80026f8 <HAL_TIM_Encoder_MspInit+0x190>)
 80025e0:	f000 fd24 	bl	800302c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025e4:	e080      	b.n	80026e8 <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM3)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a44      	ldr	r2, [pc, #272]	; (80026fc <HAL_TIM_Encoder_MspInit+0x194>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d14a      	bne.n	8002686 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	4a3e      	ldr	r2, [pc, #248]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002600:	4b3c      	ldr	r3, [pc, #240]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	4a37      	ldr	r2, [pc, #220]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6313      	str	r3, [r2, #48]	; 0x30
 800261c:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	4a30      	ldr	r2, [pc, #192]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	6313      	str	r3, [r2, #48]	; 0x30
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002644:	2340      	movs	r3, #64	; 0x40
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2300      	movs	r3, #0
 8002652:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002654:	2302      	movs	r3, #2
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265c:	4619      	mov	r1, r3
 800265e:	4826      	ldr	r0, [pc, #152]	; (80026f8 <HAL_TIM_Encoder_MspInit+0x190>)
 8002660:	f000 fce4 	bl	800302c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002664:	2320      	movs	r3, #32
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002674:	2302      	movs	r3, #2
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267c:	4619      	mov	r1, r3
 800267e:	4820      	ldr	r0, [pc, #128]	; (8002700 <HAL_TIM_Encoder_MspInit+0x198>)
 8002680:	f000 fcd4 	bl	800302c <HAL_GPIO_Init>
}
 8002684:	e030      	b.n	80026e8 <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM4)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1e      	ldr	r2, [pc, #120]	; (8002704 <HAL_TIM_Encoder_MspInit+0x19c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d12b      	bne.n	80026e8 <HAL_TIM_Encoder_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 800269a:	f043 0304 	orr.w	r3, r3, #4
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	6313      	str	r3, [r2, #48]	; 0x30
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x18c>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026c8:	23c0      	movs	r3, #192	; 0xc0
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026d8:	2302      	movs	r3, #2
 80026da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e0:	4619      	mov	r1, r3
 80026e2:	4807      	ldr	r0, [pc, #28]	; (8002700 <HAL_TIM_Encoder_MspInit+0x198>)
 80026e4:	f000 fca2 	bl	800302c <HAL_GPIO_Init>
}
 80026e8:	bf00      	nop
 80026ea:	3738      	adds	r7, #56	; 0x38
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40010000 	.word	0x40010000
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40000400 	.word	0x40000400
 8002700:	40020400 	.word	0x40020400
 8002704:	40000800 	.word	0x40000800

08002708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002718:	d10d      	bne.n	8002736 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_TIM_Base_MspInit+0x3c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a08      	ldr	r2, [pc, #32]	; (8002744 <HAL_TIM_Base_MspInit+0x3c>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_TIM_Base_MspInit+0x3c>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800

08002748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002768:	d13c      	bne.n	80027e4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <HAL_TIM_MspPostInit+0xa4>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <HAL_TIM_MspPostInit+0xa4>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_TIM_MspPostInit+0xa4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b18      	ldr	r3, [pc, #96]	; (80027ec <HAL_TIM_MspPostInit+0xa4>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a17      	ldr	r2, [pc, #92]	; (80027ec <HAL_TIM_MspPostInit+0xa4>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_TIM_MspPostInit+0xa4>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027a2:	2303      	movs	r3, #3
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027b2:	2301      	movs	r3, #1
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	480c      	ldr	r0, [pc, #48]	; (80027f0 <HAL_TIM_MspPostInit+0xa8>)
 80027be:	f000 fc35 	bl	800302c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027d4:	2301      	movs	r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	4619      	mov	r1, r3
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <HAL_TIM_MspPostInit+0xac>)
 80027e0:	f000 fc24 	bl	800302c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027e4:	bf00      	nop
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400

080027f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 031c 	add.w	r3, r7, #28
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a36      	ldr	r2, [pc, #216]	; (80028f0 <HAL_UART_MspInit+0xf8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d135      	bne.n	8002886 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a34      	ldr	r2, [pc, #208]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 8002824:	f043 0310 	orr.w	r3, r3, #16
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a2d      	ldr	r2, [pc, #180]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002852:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002860:	2303      	movs	r3, #3
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002864:	2307      	movs	r3, #7
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	4822      	ldr	r0, [pc, #136]	; (80028f8 <HAL_UART_MspInit+0x100>)
 8002870:	f000 fbdc 	bl	800302c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002874:	2200      	movs	r2, #0
 8002876:	2100      	movs	r1, #0
 8002878:	2025      	movs	r0, #37	; 0x25
 800287a:	f000 fb0e 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800287e:	2025      	movs	r0, #37	; 0x25
 8002880:	f000 fb27 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002884:	e030      	b.n	80028e8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <HAL_UART_MspInit+0x104>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12b      	bne.n	80028e8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a16      	ldr	r2, [pc, #88]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a0f      	ldr	r2, [pc, #60]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6313      	str	r3, [r2, #48]	; 0x30
 80028bc:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <HAL_UART_MspInit+0xfc>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028c8:	230c      	movs	r3, #12
 80028ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d8:	2307      	movs	r3, #7
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	4619      	mov	r1, r3
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <HAL_UART_MspInit+0x100>)
 80028e4:	f000 fba2 	bl	800302c <HAL_GPIO_Init>
}
 80028e8:	bf00      	nop
 80028ea:	3730      	adds	r7, #48	; 0x30
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40011000 	.word	0x40011000
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40020000 	.word	0x40020000
 80028fc:	40004400 	.word	0x40004400

08002900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002904:	e7fe      	b.n	8002904 <NMI_Handler+0x4>

08002906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <HardFault_Handler+0x4>

0800290c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <MemManage_Handler+0x4>

08002912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <BusFault_Handler+0x4>

08002918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <UsageFault_Handler+0x4>

0800291e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002948:	b5b0      	push	{r4, r5, r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800294c:	f000 f986 	bl	8002c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ms++;
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <SysTick_Handler+0x20>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	1c54      	adds	r4, r2, #1
 8002958:	f143 0500 	adc.w	r5, r3, #0
 800295c:	4b02      	ldr	r3, [pc, #8]	; (8002968 <SysTick_Handler+0x20>)
 800295e:	e9c3 4500 	strd	r4, r5, [r3]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bdb0      	pop	{r4, r5, r7, pc}
 8002966:	bf00      	nop
 8002968:	20000220 	.word	0x20000220

0800296c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_Receive(&huart1, (uint8_t*)&buffer[buffer_index++], 1, 10);
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <USART1_IRQHandler+0x3c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	b2d1      	uxtb	r1, r2
 8002978:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <USART1_IRQHandler+0x3c>)
 800297a:	7011      	strb	r1, [r2, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <USART1_IRQHandler+0x40>)
 8002980:	18d1      	adds	r1, r2, r3
 8002982:	230a      	movs	r3, #10
 8002984:	2201      	movs	r2, #1
 8002986:	480a      	ldr	r0, [pc, #40]	; (80029b0 <USART1_IRQHandler+0x44>)
 8002988:	f002 f9bd 	bl	8004d06 <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n'){
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <USART1_IRQHandler+0x3c>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	3b01      	subs	r3, #1
 8002992:	4a06      	ldr	r2, [pc, #24]	; (80029ac <USART1_IRQHandler+0x40>)
 8002994:	5cd3      	ldrb	r3, [r2, r3]
 8002996:	2b0a      	cmp	r3, #10
 8002998:	d101      	bne.n	800299e <USART1_IRQHandler+0x32>
		Message_handler();
 800299a:	f7ff fb27 	bl	8001fec <Message_handler>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800299e:	4804      	ldr	r0, [pc, #16]	; (80029b0 <USART1_IRQHandler+0x44>)
 80029a0:	f002 fa48 	bl	8004e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	200004aa 	.word	0x200004aa
 80029ac:	20000478 	.word	0x20000478
 80029b0:	20000350 	.word	0x20000350

080029b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return 1;
 80029b8:	2301      	movs	r3, #1
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_kill>:

int _kill(int pid, int sig)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029ce:	f003 ff27 	bl	8006820 <__errno>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2216      	movs	r2, #22
 80029d6:	601a      	str	r2, [r3, #0]
  return -1;
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_exit>:

void _exit (int status)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ffe7 	bl	80029c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029f6:	e7fe      	b.n	80029f6 <_exit+0x12>

080029f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	e00a      	b.n	8002a20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a0a:	f3af 8000 	nop.w
 8002a0e:	4601      	mov	r1, r0
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	60ba      	str	r2, [r7, #8]
 8002a16:	b2ca      	uxtb	r2, r1
 8002a18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	dbf0      	blt.n	8002a0a <_read+0x12>
  }

  return len;
 8002a28:	687b      	ldr	r3, [r7, #4]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e009      	b.n	8002a58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	60ba      	str	r2, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fc2d 	bl	80012ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3301      	adds	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	dbf1      	blt.n	8002a44 <_write+0x12>
  }
  return len;
 8002a60:	687b      	ldr	r3, [r7, #4]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <_close>:

int _close(int file)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a92:	605a      	str	r2, [r3, #4]
  return 0;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <_isatty>:

int _isatty(int file)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aaa:	2301      	movs	r3, #1
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002adc:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <_sbrk+0x5c>)
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <_sbrk+0x60>)
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <_sbrk+0x64>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <_sbrk+0x64>)
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <_sbrk+0x68>)
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <_sbrk+0x64>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d207      	bcs.n	8002b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b04:	f003 fe8c 	bl	8006820 <__errno>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	e009      	b.n	8002b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <_sbrk+0x64>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <_sbrk+0x64>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <_sbrk+0x64>)
 8002b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20020000 	.word	0x20020000
 8002b34:	00000400 	.word	0x00000400
 8002b38:	20000548 	.word	0x20000548
 8002b3c:	200006a0 	.word	0x200006a0

08002b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <SystemInit+0x20>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <SystemInit+0x20>)
 8002b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b68:	f7ff ffea 	bl	8002b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b6c:	480c      	ldr	r0, [pc, #48]	; (8002ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b6e:	490d      	ldr	r1, [pc, #52]	; (8002ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b70:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b74:	e002      	b.n	8002b7c <LoopCopyDataInit>

08002b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b7a:	3304      	adds	r3, #4

08002b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b80:	d3f9      	bcc.n	8002b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b84:	4c0a      	ldr	r4, [pc, #40]	; (8002bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b88:	e001      	b.n	8002b8e <LoopFillZerobss>

08002b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b8c:	3204      	adds	r2, #4

08002b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b90:	d3fb      	bcc.n	8002b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b92:	f003 fe4b 	bl	800682c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b96:	f7fe fbdb 	bl	8001350 <main>
  bx  lr    
 8002b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002ba8:	08009d78 	.word	0x08009d78
  ldr r2, =_sbss
 8002bac:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002bb0:	2000069c 	.word	0x2000069c

08002bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bb4:	e7fe      	b.n	8002bb4 <ADC_IRQHandler>
	...

08002bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_Init+0x40>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <HAL_Init+0x40>)
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_Init+0x40>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_Init+0x40>)
 8002bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_Init+0x40>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <HAL_Init+0x40>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be0:	2003      	movs	r0, #3
 8002be2:	f000 f94f 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002be6:	200f      	movs	r0, #15
 8002be8:	f000 f808 	bl	8002bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bec:	f7ff fc94 	bl	8002518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00

08002bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_InitTick+0x54>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_InitTick+0x58>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f967 	bl	8002eee <HAL_SYSTICK_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00e      	b.n	8002c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b0f      	cmp	r3, #15
 8002c2e:	d80a      	bhi.n	8002c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c30:	2200      	movs	r2, #0
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f000 f92f 	bl	8002e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c3c:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <HAL_InitTick+0x5c>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e000      	b.n	8002c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000010 	.word	0x20000010
 8002c54:	20000018 	.word	0x20000018
 8002c58:	20000014 	.word	0x20000014

08002c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_IncTick+0x20>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_IncTick+0x24>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <HAL_IncTick+0x24>)
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000018 	.word	0x20000018
 8002c80:	2000054c 	.word	0x2000054c

08002c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return uwTick;
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_GetTick+0x14>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	2000054c 	.word	0x2000054c

08002c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff ffee 	bl	8002c84 <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d005      	beq.n	8002cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_Delay+0x44>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cc2:	bf00      	nop
 8002cc4:	f7ff ffde 	bl	8002c84 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d8f7      	bhi.n	8002cc4 <HAL_Delay+0x28>
  {
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000018 	.word	0x20000018

08002ce4 <__NVIC_SetPriorityGrouping>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d16:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	60d3      	str	r3, [r2, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_GetPriorityGrouping>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <__NVIC_GetPriorityGrouping+0x18>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0307 	and.w	r3, r3, #7
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_EnableIRQ>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db0b      	blt.n	8002d72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4907      	ldr	r1, [pc, #28]	; (8002d80 <__NVIC_EnableIRQ+0x38>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2001      	movs	r0, #1
 8002d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000e100 	.word	0xe000e100

08002d84 <__NVIC_SetPriority>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	db0a      	blt.n	8002dae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	490c      	ldr	r1, [pc, #48]	; (8002dd0 <__NVIC_SetPriority+0x4c>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	440b      	add	r3, r1
 8002da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002dac:	e00a      	b.n	8002dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4908      	ldr	r1, [pc, #32]	; (8002dd4 <__NVIC_SetPriority+0x50>)
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	3b04      	subs	r3, #4
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	761a      	strb	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f1c3 0307 	rsb	r3, r3, #7
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	bf28      	it	cs
 8002df6:	2304      	movcs	r3, #4
 8002df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d902      	bls.n	8002e08 <NVIC_EncodePriority+0x30>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3b03      	subs	r3, #3
 8002e06:	e000      	b.n	8002e0a <NVIC_EncodePriority+0x32>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e20:	f04f 31ff 	mov.w	r1, #4294967295
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43d9      	mvns	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	4313      	orrs	r3, r2
         );
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e50:	d301      	bcc.n	8002e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00f      	b.n	8002e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <SysTick_Config+0x40>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5e:	210f      	movs	r1, #15
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	f7ff ff8e 	bl	8002d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <SysTick_Config+0x40>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <SysTick_Config+0x40>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff29 	bl	8002ce4 <__NVIC_SetPriorityGrouping>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eac:	f7ff ff3e 	bl	8002d2c <__NVIC_GetPriorityGrouping>
 8002eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	6978      	ldr	r0, [r7, #20]
 8002eb8:	f7ff ff8e 	bl	8002dd8 <NVIC_EncodePriority>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff5d 	bl	8002d84 <__NVIC_SetPriority>
}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff31 	bl	8002d48 <__NVIC_EnableIRQ>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ffa2 	bl	8002e40 <SysTick_Config>
 8002efc:	4603      	mov	r3, r0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7ff feb6 	bl	8002c84 <HAL_GetTick>
 8002f18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d008      	beq.n	8002f38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e052      	b.n	8002fde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0216 	bic.w	r2, r2, #22
 8002f46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d103      	bne.n	8002f68 <HAL_DMA_Abort+0x62>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d007      	beq.n	8002f78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0208 	bic.w	r2, r2, #8
 8002f76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f88:	e013      	b.n	8002fb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f8a:	f7ff fe7b 	bl	8002c84 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b05      	cmp	r3, #5
 8002f96:	d90c      	bls.n	8002fb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e015      	b.n	8002fde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e4      	bne.n	8002f8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	223f      	movs	r2, #63	; 0x3f
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d004      	beq.n	8003004 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2280      	movs	r2, #128	; 0x80
 8002ffe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e00c      	b.n	800301e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2205      	movs	r2, #5
 8003008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	e159      	b.n	80032fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003048:	2201      	movs	r2, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	429a      	cmp	r2, r3
 8003062:	f040 8148 	bne.w	80032f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d005      	beq.n	800307e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307a:	2b02      	cmp	r3, #2
 800307c:	d130      	bne.n	80030e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	2203      	movs	r2, #3
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b4:	2201      	movs	r2, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 0201 	and.w	r2, r3, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d017      	beq.n	800311c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d123      	bne.n	8003170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	08da      	lsrs	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3208      	adds	r2, #8
 8003130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	220f      	movs	r2, #15
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	08da      	lsrs	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3208      	adds	r2, #8
 800316a:	69b9      	ldr	r1, [r7, #24]
 800316c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	2203      	movs	r2, #3
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0203 	and.w	r2, r3, #3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80a2 	beq.w	80032f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	4b57      	ldr	r3, [pc, #348]	; (8003314 <HAL_GPIO_Init+0x2e8>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	4a56      	ldr	r2, [pc, #344]	; (8003314 <HAL_GPIO_Init+0x2e8>)
 80031bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c0:	6453      	str	r3, [r2, #68]	; 0x44
 80031c2:	4b54      	ldr	r3, [pc, #336]	; (8003314 <HAL_GPIO_Init+0x2e8>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ce:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_GPIO_Init+0x2ec>)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	089b      	lsrs	r3, r3, #2
 80031d4:	3302      	adds	r3, #2
 80031d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4013      	ands	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a49      	ldr	r2, [pc, #292]	; (800331c <HAL_GPIO_Init+0x2f0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0x202>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a48      	ldr	r2, [pc, #288]	; (8003320 <HAL_GPIO_Init+0x2f4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x1fe>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a47      	ldr	r2, [pc, #284]	; (8003324 <HAL_GPIO_Init+0x2f8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x1fa>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a46      	ldr	r2, [pc, #280]	; (8003328 <HAL_GPIO_Init+0x2fc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x1f6>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a45      	ldr	r2, [pc, #276]	; (800332c <HAL_GPIO_Init+0x300>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x1f2>
 800321a:	2304      	movs	r3, #4
 800321c:	e008      	b.n	8003230 <HAL_GPIO_Init+0x204>
 800321e:	2307      	movs	r3, #7
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x204>
 8003222:	2303      	movs	r3, #3
 8003224:	e004      	b.n	8003230 <HAL_GPIO_Init+0x204>
 8003226:	2302      	movs	r3, #2
 8003228:	e002      	b.n	8003230 <HAL_GPIO_Init+0x204>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_GPIO_Init+0x204>
 800322e:	2300      	movs	r3, #0
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f002 0203 	and.w	r2, r2, #3
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	4093      	lsls	r3, r2
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003240:	4935      	ldr	r1, [pc, #212]	; (8003318 <HAL_GPIO_Init+0x2ec>)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800324e:	4b38      	ldr	r3, [pc, #224]	; (8003330 <HAL_GPIO_Init+0x304>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003272:	4a2f      	ldr	r2, [pc, #188]	; (8003330 <HAL_GPIO_Init+0x304>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003278:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <HAL_GPIO_Init+0x304>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <HAL_GPIO_Init+0x304>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <HAL_GPIO_Init+0x304>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032c6:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <HAL_GPIO_Init+0x304>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <HAL_GPIO_Init+0x304>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f0:	4a0f      	ldr	r2, [pc, #60]	; (8003330 <HAL_GPIO_Init+0x304>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	f67f aea2 	bls.w	8003048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3724      	adds	r7, #36	; 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40013800 	.word	0x40013800
 800331c:	40020000 	.word	0x40020000
 8003320:	40020400 	.word	0x40020400
 8003324:	40020800 	.word	0x40020800
 8003328:	40020c00 	.word	0x40020c00
 800332c:	40021000 	.word	0x40021000
 8003330:	40013c00 	.word	0x40013c00

08003334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
 8003340:	4613      	mov	r3, r2
 8003342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003344:	787b      	ldrb	r3, [r7, #1]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003350:	e003      	b.n	800335a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003352:	887b      	ldrh	r3, [r7, #2]
 8003354:	041a      	lsls	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	619a      	str	r2, [r3, #24]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e267      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d075      	beq.n	8003472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003386:	4b88      	ldr	r3, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b04      	cmp	r3, #4
 8003390:	d00c      	beq.n	80033ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003392:	4b85      	ldr	r3, [pc, #532]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800339a:	2b08      	cmp	r3, #8
 800339c:	d112      	bne.n	80033c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4b82      	ldr	r3, [pc, #520]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033aa:	d10b      	bne.n	80033c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ac:	4b7e      	ldr	r3, [pc, #504]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d05b      	beq.n	8003470 <HAL_RCC_OscConfig+0x108>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d157      	bne.n	8003470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e242      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033cc:	d106      	bne.n	80033dc <HAL_RCC_OscConfig+0x74>
 80033ce:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a75      	ldr	r2, [pc, #468]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e01d      	b.n	8003418 <HAL_RCC_OscConfig+0xb0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0x98>
 80033e6:	4b70      	ldr	r3, [pc, #448]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a6f      	ldr	r2, [pc, #444]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b6d      	ldr	r3, [pc, #436]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6c      	ldr	r2, [pc, #432]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e00b      	b.n	8003418 <HAL_RCC_OscConfig+0xb0>
 8003400:	4b69      	ldr	r3, [pc, #420]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a68      	ldr	r2, [pc, #416]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a65      	ldr	r2, [pc, #404]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d013      	beq.n	8003448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7ff fc30 	bl	8002c84 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003428:	f7ff fc2c 	bl	8002c84 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e207      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0xc0>
 8003446:	e014      	b.n	8003472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7ff fc1c 	bl	8002c84 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003450:	f7ff fc18 	bl	8002c84 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1f3      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	4b51      	ldr	r3, [pc, #324]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0xe8>
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d063      	beq.n	8003546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347e:	4b4a      	ldr	r3, [pc, #296]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003492:	2b08      	cmp	r3, #8
 8003494:	d11c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b44      	ldr	r3, [pc, #272]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_RCC_OscConfig+0x152>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e1c7      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ba:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4937      	ldr	r1, [pc, #220]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	e03a      	b.n	8003546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d8:	4b34      	ldr	r3, [pc, #208]	; (80035ac <HAL_RCC_OscConfig+0x244>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7ff fbd1 	bl	8002c84 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e6:	f7ff fbcd 	bl	8002c84 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e1a8      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003504:	4b28      	ldr	r3, [pc, #160]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4925      	ldr	r1, [pc, #148]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
 8003518:	e015      	b.n	8003546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351a:	4b24      	ldr	r3, [pc, #144]	; (80035ac <HAL_RCC_OscConfig+0x244>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7ff fbb0 	bl	8002c84 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003528:	f7ff fbac 	bl	8002c84 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e187      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d036      	beq.n	80035c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_RCC_OscConfig+0x248>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7ff fb90 	bl	8002c84 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003568:	f7ff fb8c 	bl	8002c84 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e167      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x240>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x200>
 8003586:	e01b      	b.n	80035c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCC_OscConfig+0x248>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358e:	f7ff fb79 	bl	8002c84 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	e00e      	b.n	80035b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003596:	f7ff fb75 	bl	8002c84 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d907      	bls.n	80035b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e150      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	42470000 	.word	0x42470000
 80035b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ea      	bne.n	8003596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8097 	beq.w	80036fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b81      	ldr	r3, [pc, #516]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b7d      	ldr	r3, [pc, #500]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	4a7c      	ldr	r2, [pc, #496]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6413      	str	r3, [r2, #64]	; 0x40
 80035ee:	4b7a      	ldr	r3, [pc, #488]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b77      	ldr	r3, [pc, #476]	; (80037dc <HAL_RCC_OscConfig+0x474>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d118      	bne.n	800363c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360a:	4b74      	ldr	r3, [pc, #464]	; (80037dc <HAL_RCC_OscConfig+0x474>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a73      	ldr	r2, [pc, #460]	; (80037dc <HAL_RCC_OscConfig+0x474>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7ff fb35 	bl	8002c84 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7ff fb31 	bl	8002c84 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e10c      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <HAL_RCC_OscConfig+0x474>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x2ea>
 8003644:	4b64      	ldr	r3, [pc, #400]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a63      	ldr	r2, [pc, #396]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
 8003650:	e01c      	b.n	800368c <HAL_RCC_OscConfig+0x324>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b05      	cmp	r3, #5
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x30c>
 800365a:	4b5f      	ldr	r3, [pc, #380]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a5e      	ldr	r2, [pc, #376]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
 8003666:	4b5c      	ldr	r3, [pc, #368]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a5b      	ldr	r2, [pc, #364]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
 8003672:	e00b      	b.n	800368c <HAL_RCC_OscConfig+0x324>
 8003674:	4b58      	ldr	r3, [pc, #352]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	4a57      	ldr	r2, [pc, #348]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	6713      	str	r3, [r2, #112]	; 0x70
 8003680:	4b55      	ldr	r3, [pc, #340]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a54      	ldr	r2, [pc, #336]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003686:	f023 0304 	bic.w	r3, r3, #4
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d015      	beq.n	80036c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7ff faf6 	bl	8002c84 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7ff faf2 	bl	8002c84 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e0cb      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b2:	4b49      	ldr	r3, [pc, #292]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ee      	beq.n	800369c <HAL_RCC_OscConfig+0x334>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c0:	f7ff fae0 	bl	8002c84 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	e00a      	b.n	80036de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7ff fadc 	bl	8002c84 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e0b5      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036de:	4b3e      	ldr	r3, [pc, #248]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1ee      	bne.n	80036c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f0:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	4a38      	ldr	r2, [pc, #224]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80a1 	beq.w	8003848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003706:	4b34      	ldr	r3, [pc, #208]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b08      	cmp	r3, #8
 8003710:	d05c      	beq.n	80037cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d141      	bne.n	800379e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_RCC_OscConfig+0x478>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7ff fab0 	bl	8002c84 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003728:	f7ff faac 	bl	8002c84 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e087      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	019b      	lsls	r3, r3, #6
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	3b01      	subs	r3, #1
 8003760:	041b      	lsls	r3, r3, #16
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	491b      	ldr	r1, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x478>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7ff fa85 	bl	8002c84 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377e:	f7ff fa81 	bl	8002c84 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e05c      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x416>
 800379c:	e054      	b.n	8003848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <HAL_RCC_OscConfig+0x478>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7ff fa6e 	bl	8002c84 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ac:	f7ff fa6a 	bl	8002c84 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e045      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCC_OscConfig+0x470>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x444>
 80037ca:	e03d      	b.n	8003848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e038      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40007000 	.word	0x40007000
 80037e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x4ec>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d028      	beq.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d121      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d11a      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003814:	4013      	ands	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800381a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800381c:	4293      	cmp	r3, r2
 800381e:	d111      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	3b01      	subs	r3, #1
 800382e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d107      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800

08003858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0cc      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800386c:	4b68      	ldr	r3, [pc, #416]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d90c      	bls.n	8003894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b65      	ldr	r3, [pc, #404]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0b8      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d020      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ac:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a58      	ldr	r2, [pc, #352]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c4:	4b53      	ldr	r3, [pc, #332]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a52      	ldr	r2, [pc, #328]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d0:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	494d      	ldr	r1, [pc, #308]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d044      	beq.n	8003978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d119      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e07f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d003      	beq.n	8003916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003912:	2b03      	cmp	r3, #3
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	4b3f      	ldr	r3, [pc, #252]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e06f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003926:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e067      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003936:	4b37      	ldr	r3, [pc, #220]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4934      	ldr	r1, [pc, #208]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	4313      	orrs	r3, r2
 8003946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003948:	f7ff f99c 	bl	8002c84 <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	e00a      	b.n	8003966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003950:	f7ff f998 	bl	8002c84 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e04f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 020c 	and.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d1eb      	bne.n	8003950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003978:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d20c      	bcs.n	80039a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e032      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4916      	ldr	r1, [pc, #88]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	490e      	ldr	r1, [pc, #56]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039de:	f000 f821 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039e2:	4602      	mov	r2, r0
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	490a      	ldr	r1, [pc, #40]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 80039f0:	5ccb      	ldrb	r3, [r1, r3]
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff f8fc 	bl	8002bfc <HAL_InitTick>

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023c00 	.word	0x40023c00
 8003a14:	40023800 	.word	0x40023800
 8003a18:	08009800 	.word	0x08009800
 8003a1c:	20000010 	.word	0x20000010
 8003a20:	20000014 	.word	0x20000014

08003a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b094      	sub	sp, #80	; 0x50
 8003a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a30:	2300      	movs	r3, #0
 8003a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a34:	2300      	movs	r3, #0
 8003a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3c:	4b79      	ldr	r3, [pc, #484]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d00d      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x40>
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	f200 80e1 	bhi.w	8003c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x34>
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a56:	e0db      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a58:	4b73      	ldr	r3, [pc, #460]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a5c:	e0db      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a5e:	4b73      	ldr	r3, [pc, #460]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a62:	e0d8      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a64:	4b6f      	ldr	r3, [pc, #444]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a6e:	4b6d      	ldr	r3, [pc, #436]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d063      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7a:	4b6a      	ldr	r3, [pc, #424]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	2200      	movs	r2, #0
 8003a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
 8003a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a96:	4622      	mov	r2, r4
 8003a98:	462b      	mov	r3, r5
 8003a9a:	f04f 0000 	mov.w	r0, #0
 8003a9e:	f04f 0100 	mov.w	r1, #0
 8003aa2:	0159      	lsls	r1, r3, #5
 8003aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa8:	0150      	lsls	r0, r2, #5
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4621      	mov	r1, r4
 8003ab0:	1a51      	subs	r1, r2, r1
 8003ab2:	6139      	str	r1, [r7, #16]
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac8:	4659      	mov	r1, fp
 8003aca:	018b      	lsls	r3, r1, #6
 8003acc:	4651      	mov	r1, sl
 8003ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	018a      	lsls	r2, r1, #6
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8003adc:	4659      	mov	r1, fp
 8003ade:	eb63 0901 	sbc.w	r9, r3, r1
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003af6:	4690      	mov	r8, r2
 8003af8:	4699      	mov	r9, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	eb18 0303 	adds.w	r3, r8, r3
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	462b      	mov	r3, r5
 8003b04:	eb49 0303 	adc.w	r3, r9, r3
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b16:	4629      	mov	r1, r5
 8003b18:	024b      	lsls	r3, r1, #9
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b20:	4621      	mov	r1, r4
 8003b22:	024a      	lsls	r2, r1, #9
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b34:	f7fd f860 	bl	8000bf8 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b40:	e058      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b42:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	2300      	movs	r3, #0
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	f04f 0000 	mov.w	r0, #0
 8003b64:	f04f 0100 	mov.w	r1, #0
 8003b68:	0159      	lsls	r1, r3, #5
 8003b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6e:	0150      	lsls	r0, r2, #5
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4641      	mov	r1, r8
 8003b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b94:	ebb2 040a 	subs.w	r4, r2, sl
 8003b98:	eb63 050b 	sbc.w	r5, r3, fp
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	00eb      	lsls	r3, r5, #3
 8003ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003baa:	00e2      	lsls	r2, r4, #3
 8003bac:	4614      	mov	r4, r2
 8003bae:	461d      	mov	r5, r3
 8003bb0:	4643      	mov	r3, r8
 8003bb2:	18e3      	adds	r3, r4, r3
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	eb45 0303 	adc.w	r3, r5, r3
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bca:	4629      	mov	r1, r5
 8003bcc:	028b      	lsls	r3, r1, #10
 8003bce:	4621      	mov	r1, r4
 8003bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	028a      	lsls	r2, r1, #10
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bde:	2200      	movs	r2, #0
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	61fa      	str	r2, [r7, #28]
 8003be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be8:	f7fd f806 	bl	8000bf8 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c0e:	e002      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3750      	adds	r7, #80	; 0x50
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	00f42400 	.word	0x00f42400
 8003c2c:	007a1200 	.word	0x007a1200

08003c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000010 	.word	0x20000010

08003c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c4c:	f7ff fff0 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0a9b      	lsrs	r3, r3, #10
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4903      	ldr	r1, [pc, #12]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	08009810 	.word	0x08009810

08003c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c74:	f7ff ffdc 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	0b5b      	lsrs	r3, r3, #13
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	4903      	ldr	r1, [pc, #12]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c86:	5ccb      	ldrb	r3, [r1, r3]
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40023800 	.word	0x40023800
 8003c94:	08009810 	.word	0x08009810

08003c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e041      	b.n	8003d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fe fd22 	bl	8002708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f000 fbf4 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e041      	b.n	8003dcc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d106      	bne.n	8003d62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f839 	bl	8003dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f000 fba5 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_TIM_PWM_Start+0x24>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e022      	b.n	8003e52 <HAL_TIM_PWM_Start+0x6a>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d109      	bne.n	8003e26 <HAL_TIM_PWM_Start+0x3e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	bf14      	ite	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	2300      	moveq	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	e015      	b.n	8003e52 <HAL_TIM_PWM_Start+0x6a>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d109      	bne.n	8003e40 <HAL_TIM_PWM_Start+0x58>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e008      	b.n	8003e52 <HAL_TIM_PWM_Start+0x6a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e068      	b.n	8003f2c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_PWM_Start+0x82>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e68:	e013      	b.n	8003e92 <HAL_TIM_PWM_Start+0xaa>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_PWM_Start+0x92>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e78:	e00b      	b.n	8003e92 <HAL_TIM_PWM_Start+0xaa>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_PWM_Start+0xa2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e88:	e003      	b.n	8003e92 <HAL_TIM_PWM_Start+0xaa>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2201      	movs	r2, #1
 8003e98:	6839      	ldr	r1, [r7, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fdc4 	bl	8004a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <HAL_TIM_PWM_Start+0x14c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d107      	bne.n	8003eba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <HAL_TIM_PWM_Start+0x14c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d018      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x10e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ecc:	d013      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x10e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a19      	ldr	r2, [pc, #100]	; (8003f38 <HAL_TIM_PWM_Start+0x150>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x10e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <HAL_TIM_PWM_Start+0x154>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d009      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x10e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <HAL_TIM_PWM_Start+0x158>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x10e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <HAL_TIM_PWM_Start+0x15c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d111      	bne.n	8003f1a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b06      	cmp	r3, #6
 8003f06:	d010      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	e007      	b.n	8003f2a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40000c00 	.word	0x40000c00
 8003f44:	40014000 	.word	0x40014000

08003f48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e097      	b.n	800408c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d106      	bne.n	8003f76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7fe faf9 	bl	8002568 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f8c:	f023 0307 	bic.w	r3, r3, #7
 8003f90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f000 fa91 	bl	80044c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fca:	f023 0303 	bic.w	r3, r3, #3
 8003fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003fe8:	f023 030c 	bic.w	r3, r3, #12
 8003fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	4313      	orrs	r3, r2
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	011a      	lsls	r2, r3, #4
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	031b      	lsls	r3, r3, #12
 8004018:	4313      	orrs	r3, r2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	4313      	orrs	r3, r2
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d110      	bne.n	80040e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d102      	bne.n	80040d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80040ca:	7b7b      	ldrb	r3, [r7, #13]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d001      	beq.n	80040d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e069      	b.n	80041a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e4:	e031      	b.n	800414a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d110      	bne.n	800410e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040ec:	7bbb      	ldrb	r3, [r7, #14]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d102      	bne.n	80040f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040f2:	7b3b      	ldrb	r3, [r7, #12]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d001      	beq.n	80040fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e055      	b.n	80041a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800410c:	e01d      	b.n	800414a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d108      	bne.n	8004126 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004114:	7bbb      	ldrb	r3, [r7, #14]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d105      	bne.n	8004126 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800411a:	7b7b      	ldrb	r3, [r7, #13]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d102      	bne.n	8004126 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004120:	7b3b      	ldrb	r3, [r7, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d001      	beq.n	800412a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e03e      	b.n	80041a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2202      	movs	r2, #2
 8004146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_TIM_Encoder_Start+0xc4>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b04      	cmp	r3, #4
 8004154:	d008      	beq.n	8004168 <HAL_TIM_Encoder_Start+0xd4>
 8004156:	e00f      	b.n	8004178 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2201      	movs	r2, #1
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fc61 	bl	8004a28 <TIM_CCxChannelCmd>
      break;
 8004166:	e016      	b.n	8004196 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2201      	movs	r2, #1
 800416e:	2104      	movs	r1, #4
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fc59 	bl	8004a28 <TIM_CCxChannelCmd>
      break;
 8004176:	e00e      	b.n	8004196 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2201      	movs	r2, #1
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fc51 	bl	8004a28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2201      	movs	r2, #1
 800418c:	2104      	movs	r1, #4
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fc4a 	bl	8004a28 <TIM_CCxChannelCmd>
      break;
 8004194:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e0ae      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b0c      	cmp	r3, #12
 80041da:	f200 809f 	bhi.w	800431c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041de:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	08004219 	.word	0x08004219
 80041e8:	0800431d 	.word	0x0800431d
 80041ec:	0800431d 	.word	0x0800431d
 80041f0:	0800431d 	.word	0x0800431d
 80041f4:	08004259 	.word	0x08004259
 80041f8:	0800431d 	.word	0x0800431d
 80041fc:	0800431d 	.word	0x0800431d
 8004200:	0800431d 	.word	0x0800431d
 8004204:	0800429b 	.word	0x0800429b
 8004208:	0800431d 	.word	0x0800431d
 800420c:	0800431d 	.word	0x0800431d
 8004210:	0800431d 	.word	0x0800431d
 8004214:	080042db 	.word	0x080042db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f9dc 	bl	80045dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0208 	orr.w	r2, r2, #8
 8004232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0204 	bic.w	r2, r2, #4
 8004242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	619a      	str	r2, [r3, #24]
      break;
 8004256:	e064      	b.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fa22 	bl	80046a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6999      	ldr	r1, [r3, #24]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	021a      	lsls	r2, r3, #8
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	619a      	str	r2, [r3, #24]
      break;
 8004298:	e043      	b.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fa6d 	bl	8004780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0208 	orr.w	r2, r2, #8
 80042b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0204 	bic.w	r2, r2, #4
 80042c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69d9      	ldr	r1, [r3, #28]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	61da      	str	r2, [r3, #28]
      break;
 80042d8:	e023      	b.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fab7 	bl	8004854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69d9      	ldr	r1, [r3, #28]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	021a      	lsls	r2, r3, #8
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	61da      	str	r2, [r3, #28]
      break;
 800431a:	e002      	b.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
      break;
 8004320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800432a:	7dfb      	ldrb	r3, [r7, #23]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_TIM_ConfigClockSource+0x1c>
 800434c:	2302      	movs	r3, #2
 800434e:	e0b4      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x186>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800436e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004388:	d03e      	beq.n	8004408 <HAL_TIM_ConfigClockSource+0xd4>
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438e:	f200 8087 	bhi.w	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004396:	f000 8086 	beq.w	80044a6 <HAL_TIM_ConfigClockSource+0x172>
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	d87f      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b70      	cmp	r3, #112	; 0x70
 80043a2:	d01a      	beq.n	80043da <HAL_TIM_ConfigClockSource+0xa6>
 80043a4:	2b70      	cmp	r3, #112	; 0x70
 80043a6:	d87b      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b60      	cmp	r3, #96	; 0x60
 80043aa:	d050      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x11a>
 80043ac:	2b60      	cmp	r3, #96	; 0x60
 80043ae:	d877      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b50      	cmp	r3, #80	; 0x50
 80043b2:	d03c      	beq.n	800442e <HAL_TIM_ConfigClockSource+0xfa>
 80043b4:	2b50      	cmp	r3, #80	; 0x50
 80043b6:	d873      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	d058      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x13a>
 80043bc:	2b40      	cmp	r3, #64	; 0x40
 80043be:	d86f      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c0:	2b30      	cmp	r3, #48	; 0x30
 80043c2:	d064      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15a>
 80043c4:	2b30      	cmp	r3, #48	; 0x30
 80043c6:	d86b      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d060      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15a>
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d867      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d05c      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15a>
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d05a      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15a>
 80043d8:	e062      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ea:	f000 fafd 	bl	80049e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	609a      	str	r2, [r3, #8]
      break;
 8004406:	e04f      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004418:	f000 fae6 	bl	80049e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800442a:	609a      	str	r2, [r3, #8]
      break;
 800442c:	e03c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800443a:	461a      	mov	r2, r3
 800443c:	f000 fa5a 	bl	80048f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2150      	movs	r1, #80	; 0x50
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fab3 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 800444c:	e02c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800445a:	461a      	mov	r2, r3
 800445c:	f000 fa79 	bl	8004952 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2160      	movs	r1, #96	; 0x60
 8004466:	4618      	mov	r0, r3
 8004468:	f000 faa3 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 800446c:	e01c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800447a:	461a      	mov	r2, r3
 800447c:	f000 fa3a 	bl	80048f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2140      	movs	r1, #64	; 0x40
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fa93 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 800448c:	e00c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f000 fa8a 	bl	80049b2 <TIM_ITRx_SetConfig>
      break;
 800449e:	e003      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      break;
 80044a4:	e000      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a3a      	ldr	r2, [pc, #232]	; (80045c0 <TIM_Base_SetConfig+0xfc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00f      	beq.n	80044fc <TIM_Base_SetConfig+0x38>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e2:	d00b      	beq.n	80044fc <TIM_Base_SetConfig+0x38>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a37      	ldr	r2, [pc, #220]	; (80045c4 <TIM_Base_SetConfig+0x100>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d007      	beq.n	80044fc <TIM_Base_SetConfig+0x38>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a36      	ldr	r2, [pc, #216]	; (80045c8 <TIM_Base_SetConfig+0x104>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_Base_SetConfig+0x38>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a35      	ldr	r2, [pc, #212]	; (80045cc <TIM_Base_SetConfig+0x108>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d108      	bne.n	800450e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a2b      	ldr	r2, [pc, #172]	; (80045c0 <TIM_Base_SetConfig+0xfc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01b      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451c:	d017      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a28      	ldr	r2, [pc, #160]	; (80045c4 <TIM_Base_SetConfig+0x100>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a27      	ldr	r2, [pc, #156]	; (80045c8 <TIM_Base_SetConfig+0x104>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00f      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a26      	ldr	r2, [pc, #152]	; (80045cc <TIM_Base_SetConfig+0x108>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00b      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a25      	ldr	r2, [pc, #148]	; (80045d0 <TIM_Base_SetConfig+0x10c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d007      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a24      	ldr	r2, [pc, #144]	; (80045d4 <TIM_Base_SetConfig+0x110>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d003      	beq.n	800454e <TIM_Base_SetConfig+0x8a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a23      	ldr	r2, [pc, #140]	; (80045d8 <TIM_Base_SetConfig+0x114>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d108      	bne.n	8004560 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <TIM_Base_SetConfig+0xfc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d103      	bne.n	8004594 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d105      	bne.n	80045b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f023 0201 	bic.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	611a      	str	r2, [r3, #16]
  }
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40010000 	.word	0x40010000
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800
 80045cc:	40000c00 	.word	0x40000c00
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f023 0201 	bic.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 0302 	bic.w	r3, r3, #2
 8004624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <TIM_OC1_SetConfig+0xc8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10c      	bne.n	8004652 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0308 	bic.w	r3, r3, #8
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a13      	ldr	r2, [pc, #76]	; (80046a4 <TIM_OC1_SetConfig+0xc8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d111      	bne.n	800467e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	621a      	str	r2, [r3, #32]
}
 8004698:	bf00      	nop
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	40010000 	.word	0x40010000

080046a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f023 0210 	bic.w	r2, r3, #16
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f023 0320 	bic.w	r3, r3, #32
 80046f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a1e      	ldr	r2, [pc, #120]	; (800477c <TIM_OC2_SetConfig+0xd4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d10d      	bne.n	8004724 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004722:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a15      	ldr	r2, [pc, #84]	; (800477c <TIM_OC2_SetConfig+0xd4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d113      	bne.n	8004754 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800473a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000

08004780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <TIM_OC3_SetConfig+0xd0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d10d      	bne.n	80047fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a14      	ldr	r2, [pc, #80]	; (8004850 <TIM_OC3_SetConfig+0xd0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d113      	bne.n	800482a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40010000 	.word	0x40010000

08004854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800489e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	031b      	lsls	r3, r3, #12
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <TIM_OC4_SetConfig+0x9c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d109      	bne.n	80048c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	019b      	lsls	r3, r3, #6
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40010000 	.word	0x40010000

080048f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f023 0201 	bic.w	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800491e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f023 030a 	bic.w	r3, r3, #10
 8004930:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	621a      	str	r2, [r3, #32]
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004952:	b480      	push	{r7}
 8004954:	b087      	sub	sp, #28
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f023 0210 	bic.w	r2, r3, #16
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800497c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	031b      	lsls	r3, r3, #12
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800498e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f043 0307 	orr.w	r3, r3, #7
 80049d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	609a      	str	r2, [r3, #8]
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	021a      	lsls	r2, r3, #8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	621a      	str	r2, [r3, #32]
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e050      	b.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1c      	ldr	r2, [pc, #112]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d018      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad8:	d013      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a18      	ldr	r2, [pc, #96]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a16      	ldr	r2, [pc, #88]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d10c      	bne.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800
 8004b48:	40000c00 	.word	0x40000c00
 8004b4c:	40014000 	.word	0x40014000

08004b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e042      	b.n	8004be8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fd fe3e 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	; 0x24
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fdff 	bl	8005798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d175      	bne.n	8004cfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_UART_Transmit+0x2c>
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e06e      	b.n	8004cfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2221      	movs	r2, #33	; 0x21
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c2e:	f7fe f829 	bl	8002c84 <HAL_GetTick>
 8004c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	88fa      	ldrh	r2, [r7, #6]
 8004c3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c48:	d108      	bne.n	8004c5c <HAL_UART_Transmit+0x6c>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e003      	b.n	8004c64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c64:	e02e      	b.n	8004cc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2180      	movs	r1, #128	; 0x80
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fb9b 	bl	80053ac <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e03a      	b.n	8004cfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	61bb      	str	r3, [r7, #24]
 8004ca4:	e007      	b.n	8004cb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1cb      	bne.n	8004c66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2140      	movs	r1, #64	; 0x40
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fb67 	bl	80053ac <UART_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b08a      	sub	sp, #40	; 0x28
 8004d0a:	af02      	add	r7, sp, #8
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	f040 8081 	bne.w	8004e2a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_UART_Receive+0x2e>
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e079      	b.n	8004e2c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2222      	movs	r2, #34	; 0x22
 8004d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d4c:	f7fd ff9a 	bl	8002c84 <HAL_GetTick>
 8004d50:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	88fa      	ldrh	r2, [r7, #6]
 8004d56:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	d108      	bne.n	8004d7a <HAL_UART_Receive+0x74>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d104      	bne.n	8004d7a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e003      	b.n	8004d82 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d82:	e047      	b.n	8004e14 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2120      	movs	r1, #32
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fb0c 	bl	80053ac <UART_WaitOnFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e042      	b.n	8004e2c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10c      	bne.n	8004dc6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	e01f      	b.n	8004e06 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	d007      	beq.n	8004de0 <HAL_UART_Receive+0xda>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <HAL_UART_Receive+0xe8>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e008      	b.n	8004e00 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	3301      	adds	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1b2      	bne.n	8004d84 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
  }
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3720      	adds	r7, #32
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b0ba      	sub	sp, #232	; 0xe8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10f      	bne.n	8004e9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_UART_IRQHandler+0x66>
 8004e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fbc2 	bl	800561c <UART_Receive_IT>
      return;
 8004e98:	e25b      	b.n	8005352 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 80de 	beq.w	8005060 <HAL_UART_IRQHandler+0x22c>
 8004ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80d1 	beq.w	8005060 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00b      	beq.n	8004ee2 <HAL_UART_IRQHandler+0xae>
 8004eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	f043 0201 	orr.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <HAL_UART_IRQHandler+0xd2>
 8004eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f043 0202 	orr.w	r2, r3, #2
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <HAL_UART_IRQHandler+0xf6>
 8004f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	f043 0204 	orr.w	r2, r3, #4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d011      	beq.n	8004f5a <HAL_UART_IRQHandler+0x126>
 8004f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	f043 0208 	orr.w	r2, r3, #8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 81f2 	beq.w	8005348 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_UART_IRQHandler+0x14e>
 8004f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fb4d 	bl	800561c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d103      	bne.n	8004fae <HAL_UART_IRQHandler+0x17a>
 8004fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d04f      	beq.n	800504e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa55 	bl	800545e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d141      	bne.n	8005046 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3314      	adds	r3, #20
 8004fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3314      	adds	r3, #20
 8004fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1d9      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d013      	beq.n	800503e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501a:	4a7e      	ldr	r2, [pc, #504]	; (8005214 <HAL_UART_IRQHandler+0x3e0>)
 800501c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd ffdf 	bl	8002fe6 <HAL_DMA_Abort_IT>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d016      	beq.n	800505c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005038:	4610      	mov	r0, r2
 800503a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503c:	e00e      	b.n	800505c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f99e 	bl	8005380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005044:	e00a      	b.n	800505c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f99a 	bl	8005380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	e006      	b.n	800505c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f996 	bl	8005380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800505a:	e175      	b.n	8005348 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505c:	bf00      	nop
    return;
 800505e:	e173      	b.n	8005348 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	2b01      	cmp	r3, #1
 8005066:	f040 814f 	bne.w	8005308 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 8148 	beq.w	8005308 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8141 	beq.w	8005308 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005086:	2300      	movs	r3, #0
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	f040 80b6 	bne.w	8005218 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8145 	beq.w	800534c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ca:	429a      	cmp	r2, r3
 80050cc:	f080 813e 	bcs.w	800534c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e2:	f000 8088 	beq.w	80051f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005104:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	330c      	adds	r3, #12
 800510e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005112:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800511e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800512a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1d9      	bne.n	80050e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3314      	adds	r3, #20
 8005138:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3314      	adds	r3, #20
 8005152:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005156:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800515a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800515e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e1      	bne.n	8005132 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3314      	adds	r3, #20
 8005174:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800517e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3314      	adds	r3, #20
 800518e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005192:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005194:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005198:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e3      	bne.n	800516e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	330c      	adds	r3, #12
 80051ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c6:	f023 0310 	bic.w	r3, r3, #16
 80051ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	330c      	adds	r3, #12
 80051d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80051da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e3      	bne.n	80051b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fd fe88 	bl	8002f06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005204:	b29b      	uxth	r3, r3
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	b29b      	uxth	r3, r3
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8c1 	bl	8005394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005212:	e09b      	b.n	800534c <HAL_UART_IRQHandler+0x518>
 8005214:	08005525 	.word	0x08005525
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005220:	b29b      	uxth	r3, r3
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 808e 	beq.w	8005350 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005234:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8089 	beq.w	8005350 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800524e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005262:	647a      	str	r2, [r7, #68]	; 0x44
 8005264:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005268:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e3      	bne.n	800523e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3314      	adds	r3, #20
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	623b      	str	r3, [r7, #32]
   return(result);
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f023 0301 	bic.w	r3, r3, #1
 800528c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3314      	adds	r3, #20
 8005296:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800529a:	633a      	str	r2, [r7, #48]	; 0x30
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e3      	bne.n	8005276 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0310 	bic.w	r3, r3, #16
 80052d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052e0:	61fa      	str	r2, [r7, #28]
 80052e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	69b9      	ldr	r1, [r7, #24]
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	617b      	str	r3, [r7, #20]
   return(result);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e3      	bne.n	80052bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f847 	bl	8005394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005306:	e023      	b.n	8005350 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	d009      	beq.n	8005328 <HAL_UART_IRQHandler+0x4f4>
 8005314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f913 	bl	800554c <UART_Transmit_IT>
    return;
 8005326:	e014      	b.n	8005352 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00e      	beq.n	8005352 <HAL_UART_IRQHandler+0x51e>
 8005334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f953 	bl	80055ec <UART_EndTransmit_IT>
    return;
 8005346:	e004      	b.n	8005352 <HAL_UART_IRQHandler+0x51e>
    return;
 8005348:	bf00      	nop
 800534a:	e002      	b.n	8005352 <HAL_UART_IRQHandler+0x51e>
      return;
 800534c:	bf00      	nop
 800534e:	e000      	b.n	8005352 <HAL_UART_IRQHandler+0x51e>
      return;
 8005350:	bf00      	nop
  }
}
 8005352:	37e8      	adds	r7, #232	; 0xe8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	4613      	mov	r3, r2
 80053ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053bc:	e03b      	b.n	8005436 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d037      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c6:	f7fd fc5d 	bl	8002c84 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	6a3a      	ldr	r2, [r7, #32]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d302      	bcc.n	80053dc <UART_WaitOnFlagUntilTimeout+0x30>
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e03a      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d023      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b80      	cmp	r3, #128	; 0x80
 80053f2:	d020      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d01d      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b08      	cmp	r3, #8
 8005406:	d116      	bne.n	8005436 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f81d 	bl	800545e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2208      	movs	r2, #8
 8005428:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e00f      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	429a      	cmp	r2, r3
 8005444:	bf0c      	ite	eq
 8005446:	2301      	moveq	r3, #1
 8005448:	2300      	movne	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	429a      	cmp	r2, r3
 8005452:	d0b4      	beq.n	80053be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800545e:	b480      	push	{r7}
 8005460:	b095      	sub	sp, #84	; 0x54
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800547c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	330c      	adds	r3, #12
 8005484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005486:	643a      	str	r2, [r7, #64]	; 0x40
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800548c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e5      	bne.n	8005466 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3314      	adds	r3, #20
 80054a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3314      	adds	r3, #20
 80054b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e5      	bne.n	800549a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d119      	bne.n	800550a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	330c      	adds	r3, #12
 80054dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f023 0310 	bic.w	r3, r3, #16
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	330c      	adds	r3, #12
 80054f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054f6:	61ba      	str	r2, [r7, #24]
 80054f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6979      	ldr	r1, [r7, #20]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	613b      	str	r3, [r7, #16]
   return(result);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e5      	bne.n	80054d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005518:	bf00      	nop
 800551a:	3754      	adds	r7, #84	; 0x54
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff ff1e 	bl	8005380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b21      	cmp	r3, #33	; 0x21
 800555e:	d13e      	bne.n	80055de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005568:	d114      	bne.n	8005594 <UART_Transmit_IT+0x48>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d110      	bne.n	8005594 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005586:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	1c9a      	adds	r2, r3, #2
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	621a      	str	r2, [r3, #32]
 8005592:	e008      	b.n	80055a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	1c59      	adds	r1, r3, #1
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6211      	str	r1, [r2, #32]
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4619      	mov	r1, r3
 80055b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e000      	b.n	80055e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055de:	2302      	movs	r3, #2
  }
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005602:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff fea3 	bl	8005358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08c      	sub	sp, #48	; 0x30
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b22      	cmp	r3, #34	; 0x22
 800562e:	f040 80ae 	bne.w	800578e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563a:	d117      	bne.n	800566c <UART_Receive_IT+0x50>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d113      	bne.n	800566c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565a:	b29a      	uxth	r2, r3
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	1c9a      	adds	r2, r3, #2
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	629a      	str	r2, [r3, #40]	; 0x28
 800566a:	e026      	b.n	80056ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567e:	d007      	beq.n	8005690 <UART_Receive_IT+0x74>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <UART_Receive_IT+0x82>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	b2da      	uxtb	r2, r3
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	e008      	b.n	80056b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	4619      	mov	r1, r3
 80056c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d15d      	bne.n	800578a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0220 	bic.w	r2, r2, #32
 80056dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0201 	bic.w	r2, r2, #1
 80056fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	2b01      	cmp	r3, #1
 8005712:	d135      	bne.n	8005780 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	613b      	str	r3, [r7, #16]
   return(result);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f023 0310 	bic.w	r3, r3, #16
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	623a      	str	r2, [r7, #32]
 800573c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	69f9      	ldr	r1, [r7, #28]
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	61bb      	str	r3, [r7, #24]
   return(result);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b10      	cmp	r3, #16
 800575a:	d10a      	bne.n	8005772 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff fe0b 	bl	8005394 <HAL_UARTEx_RxEventCallback>
 800577e:	e002      	b.n	8005786 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fdf3 	bl	800536c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	e002      	b.n	8005790 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e000      	b.n	8005790 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800578e:	2302      	movs	r3, #2
  }
}
 8005790:	4618      	mov	r0, r3
 8005792:	3730      	adds	r7, #48	; 0x30
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800579c:	b0c0      	sub	sp, #256	; 0x100
 800579e:	af00      	add	r7, sp, #0
 80057a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	68d9      	ldr	r1, [r3, #12]
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	ea40 0301 	orr.w	r3, r0, r1
 80057c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057f0:	f021 010c 	bic.w	r1, r1, #12
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057fe:	430b      	orrs	r3, r1
 8005800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005812:	6999      	ldr	r1, [r3, #24]
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	ea40 0301 	orr.w	r3, r0, r1
 800581e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b8f      	ldr	r3, [pc, #572]	; (8005a64 <UART_SetConfig+0x2cc>)
 8005828:	429a      	cmp	r2, r3
 800582a:	d005      	beq.n	8005838 <UART_SetConfig+0xa0>
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b8d      	ldr	r3, [pc, #564]	; (8005a68 <UART_SetConfig+0x2d0>)
 8005834:	429a      	cmp	r2, r3
 8005836:	d104      	bne.n	8005842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005838:	f7fe fa1a 	bl	8003c70 <HAL_RCC_GetPCLK2Freq>
 800583c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005840:	e003      	b.n	800584a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005842:	f7fe fa01 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8005846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005854:	f040 810c 	bne.w	8005a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800585c:	2200      	movs	r2, #0
 800585e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800586a:	4622      	mov	r2, r4
 800586c:	462b      	mov	r3, r5
 800586e:	1891      	adds	r1, r2, r2
 8005870:	65b9      	str	r1, [r7, #88]	; 0x58
 8005872:	415b      	adcs	r3, r3
 8005874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800587a:	4621      	mov	r1, r4
 800587c:	eb12 0801 	adds.w	r8, r2, r1
 8005880:	4629      	mov	r1, r5
 8005882:	eb43 0901 	adc.w	r9, r3, r1
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800589a:	4690      	mov	r8, r2
 800589c:	4699      	mov	r9, r3
 800589e:	4623      	mov	r3, r4
 80058a0:	eb18 0303 	adds.w	r3, r8, r3
 80058a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058a8:	462b      	mov	r3, r5
 80058aa:	eb49 0303 	adc.w	r3, r9, r3
 80058ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058c6:	460b      	mov	r3, r1
 80058c8:	18db      	adds	r3, r3, r3
 80058ca:	653b      	str	r3, [r7, #80]	; 0x50
 80058cc:	4613      	mov	r3, r2
 80058ce:	eb42 0303 	adc.w	r3, r2, r3
 80058d2:	657b      	str	r3, [r7, #84]	; 0x54
 80058d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058dc:	f7fb f98c 	bl	8000bf8 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4b61      	ldr	r3, [pc, #388]	; (8005a6c <UART_SetConfig+0x2d4>)
 80058e6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	011c      	lsls	r4, r3, #4
 80058ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80058fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	1891      	adds	r1, r2, r2
 8005906:	64b9      	str	r1, [r7, #72]	; 0x48
 8005908:	415b      	adcs	r3, r3
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005910:	4641      	mov	r1, r8
 8005912:	eb12 0a01 	adds.w	sl, r2, r1
 8005916:	4649      	mov	r1, r9
 8005918:	eb43 0b01 	adc.w	fp, r3, r1
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800592c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005930:	4692      	mov	sl, r2
 8005932:	469b      	mov	fp, r3
 8005934:	4643      	mov	r3, r8
 8005936:	eb1a 0303 	adds.w	r3, sl, r3
 800593a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800593e:	464b      	mov	r3, r9
 8005940:	eb4b 0303 	adc.w	r3, fp, r3
 8005944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800595c:	460b      	mov	r3, r1
 800595e:	18db      	adds	r3, r3, r3
 8005960:	643b      	str	r3, [r7, #64]	; 0x40
 8005962:	4613      	mov	r3, r2
 8005964:	eb42 0303 	adc.w	r3, r2, r3
 8005968:	647b      	str	r3, [r7, #68]	; 0x44
 800596a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800596e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005972:	f7fb f941 	bl	8000bf8 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4611      	mov	r1, r2
 800597c:	4b3b      	ldr	r3, [pc, #236]	; (8005a6c <UART_SetConfig+0x2d4>)
 800597e:	fba3 2301 	umull	r2, r3, r3, r1
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2264      	movs	r2, #100	; 0x64
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	1acb      	subs	r3, r1, r3
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005992:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005994:	fba3 2302 	umull	r2, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059a0:	441c      	add	r4, r3
 80059a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	1891      	adds	r1, r2, r2
 80059ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80059bc:	415b      	adcs	r3, r3
 80059be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059c4:	4641      	mov	r1, r8
 80059c6:	1851      	adds	r1, r2, r1
 80059c8:	6339      	str	r1, [r7, #48]	; 0x30
 80059ca:	4649      	mov	r1, r9
 80059cc:	414b      	adcs	r3, r1
 80059ce:	637b      	str	r3, [r7, #52]	; 0x34
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059dc:	4659      	mov	r1, fp
 80059de:	00cb      	lsls	r3, r1, #3
 80059e0:	4651      	mov	r1, sl
 80059e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e6:	4651      	mov	r1, sl
 80059e8:	00ca      	lsls	r2, r1, #3
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	4642      	mov	r2, r8
 80059f2:	189b      	adds	r3, r3, r2
 80059f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059f8:	464b      	mov	r3, r9
 80059fa:	460a      	mov	r2, r1
 80059fc:	eb42 0303 	adc.w	r3, r2, r3
 8005a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a18:	460b      	mov	r3, r1
 8005a1a:	18db      	adds	r3, r3, r3
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1e:	4613      	mov	r3, r2
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a2e:	f7fb f8e3 	bl	8000bf8 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005a38:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	2164      	movs	r1, #100	; 0x64
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	3332      	adds	r3, #50	; 0x32
 8005a4a:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	f003 0207 	and.w	r2, r3, #7
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4422      	add	r2, r4
 8005a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a60:	e106      	b.n	8005c70 <UART_SetConfig+0x4d8>
 8005a62:	bf00      	nop
 8005a64:	40011000 	.word	0x40011000
 8005a68:	40011400 	.word	0x40011400
 8005a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a82:	4642      	mov	r2, r8
 8005a84:	464b      	mov	r3, r9
 8005a86:	1891      	adds	r1, r2, r2
 8005a88:	6239      	str	r1, [r7, #32]
 8005a8a:	415b      	adcs	r3, r3
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a92:	4641      	mov	r1, r8
 8005a94:	1854      	adds	r4, r2, r1
 8005a96:	4649      	mov	r1, r9
 8005a98:	eb43 0501 	adc.w	r5, r3, r1
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	00eb      	lsls	r3, r5, #3
 8005aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aaa:	00e2      	lsls	r2, r4, #3
 8005aac:	4614      	mov	r4, r2
 8005aae:	461d      	mov	r5, r3
 8005ab0:	4643      	mov	r3, r8
 8005ab2:	18e3      	adds	r3, r4, r3
 8005ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ab8:	464b      	mov	r3, r9
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ade:	4629      	mov	r1, r5
 8005ae0:	008b      	lsls	r3, r1, #2
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae8:	4621      	mov	r1, r4
 8005aea:	008a      	lsls	r2, r1, #2
 8005aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005af0:	f7fb f882 	bl	8000bf8 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4b60      	ldr	r3, [pc, #384]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005afa:	fba3 2302 	umull	r2, r3, r3, r2
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	011c      	lsls	r4, r3, #4
 8005b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	1891      	adds	r1, r2, r2
 8005b1a:	61b9      	str	r1, [r7, #24]
 8005b1c:	415b      	adcs	r3, r3
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b24:	4641      	mov	r1, r8
 8005b26:	1851      	adds	r1, r2, r1
 8005b28:	6139      	str	r1, [r7, #16]
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	414b      	adcs	r3, r1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	00cb      	lsls	r3, r1, #3
 8005b40:	4651      	mov	r1, sl
 8005b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b46:	4651      	mov	r1, sl
 8005b48:	00ca      	lsls	r2, r1, #3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4642      	mov	r2, r8
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b58:	464b      	mov	r3, r9
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	eb42 0303 	adc.w	r3, r2, r3
 8005b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	008b      	lsls	r3, r1, #2
 8005b80:	4641      	mov	r1, r8
 8005b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b86:	4641      	mov	r1, r8
 8005b88:	008a      	lsls	r2, r1, #2
 8005b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b8e:	f7fb f833 	bl	8000bf8 <__aeabi_uldivmod>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	4b38      	ldr	r3, [pc, #224]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	2264      	movs	r2, #100	; 0x64
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	1acb      	subs	r3, r1, r3
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	3332      	adds	r3, #50	; 0x32
 8005bac:	4a33      	ldr	r2, [pc, #204]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb8:	441c      	add	r4, r3
 8005bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	673b      	str	r3, [r7, #112]	; 0x70
 8005bc2:	677a      	str	r2, [r7, #116]	; 0x74
 8005bc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bc8:	4642      	mov	r2, r8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	1891      	adds	r1, r2, r2
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	415b      	adcs	r3, r3
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bd8:	4641      	mov	r1, r8
 8005bda:	1851      	adds	r1, r2, r1
 8005bdc:	6039      	str	r1, [r7, #0]
 8005bde:	4649      	mov	r1, r9
 8005be0:	414b      	adcs	r3, r1
 8005be2:	607b      	str	r3, [r7, #4]
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	00cb      	lsls	r3, r1, #3
 8005bf4:	4651      	mov	r1, sl
 8005bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bfa:	4651      	mov	r1, sl
 8005bfc:	00ca      	lsls	r2, r1, #3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	4619      	mov	r1, r3
 8005c02:	4603      	mov	r3, r0
 8005c04:	4642      	mov	r2, r8
 8005c06:	189b      	adds	r3, r3, r2
 8005c08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	460a      	mov	r2, r1
 8005c0e:	eb42 0303 	adc.w	r3, r2, r3
 8005c12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c1e:	667a      	str	r2, [r7, #100]	; 0x64
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	008b      	lsls	r3, r1, #2
 8005c30:	4641      	mov	r1, r8
 8005c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c36:	4641      	mov	r1, r8
 8005c38:	008a      	lsls	r2, r1, #2
 8005c3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c3e:	f7fa ffdb 	bl	8000bf8 <__aeabi_uldivmod>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005c48:	fba3 1302 	umull	r1, r3, r3, r2
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	2164      	movs	r1, #100	; 0x64
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	3332      	adds	r3, #50	; 0x32
 8005c5a:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c60:	095b      	lsrs	r3, r3, #5
 8005c62:	f003 020f 	and.w	r2, r3, #15
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4422      	add	r2, r4
 8005c6e:	609a      	str	r2, [r3, #8]
}
 8005c70:	bf00      	nop
 8005c72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c76:	46bd      	mov	sp, r7
 8005c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7c:	51eb851f 	.word	0x51eb851f

08005c80 <__cvt>:
 8005c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c84:	ec55 4b10 	vmov	r4, r5, d0
 8005c88:	2d00      	cmp	r5, #0
 8005c8a:	460e      	mov	r6, r1
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	462b      	mov	r3, r5
 8005c90:	bfbb      	ittet	lt
 8005c92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c96:	461d      	movlt	r5, r3
 8005c98:	2300      	movge	r3, #0
 8005c9a:	232d      	movlt	r3, #45	; 0x2d
 8005c9c:	700b      	strb	r3, [r1, #0]
 8005c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ca0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ca4:	4691      	mov	r9, r2
 8005ca6:	f023 0820 	bic.w	r8, r3, #32
 8005caa:	bfbc      	itt	lt
 8005cac:	4622      	movlt	r2, r4
 8005cae:	4614      	movlt	r4, r2
 8005cb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cb4:	d005      	beq.n	8005cc2 <__cvt+0x42>
 8005cb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cba:	d100      	bne.n	8005cbe <__cvt+0x3e>
 8005cbc:	3601      	adds	r6, #1
 8005cbe:	2102      	movs	r1, #2
 8005cc0:	e000      	b.n	8005cc4 <__cvt+0x44>
 8005cc2:	2103      	movs	r1, #3
 8005cc4:	ab03      	add	r3, sp, #12
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	ab02      	add	r3, sp, #8
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	ec45 4b10 	vmov	d0, r4, r5
 8005cd0:	4653      	mov	r3, sl
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	f000 fe5c 	bl	8006990 <_dtoa_r>
 8005cd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cdc:	4607      	mov	r7, r0
 8005cde:	d102      	bne.n	8005ce6 <__cvt+0x66>
 8005ce0:	f019 0f01 	tst.w	r9, #1
 8005ce4:	d022      	beq.n	8005d2c <__cvt+0xac>
 8005ce6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cea:	eb07 0906 	add.w	r9, r7, r6
 8005cee:	d110      	bne.n	8005d12 <__cvt+0x92>
 8005cf0:	783b      	ldrb	r3, [r7, #0]
 8005cf2:	2b30      	cmp	r3, #48	; 0x30
 8005cf4:	d10a      	bne.n	8005d0c <__cvt+0x8c>
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	f7fa feeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d02:	b918      	cbnz	r0, 8005d0c <__cvt+0x8c>
 8005d04:	f1c6 0601 	rsb	r6, r6, #1
 8005d08:	f8ca 6000 	str.w	r6, [sl]
 8005d0c:	f8da 3000 	ldr.w	r3, [sl]
 8005d10:	4499      	add	r9, r3
 8005d12:	2200      	movs	r2, #0
 8005d14:	2300      	movs	r3, #0
 8005d16:	4620      	mov	r0, r4
 8005d18:	4629      	mov	r1, r5
 8005d1a:	f7fa fedd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d1e:	b108      	cbz	r0, 8005d24 <__cvt+0xa4>
 8005d20:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d24:	2230      	movs	r2, #48	; 0x30
 8005d26:	9b03      	ldr	r3, [sp, #12]
 8005d28:	454b      	cmp	r3, r9
 8005d2a:	d307      	bcc.n	8005d3c <__cvt+0xbc>
 8005d2c:	9b03      	ldr	r3, [sp, #12]
 8005d2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d30:	1bdb      	subs	r3, r3, r7
 8005d32:	4638      	mov	r0, r7
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	b004      	add	sp, #16
 8005d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3c:	1c59      	adds	r1, r3, #1
 8005d3e:	9103      	str	r1, [sp, #12]
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	e7f0      	b.n	8005d26 <__cvt+0xa6>

08005d44 <__exponent>:
 8005d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d46:	4603      	mov	r3, r0
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	bfb8      	it	lt
 8005d4c:	4249      	neglt	r1, r1
 8005d4e:	f803 2b02 	strb.w	r2, [r3], #2
 8005d52:	bfb4      	ite	lt
 8005d54:	222d      	movlt	r2, #45	; 0x2d
 8005d56:	222b      	movge	r2, #43	; 0x2b
 8005d58:	2909      	cmp	r1, #9
 8005d5a:	7042      	strb	r2, [r0, #1]
 8005d5c:	dd2a      	ble.n	8005db4 <__exponent+0x70>
 8005d5e:	f10d 0207 	add.w	r2, sp, #7
 8005d62:	4617      	mov	r7, r2
 8005d64:	260a      	movs	r6, #10
 8005d66:	4694      	mov	ip, r2
 8005d68:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d6c:	fb06 1415 	mls	r4, r6, r5, r1
 8005d70:	3430      	adds	r4, #48	; 0x30
 8005d72:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005d76:	460c      	mov	r4, r1
 8005d78:	2c63      	cmp	r4, #99	; 0x63
 8005d7a:	f102 32ff 	add.w	r2, r2, #4294967295
 8005d7e:	4629      	mov	r1, r5
 8005d80:	dcf1      	bgt.n	8005d66 <__exponent+0x22>
 8005d82:	3130      	adds	r1, #48	; 0x30
 8005d84:	f1ac 0402 	sub.w	r4, ip, #2
 8005d88:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d8c:	1c41      	adds	r1, r0, #1
 8005d8e:	4622      	mov	r2, r4
 8005d90:	42ba      	cmp	r2, r7
 8005d92:	d30a      	bcc.n	8005daa <__exponent+0x66>
 8005d94:	f10d 0209 	add.w	r2, sp, #9
 8005d98:	eba2 020c 	sub.w	r2, r2, ip
 8005d9c:	42bc      	cmp	r4, r7
 8005d9e:	bf88      	it	hi
 8005da0:	2200      	movhi	r2, #0
 8005da2:	4413      	add	r3, r2
 8005da4:	1a18      	subs	r0, r3, r0
 8005da6:	b003      	add	sp, #12
 8005da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005daa:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005dae:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005db2:	e7ed      	b.n	8005d90 <__exponent+0x4c>
 8005db4:	2330      	movs	r3, #48	; 0x30
 8005db6:	3130      	adds	r1, #48	; 0x30
 8005db8:	7083      	strb	r3, [r0, #2]
 8005dba:	70c1      	strb	r1, [r0, #3]
 8005dbc:	1d03      	adds	r3, r0, #4
 8005dbe:	e7f1      	b.n	8005da4 <__exponent+0x60>

08005dc0 <_printf_float>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	ed2d 8b02 	vpush	{d8}
 8005dc8:	b08d      	sub	sp, #52	; 0x34
 8005dca:	460c      	mov	r4, r1
 8005dcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	461f      	mov	r7, r3
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	f000 fcd9 	bl	800678c <_localeconv_r>
 8005dda:	f8d0 a000 	ldr.w	sl, [r0]
 8005dde:	4650      	mov	r0, sl
 8005de0:	f7fa fa4e 	bl	8000280 <strlen>
 8005de4:	2300      	movs	r3, #0
 8005de6:	930a      	str	r3, [sp, #40]	; 0x28
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	9305      	str	r3, [sp, #20]
 8005dec:	f8d8 3000 	ldr.w	r3, [r8]
 8005df0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005df4:	3307      	adds	r3, #7
 8005df6:	f023 0307 	bic.w	r3, r3, #7
 8005dfa:	f103 0208 	add.w	r2, r3, #8
 8005dfe:	f8c8 2000 	str.w	r2, [r8]
 8005e02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e0a:	9307      	str	r3, [sp, #28]
 8005e0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e10:	ee08 0a10 	vmov	s16, r0
 8005e14:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005e18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e1c:	4b9e      	ldr	r3, [pc, #632]	; (8006098 <_printf_float+0x2d8>)
 8005e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e22:	f7fa fe8b 	bl	8000b3c <__aeabi_dcmpun>
 8005e26:	bb88      	cbnz	r0, 8005e8c <_printf_float+0xcc>
 8005e28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e2c:	4b9a      	ldr	r3, [pc, #616]	; (8006098 <_printf_float+0x2d8>)
 8005e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e32:	f7fa fe65 	bl	8000b00 <__aeabi_dcmple>
 8005e36:	bb48      	cbnz	r0, 8005e8c <_printf_float+0xcc>
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	4649      	mov	r1, r9
 8005e40:	f7fa fe54 	bl	8000aec <__aeabi_dcmplt>
 8005e44:	b110      	cbz	r0, 8005e4c <_printf_float+0x8c>
 8005e46:	232d      	movs	r3, #45	; 0x2d
 8005e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e4c:	4a93      	ldr	r2, [pc, #588]	; (800609c <_printf_float+0x2dc>)
 8005e4e:	4b94      	ldr	r3, [pc, #592]	; (80060a0 <_printf_float+0x2e0>)
 8005e50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e54:	bf94      	ite	ls
 8005e56:	4690      	movls	r8, r2
 8005e58:	4698      	movhi	r8, r3
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	6123      	str	r3, [r4, #16]
 8005e5e:	9b05      	ldr	r3, [sp, #20]
 8005e60:	f023 0304 	bic.w	r3, r3, #4
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	f04f 0900 	mov.w	r9, #0
 8005e6a:	9700      	str	r7, [sp, #0]
 8005e6c:	4633      	mov	r3, r6
 8005e6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e70:	4621      	mov	r1, r4
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 f9da 	bl	800622c <_printf_common>
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f040 8090 	bne.w	8005f9e <_printf_float+0x1de>
 8005e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e82:	b00d      	add	sp, #52	; 0x34
 8005e84:	ecbd 8b02 	vpop	{d8}
 8005e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8c:	4642      	mov	r2, r8
 8005e8e:	464b      	mov	r3, r9
 8005e90:	4640      	mov	r0, r8
 8005e92:	4649      	mov	r1, r9
 8005e94:	f7fa fe52 	bl	8000b3c <__aeabi_dcmpun>
 8005e98:	b140      	cbz	r0, 8005eac <_printf_float+0xec>
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bfbc      	itt	lt
 8005ea0:	232d      	movlt	r3, #45	; 0x2d
 8005ea2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ea6:	4a7f      	ldr	r2, [pc, #508]	; (80060a4 <_printf_float+0x2e4>)
 8005ea8:	4b7f      	ldr	r3, [pc, #508]	; (80060a8 <_printf_float+0x2e8>)
 8005eaa:	e7d1      	b.n	8005e50 <_printf_float+0x90>
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005eb2:	9206      	str	r2, [sp, #24]
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	d13f      	bne.n	8005f38 <_printf_float+0x178>
 8005eb8:	2306      	movs	r3, #6
 8005eba:	6063      	str	r3, [r4, #4]
 8005ebc:	9b05      	ldr	r3, [sp, #20]
 8005ebe:	6861      	ldr	r1, [r4, #4]
 8005ec0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9303      	str	r3, [sp, #12]
 8005ec8:	ab0a      	add	r3, sp, #40	; 0x28
 8005eca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ece:	ab09      	add	r3, sp, #36	; 0x24
 8005ed0:	ec49 8b10 	vmov	d0, r8, r9
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005edc:	4628      	mov	r0, r5
 8005ede:	f7ff fecf 	bl	8005c80 <__cvt>
 8005ee2:	9b06      	ldr	r3, [sp, #24]
 8005ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ee6:	2b47      	cmp	r3, #71	; 0x47
 8005ee8:	4680      	mov	r8, r0
 8005eea:	d108      	bne.n	8005efe <_printf_float+0x13e>
 8005eec:	1cc8      	adds	r0, r1, #3
 8005eee:	db02      	blt.n	8005ef6 <_printf_float+0x136>
 8005ef0:	6863      	ldr	r3, [r4, #4]
 8005ef2:	4299      	cmp	r1, r3
 8005ef4:	dd41      	ble.n	8005f7a <_printf_float+0x1ba>
 8005ef6:	f1ab 0302 	sub.w	r3, fp, #2
 8005efa:	fa5f fb83 	uxtb.w	fp, r3
 8005efe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f02:	d820      	bhi.n	8005f46 <_printf_float+0x186>
 8005f04:	3901      	subs	r1, #1
 8005f06:	465a      	mov	r2, fp
 8005f08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f0c:	9109      	str	r1, [sp, #36]	; 0x24
 8005f0e:	f7ff ff19 	bl	8005d44 <__exponent>
 8005f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f14:	1813      	adds	r3, r2, r0
 8005f16:	2a01      	cmp	r2, #1
 8005f18:	4681      	mov	r9, r0
 8005f1a:	6123      	str	r3, [r4, #16]
 8005f1c:	dc02      	bgt.n	8005f24 <_printf_float+0x164>
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	07d2      	lsls	r2, r2, #31
 8005f22:	d501      	bpl.n	8005f28 <_printf_float+0x168>
 8005f24:	3301      	adds	r3, #1
 8005f26:	6123      	str	r3, [r4, #16]
 8005f28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d09c      	beq.n	8005e6a <_printf_float+0xaa>
 8005f30:	232d      	movs	r3, #45	; 0x2d
 8005f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f36:	e798      	b.n	8005e6a <_printf_float+0xaa>
 8005f38:	9a06      	ldr	r2, [sp, #24]
 8005f3a:	2a47      	cmp	r2, #71	; 0x47
 8005f3c:	d1be      	bne.n	8005ebc <_printf_float+0xfc>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1bc      	bne.n	8005ebc <_printf_float+0xfc>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e7b9      	b.n	8005eba <_printf_float+0xfa>
 8005f46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f4a:	d118      	bne.n	8005f7e <_printf_float+0x1be>
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	6863      	ldr	r3, [r4, #4]
 8005f50:	dd0b      	ble.n	8005f6a <_printf_float+0x1aa>
 8005f52:	6121      	str	r1, [r4, #16]
 8005f54:	b913      	cbnz	r3, 8005f5c <_printf_float+0x19c>
 8005f56:	6822      	ldr	r2, [r4, #0]
 8005f58:	07d0      	lsls	r0, r2, #31
 8005f5a:	d502      	bpl.n	8005f62 <_printf_float+0x1a2>
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	440b      	add	r3, r1
 8005f60:	6123      	str	r3, [r4, #16]
 8005f62:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f64:	f04f 0900 	mov.w	r9, #0
 8005f68:	e7de      	b.n	8005f28 <_printf_float+0x168>
 8005f6a:	b913      	cbnz	r3, 8005f72 <_printf_float+0x1b2>
 8005f6c:	6822      	ldr	r2, [r4, #0]
 8005f6e:	07d2      	lsls	r2, r2, #31
 8005f70:	d501      	bpl.n	8005f76 <_printf_float+0x1b6>
 8005f72:	3302      	adds	r3, #2
 8005f74:	e7f4      	b.n	8005f60 <_printf_float+0x1a0>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e7f2      	b.n	8005f60 <_printf_float+0x1a0>
 8005f7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f80:	4299      	cmp	r1, r3
 8005f82:	db05      	blt.n	8005f90 <_printf_float+0x1d0>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	6121      	str	r1, [r4, #16]
 8005f88:	07d8      	lsls	r0, r3, #31
 8005f8a:	d5ea      	bpl.n	8005f62 <_printf_float+0x1a2>
 8005f8c:	1c4b      	adds	r3, r1, #1
 8005f8e:	e7e7      	b.n	8005f60 <_printf_float+0x1a0>
 8005f90:	2900      	cmp	r1, #0
 8005f92:	bfd4      	ite	le
 8005f94:	f1c1 0202 	rsble	r2, r1, #2
 8005f98:	2201      	movgt	r2, #1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	e7e0      	b.n	8005f60 <_printf_float+0x1a0>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	055a      	lsls	r2, r3, #21
 8005fa2:	d407      	bmi.n	8005fb4 <_printf_float+0x1f4>
 8005fa4:	6923      	ldr	r3, [r4, #16]
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d12c      	bne.n	800600c <_printf_float+0x24c>
 8005fb2:	e764      	b.n	8005e7e <_printf_float+0xbe>
 8005fb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fb8:	f240 80e0 	bls.w	800617c <_printf_float+0x3bc>
 8005fbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f7fa fd88 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d034      	beq.n	8006036 <_printf_float+0x276>
 8005fcc:	4a37      	ldr	r2, [pc, #220]	; (80060ac <_printf_float+0x2ec>)
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	47b8      	blx	r7
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	f43f af51 	beq.w	8005e7e <_printf_float+0xbe>
 8005fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	db02      	blt.n	8005fea <_printf_float+0x22a>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	07d8      	lsls	r0, r3, #31
 8005fe8:	d510      	bpl.n	800600c <_printf_float+0x24c>
 8005fea:	ee18 3a10 	vmov	r3, s16
 8005fee:	4652      	mov	r2, sl
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f af41 	beq.w	8005e7e <_printf_float+0xbe>
 8005ffc:	f04f 0800 	mov.w	r8, #0
 8006000:	f104 091a 	add.w	r9, r4, #26
 8006004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006006:	3b01      	subs	r3, #1
 8006008:	4543      	cmp	r3, r8
 800600a:	dc09      	bgt.n	8006020 <_printf_float+0x260>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	079b      	lsls	r3, r3, #30
 8006010:	f100 8107 	bmi.w	8006222 <_printf_float+0x462>
 8006014:	68e0      	ldr	r0, [r4, #12]
 8006016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006018:	4298      	cmp	r0, r3
 800601a:	bfb8      	it	lt
 800601c:	4618      	movlt	r0, r3
 800601e:	e730      	b.n	8005e82 <_printf_float+0xc2>
 8006020:	2301      	movs	r3, #1
 8006022:	464a      	mov	r2, r9
 8006024:	4631      	mov	r1, r6
 8006026:	4628      	mov	r0, r5
 8006028:	47b8      	blx	r7
 800602a:	3001      	adds	r0, #1
 800602c:	f43f af27 	beq.w	8005e7e <_printf_float+0xbe>
 8006030:	f108 0801 	add.w	r8, r8, #1
 8006034:	e7e6      	b.n	8006004 <_printf_float+0x244>
 8006036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006038:	2b00      	cmp	r3, #0
 800603a:	dc39      	bgt.n	80060b0 <_printf_float+0x2f0>
 800603c:	4a1b      	ldr	r2, [pc, #108]	; (80060ac <_printf_float+0x2ec>)
 800603e:	2301      	movs	r3, #1
 8006040:	4631      	mov	r1, r6
 8006042:	4628      	mov	r0, r5
 8006044:	47b8      	blx	r7
 8006046:	3001      	adds	r0, #1
 8006048:	f43f af19 	beq.w	8005e7e <_printf_float+0xbe>
 800604c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006050:	4313      	orrs	r3, r2
 8006052:	d102      	bne.n	800605a <_printf_float+0x29a>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	07d9      	lsls	r1, r3, #31
 8006058:	d5d8      	bpl.n	800600c <_printf_float+0x24c>
 800605a:	ee18 3a10 	vmov	r3, s16
 800605e:	4652      	mov	r2, sl
 8006060:	4631      	mov	r1, r6
 8006062:	4628      	mov	r0, r5
 8006064:	47b8      	blx	r7
 8006066:	3001      	adds	r0, #1
 8006068:	f43f af09 	beq.w	8005e7e <_printf_float+0xbe>
 800606c:	f04f 0900 	mov.w	r9, #0
 8006070:	f104 0a1a 	add.w	sl, r4, #26
 8006074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006076:	425b      	negs	r3, r3
 8006078:	454b      	cmp	r3, r9
 800607a:	dc01      	bgt.n	8006080 <_printf_float+0x2c0>
 800607c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800607e:	e792      	b.n	8005fa6 <_printf_float+0x1e6>
 8006080:	2301      	movs	r3, #1
 8006082:	4652      	mov	r2, sl
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	47b8      	blx	r7
 800608a:	3001      	adds	r0, #1
 800608c:	f43f aef7 	beq.w	8005e7e <_printf_float+0xbe>
 8006090:	f109 0901 	add.w	r9, r9, #1
 8006094:	e7ee      	b.n	8006074 <_printf_float+0x2b4>
 8006096:	bf00      	nop
 8006098:	7fefffff 	.word	0x7fefffff
 800609c:	08009818 	.word	0x08009818
 80060a0:	0800981c 	.word	0x0800981c
 80060a4:	08009820 	.word	0x08009820
 80060a8:	08009824 	.word	0x08009824
 80060ac:	08009828 	.word	0x08009828
 80060b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060b4:	429a      	cmp	r2, r3
 80060b6:	bfa8      	it	ge
 80060b8:	461a      	movge	r2, r3
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	4691      	mov	r9, r2
 80060be:	dc37      	bgt.n	8006130 <_printf_float+0x370>
 80060c0:	f04f 0b00 	mov.w	fp, #0
 80060c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060c8:	f104 021a 	add.w	r2, r4, #26
 80060cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060ce:	9305      	str	r3, [sp, #20]
 80060d0:	eba3 0309 	sub.w	r3, r3, r9
 80060d4:	455b      	cmp	r3, fp
 80060d6:	dc33      	bgt.n	8006140 <_printf_float+0x380>
 80060d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060dc:	429a      	cmp	r2, r3
 80060de:	db3b      	blt.n	8006158 <_printf_float+0x398>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	07da      	lsls	r2, r3, #31
 80060e4:	d438      	bmi.n	8006158 <_printf_float+0x398>
 80060e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060ea:	eba2 0903 	sub.w	r9, r2, r3
 80060ee:	9b05      	ldr	r3, [sp, #20]
 80060f0:	1ad2      	subs	r2, r2, r3
 80060f2:	4591      	cmp	r9, r2
 80060f4:	bfa8      	it	ge
 80060f6:	4691      	movge	r9, r2
 80060f8:	f1b9 0f00 	cmp.w	r9, #0
 80060fc:	dc35      	bgt.n	800616a <_printf_float+0x3aa>
 80060fe:	f04f 0800 	mov.w	r8, #0
 8006102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006106:	f104 0a1a 	add.w	sl, r4, #26
 800610a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	eba3 0309 	sub.w	r3, r3, r9
 8006114:	4543      	cmp	r3, r8
 8006116:	f77f af79 	ble.w	800600c <_printf_float+0x24c>
 800611a:	2301      	movs	r3, #1
 800611c:	4652      	mov	r2, sl
 800611e:	4631      	mov	r1, r6
 8006120:	4628      	mov	r0, r5
 8006122:	47b8      	blx	r7
 8006124:	3001      	adds	r0, #1
 8006126:	f43f aeaa 	beq.w	8005e7e <_printf_float+0xbe>
 800612a:	f108 0801 	add.w	r8, r8, #1
 800612e:	e7ec      	b.n	800610a <_printf_float+0x34a>
 8006130:	4613      	mov	r3, r2
 8006132:	4631      	mov	r1, r6
 8006134:	4642      	mov	r2, r8
 8006136:	4628      	mov	r0, r5
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	d1c0      	bne.n	80060c0 <_printf_float+0x300>
 800613e:	e69e      	b.n	8005e7e <_printf_float+0xbe>
 8006140:	2301      	movs	r3, #1
 8006142:	4631      	mov	r1, r6
 8006144:	4628      	mov	r0, r5
 8006146:	9205      	str	r2, [sp, #20]
 8006148:	47b8      	blx	r7
 800614a:	3001      	adds	r0, #1
 800614c:	f43f ae97 	beq.w	8005e7e <_printf_float+0xbe>
 8006150:	9a05      	ldr	r2, [sp, #20]
 8006152:	f10b 0b01 	add.w	fp, fp, #1
 8006156:	e7b9      	b.n	80060cc <_printf_float+0x30c>
 8006158:	ee18 3a10 	vmov	r3, s16
 800615c:	4652      	mov	r2, sl
 800615e:	4631      	mov	r1, r6
 8006160:	4628      	mov	r0, r5
 8006162:	47b8      	blx	r7
 8006164:	3001      	adds	r0, #1
 8006166:	d1be      	bne.n	80060e6 <_printf_float+0x326>
 8006168:	e689      	b.n	8005e7e <_printf_float+0xbe>
 800616a:	9a05      	ldr	r2, [sp, #20]
 800616c:	464b      	mov	r3, r9
 800616e:	4442      	add	r2, r8
 8006170:	4631      	mov	r1, r6
 8006172:	4628      	mov	r0, r5
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	d1c1      	bne.n	80060fe <_printf_float+0x33e>
 800617a:	e680      	b.n	8005e7e <_printf_float+0xbe>
 800617c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800617e:	2a01      	cmp	r2, #1
 8006180:	dc01      	bgt.n	8006186 <_printf_float+0x3c6>
 8006182:	07db      	lsls	r3, r3, #31
 8006184:	d53a      	bpl.n	80061fc <_printf_float+0x43c>
 8006186:	2301      	movs	r3, #1
 8006188:	4642      	mov	r2, r8
 800618a:	4631      	mov	r1, r6
 800618c:	4628      	mov	r0, r5
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	f43f ae74 	beq.w	8005e7e <_printf_float+0xbe>
 8006196:	ee18 3a10 	vmov	r3, s16
 800619a:	4652      	mov	r2, sl
 800619c:	4631      	mov	r1, r6
 800619e:	4628      	mov	r0, r5
 80061a0:	47b8      	blx	r7
 80061a2:	3001      	adds	r0, #1
 80061a4:	f43f ae6b 	beq.w	8005e7e <_printf_float+0xbe>
 80061a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061ac:	2200      	movs	r2, #0
 80061ae:	2300      	movs	r3, #0
 80061b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80061b4:	f7fa fc90 	bl	8000ad8 <__aeabi_dcmpeq>
 80061b8:	b9d8      	cbnz	r0, 80061f2 <_printf_float+0x432>
 80061ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80061be:	f108 0201 	add.w	r2, r8, #1
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	d10e      	bne.n	80061ea <_printf_float+0x42a>
 80061cc:	e657      	b.n	8005e7e <_printf_float+0xbe>
 80061ce:	2301      	movs	r3, #1
 80061d0:	4652      	mov	r2, sl
 80061d2:	4631      	mov	r1, r6
 80061d4:	4628      	mov	r0, r5
 80061d6:	47b8      	blx	r7
 80061d8:	3001      	adds	r0, #1
 80061da:	f43f ae50 	beq.w	8005e7e <_printf_float+0xbe>
 80061de:	f108 0801 	add.w	r8, r8, #1
 80061e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e4:	3b01      	subs	r3, #1
 80061e6:	4543      	cmp	r3, r8
 80061e8:	dcf1      	bgt.n	80061ce <_printf_float+0x40e>
 80061ea:	464b      	mov	r3, r9
 80061ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061f0:	e6da      	b.n	8005fa8 <_printf_float+0x1e8>
 80061f2:	f04f 0800 	mov.w	r8, #0
 80061f6:	f104 0a1a 	add.w	sl, r4, #26
 80061fa:	e7f2      	b.n	80061e2 <_printf_float+0x422>
 80061fc:	2301      	movs	r3, #1
 80061fe:	4642      	mov	r2, r8
 8006200:	e7df      	b.n	80061c2 <_printf_float+0x402>
 8006202:	2301      	movs	r3, #1
 8006204:	464a      	mov	r2, r9
 8006206:	4631      	mov	r1, r6
 8006208:	4628      	mov	r0, r5
 800620a:	47b8      	blx	r7
 800620c:	3001      	adds	r0, #1
 800620e:	f43f ae36 	beq.w	8005e7e <_printf_float+0xbe>
 8006212:	f108 0801 	add.w	r8, r8, #1
 8006216:	68e3      	ldr	r3, [r4, #12]
 8006218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800621a:	1a5b      	subs	r3, r3, r1
 800621c:	4543      	cmp	r3, r8
 800621e:	dcf0      	bgt.n	8006202 <_printf_float+0x442>
 8006220:	e6f8      	b.n	8006014 <_printf_float+0x254>
 8006222:	f04f 0800 	mov.w	r8, #0
 8006226:	f104 0919 	add.w	r9, r4, #25
 800622a:	e7f4      	b.n	8006216 <_printf_float+0x456>

0800622c <_printf_common>:
 800622c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006230:	4616      	mov	r6, r2
 8006232:	4699      	mov	r9, r3
 8006234:	688a      	ldr	r2, [r1, #8]
 8006236:	690b      	ldr	r3, [r1, #16]
 8006238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800623c:	4293      	cmp	r3, r2
 800623e:	bfb8      	it	lt
 8006240:	4613      	movlt	r3, r2
 8006242:	6033      	str	r3, [r6, #0]
 8006244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006248:	4607      	mov	r7, r0
 800624a:	460c      	mov	r4, r1
 800624c:	b10a      	cbz	r2, 8006252 <_printf_common+0x26>
 800624e:	3301      	adds	r3, #1
 8006250:	6033      	str	r3, [r6, #0]
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	0699      	lsls	r1, r3, #26
 8006256:	bf42      	ittt	mi
 8006258:	6833      	ldrmi	r3, [r6, #0]
 800625a:	3302      	addmi	r3, #2
 800625c:	6033      	strmi	r3, [r6, #0]
 800625e:	6825      	ldr	r5, [r4, #0]
 8006260:	f015 0506 	ands.w	r5, r5, #6
 8006264:	d106      	bne.n	8006274 <_printf_common+0x48>
 8006266:	f104 0a19 	add.w	sl, r4, #25
 800626a:	68e3      	ldr	r3, [r4, #12]
 800626c:	6832      	ldr	r2, [r6, #0]
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	42ab      	cmp	r3, r5
 8006272:	dc26      	bgt.n	80062c2 <_printf_common+0x96>
 8006274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006278:	1e13      	subs	r3, r2, #0
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	bf18      	it	ne
 800627e:	2301      	movne	r3, #1
 8006280:	0692      	lsls	r2, r2, #26
 8006282:	d42b      	bmi.n	80062dc <_printf_common+0xb0>
 8006284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006288:	4649      	mov	r1, r9
 800628a:	4638      	mov	r0, r7
 800628c:	47c0      	blx	r8
 800628e:	3001      	adds	r0, #1
 8006290:	d01e      	beq.n	80062d0 <_printf_common+0xa4>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	6922      	ldr	r2, [r4, #16]
 8006296:	f003 0306 	and.w	r3, r3, #6
 800629a:	2b04      	cmp	r3, #4
 800629c:	bf02      	ittt	eq
 800629e:	68e5      	ldreq	r5, [r4, #12]
 80062a0:	6833      	ldreq	r3, [r6, #0]
 80062a2:	1aed      	subeq	r5, r5, r3
 80062a4:	68a3      	ldr	r3, [r4, #8]
 80062a6:	bf0c      	ite	eq
 80062a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062ac:	2500      	movne	r5, #0
 80062ae:	4293      	cmp	r3, r2
 80062b0:	bfc4      	itt	gt
 80062b2:	1a9b      	subgt	r3, r3, r2
 80062b4:	18ed      	addgt	r5, r5, r3
 80062b6:	2600      	movs	r6, #0
 80062b8:	341a      	adds	r4, #26
 80062ba:	42b5      	cmp	r5, r6
 80062bc:	d11a      	bne.n	80062f4 <_printf_common+0xc8>
 80062be:	2000      	movs	r0, #0
 80062c0:	e008      	b.n	80062d4 <_printf_common+0xa8>
 80062c2:	2301      	movs	r3, #1
 80062c4:	4652      	mov	r2, sl
 80062c6:	4649      	mov	r1, r9
 80062c8:	4638      	mov	r0, r7
 80062ca:	47c0      	blx	r8
 80062cc:	3001      	adds	r0, #1
 80062ce:	d103      	bne.n	80062d8 <_printf_common+0xac>
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d8:	3501      	adds	r5, #1
 80062da:	e7c6      	b.n	800626a <_printf_common+0x3e>
 80062dc:	18e1      	adds	r1, r4, r3
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	2030      	movs	r0, #48	; 0x30
 80062e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062e6:	4422      	add	r2, r4
 80062e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062f0:	3302      	adds	r3, #2
 80062f2:	e7c7      	b.n	8006284 <_printf_common+0x58>
 80062f4:	2301      	movs	r3, #1
 80062f6:	4622      	mov	r2, r4
 80062f8:	4649      	mov	r1, r9
 80062fa:	4638      	mov	r0, r7
 80062fc:	47c0      	blx	r8
 80062fe:	3001      	adds	r0, #1
 8006300:	d0e6      	beq.n	80062d0 <_printf_common+0xa4>
 8006302:	3601      	adds	r6, #1
 8006304:	e7d9      	b.n	80062ba <_printf_common+0x8e>
	...

08006308 <_printf_i>:
 8006308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	7e0f      	ldrb	r7, [r1, #24]
 800630e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006310:	2f78      	cmp	r7, #120	; 0x78
 8006312:	4691      	mov	r9, r2
 8006314:	4680      	mov	r8, r0
 8006316:	460c      	mov	r4, r1
 8006318:	469a      	mov	sl, r3
 800631a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800631e:	d807      	bhi.n	8006330 <_printf_i+0x28>
 8006320:	2f62      	cmp	r7, #98	; 0x62
 8006322:	d80a      	bhi.n	800633a <_printf_i+0x32>
 8006324:	2f00      	cmp	r7, #0
 8006326:	f000 80d4 	beq.w	80064d2 <_printf_i+0x1ca>
 800632a:	2f58      	cmp	r7, #88	; 0x58
 800632c:	f000 80c0 	beq.w	80064b0 <_printf_i+0x1a8>
 8006330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006338:	e03a      	b.n	80063b0 <_printf_i+0xa8>
 800633a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800633e:	2b15      	cmp	r3, #21
 8006340:	d8f6      	bhi.n	8006330 <_printf_i+0x28>
 8006342:	a101      	add	r1, pc, #4	; (adr r1, 8006348 <_printf_i+0x40>)
 8006344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006348:	080063a1 	.word	0x080063a1
 800634c:	080063b5 	.word	0x080063b5
 8006350:	08006331 	.word	0x08006331
 8006354:	08006331 	.word	0x08006331
 8006358:	08006331 	.word	0x08006331
 800635c:	08006331 	.word	0x08006331
 8006360:	080063b5 	.word	0x080063b5
 8006364:	08006331 	.word	0x08006331
 8006368:	08006331 	.word	0x08006331
 800636c:	08006331 	.word	0x08006331
 8006370:	08006331 	.word	0x08006331
 8006374:	080064b9 	.word	0x080064b9
 8006378:	080063e1 	.word	0x080063e1
 800637c:	08006473 	.word	0x08006473
 8006380:	08006331 	.word	0x08006331
 8006384:	08006331 	.word	0x08006331
 8006388:	080064db 	.word	0x080064db
 800638c:	08006331 	.word	0x08006331
 8006390:	080063e1 	.word	0x080063e1
 8006394:	08006331 	.word	0x08006331
 8006398:	08006331 	.word	0x08006331
 800639c:	0800647b 	.word	0x0800647b
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	1d1a      	adds	r2, r3, #4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	602a      	str	r2, [r5, #0]
 80063a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b0:	2301      	movs	r3, #1
 80063b2:	e09f      	b.n	80064f4 <_printf_i+0x1ec>
 80063b4:	6820      	ldr	r0, [r4, #0]
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	0607      	lsls	r7, r0, #24
 80063ba:	f103 0104 	add.w	r1, r3, #4
 80063be:	6029      	str	r1, [r5, #0]
 80063c0:	d501      	bpl.n	80063c6 <_printf_i+0xbe>
 80063c2:	681e      	ldr	r6, [r3, #0]
 80063c4:	e003      	b.n	80063ce <_printf_i+0xc6>
 80063c6:	0646      	lsls	r6, r0, #25
 80063c8:	d5fb      	bpl.n	80063c2 <_printf_i+0xba>
 80063ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063ce:	2e00      	cmp	r6, #0
 80063d0:	da03      	bge.n	80063da <_printf_i+0xd2>
 80063d2:	232d      	movs	r3, #45	; 0x2d
 80063d4:	4276      	negs	r6, r6
 80063d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063da:	485a      	ldr	r0, [pc, #360]	; (8006544 <_printf_i+0x23c>)
 80063dc:	230a      	movs	r3, #10
 80063de:	e012      	b.n	8006406 <_printf_i+0xfe>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	1d19      	adds	r1, r3, #4
 80063e6:	6029      	str	r1, [r5, #0]
 80063e8:	0605      	lsls	r5, r0, #24
 80063ea:	d501      	bpl.n	80063f0 <_printf_i+0xe8>
 80063ec:	681e      	ldr	r6, [r3, #0]
 80063ee:	e002      	b.n	80063f6 <_printf_i+0xee>
 80063f0:	0641      	lsls	r1, r0, #25
 80063f2:	d5fb      	bpl.n	80063ec <_printf_i+0xe4>
 80063f4:	881e      	ldrh	r6, [r3, #0]
 80063f6:	4853      	ldr	r0, [pc, #332]	; (8006544 <_printf_i+0x23c>)
 80063f8:	2f6f      	cmp	r7, #111	; 0x6f
 80063fa:	bf0c      	ite	eq
 80063fc:	2308      	moveq	r3, #8
 80063fe:	230a      	movne	r3, #10
 8006400:	2100      	movs	r1, #0
 8006402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006406:	6865      	ldr	r5, [r4, #4]
 8006408:	60a5      	str	r5, [r4, #8]
 800640a:	2d00      	cmp	r5, #0
 800640c:	bfa2      	ittt	ge
 800640e:	6821      	ldrge	r1, [r4, #0]
 8006410:	f021 0104 	bicge.w	r1, r1, #4
 8006414:	6021      	strge	r1, [r4, #0]
 8006416:	b90e      	cbnz	r6, 800641c <_printf_i+0x114>
 8006418:	2d00      	cmp	r5, #0
 800641a:	d04b      	beq.n	80064b4 <_printf_i+0x1ac>
 800641c:	4615      	mov	r5, r2
 800641e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006422:	fb03 6711 	mls	r7, r3, r1, r6
 8006426:	5dc7      	ldrb	r7, [r0, r7]
 8006428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800642c:	4637      	mov	r7, r6
 800642e:	42bb      	cmp	r3, r7
 8006430:	460e      	mov	r6, r1
 8006432:	d9f4      	bls.n	800641e <_printf_i+0x116>
 8006434:	2b08      	cmp	r3, #8
 8006436:	d10b      	bne.n	8006450 <_printf_i+0x148>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	07de      	lsls	r6, r3, #31
 800643c:	d508      	bpl.n	8006450 <_printf_i+0x148>
 800643e:	6923      	ldr	r3, [r4, #16]
 8006440:	6861      	ldr	r1, [r4, #4]
 8006442:	4299      	cmp	r1, r3
 8006444:	bfde      	ittt	le
 8006446:	2330      	movle	r3, #48	; 0x30
 8006448:	f805 3c01 	strble.w	r3, [r5, #-1]
 800644c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006450:	1b52      	subs	r2, r2, r5
 8006452:	6122      	str	r2, [r4, #16]
 8006454:	f8cd a000 	str.w	sl, [sp]
 8006458:	464b      	mov	r3, r9
 800645a:	aa03      	add	r2, sp, #12
 800645c:	4621      	mov	r1, r4
 800645e:	4640      	mov	r0, r8
 8006460:	f7ff fee4 	bl	800622c <_printf_common>
 8006464:	3001      	adds	r0, #1
 8006466:	d14a      	bne.n	80064fe <_printf_i+0x1f6>
 8006468:	f04f 30ff 	mov.w	r0, #4294967295
 800646c:	b004      	add	sp, #16
 800646e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	f043 0320 	orr.w	r3, r3, #32
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	4833      	ldr	r0, [pc, #204]	; (8006548 <_printf_i+0x240>)
 800647c:	2778      	movs	r7, #120	; 0x78
 800647e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	6829      	ldr	r1, [r5, #0]
 8006486:	061f      	lsls	r7, r3, #24
 8006488:	f851 6b04 	ldr.w	r6, [r1], #4
 800648c:	d402      	bmi.n	8006494 <_printf_i+0x18c>
 800648e:	065f      	lsls	r7, r3, #25
 8006490:	bf48      	it	mi
 8006492:	b2b6      	uxthmi	r6, r6
 8006494:	07df      	lsls	r7, r3, #31
 8006496:	bf48      	it	mi
 8006498:	f043 0320 	orrmi.w	r3, r3, #32
 800649c:	6029      	str	r1, [r5, #0]
 800649e:	bf48      	it	mi
 80064a0:	6023      	strmi	r3, [r4, #0]
 80064a2:	b91e      	cbnz	r6, 80064ac <_printf_i+0x1a4>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	f023 0320 	bic.w	r3, r3, #32
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	2310      	movs	r3, #16
 80064ae:	e7a7      	b.n	8006400 <_printf_i+0xf8>
 80064b0:	4824      	ldr	r0, [pc, #144]	; (8006544 <_printf_i+0x23c>)
 80064b2:	e7e4      	b.n	800647e <_printf_i+0x176>
 80064b4:	4615      	mov	r5, r2
 80064b6:	e7bd      	b.n	8006434 <_printf_i+0x12c>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	6826      	ldr	r6, [r4, #0]
 80064bc:	6961      	ldr	r1, [r4, #20]
 80064be:	1d18      	adds	r0, r3, #4
 80064c0:	6028      	str	r0, [r5, #0]
 80064c2:	0635      	lsls	r5, r6, #24
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	d501      	bpl.n	80064cc <_printf_i+0x1c4>
 80064c8:	6019      	str	r1, [r3, #0]
 80064ca:	e002      	b.n	80064d2 <_printf_i+0x1ca>
 80064cc:	0670      	lsls	r0, r6, #25
 80064ce:	d5fb      	bpl.n	80064c8 <_printf_i+0x1c0>
 80064d0:	8019      	strh	r1, [r3, #0]
 80064d2:	2300      	movs	r3, #0
 80064d4:	6123      	str	r3, [r4, #16]
 80064d6:	4615      	mov	r5, r2
 80064d8:	e7bc      	b.n	8006454 <_printf_i+0x14c>
 80064da:	682b      	ldr	r3, [r5, #0]
 80064dc:	1d1a      	adds	r2, r3, #4
 80064de:	602a      	str	r2, [r5, #0]
 80064e0:	681d      	ldr	r5, [r3, #0]
 80064e2:	6862      	ldr	r2, [r4, #4]
 80064e4:	2100      	movs	r1, #0
 80064e6:	4628      	mov	r0, r5
 80064e8:	f7f9 fe7a 	bl	80001e0 <memchr>
 80064ec:	b108      	cbz	r0, 80064f2 <_printf_i+0x1ea>
 80064ee:	1b40      	subs	r0, r0, r5
 80064f0:	6060      	str	r0, [r4, #4]
 80064f2:	6863      	ldr	r3, [r4, #4]
 80064f4:	6123      	str	r3, [r4, #16]
 80064f6:	2300      	movs	r3, #0
 80064f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064fc:	e7aa      	b.n	8006454 <_printf_i+0x14c>
 80064fe:	6923      	ldr	r3, [r4, #16]
 8006500:	462a      	mov	r2, r5
 8006502:	4649      	mov	r1, r9
 8006504:	4640      	mov	r0, r8
 8006506:	47d0      	blx	sl
 8006508:	3001      	adds	r0, #1
 800650a:	d0ad      	beq.n	8006468 <_printf_i+0x160>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	079b      	lsls	r3, r3, #30
 8006510:	d413      	bmi.n	800653a <_printf_i+0x232>
 8006512:	68e0      	ldr	r0, [r4, #12]
 8006514:	9b03      	ldr	r3, [sp, #12]
 8006516:	4298      	cmp	r0, r3
 8006518:	bfb8      	it	lt
 800651a:	4618      	movlt	r0, r3
 800651c:	e7a6      	b.n	800646c <_printf_i+0x164>
 800651e:	2301      	movs	r3, #1
 8006520:	4632      	mov	r2, r6
 8006522:	4649      	mov	r1, r9
 8006524:	4640      	mov	r0, r8
 8006526:	47d0      	blx	sl
 8006528:	3001      	adds	r0, #1
 800652a:	d09d      	beq.n	8006468 <_printf_i+0x160>
 800652c:	3501      	adds	r5, #1
 800652e:	68e3      	ldr	r3, [r4, #12]
 8006530:	9903      	ldr	r1, [sp, #12]
 8006532:	1a5b      	subs	r3, r3, r1
 8006534:	42ab      	cmp	r3, r5
 8006536:	dcf2      	bgt.n	800651e <_printf_i+0x216>
 8006538:	e7eb      	b.n	8006512 <_printf_i+0x20a>
 800653a:	2500      	movs	r5, #0
 800653c:	f104 0619 	add.w	r6, r4, #25
 8006540:	e7f5      	b.n	800652e <_printf_i+0x226>
 8006542:	bf00      	nop
 8006544:	0800982a 	.word	0x0800982a
 8006548:	0800983b 	.word	0x0800983b

0800654c <std>:
 800654c:	2300      	movs	r3, #0
 800654e:	b510      	push	{r4, lr}
 8006550:	4604      	mov	r4, r0
 8006552:	e9c0 3300 	strd	r3, r3, [r0]
 8006556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800655a:	6083      	str	r3, [r0, #8]
 800655c:	8181      	strh	r1, [r0, #12]
 800655e:	6643      	str	r3, [r0, #100]	; 0x64
 8006560:	81c2      	strh	r2, [r0, #14]
 8006562:	6183      	str	r3, [r0, #24]
 8006564:	4619      	mov	r1, r3
 8006566:	2208      	movs	r2, #8
 8006568:	305c      	adds	r0, #92	; 0x5c
 800656a:	f000 f906 	bl	800677a <memset>
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <std+0x58>)
 8006570:	6263      	str	r3, [r4, #36]	; 0x24
 8006572:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <std+0x5c>)
 8006574:	62a3      	str	r3, [r4, #40]	; 0x28
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <std+0x60>)
 8006578:	62e3      	str	r3, [r4, #44]	; 0x2c
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <std+0x64>)
 800657c:	6323      	str	r3, [r4, #48]	; 0x30
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <std+0x68>)
 8006580:	6224      	str	r4, [r4, #32]
 8006582:	429c      	cmp	r4, r3
 8006584:	d006      	beq.n	8006594 <std+0x48>
 8006586:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800658a:	4294      	cmp	r4, r2
 800658c:	d002      	beq.n	8006594 <std+0x48>
 800658e:	33d0      	adds	r3, #208	; 0xd0
 8006590:	429c      	cmp	r4, r3
 8006592:	d105      	bne.n	80065a0 <std+0x54>
 8006594:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659c:	f000 b96a 	b.w	8006874 <__retarget_lock_init_recursive>
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	bf00      	nop
 80065a4:	080066f5 	.word	0x080066f5
 80065a8:	08006717 	.word	0x08006717
 80065ac:	0800674f 	.word	0x0800674f
 80065b0:	08006773 	.word	0x08006773
 80065b4:	20000550 	.word	0x20000550

080065b8 <stdio_exit_handler>:
 80065b8:	4a02      	ldr	r2, [pc, #8]	; (80065c4 <stdio_exit_handler+0xc>)
 80065ba:	4903      	ldr	r1, [pc, #12]	; (80065c8 <stdio_exit_handler+0x10>)
 80065bc:	4803      	ldr	r0, [pc, #12]	; (80065cc <stdio_exit_handler+0x14>)
 80065be:	f000 b869 	b.w	8006694 <_fwalk_sglue>
 80065c2:	bf00      	nop
 80065c4:	2000001c 	.word	0x2000001c
 80065c8:	08008201 	.word	0x08008201
 80065cc:	20000028 	.word	0x20000028

080065d0 <cleanup_stdio>:
 80065d0:	6841      	ldr	r1, [r0, #4]
 80065d2:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <cleanup_stdio+0x34>)
 80065d4:	4299      	cmp	r1, r3
 80065d6:	b510      	push	{r4, lr}
 80065d8:	4604      	mov	r4, r0
 80065da:	d001      	beq.n	80065e0 <cleanup_stdio+0x10>
 80065dc:	f001 fe10 	bl	8008200 <_fflush_r>
 80065e0:	68a1      	ldr	r1, [r4, #8]
 80065e2:	4b09      	ldr	r3, [pc, #36]	; (8006608 <cleanup_stdio+0x38>)
 80065e4:	4299      	cmp	r1, r3
 80065e6:	d002      	beq.n	80065ee <cleanup_stdio+0x1e>
 80065e8:	4620      	mov	r0, r4
 80065ea:	f001 fe09 	bl	8008200 <_fflush_r>
 80065ee:	68e1      	ldr	r1, [r4, #12]
 80065f0:	4b06      	ldr	r3, [pc, #24]	; (800660c <cleanup_stdio+0x3c>)
 80065f2:	4299      	cmp	r1, r3
 80065f4:	d004      	beq.n	8006600 <cleanup_stdio+0x30>
 80065f6:	4620      	mov	r0, r4
 80065f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065fc:	f001 be00 	b.w	8008200 <_fflush_r>
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	20000550 	.word	0x20000550
 8006608:	200005b8 	.word	0x200005b8
 800660c:	20000620 	.word	0x20000620

08006610 <global_stdio_init.part.0>:
 8006610:	b510      	push	{r4, lr}
 8006612:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <global_stdio_init.part.0+0x30>)
 8006614:	4c0b      	ldr	r4, [pc, #44]	; (8006644 <global_stdio_init.part.0+0x34>)
 8006616:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <global_stdio_init.part.0+0x38>)
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	4620      	mov	r0, r4
 800661c:	2200      	movs	r2, #0
 800661e:	2104      	movs	r1, #4
 8006620:	f7ff ff94 	bl	800654c <std>
 8006624:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006628:	2201      	movs	r2, #1
 800662a:	2109      	movs	r1, #9
 800662c:	f7ff ff8e 	bl	800654c <std>
 8006630:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006634:	2202      	movs	r2, #2
 8006636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663a:	2112      	movs	r1, #18
 800663c:	f7ff bf86 	b.w	800654c <std>
 8006640:	20000688 	.word	0x20000688
 8006644:	20000550 	.word	0x20000550
 8006648:	080065b9 	.word	0x080065b9

0800664c <__sfp_lock_acquire>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__sfp_lock_acquire+0x8>)
 800664e:	f000 b912 	b.w	8006876 <__retarget_lock_acquire_recursive>
 8006652:	bf00      	nop
 8006654:	20000691 	.word	0x20000691

08006658 <__sfp_lock_release>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__sfp_lock_release+0x8>)
 800665a:	f000 b90d 	b.w	8006878 <__retarget_lock_release_recursive>
 800665e:	bf00      	nop
 8006660:	20000691 	.word	0x20000691

08006664 <__sinit>:
 8006664:	b510      	push	{r4, lr}
 8006666:	4604      	mov	r4, r0
 8006668:	f7ff fff0 	bl	800664c <__sfp_lock_acquire>
 800666c:	6a23      	ldr	r3, [r4, #32]
 800666e:	b11b      	cbz	r3, 8006678 <__sinit+0x14>
 8006670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006674:	f7ff bff0 	b.w	8006658 <__sfp_lock_release>
 8006678:	4b04      	ldr	r3, [pc, #16]	; (800668c <__sinit+0x28>)
 800667a:	6223      	str	r3, [r4, #32]
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <__sinit+0x2c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f5      	bne.n	8006670 <__sinit+0xc>
 8006684:	f7ff ffc4 	bl	8006610 <global_stdio_init.part.0>
 8006688:	e7f2      	b.n	8006670 <__sinit+0xc>
 800668a:	bf00      	nop
 800668c:	080065d1 	.word	0x080065d1
 8006690:	20000688 	.word	0x20000688

08006694 <_fwalk_sglue>:
 8006694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006698:	4607      	mov	r7, r0
 800669a:	4688      	mov	r8, r1
 800669c:	4614      	mov	r4, r2
 800669e:	2600      	movs	r6, #0
 80066a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066a4:	f1b9 0901 	subs.w	r9, r9, #1
 80066a8:	d505      	bpl.n	80066b6 <_fwalk_sglue+0x22>
 80066aa:	6824      	ldr	r4, [r4, #0]
 80066ac:	2c00      	cmp	r4, #0
 80066ae:	d1f7      	bne.n	80066a0 <_fwalk_sglue+0xc>
 80066b0:	4630      	mov	r0, r6
 80066b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d907      	bls.n	80066cc <_fwalk_sglue+0x38>
 80066bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066c0:	3301      	adds	r3, #1
 80066c2:	d003      	beq.n	80066cc <_fwalk_sglue+0x38>
 80066c4:	4629      	mov	r1, r5
 80066c6:	4638      	mov	r0, r7
 80066c8:	47c0      	blx	r8
 80066ca:	4306      	orrs	r6, r0
 80066cc:	3568      	adds	r5, #104	; 0x68
 80066ce:	e7e9      	b.n	80066a4 <_fwalk_sglue+0x10>

080066d0 <iprintf>:
 80066d0:	b40f      	push	{r0, r1, r2, r3}
 80066d2:	b507      	push	{r0, r1, r2, lr}
 80066d4:	4906      	ldr	r1, [pc, #24]	; (80066f0 <iprintf+0x20>)
 80066d6:	ab04      	add	r3, sp, #16
 80066d8:	6808      	ldr	r0, [r1, #0]
 80066da:	f853 2b04 	ldr.w	r2, [r3], #4
 80066de:	6881      	ldr	r1, [r0, #8]
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	f001 fbed 	bl	8007ec0 <_vfiprintf_r>
 80066e6:	b003      	add	sp, #12
 80066e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066ec:	b004      	add	sp, #16
 80066ee:	4770      	bx	lr
 80066f0:	20000074 	.word	0x20000074

080066f4 <__sread>:
 80066f4:	b510      	push	{r4, lr}
 80066f6:	460c      	mov	r4, r1
 80066f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066fc:	f000 f86c 	bl	80067d8 <_read_r>
 8006700:	2800      	cmp	r0, #0
 8006702:	bfab      	itete	ge
 8006704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006706:	89a3      	ldrhlt	r3, [r4, #12]
 8006708:	181b      	addge	r3, r3, r0
 800670a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800670e:	bfac      	ite	ge
 8006710:	6563      	strge	r3, [r4, #84]	; 0x54
 8006712:	81a3      	strhlt	r3, [r4, #12]
 8006714:	bd10      	pop	{r4, pc}

08006716 <__swrite>:
 8006716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671a:	461f      	mov	r7, r3
 800671c:	898b      	ldrh	r3, [r1, #12]
 800671e:	05db      	lsls	r3, r3, #23
 8006720:	4605      	mov	r5, r0
 8006722:	460c      	mov	r4, r1
 8006724:	4616      	mov	r6, r2
 8006726:	d505      	bpl.n	8006734 <__swrite+0x1e>
 8006728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672c:	2302      	movs	r3, #2
 800672e:	2200      	movs	r2, #0
 8006730:	f000 f840 	bl	80067b4 <_lseek_r>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800673a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	4632      	mov	r2, r6
 8006742:	463b      	mov	r3, r7
 8006744:	4628      	mov	r0, r5
 8006746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800674a:	f000 b857 	b.w	80067fc <_write_r>

0800674e <__sseek>:
 800674e:	b510      	push	{r4, lr}
 8006750:	460c      	mov	r4, r1
 8006752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006756:	f000 f82d 	bl	80067b4 <_lseek_r>
 800675a:	1c43      	adds	r3, r0, #1
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	bf15      	itete	ne
 8006760:	6560      	strne	r0, [r4, #84]	; 0x54
 8006762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800676a:	81a3      	strheq	r3, [r4, #12]
 800676c:	bf18      	it	ne
 800676e:	81a3      	strhne	r3, [r4, #12]
 8006770:	bd10      	pop	{r4, pc}

08006772 <__sclose>:
 8006772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006776:	f000 b80d 	b.w	8006794 <_close_r>

0800677a <memset>:
 800677a:	4402      	add	r2, r0
 800677c:	4603      	mov	r3, r0
 800677e:	4293      	cmp	r3, r2
 8006780:	d100      	bne.n	8006784 <memset+0xa>
 8006782:	4770      	bx	lr
 8006784:	f803 1b01 	strb.w	r1, [r3], #1
 8006788:	e7f9      	b.n	800677e <memset+0x4>
	...

0800678c <_localeconv_r>:
 800678c:	4800      	ldr	r0, [pc, #0]	; (8006790 <_localeconv_r+0x4>)
 800678e:	4770      	bx	lr
 8006790:	20000168 	.word	0x20000168

08006794 <_close_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d06      	ldr	r5, [pc, #24]	; (80067b0 <_close_r+0x1c>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	602b      	str	r3, [r5, #0]
 80067a0:	f7fc f963 	bl	8002a6a <_close>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_close_r+0x1a>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_close_r+0x1a>
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	2000068c 	.word	0x2000068c

080067b4 <_lseek_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4d07      	ldr	r5, [pc, #28]	; (80067d4 <_lseek_r+0x20>)
 80067b8:	4604      	mov	r4, r0
 80067ba:	4608      	mov	r0, r1
 80067bc:	4611      	mov	r1, r2
 80067be:	2200      	movs	r2, #0
 80067c0:	602a      	str	r2, [r5, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f7fc f978 	bl	8002ab8 <_lseek>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_lseek_r+0x1e>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_lseek_r+0x1e>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	2000068c 	.word	0x2000068c

080067d8 <_read_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d07      	ldr	r5, [pc, #28]	; (80067f8 <_read_r+0x20>)
 80067dc:	4604      	mov	r4, r0
 80067de:	4608      	mov	r0, r1
 80067e0:	4611      	mov	r1, r2
 80067e2:	2200      	movs	r2, #0
 80067e4:	602a      	str	r2, [r5, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f7fc f906 	bl	80029f8 <_read>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_read_r+0x1e>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_read_r+0x1e>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	2000068c 	.word	0x2000068c

080067fc <_write_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4d07      	ldr	r5, [pc, #28]	; (800681c <_write_r+0x20>)
 8006800:	4604      	mov	r4, r0
 8006802:	4608      	mov	r0, r1
 8006804:	4611      	mov	r1, r2
 8006806:	2200      	movs	r2, #0
 8006808:	602a      	str	r2, [r5, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	f7fc f911 	bl	8002a32 <_write>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_write_r+0x1e>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_write_r+0x1e>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	2000068c 	.word	0x2000068c

08006820 <__errno>:
 8006820:	4b01      	ldr	r3, [pc, #4]	; (8006828 <__errno+0x8>)
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000074 	.word	0x20000074

0800682c <__libc_init_array>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	4d0d      	ldr	r5, [pc, #52]	; (8006864 <__libc_init_array+0x38>)
 8006830:	4c0d      	ldr	r4, [pc, #52]	; (8006868 <__libc_init_array+0x3c>)
 8006832:	1b64      	subs	r4, r4, r5
 8006834:	10a4      	asrs	r4, r4, #2
 8006836:	2600      	movs	r6, #0
 8006838:	42a6      	cmp	r6, r4
 800683a:	d109      	bne.n	8006850 <__libc_init_array+0x24>
 800683c:	4d0b      	ldr	r5, [pc, #44]	; (800686c <__libc_init_array+0x40>)
 800683e:	4c0c      	ldr	r4, [pc, #48]	; (8006870 <__libc_init_array+0x44>)
 8006840:	f002 ff86 	bl	8009750 <_init>
 8006844:	1b64      	subs	r4, r4, r5
 8006846:	10a4      	asrs	r4, r4, #2
 8006848:	2600      	movs	r6, #0
 800684a:	42a6      	cmp	r6, r4
 800684c:	d105      	bne.n	800685a <__libc_init_array+0x2e>
 800684e:	bd70      	pop	{r4, r5, r6, pc}
 8006850:	f855 3b04 	ldr.w	r3, [r5], #4
 8006854:	4798      	blx	r3
 8006856:	3601      	adds	r6, #1
 8006858:	e7ee      	b.n	8006838 <__libc_init_array+0xc>
 800685a:	f855 3b04 	ldr.w	r3, [r5], #4
 800685e:	4798      	blx	r3
 8006860:	3601      	adds	r6, #1
 8006862:	e7f2      	b.n	800684a <__libc_init_array+0x1e>
 8006864:	08009d70 	.word	0x08009d70
 8006868:	08009d70 	.word	0x08009d70
 800686c:	08009d70 	.word	0x08009d70
 8006870:	08009d74 	.word	0x08009d74

08006874 <__retarget_lock_init_recursive>:
 8006874:	4770      	bx	lr

08006876 <__retarget_lock_acquire_recursive>:
 8006876:	4770      	bx	lr

08006878 <__retarget_lock_release_recursive>:
 8006878:	4770      	bx	lr

0800687a <quorem>:
 800687a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687e:	6903      	ldr	r3, [r0, #16]
 8006880:	690c      	ldr	r4, [r1, #16]
 8006882:	42a3      	cmp	r3, r4
 8006884:	4607      	mov	r7, r0
 8006886:	db7e      	blt.n	8006986 <quorem+0x10c>
 8006888:	3c01      	subs	r4, #1
 800688a:	f101 0814 	add.w	r8, r1, #20
 800688e:	f100 0514 	add.w	r5, r0, #20
 8006892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800689c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068a0:	3301      	adds	r3, #1
 80068a2:	429a      	cmp	r2, r3
 80068a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80068b0:	d331      	bcc.n	8006916 <quorem+0x9c>
 80068b2:	f04f 0e00 	mov.w	lr, #0
 80068b6:	4640      	mov	r0, r8
 80068b8:	46ac      	mov	ip, r5
 80068ba:	46f2      	mov	sl, lr
 80068bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80068c0:	b293      	uxth	r3, r2
 80068c2:	fb06 e303 	mla	r3, r6, r3, lr
 80068c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068ca:	0c1a      	lsrs	r2, r3, #16
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	ebaa 0303 	sub.w	r3, sl, r3
 80068d2:	f8dc a000 	ldr.w	sl, [ip]
 80068d6:	fa13 f38a 	uxtah	r3, r3, sl
 80068da:	fb06 220e 	mla	r2, r6, lr, r2
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	9b00      	ldr	r3, [sp, #0]
 80068e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068e6:	b292      	uxth	r2, r2
 80068e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80068f4:	4581      	cmp	r9, r0
 80068f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068fa:	f84c 3b04 	str.w	r3, [ip], #4
 80068fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006902:	d2db      	bcs.n	80068bc <quorem+0x42>
 8006904:	f855 300b 	ldr.w	r3, [r5, fp]
 8006908:	b92b      	cbnz	r3, 8006916 <quorem+0x9c>
 800690a:	9b01      	ldr	r3, [sp, #4]
 800690c:	3b04      	subs	r3, #4
 800690e:	429d      	cmp	r5, r3
 8006910:	461a      	mov	r2, r3
 8006912:	d32c      	bcc.n	800696e <quorem+0xf4>
 8006914:	613c      	str	r4, [r7, #16]
 8006916:	4638      	mov	r0, r7
 8006918:	f001 f9a8 	bl	8007c6c <__mcmp>
 800691c:	2800      	cmp	r0, #0
 800691e:	db22      	blt.n	8006966 <quorem+0xec>
 8006920:	3601      	adds	r6, #1
 8006922:	4629      	mov	r1, r5
 8006924:	2000      	movs	r0, #0
 8006926:	f858 2b04 	ldr.w	r2, [r8], #4
 800692a:	f8d1 c000 	ldr.w	ip, [r1]
 800692e:	b293      	uxth	r3, r2
 8006930:	1ac3      	subs	r3, r0, r3
 8006932:	0c12      	lsrs	r2, r2, #16
 8006934:	fa13 f38c 	uxtah	r3, r3, ip
 8006938:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800693c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006940:	b29b      	uxth	r3, r3
 8006942:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006946:	45c1      	cmp	r9, r8
 8006948:	f841 3b04 	str.w	r3, [r1], #4
 800694c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006950:	d2e9      	bcs.n	8006926 <quorem+0xac>
 8006952:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800695a:	b922      	cbnz	r2, 8006966 <quorem+0xec>
 800695c:	3b04      	subs	r3, #4
 800695e:	429d      	cmp	r5, r3
 8006960:	461a      	mov	r2, r3
 8006962:	d30a      	bcc.n	800697a <quorem+0x100>
 8006964:	613c      	str	r4, [r7, #16]
 8006966:	4630      	mov	r0, r6
 8006968:	b003      	add	sp, #12
 800696a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	3b04      	subs	r3, #4
 8006972:	2a00      	cmp	r2, #0
 8006974:	d1ce      	bne.n	8006914 <quorem+0x9a>
 8006976:	3c01      	subs	r4, #1
 8006978:	e7c9      	b.n	800690e <quorem+0x94>
 800697a:	6812      	ldr	r2, [r2, #0]
 800697c:	3b04      	subs	r3, #4
 800697e:	2a00      	cmp	r2, #0
 8006980:	d1f0      	bne.n	8006964 <quorem+0xea>
 8006982:	3c01      	subs	r4, #1
 8006984:	e7eb      	b.n	800695e <quorem+0xe4>
 8006986:	2000      	movs	r0, #0
 8006988:	e7ee      	b.n	8006968 <quorem+0xee>
 800698a:	0000      	movs	r0, r0
 800698c:	0000      	movs	r0, r0
	...

08006990 <_dtoa_r>:
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	ed2d 8b04 	vpush	{d8-d9}
 8006998:	69c5      	ldr	r5, [r0, #28]
 800699a:	b093      	sub	sp, #76	; 0x4c
 800699c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80069a0:	ec57 6b10 	vmov	r6, r7, d0
 80069a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069a8:	9107      	str	r1, [sp, #28]
 80069aa:	4604      	mov	r4, r0
 80069ac:	920a      	str	r2, [sp, #40]	; 0x28
 80069ae:	930d      	str	r3, [sp, #52]	; 0x34
 80069b0:	b975      	cbnz	r5, 80069d0 <_dtoa_r+0x40>
 80069b2:	2010      	movs	r0, #16
 80069b4:	f000 fe2a 	bl	800760c <malloc>
 80069b8:	4602      	mov	r2, r0
 80069ba:	61e0      	str	r0, [r4, #28]
 80069bc:	b920      	cbnz	r0, 80069c8 <_dtoa_r+0x38>
 80069be:	4bae      	ldr	r3, [pc, #696]	; (8006c78 <_dtoa_r+0x2e8>)
 80069c0:	21ef      	movs	r1, #239	; 0xef
 80069c2:	48ae      	ldr	r0, [pc, #696]	; (8006c7c <_dtoa_r+0x2ec>)
 80069c4:	f001 fcf8 	bl	80083b8 <__assert_func>
 80069c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069cc:	6005      	str	r5, [r0, #0]
 80069ce:	60c5      	str	r5, [r0, #12]
 80069d0:	69e3      	ldr	r3, [r4, #28]
 80069d2:	6819      	ldr	r1, [r3, #0]
 80069d4:	b151      	cbz	r1, 80069ec <_dtoa_r+0x5c>
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	604a      	str	r2, [r1, #4]
 80069da:	2301      	movs	r3, #1
 80069dc:	4093      	lsls	r3, r2
 80069de:	608b      	str	r3, [r1, #8]
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 ff07 	bl	80077f4 <_Bfree>
 80069e6:	69e3      	ldr	r3, [r4, #28]
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	1e3b      	subs	r3, r7, #0
 80069ee:	bfbb      	ittet	lt
 80069f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069f4:	9303      	strlt	r3, [sp, #12]
 80069f6:	2300      	movge	r3, #0
 80069f8:	2201      	movlt	r2, #1
 80069fa:	bfac      	ite	ge
 80069fc:	f8c8 3000 	strge.w	r3, [r8]
 8006a00:	f8c8 2000 	strlt.w	r2, [r8]
 8006a04:	4b9e      	ldr	r3, [pc, #632]	; (8006c80 <_dtoa_r+0x2f0>)
 8006a06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a0a:	ea33 0308 	bics.w	r3, r3, r8
 8006a0e:	d11b      	bne.n	8006a48 <_dtoa_r+0xb8>
 8006a10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a12:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a1c:	4333      	orrs	r3, r6
 8006a1e:	f000 8593 	beq.w	8007548 <_dtoa_r+0xbb8>
 8006a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a24:	b963      	cbnz	r3, 8006a40 <_dtoa_r+0xb0>
 8006a26:	4b97      	ldr	r3, [pc, #604]	; (8006c84 <_dtoa_r+0x2f4>)
 8006a28:	e027      	b.n	8006a7a <_dtoa_r+0xea>
 8006a2a:	4b97      	ldr	r3, [pc, #604]	; (8006c88 <_dtoa_r+0x2f8>)
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	9800      	ldr	r0, [sp, #0]
 8006a36:	b013      	add	sp, #76	; 0x4c
 8006a38:	ecbd 8b04 	vpop	{d8-d9}
 8006a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a40:	4b90      	ldr	r3, [pc, #576]	; (8006c84 <_dtoa_r+0x2f4>)
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	3303      	adds	r3, #3
 8006a46:	e7f3      	b.n	8006a30 <_dtoa_r+0xa0>
 8006a48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	ec51 0b17 	vmov	r0, r1, d7
 8006a52:	eeb0 8a47 	vmov.f32	s16, s14
 8006a56:	eef0 8a67 	vmov.f32	s17, s15
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f7fa f83c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a60:	4681      	mov	r9, r0
 8006a62:	b160      	cbz	r0, 8006a7e <_dtoa_r+0xee>
 8006a64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a66:	2301      	movs	r3, #1
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 8568 	beq.w	8007542 <_dtoa_r+0xbb2>
 8006a72:	4b86      	ldr	r3, [pc, #536]	; (8006c8c <_dtoa_r+0x2fc>)
 8006a74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	e7da      	b.n	8006a34 <_dtoa_r+0xa4>
 8006a7e:	aa10      	add	r2, sp, #64	; 0x40
 8006a80:	a911      	add	r1, sp, #68	; 0x44
 8006a82:	4620      	mov	r0, r4
 8006a84:	eeb0 0a48 	vmov.f32	s0, s16
 8006a88:	eef0 0a68 	vmov.f32	s1, s17
 8006a8c:	f001 f994 	bl	8007db8 <__d2b>
 8006a90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a94:	4682      	mov	sl, r0
 8006a96:	2d00      	cmp	r5, #0
 8006a98:	d07f      	beq.n	8006b9a <_dtoa_r+0x20a>
 8006a9a:	ee18 3a90 	vmov	r3, s17
 8006a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006aa6:	ec51 0b18 	vmov	r0, r1, d8
 8006aaa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006aae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ab2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4b75      	ldr	r3, [pc, #468]	; (8006c90 <_dtoa_r+0x300>)
 8006abc:	f7f9 fbec 	bl	8000298 <__aeabi_dsub>
 8006ac0:	a367      	add	r3, pc, #412	; (adr r3, 8006c60 <_dtoa_r+0x2d0>)
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f7f9 fd9f 	bl	8000608 <__aeabi_dmul>
 8006aca:	a367      	add	r3, pc, #412	; (adr r3, 8006c68 <_dtoa_r+0x2d8>)
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f7f9 fbe4 	bl	800029c <__adddf3>
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	460f      	mov	r7, r1
 8006ada:	f7f9 fd2b 	bl	8000534 <__aeabi_i2d>
 8006ade:	a364      	add	r3, pc, #400	; (adr r3, 8006c70 <_dtoa_r+0x2e0>)
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f7f9 fd90 	bl	8000608 <__aeabi_dmul>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4630      	mov	r0, r6
 8006aee:	4639      	mov	r1, r7
 8006af0:	f7f9 fbd4 	bl	800029c <__adddf3>
 8006af4:	4606      	mov	r6, r0
 8006af6:	460f      	mov	r7, r1
 8006af8:	f7fa f836 	bl	8000b68 <__aeabi_d2iz>
 8006afc:	2200      	movs	r2, #0
 8006afe:	4683      	mov	fp, r0
 8006b00:	2300      	movs	r3, #0
 8006b02:	4630      	mov	r0, r6
 8006b04:	4639      	mov	r1, r7
 8006b06:	f7f9 fff1 	bl	8000aec <__aeabi_dcmplt>
 8006b0a:	b148      	cbz	r0, 8006b20 <_dtoa_r+0x190>
 8006b0c:	4658      	mov	r0, fp
 8006b0e:	f7f9 fd11 	bl	8000534 <__aeabi_i2d>
 8006b12:	4632      	mov	r2, r6
 8006b14:	463b      	mov	r3, r7
 8006b16:	f7f9 ffdf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b1a:	b908      	cbnz	r0, 8006b20 <_dtoa_r+0x190>
 8006b1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b20:	f1bb 0f16 	cmp.w	fp, #22
 8006b24:	d857      	bhi.n	8006bd6 <_dtoa_r+0x246>
 8006b26:	4b5b      	ldr	r3, [pc, #364]	; (8006c94 <_dtoa_r+0x304>)
 8006b28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	ec51 0b18 	vmov	r0, r1, d8
 8006b34:	f7f9 ffda 	bl	8000aec <__aeabi_dcmplt>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d04e      	beq.n	8006bda <_dtoa_r+0x24a>
 8006b3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b40:	2300      	movs	r3, #0
 8006b42:	930c      	str	r3, [sp, #48]	; 0x30
 8006b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b46:	1b5b      	subs	r3, r3, r5
 8006b48:	1e5a      	subs	r2, r3, #1
 8006b4a:	bf45      	ittet	mi
 8006b4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b50:	9305      	strmi	r3, [sp, #20]
 8006b52:	2300      	movpl	r3, #0
 8006b54:	2300      	movmi	r3, #0
 8006b56:	9206      	str	r2, [sp, #24]
 8006b58:	bf54      	ite	pl
 8006b5a:	9305      	strpl	r3, [sp, #20]
 8006b5c:	9306      	strmi	r3, [sp, #24]
 8006b5e:	f1bb 0f00 	cmp.w	fp, #0
 8006b62:	db3c      	blt.n	8006bde <_dtoa_r+0x24e>
 8006b64:	9b06      	ldr	r3, [sp, #24]
 8006b66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006b6a:	445b      	add	r3, fp
 8006b6c:	9306      	str	r3, [sp, #24]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9308      	str	r3, [sp, #32]
 8006b72:	9b07      	ldr	r3, [sp, #28]
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	d868      	bhi.n	8006c4a <_dtoa_r+0x2ba>
 8006b78:	2b05      	cmp	r3, #5
 8006b7a:	bfc4      	itt	gt
 8006b7c:	3b04      	subgt	r3, #4
 8006b7e:	9307      	strgt	r3, [sp, #28]
 8006b80:	9b07      	ldr	r3, [sp, #28]
 8006b82:	f1a3 0302 	sub.w	r3, r3, #2
 8006b86:	bfcc      	ite	gt
 8006b88:	2500      	movgt	r5, #0
 8006b8a:	2501      	movle	r5, #1
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	f200 8085 	bhi.w	8006c9c <_dtoa_r+0x30c>
 8006b92:	e8df f003 	tbb	[pc, r3]
 8006b96:	3b2e      	.short	0x3b2e
 8006b98:	5839      	.short	0x5839
 8006b9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b9e:	441d      	add	r5, r3
 8006ba0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	bfc1      	itttt	gt
 8006ba8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bac:	fa08 f803 	lslgt.w	r8, r8, r3
 8006bb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006bb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006bb8:	bfd6      	itet	le
 8006bba:	f1c3 0320 	rsble	r3, r3, #32
 8006bbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8006bc2:	fa06 f003 	lslle.w	r0, r6, r3
 8006bc6:	f7f9 fca5 	bl	8000514 <__aeabi_ui2d>
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006bd0:	3d01      	subs	r5, #1
 8006bd2:	920e      	str	r2, [sp, #56]	; 0x38
 8006bd4:	e76f      	b.n	8006ab6 <_dtoa_r+0x126>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e7b3      	b.n	8006b42 <_dtoa_r+0x1b2>
 8006bda:	900c      	str	r0, [sp, #48]	; 0x30
 8006bdc:	e7b2      	b.n	8006b44 <_dtoa_r+0x1b4>
 8006bde:	9b05      	ldr	r3, [sp, #20]
 8006be0:	eba3 030b 	sub.w	r3, r3, fp
 8006be4:	9305      	str	r3, [sp, #20]
 8006be6:	f1cb 0300 	rsb	r3, fp, #0
 8006bea:	9308      	str	r3, [sp, #32]
 8006bec:	2300      	movs	r3, #0
 8006bee:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bf0:	e7bf      	b.n	8006b72 <_dtoa_r+0x1e2>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dc52      	bgt.n	8006ca2 <_dtoa_r+0x312>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	9301      	str	r3, [sp, #4]
 8006c00:	9304      	str	r3, [sp, #16]
 8006c02:	461a      	mov	r2, r3
 8006c04:	920a      	str	r2, [sp, #40]	; 0x28
 8006c06:	e00b      	b.n	8006c20 <_dtoa_r+0x290>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e7f3      	b.n	8006bf4 <_dtoa_r+0x264>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c12:	445b      	add	r3, fp
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	3301      	adds	r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	bfb8      	it	lt
 8006c1e:	2301      	movlt	r3, #1
 8006c20:	69e0      	ldr	r0, [r4, #28]
 8006c22:	2100      	movs	r1, #0
 8006c24:	2204      	movs	r2, #4
 8006c26:	f102 0614 	add.w	r6, r2, #20
 8006c2a:	429e      	cmp	r6, r3
 8006c2c:	d93d      	bls.n	8006caa <_dtoa_r+0x31a>
 8006c2e:	6041      	str	r1, [r0, #4]
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 fd9f 	bl	8007774 <_Balloc>
 8006c36:	9000      	str	r0, [sp, #0]
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d139      	bne.n	8006cb0 <_dtoa_r+0x320>
 8006c3c:	4b16      	ldr	r3, [pc, #88]	; (8006c98 <_dtoa_r+0x308>)
 8006c3e:	4602      	mov	r2, r0
 8006c40:	f240 11af 	movw	r1, #431	; 0x1af
 8006c44:	e6bd      	b.n	80069c2 <_dtoa_r+0x32>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e7e1      	b.n	8006c0e <_dtoa_r+0x27e>
 8006c4a:	2501      	movs	r5, #1
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	9307      	str	r3, [sp, #28]
 8006c50:	9509      	str	r5, [sp, #36]	; 0x24
 8006c52:	f04f 33ff 	mov.w	r3, #4294967295
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	9304      	str	r3, [sp, #16]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2312      	movs	r3, #18
 8006c5e:	e7d1      	b.n	8006c04 <_dtoa_r+0x274>
 8006c60:	636f4361 	.word	0x636f4361
 8006c64:	3fd287a7 	.word	0x3fd287a7
 8006c68:	8b60c8b3 	.word	0x8b60c8b3
 8006c6c:	3fc68a28 	.word	0x3fc68a28
 8006c70:	509f79fb 	.word	0x509f79fb
 8006c74:	3fd34413 	.word	0x3fd34413
 8006c78:	08009859 	.word	0x08009859
 8006c7c:	08009870 	.word	0x08009870
 8006c80:	7ff00000 	.word	0x7ff00000
 8006c84:	08009855 	.word	0x08009855
 8006c88:	0800984c 	.word	0x0800984c
 8006c8c:	08009829 	.word	0x08009829
 8006c90:	3ff80000 	.word	0x3ff80000
 8006c94:	08009960 	.word	0x08009960
 8006c98:	080098c8 	.word	0x080098c8
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca0:	e7d7      	b.n	8006c52 <_dtoa_r+0x2c2>
 8006ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	9304      	str	r3, [sp, #16]
 8006ca8:	e7ba      	b.n	8006c20 <_dtoa_r+0x290>
 8006caa:	3101      	adds	r1, #1
 8006cac:	0052      	lsls	r2, r2, #1
 8006cae:	e7ba      	b.n	8006c26 <_dtoa_r+0x296>
 8006cb0:	69e3      	ldr	r3, [r4, #28]
 8006cb2:	9a00      	ldr	r2, [sp, #0]
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	9b04      	ldr	r3, [sp, #16]
 8006cb8:	2b0e      	cmp	r3, #14
 8006cba:	f200 80a8 	bhi.w	8006e0e <_dtoa_r+0x47e>
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	f000 80a5 	beq.w	8006e0e <_dtoa_r+0x47e>
 8006cc4:	f1bb 0f00 	cmp.w	fp, #0
 8006cc8:	dd38      	ble.n	8006d3c <_dtoa_r+0x3ac>
 8006cca:	4bc0      	ldr	r3, [pc, #768]	; (8006fcc <_dtoa_r+0x63c>)
 8006ccc:	f00b 020f 	and.w	r2, fp, #15
 8006cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006cd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006cdc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006ce0:	d019      	beq.n	8006d16 <_dtoa_r+0x386>
 8006ce2:	4bbb      	ldr	r3, [pc, #748]	; (8006fd0 <_dtoa_r+0x640>)
 8006ce4:	ec51 0b18 	vmov	r0, r1, d8
 8006ce8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cec:	f7f9 fdb6 	bl	800085c <__aeabi_ddiv>
 8006cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cf4:	f008 080f 	and.w	r8, r8, #15
 8006cf8:	2503      	movs	r5, #3
 8006cfa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006fd0 <_dtoa_r+0x640>
 8006cfe:	f1b8 0f00 	cmp.w	r8, #0
 8006d02:	d10a      	bne.n	8006d1a <_dtoa_r+0x38a>
 8006d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d08:	4632      	mov	r2, r6
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	f7f9 fda6 	bl	800085c <__aeabi_ddiv>
 8006d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d14:	e02b      	b.n	8006d6e <_dtoa_r+0x3de>
 8006d16:	2502      	movs	r5, #2
 8006d18:	e7ef      	b.n	8006cfa <_dtoa_r+0x36a>
 8006d1a:	f018 0f01 	tst.w	r8, #1
 8006d1e:	d008      	beq.n	8006d32 <_dtoa_r+0x3a2>
 8006d20:	4630      	mov	r0, r6
 8006d22:	4639      	mov	r1, r7
 8006d24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d28:	f7f9 fc6e 	bl	8000608 <__aeabi_dmul>
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460f      	mov	r7, r1
 8006d32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d36:	f109 0908 	add.w	r9, r9, #8
 8006d3a:	e7e0      	b.n	8006cfe <_dtoa_r+0x36e>
 8006d3c:	f000 809f 	beq.w	8006e7e <_dtoa_r+0x4ee>
 8006d40:	f1cb 0600 	rsb	r6, fp, #0
 8006d44:	4ba1      	ldr	r3, [pc, #644]	; (8006fcc <_dtoa_r+0x63c>)
 8006d46:	4fa2      	ldr	r7, [pc, #648]	; (8006fd0 <_dtoa_r+0x640>)
 8006d48:	f006 020f 	and.w	r2, r6, #15
 8006d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	ec51 0b18 	vmov	r0, r1, d8
 8006d58:	f7f9 fc56 	bl	8000608 <__aeabi_dmul>
 8006d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d60:	1136      	asrs	r6, r6, #4
 8006d62:	2300      	movs	r3, #0
 8006d64:	2502      	movs	r5, #2
 8006d66:	2e00      	cmp	r6, #0
 8006d68:	d17e      	bne.n	8006e68 <_dtoa_r+0x4d8>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1d0      	bne.n	8006d10 <_dtoa_r+0x380>
 8006d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8084 	beq.w	8006e82 <_dtoa_r+0x4f2>
 8006d7a:	4b96      	ldr	r3, [pc, #600]	; (8006fd4 <_dtoa_r+0x644>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 feb3 	bl	8000aec <__aeabi_dcmplt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d07b      	beq.n	8006e82 <_dtoa_r+0x4f2>
 8006d8a:	9b04      	ldr	r3, [sp, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d078      	beq.n	8006e82 <_dtoa_r+0x4f2>
 8006d90:	9b01      	ldr	r3, [sp, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	dd39      	ble.n	8006e0a <_dtoa_r+0x47a>
 8006d96:	4b90      	ldr	r3, [pc, #576]	; (8006fd8 <_dtoa_r+0x648>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	f7f9 fc33 	bl	8000608 <__aeabi_dmul>
 8006da2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da6:	9e01      	ldr	r6, [sp, #4]
 8006da8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006dac:	3501      	adds	r5, #1
 8006dae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006db2:	4628      	mov	r0, r5
 8006db4:	f7f9 fbbe 	bl	8000534 <__aeabi_i2d>
 8006db8:	4642      	mov	r2, r8
 8006dba:	464b      	mov	r3, r9
 8006dbc:	f7f9 fc24 	bl	8000608 <__aeabi_dmul>
 8006dc0:	4b86      	ldr	r3, [pc, #536]	; (8006fdc <_dtoa_r+0x64c>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f7f9 fa6a 	bl	800029c <__adddf3>
 8006dc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd0:	9303      	str	r3, [sp, #12]
 8006dd2:	2e00      	cmp	r6, #0
 8006dd4:	d158      	bne.n	8006e88 <_dtoa_r+0x4f8>
 8006dd6:	4b82      	ldr	r3, [pc, #520]	; (8006fe0 <_dtoa_r+0x650>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	f7f9 fa5b 	bl	8000298 <__aeabi_dsub>
 8006de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006de6:	4680      	mov	r8, r0
 8006de8:	4689      	mov	r9, r1
 8006dea:	f7f9 fe9d 	bl	8000b28 <__aeabi_dcmpgt>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f040 8296 	bne.w	8007320 <_dtoa_r+0x990>
 8006df4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006df8:	4640      	mov	r0, r8
 8006dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dfe:	4649      	mov	r1, r9
 8006e00:	f7f9 fe74 	bl	8000aec <__aeabi_dcmplt>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	f040 8289 	bne.w	800731c <_dtoa_r+0x98c>
 8006e0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f2c0 814e 	blt.w	80070b2 <_dtoa_r+0x722>
 8006e16:	f1bb 0f0e 	cmp.w	fp, #14
 8006e1a:	f300 814a 	bgt.w	80070b2 <_dtoa_r+0x722>
 8006e1e:	4b6b      	ldr	r3, [pc, #428]	; (8006fcc <_dtoa_r+0x63c>)
 8006e20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f280 80dc 	bge.w	8006fe8 <_dtoa_r+0x658>
 8006e30:	9b04      	ldr	r3, [sp, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f300 80d8 	bgt.w	8006fe8 <_dtoa_r+0x658>
 8006e38:	f040 826f 	bne.w	800731a <_dtoa_r+0x98a>
 8006e3c:	4b68      	ldr	r3, [pc, #416]	; (8006fe0 <_dtoa_r+0x650>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4640      	mov	r0, r8
 8006e42:	4649      	mov	r1, r9
 8006e44:	f7f9 fbe0 	bl	8000608 <__aeabi_dmul>
 8006e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e4c:	f7f9 fe62 	bl	8000b14 <__aeabi_dcmpge>
 8006e50:	9e04      	ldr	r6, [sp, #16]
 8006e52:	4637      	mov	r7, r6
 8006e54:	2800      	cmp	r0, #0
 8006e56:	f040 8245 	bne.w	80072e4 <_dtoa_r+0x954>
 8006e5a:	9d00      	ldr	r5, [sp, #0]
 8006e5c:	2331      	movs	r3, #49	; 0x31
 8006e5e:	f805 3b01 	strb.w	r3, [r5], #1
 8006e62:	f10b 0b01 	add.w	fp, fp, #1
 8006e66:	e241      	b.n	80072ec <_dtoa_r+0x95c>
 8006e68:	07f2      	lsls	r2, r6, #31
 8006e6a:	d505      	bpl.n	8006e78 <_dtoa_r+0x4e8>
 8006e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e70:	f7f9 fbca 	bl	8000608 <__aeabi_dmul>
 8006e74:	3501      	adds	r5, #1
 8006e76:	2301      	movs	r3, #1
 8006e78:	1076      	asrs	r6, r6, #1
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	e773      	b.n	8006d66 <_dtoa_r+0x3d6>
 8006e7e:	2502      	movs	r5, #2
 8006e80:	e775      	b.n	8006d6e <_dtoa_r+0x3de>
 8006e82:	9e04      	ldr	r6, [sp, #16]
 8006e84:	465f      	mov	r7, fp
 8006e86:	e792      	b.n	8006dae <_dtoa_r+0x41e>
 8006e88:	9900      	ldr	r1, [sp, #0]
 8006e8a:	4b50      	ldr	r3, [pc, #320]	; (8006fcc <_dtoa_r+0x63c>)
 8006e8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e90:	4431      	add	r1, r6
 8006e92:	9102      	str	r1, [sp, #8]
 8006e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e96:	eeb0 9a47 	vmov.f32	s18, s14
 8006e9a:	eef0 9a67 	vmov.f32	s19, s15
 8006e9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ea6:	2900      	cmp	r1, #0
 8006ea8:	d044      	beq.n	8006f34 <_dtoa_r+0x5a4>
 8006eaa:	494e      	ldr	r1, [pc, #312]	; (8006fe4 <_dtoa_r+0x654>)
 8006eac:	2000      	movs	r0, #0
 8006eae:	f7f9 fcd5 	bl	800085c <__aeabi_ddiv>
 8006eb2:	ec53 2b19 	vmov	r2, r3, d9
 8006eb6:	f7f9 f9ef 	bl	8000298 <__aeabi_dsub>
 8006eba:	9d00      	ldr	r5, [sp, #0]
 8006ebc:	ec41 0b19 	vmov	d9, r0, r1
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	f7f9 fe50 	bl	8000b68 <__aeabi_d2iz>
 8006ec8:	4606      	mov	r6, r0
 8006eca:	f7f9 fb33 	bl	8000534 <__aeabi_i2d>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	f7f9 f9df 	bl	8000298 <__aeabi_dsub>
 8006eda:	3630      	adds	r6, #48	; 0x30
 8006edc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ee0:	ec53 2b19 	vmov	r2, r3, d9
 8006ee4:	4680      	mov	r8, r0
 8006ee6:	4689      	mov	r9, r1
 8006ee8:	f7f9 fe00 	bl	8000aec <__aeabi_dcmplt>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d164      	bne.n	8006fba <_dtoa_r+0x62a>
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	4937      	ldr	r1, [pc, #220]	; (8006fd4 <_dtoa_r+0x644>)
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	f7f9 f9ce 	bl	8000298 <__aeabi_dsub>
 8006efc:	ec53 2b19 	vmov	r2, r3, d9
 8006f00:	f7f9 fdf4 	bl	8000aec <__aeabi_dcmplt>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	f040 80b6 	bne.w	8007076 <_dtoa_r+0x6e6>
 8006f0a:	9b02      	ldr	r3, [sp, #8]
 8006f0c:	429d      	cmp	r5, r3
 8006f0e:	f43f af7c 	beq.w	8006e0a <_dtoa_r+0x47a>
 8006f12:	4b31      	ldr	r3, [pc, #196]	; (8006fd8 <_dtoa_r+0x648>)
 8006f14:	ec51 0b19 	vmov	r0, r1, d9
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f7f9 fb75 	bl	8000608 <__aeabi_dmul>
 8006f1e:	4b2e      	ldr	r3, [pc, #184]	; (8006fd8 <_dtoa_r+0x648>)
 8006f20:	ec41 0b19 	vmov	d9, r0, r1
 8006f24:	2200      	movs	r2, #0
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 fb6d 	bl	8000608 <__aeabi_dmul>
 8006f2e:	4680      	mov	r8, r0
 8006f30:	4689      	mov	r9, r1
 8006f32:	e7c5      	b.n	8006ec0 <_dtoa_r+0x530>
 8006f34:	ec51 0b17 	vmov	r0, r1, d7
 8006f38:	f7f9 fb66 	bl	8000608 <__aeabi_dmul>
 8006f3c:	9b02      	ldr	r3, [sp, #8]
 8006f3e:	9d00      	ldr	r5, [sp, #0]
 8006f40:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f42:	ec41 0b19 	vmov	d9, r0, r1
 8006f46:	4649      	mov	r1, r9
 8006f48:	4640      	mov	r0, r8
 8006f4a:	f7f9 fe0d 	bl	8000b68 <__aeabi_d2iz>
 8006f4e:	4606      	mov	r6, r0
 8006f50:	f7f9 faf0 	bl	8000534 <__aeabi_i2d>
 8006f54:	3630      	adds	r6, #48	; 0x30
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	f7f9 f99b 	bl	8000298 <__aeabi_dsub>
 8006f62:	f805 6b01 	strb.w	r6, [r5], #1
 8006f66:	9b02      	ldr	r3, [sp, #8]
 8006f68:	429d      	cmp	r5, r3
 8006f6a:	4680      	mov	r8, r0
 8006f6c:	4689      	mov	r9, r1
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	d124      	bne.n	8006fbe <_dtoa_r+0x62e>
 8006f74:	4b1b      	ldr	r3, [pc, #108]	; (8006fe4 <_dtoa_r+0x654>)
 8006f76:	ec51 0b19 	vmov	r0, r1, d9
 8006f7a:	f7f9 f98f 	bl	800029c <__adddf3>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 fdcf 	bl	8000b28 <__aeabi_dcmpgt>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d173      	bne.n	8007076 <_dtoa_r+0x6e6>
 8006f8e:	ec53 2b19 	vmov	r2, r3, d9
 8006f92:	4914      	ldr	r1, [pc, #80]	; (8006fe4 <_dtoa_r+0x654>)
 8006f94:	2000      	movs	r0, #0
 8006f96:	f7f9 f97f 	bl	8000298 <__aeabi_dsub>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	f7f9 fda3 	bl	8000aec <__aeabi_dcmplt>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f43f af2f 	beq.w	8006e0a <_dtoa_r+0x47a>
 8006fac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fae:	1e6b      	subs	r3, r5, #1
 8006fb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fb6:	2b30      	cmp	r3, #48	; 0x30
 8006fb8:	d0f8      	beq.n	8006fac <_dtoa_r+0x61c>
 8006fba:	46bb      	mov	fp, r7
 8006fbc:	e04a      	b.n	8007054 <_dtoa_r+0x6c4>
 8006fbe:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <_dtoa_r+0x648>)
 8006fc0:	f7f9 fb22 	bl	8000608 <__aeabi_dmul>
 8006fc4:	4680      	mov	r8, r0
 8006fc6:	4689      	mov	r9, r1
 8006fc8:	e7bd      	b.n	8006f46 <_dtoa_r+0x5b6>
 8006fca:	bf00      	nop
 8006fcc:	08009960 	.word	0x08009960
 8006fd0:	08009938 	.word	0x08009938
 8006fd4:	3ff00000 	.word	0x3ff00000
 8006fd8:	40240000 	.word	0x40240000
 8006fdc:	401c0000 	.word	0x401c0000
 8006fe0:	40140000 	.word	0x40140000
 8006fe4:	3fe00000 	.word	0x3fe00000
 8006fe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fec:	9d00      	ldr	r5, [sp, #0]
 8006fee:	4642      	mov	r2, r8
 8006ff0:	464b      	mov	r3, r9
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	f7f9 fc31 	bl	800085c <__aeabi_ddiv>
 8006ffa:	f7f9 fdb5 	bl	8000b68 <__aeabi_d2iz>
 8006ffe:	9001      	str	r0, [sp, #4]
 8007000:	f7f9 fa98 	bl	8000534 <__aeabi_i2d>
 8007004:	4642      	mov	r2, r8
 8007006:	464b      	mov	r3, r9
 8007008:	f7f9 fafe 	bl	8000608 <__aeabi_dmul>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 f940 	bl	8000298 <__aeabi_dsub>
 8007018:	9e01      	ldr	r6, [sp, #4]
 800701a:	9f04      	ldr	r7, [sp, #16]
 800701c:	3630      	adds	r6, #48	; 0x30
 800701e:	f805 6b01 	strb.w	r6, [r5], #1
 8007022:	9e00      	ldr	r6, [sp, #0]
 8007024:	1bae      	subs	r6, r5, r6
 8007026:	42b7      	cmp	r7, r6
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	d134      	bne.n	8007098 <_dtoa_r+0x708>
 800702e:	f7f9 f935 	bl	800029c <__adddf3>
 8007032:	4642      	mov	r2, r8
 8007034:	464b      	mov	r3, r9
 8007036:	4606      	mov	r6, r0
 8007038:	460f      	mov	r7, r1
 800703a:	f7f9 fd75 	bl	8000b28 <__aeabi_dcmpgt>
 800703e:	b9c8      	cbnz	r0, 8007074 <_dtoa_r+0x6e4>
 8007040:	4642      	mov	r2, r8
 8007042:	464b      	mov	r3, r9
 8007044:	4630      	mov	r0, r6
 8007046:	4639      	mov	r1, r7
 8007048:	f7f9 fd46 	bl	8000ad8 <__aeabi_dcmpeq>
 800704c:	b110      	cbz	r0, 8007054 <_dtoa_r+0x6c4>
 800704e:	9b01      	ldr	r3, [sp, #4]
 8007050:	07db      	lsls	r3, r3, #31
 8007052:	d40f      	bmi.n	8007074 <_dtoa_r+0x6e4>
 8007054:	4651      	mov	r1, sl
 8007056:	4620      	mov	r0, r4
 8007058:	f000 fbcc 	bl	80077f4 <_Bfree>
 800705c:	2300      	movs	r3, #0
 800705e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007060:	702b      	strb	r3, [r5, #0]
 8007062:	f10b 0301 	add.w	r3, fp, #1
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800706a:	2b00      	cmp	r3, #0
 800706c:	f43f ace2 	beq.w	8006a34 <_dtoa_r+0xa4>
 8007070:	601d      	str	r5, [r3, #0]
 8007072:	e4df      	b.n	8006a34 <_dtoa_r+0xa4>
 8007074:	465f      	mov	r7, fp
 8007076:	462b      	mov	r3, r5
 8007078:	461d      	mov	r5, r3
 800707a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800707e:	2a39      	cmp	r2, #57	; 0x39
 8007080:	d106      	bne.n	8007090 <_dtoa_r+0x700>
 8007082:	9a00      	ldr	r2, [sp, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d1f7      	bne.n	8007078 <_dtoa_r+0x6e8>
 8007088:	9900      	ldr	r1, [sp, #0]
 800708a:	2230      	movs	r2, #48	; 0x30
 800708c:	3701      	adds	r7, #1
 800708e:	700a      	strb	r2, [r1, #0]
 8007090:	781a      	ldrb	r2, [r3, #0]
 8007092:	3201      	adds	r2, #1
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	e790      	b.n	8006fba <_dtoa_r+0x62a>
 8007098:	4ba3      	ldr	r3, [pc, #652]	; (8007328 <_dtoa_r+0x998>)
 800709a:	2200      	movs	r2, #0
 800709c:	f7f9 fab4 	bl	8000608 <__aeabi_dmul>
 80070a0:	2200      	movs	r2, #0
 80070a2:	2300      	movs	r3, #0
 80070a4:	4606      	mov	r6, r0
 80070a6:	460f      	mov	r7, r1
 80070a8:	f7f9 fd16 	bl	8000ad8 <__aeabi_dcmpeq>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d09e      	beq.n	8006fee <_dtoa_r+0x65e>
 80070b0:	e7d0      	b.n	8007054 <_dtoa_r+0x6c4>
 80070b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b4:	2a00      	cmp	r2, #0
 80070b6:	f000 80ca 	beq.w	800724e <_dtoa_r+0x8be>
 80070ba:	9a07      	ldr	r2, [sp, #28]
 80070bc:	2a01      	cmp	r2, #1
 80070be:	f300 80ad 	bgt.w	800721c <_dtoa_r+0x88c>
 80070c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070c4:	2a00      	cmp	r2, #0
 80070c6:	f000 80a5 	beq.w	8007214 <_dtoa_r+0x884>
 80070ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070ce:	9e08      	ldr	r6, [sp, #32]
 80070d0:	9d05      	ldr	r5, [sp, #20]
 80070d2:	9a05      	ldr	r2, [sp, #20]
 80070d4:	441a      	add	r2, r3
 80070d6:	9205      	str	r2, [sp, #20]
 80070d8:	9a06      	ldr	r2, [sp, #24]
 80070da:	2101      	movs	r1, #1
 80070dc:	441a      	add	r2, r3
 80070de:	4620      	mov	r0, r4
 80070e0:	9206      	str	r2, [sp, #24]
 80070e2:	f000 fc3d 	bl	8007960 <__i2b>
 80070e6:	4607      	mov	r7, r0
 80070e8:	b165      	cbz	r5, 8007104 <_dtoa_r+0x774>
 80070ea:	9b06      	ldr	r3, [sp, #24]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	dd09      	ble.n	8007104 <_dtoa_r+0x774>
 80070f0:	42ab      	cmp	r3, r5
 80070f2:	9a05      	ldr	r2, [sp, #20]
 80070f4:	bfa8      	it	ge
 80070f6:	462b      	movge	r3, r5
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	9205      	str	r2, [sp, #20]
 80070fc:	9a06      	ldr	r2, [sp, #24]
 80070fe:	1aed      	subs	r5, r5, r3
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	9306      	str	r3, [sp, #24]
 8007104:	9b08      	ldr	r3, [sp, #32]
 8007106:	b1f3      	cbz	r3, 8007146 <_dtoa_r+0x7b6>
 8007108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 80a3 	beq.w	8007256 <_dtoa_r+0x8c6>
 8007110:	2e00      	cmp	r6, #0
 8007112:	dd10      	ble.n	8007136 <_dtoa_r+0x7a6>
 8007114:	4639      	mov	r1, r7
 8007116:	4632      	mov	r2, r6
 8007118:	4620      	mov	r0, r4
 800711a:	f000 fce1 	bl	8007ae0 <__pow5mult>
 800711e:	4652      	mov	r2, sl
 8007120:	4601      	mov	r1, r0
 8007122:	4607      	mov	r7, r0
 8007124:	4620      	mov	r0, r4
 8007126:	f000 fc31 	bl	800798c <__multiply>
 800712a:	4651      	mov	r1, sl
 800712c:	4680      	mov	r8, r0
 800712e:	4620      	mov	r0, r4
 8007130:	f000 fb60 	bl	80077f4 <_Bfree>
 8007134:	46c2      	mov	sl, r8
 8007136:	9b08      	ldr	r3, [sp, #32]
 8007138:	1b9a      	subs	r2, r3, r6
 800713a:	d004      	beq.n	8007146 <_dtoa_r+0x7b6>
 800713c:	4651      	mov	r1, sl
 800713e:	4620      	mov	r0, r4
 8007140:	f000 fcce 	bl	8007ae0 <__pow5mult>
 8007144:	4682      	mov	sl, r0
 8007146:	2101      	movs	r1, #1
 8007148:	4620      	mov	r0, r4
 800714a:	f000 fc09 	bl	8007960 <__i2b>
 800714e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007150:	2b00      	cmp	r3, #0
 8007152:	4606      	mov	r6, r0
 8007154:	f340 8081 	ble.w	800725a <_dtoa_r+0x8ca>
 8007158:	461a      	mov	r2, r3
 800715a:	4601      	mov	r1, r0
 800715c:	4620      	mov	r0, r4
 800715e:	f000 fcbf 	bl	8007ae0 <__pow5mult>
 8007162:	9b07      	ldr	r3, [sp, #28]
 8007164:	2b01      	cmp	r3, #1
 8007166:	4606      	mov	r6, r0
 8007168:	dd7a      	ble.n	8007260 <_dtoa_r+0x8d0>
 800716a:	f04f 0800 	mov.w	r8, #0
 800716e:	6933      	ldr	r3, [r6, #16]
 8007170:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007174:	6918      	ldr	r0, [r3, #16]
 8007176:	f000 fba5 	bl	80078c4 <__hi0bits>
 800717a:	f1c0 0020 	rsb	r0, r0, #32
 800717e:	9b06      	ldr	r3, [sp, #24]
 8007180:	4418      	add	r0, r3
 8007182:	f010 001f 	ands.w	r0, r0, #31
 8007186:	f000 8094 	beq.w	80072b2 <_dtoa_r+0x922>
 800718a:	f1c0 0320 	rsb	r3, r0, #32
 800718e:	2b04      	cmp	r3, #4
 8007190:	f340 8085 	ble.w	800729e <_dtoa_r+0x90e>
 8007194:	9b05      	ldr	r3, [sp, #20]
 8007196:	f1c0 001c 	rsb	r0, r0, #28
 800719a:	4403      	add	r3, r0
 800719c:	9305      	str	r3, [sp, #20]
 800719e:	9b06      	ldr	r3, [sp, #24]
 80071a0:	4403      	add	r3, r0
 80071a2:	4405      	add	r5, r0
 80071a4:	9306      	str	r3, [sp, #24]
 80071a6:	9b05      	ldr	r3, [sp, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	dd05      	ble.n	80071b8 <_dtoa_r+0x828>
 80071ac:	4651      	mov	r1, sl
 80071ae:	461a      	mov	r2, r3
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fcef 	bl	8007b94 <__lshift>
 80071b6:	4682      	mov	sl, r0
 80071b8:	9b06      	ldr	r3, [sp, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	dd05      	ble.n	80071ca <_dtoa_r+0x83a>
 80071be:	4631      	mov	r1, r6
 80071c0:	461a      	mov	r2, r3
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 fce6 	bl	8007b94 <__lshift>
 80071c8:	4606      	mov	r6, r0
 80071ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d072      	beq.n	80072b6 <_dtoa_r+0x926>
 80071d0:	4631      	mov	r1, r6
 80071d2:	4650      	mov	r0, sl
 80071d4:	f000 fd4a 	bl	8007c6c <__mcmp>
 80071d8:	2800      	cmp	r0, #0
 80071da:	da6c      	bge.n	80072b6 <_dtoa_r+0x926>
 80071dc:	2300      	movs	r3, #0
 80071de:	4651      	mov	r1, sl
 80071e0:	220a      	movs	r2, #10
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 fb28 	bl	8007838 <__multadd>
 80071e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071ee:	4682      	mov	sl, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 81b0 	beq.w	8007556 <_dtoa_r+0xbc6>
 80071f6:	2300      	movs	r3, #0
 80071f8:	4639      	mov	r1, r7
 80071fa:	220a      	movs	r2, #10
 80071fc:	4620      	mov	r0, r4
 80071fe:	f000 fb1b 	bl	8007838 <__multadd>
 8007202:	9b01      	ldr	r3, [sp, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	4607      	mov	r7, r0
 8007208:	f300 8096 	bgt.w	8007338 <_dtoa_r+0x9a8>
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	2b02      	cmp	r3, #2
 8007210:	dc59      	bgt.n	80072c6 <_dtoa_r+0x936>
 8007212:	e091      	b.n	8007338 <_dtoa_r+0x9a8>
 8007214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800721a:	e758      	b.n	80070ce <_dtoa_r+0x73e>
 800721c:	9b04      	ldr	r3, [sp, #16]
 800721e:	1e5e      	subs	r6, r3, #1
 8007220:	9b08      	ldr	r3, [sp, #32]
 8007222:	42b3      	cmp	r3, r6
 8007224:	bfbf      	itttt	lt
 8007226:	9b08      	ldrlt	r3, [sp, #32]
 8007228:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800722a:	9608      	strlt	r6, [sp, #32]
 800722c:	1af3      	sublt	r3, r6, r3
 800722e:	bfb4      	ite	lt
 8007230:	18d2      	addlt	r2, r2, r3
 8007232:	1b9e      	subge	r6, r3, r6
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	bfbc      	itt	lt
 8007238:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800723a:	2600      	movlt	r6, #0
 800723c:	2b00      	cmp	r3, #0
 800723e:	bfb7      	itett	lt
 8007240:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007244:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007248:	1a9d      	sublt	r5, r3, r2
 800724a:	2300      	movlt	r3, #0
 800724c:	e741      	b.n	80070d2 <_dtoa_r+0x742>
 800724e:	9e08      	ldr	r6, [sp, #32]
 8007250:	9d05      	ldr	r5, [sp, #20]
 8007252:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007254:	e748      	b.n	80070e8 <_dtoa_r+0x758>
 8007256:	9a08      	ldr	r2, [sp, #32]
 8007258:	e770      	b.n	800713c <_dtoa_r+0x7ac>
 800725a:	9b07      	ldr	r3, [sp, #28]
 800725c:	2b01      	cmp	r3, #1
 800725e:	dc19      	bgt.n	8007294 <_dtoa_r+0x904>
 8007260:	9b02      	ldr	r3, [sp, #8]
 8007262:	b9bb      	cbnz	r3, 8007294 <_dtoa_r+0x904>
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800726a:	b99b      	cbnz	r3, 8007294 <_dtoa_r+0x904>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007272:	0d1b      	lsrs	r3, r3, #20
 8007274:	051b      	lsls	r3, r3, #20
 8007276:	b183      	cbz	r3, 800729a <_dtoa_r+0x90a>
 8007278:	9b05      	ldr	r3, [sp, #20]
 800727a:	3301      	adds	r3, #1
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	9b06      	ldr	r3, [sp, #24]
 8007280:	3301      	adds	r3, #1
 8007282:	9306      	str	r3, [sp, #24]
 8007284:	f04f 0801 	mov.w	r8, #1
 8007288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800728a:	2b00      	cmp	r3, #0
 800728c:	f47f af6f 	bne.w	800716e <_dtoa_r+0x7de>
 8007290:	2001      	movs	r0, #1
 8007292:	e774      	b.n	800717e <_dtoa_r+0x7ee>
 8007294:	f04f 0800 	mov.w	r8, #0
 8007298:	e7f6      	b.n	8007288 <_dtoa_r+0x8f8>
 800729a:	4698      	mov	r8, r3
 800729c:	e7f4      	b.n	8007288 <_dtoa_r+0x8f8>
 800729e:	d082      	beq.n	80071a6 <_dtoa_r+0x816>
 80072a0:	9a05      	ldr	r2, [sp, #20]
 80072a2:	331c      	adds	r3, #28
 80072a4:	441a      	add	r2, r3
 80072a6:	9205      	str	r2, [sp, #20]
 80072a8:	9a06      	ldr	r2, [sp, #24]
 80072aa:	441a      	add	r2, r3
 80072ac:	441d      	add	r5, r3
 80072ae:	9206      	str	r2, [sp, #24]
 80072b0:	e779      	b.n	80071a6 <_dtoa_r+0x816>
 80072b2:	4603      	mov	r3, r0
 80072b4:	e7f4      	b.n	80072a0 <_dtoa_r+0x910>
 80072b6:	9b04      	ldr	r3, [sp, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	dc37      	bgt.n	800732c <_dtoa_r+0x99c>
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	dd34      	ble.n	800732c <_dtoa_r+0x99c>
 80072c2:	9b04      	ldr	r3, [sp, #16]
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	b963      	cbnz	r3, 80072e4 <_dtoa_r+0x954>
 80072ca:	4631      	mov	r1, r6
 80072cc:	2205      	movs	r2, #5
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 fab2 	bl	8007838 <__multadd>
 80072d4:	4601      	mov	r1, r0
 80072d6:	4606      	mov	r6, r0
 80072d8:	4650      	mov	r0, sl
 80072da:	f000 fcc7 	bl	8007c6c <__mcmp>
 80072de:	2800      	cmp	r0, #0
 80072e0:	f73f adbb 	bgt.w	8006e5a <_dtoa_r+0x4ca>
 80072e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e6:	9d00      	ldr	r5, [sp, #0]
 80072e8:	ea6f 0b03 	mvn.w	fp, r3
 80072ec:	f04f 0800 	mov.w	r8, #0
 80072f0:	4631      	mov	r1, r6
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 fa7e 	bl	80077f4 <_Bfree>
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	f43f aeab 	beq.w	8007054 <_dtoa_r+0x6c4>
 80072fe:	f1b8 0f00 	cmp.w	r8, #0
 8007302:	d005      	beq.n	8007310 <_dtoa_r+0x980>
 8007304:	45b8      	cmp	r8, r7
 8007306:	d003      	beq.n	8007310 <_dtoa_r+0x980>
 8007308:	4641      	mov	r1, r8
 800730a:	4620      	mov	r0, r4
 800730c:	f000 fa72 	bl	80077f4 <_Bfree>
 8007310:	4639      	mov	r1, r7
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fa6e 	bl	80077f4 <_Bfree>
 8007318:	e69c      	b.n	8007054 <_dtoa_r+0x6c4>
 800731a:	2600      	movs	r6, #0
 800731c:	4637      	mov	r7, r6
 800731e:	e7e1      	b.n	80072e4 <_dtoa_r+0x954>
 8007320:	46bb      	mov	fp, r7
 8007322:	4637      	mov	r7, r6
 8007324:	e599      	b.n	8006e5a <_dtoa_r+0x4ca>
 8007326:	bf00      	nop
 8007328:	40240000 	.word	0x40240000
 800732c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 80c8 	beq.w	80074c4 <_dtoa_r+0xb34>
 8007334:	9b04      	ldr	r3, [sp, #16]
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	2d00      	cmp	r5, #0
 800733a:	dd05      	ble.n	8007348 <_dtoa_r+0x9b8>
 800733c:	4639      	mov	r1, r7
 800733e:	462a      	mov	r2, r5
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fc27 	bl	8007b94 <__lshift>
 8007346:	4607      	mov	r7, r0
 8007348:	f1b8 0f00 	cmp.w	r8, #0
 800734c:	d05b      	beq.n	8007406 <_dtoa_r+0xa76>
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fa0f 	bl	8007774 <_Balloc>
 8007356:	4605      	mov	r5, r0
 8007358:	b928      	cbnz	r0, 8007366 <_dtoa_r+0x9d6>
 800735a:	4b83      	ldr	r3, [pc, #524]	; (8007568 <_dtoa_r+0xbd8>)
 800735c:	4602      	mov	r2, r0
 800735e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007362:	f7ff bb2e 	b.w	80069c2 <_dtoa_r+0x32>
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	3202      	adds	r2, #2
 800736a:	0092      	lsls	r2, r2, #2
 800736c:	f107 010c 	add.w	r1, r7, #12
 8007370:	300c      	adds	r0, #12
 8007372:	f001 f813 	bl	800839c <memcpy>
 8007376:	2201      	movs	r2, #1
 8007378:	4629      	mov	r1, r5
 800737a:	4620      	mov	r0, r4
 800737c:	f000 fc0a 	bl	8007b94 <__lshift>
 8007380:	9b00      	ldr	r3, [sp, #0]
 8007382:	3301      	adds	r3, #1
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800738a:	4413      	add	r3, r2
 800738c:	9308      	str	r3, [sp, #32]
 800738e:	9b02      	ldr	r3, [sp, #8]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	46b8      	mov	r8, r7
 8007396:	9306      	str	r3, [sp, #24]
 8007398:	4607      	mov	r7, r0
 800739a:	9b04      	ldr	r3, [sp, #16]
 800739c:	4631      	mov	r1, r6
 800739e:	3b01      	subs	r3, #1
 80073a0:	4650      	mov	r0, sl
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	f7ff fa69 	bl	800687a <quorem>
 80073a8:	4641      	mov	r1, r8
 80073aa:	9002      	str	r0, [sp, #8]
 80073ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80073b0:	4650      	mov	r0, sl
 80073b2:	f000 fc5b 	bl	8007c6c <__mcmp>
 80073b6:	463a      	mov	r2, r7
 80073b8:	9005      	str	r0, [sp, #20]
 80073ba:	4631      	mov	r1, r6
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 fc71 	bl	8007ca4 <__mdiff>
 80073c2:	68c2      	ldr	r2, [r0, #12]
 80073c4:	4605      	mov	r5, r0
 80073c6:	bb02      	cbnz	r2, 800740a <_dtoa_r+0xa7a>
 80073c8:	4601      	mov	r1, r0
 80073ca:	4650      	mov	r0, sl
 80073cc:	f000 fc4e 	bl	8007c6c <__mcmp>
 80073d0:	4602      	mov	r2, r0
 80073d2:	4629      	mov	r1, r5
 80073d4:	4620      	mov	r0, r4
 80073d6:	9209      	str	r2, [sp, #36]	; 0x24
 80073d8:	f000 fa0c 	bl	80077f4 <_Bfree>
 80073dc:	9b07      	ldr	r3, [sp, #28]
 80073de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073e0:	9d04      	ldr	r5, [sp, #16]
 80073e2:	ea43 0102 	orr.w	r1, r3, r2
 80073e6:	9b06      	ldr	r3, [sp, #24]
 80073e8:	4319      	orrs	r1, r3
 80073ea:	d110      	bne.n	800740e <_dtoa_r+0xa7e>
 80073ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073f0:	d029      	beq.n	8007446 <_dtoa_r+0xab6>
 80073f2:	9b05      	ldr	r3, [sp, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dd02      	ble.n	80073fe <_dtoa_r+0xa6e>
 80073f8:	9b02      	ldr	r3, [sp, #8]
 80073fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	f883 9000 	strb.w	r9, [r3]
 8007404:	e774      	b.n	80072f0 <_dtoa_r+0x960>
 8007406:	4638      	mov	r0, r7
 8007408:	e7ba      	b.n	8007380 <_dtoa_r+0x9f0>
 800740a:	2201      	movs	r2, #1
 800740c:	e7e1      	b.n	80073d2 <_dtoa_r+0xa42>
 800740e:	9b05      	ldr	r3, [sp, #20]
 8007410:	2b00      	cmp	r3, #0
 8007412:	db04      	blt.n	800741e <_dtoa_r+0xa8e>
 8007414:	9907      	ldr	r1, [sp, #28]
 8007416:	430b      	orrs	r3, r1
 8007418:	9906      	ldr	r1, [sp, #24]
 800741a:	430b      	orrs	r3, r1
 800741c:	d120      	bne.n	8007460 <_dtoa_r+0xad0>
 800741e:	2a00      	cmp	r2, #0
 8007420:	dded      	ble.n	80073fe <_dtoa_r+0xa6e>
 8007422:	4651      	mov	r1, sl
 8007424:	2201      	movs	r2, #1
 8007426:	4620      	mov	r0, r4
 8007428:	f000 fbb4 	bl	8007b94 <__lshift>
 800742c:	4631      	mov	r1, r6
 800742e:	4682      	mov	sl, r0
 8007430:	f000 fc1c 	bl	8007c6c <__mcmp>
 8007434:	2800      	cmp	r0, #0
 8007436:	dc03      	bgt.n	8007440 <_dtoa_r+0xab0>
 8007438:	d1e1      	bne.n	80073fe <_dtoa_r+0xa6e>
 800743a:	f019 0f01 	tst.w	r9, #1
 800743e:	d0de      	beq.n	80073fe <_dtoa_r+0xa6e>
 8007440:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007444:	d1d8      	bne.n	80073f8 <_dtoa_r+0xa68>
 8007446:	9a01      	ldr	r2, [sp, #4]
 8007448:	2339      	movs	r3, #57	; 0x39
 800744a:	7013      	strb	r3, [r2, #0]
 800744c:	462b      	mov	r3, r5
 800744e:	461d      	mov	r5, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007456:	2a39      	cmp	r2, #57	; 0x39
 8007458:	d06c      	beq.n	8007534 <_dtoa_r+0xba4>
 800745a:	3201      	adds	r2, #1
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	e747      	b.n	80072f0 <_dtoa_r+0x960>
 8007460:	2a00      	cmp	r2, #0
 8007462:	dd07      	ble.n	8007474 <_dtoa_r+0xae4>
 8007464:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007468:	d0ed      	beq.n	8007446 <_dtoa_r+0xab6>
 800746a:	9a01      	ldr	r2, [sp, #4]
 800746c:	f109 0301 	add.w	r3, r9, #1
 8007470:	7013      	strb	r3, [r2, #0]
 8007472:	e73d      	b.n	80072f0 <_dtoa_r+0x960>
 8007474:	9b04      	ldr	r3, [sp, #16]
 8007476:	9a08      	ldr	r2, [sp, #32]
 8007478:	f803 9c01 	strb.w	r9, [r3, #-1]
 800747c:	4293      	cmp	r3, r2
 800747e:	d043      	beq.n	8007508 <_dtoa_r+0xb78>
 8007480:	4651      	mov	r1, sl
 8007482:	2300      	movs	r3, #0
 8007484:	220a      	movs	r2, #10
 8007486:	4620      	mov	r0, r4
 8007488:	f000 f9d6 	bl	8007838 <__multadd>
 800748c:	45b8      	cmp	r8, r7
 800748e:	4682      	mov	sl, r0
 8007490:	f04f 0300 	mov.w	r3, #0
 8007494:	f04f 020a 	mov.w	r2, #10
 8007498:	4641      	mov	r1, r8
 800749a:	4620      	mov	r0, r4
 800749c:	d107      	bne.n	80074ae <_dtoa_r+0xb1e>
 800749e:	f000 f9cb 	bl	8007838 <__multadd>
 80074a2:	4680      	mov	r8, r0
 80074a4:	4607      	mov	r7, r0
 80074a6:	9b04      	ldr	r3, [sp, #16]
 80074a8:	3301      	adds	r3, #1
 80074aa:	9304      	str	r3, [sp, #16]
 80074ac:	e775      	b.n	800739a <_dtoa_r+0xa0a>
 80074ae:	f000 f9c3 	bl	8007838 <__multadd>
 80074b2:	4639      	mov	r1, r7
 80074b4:	4680      	mov	r8, r0
 80074b6:	2300      	movs	r3, #0
 80074b8:	220a      	movs	r2, #10
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 f9bc 	bl	8007838 <__multadd>
 80074c0:	4607      	mov	r7, r0
 80074c2:	e7f0      	b.n	80074a6 <_dtoa_r+0xb16>
 80074c4:	9b04      	ldr	r3, [sp, #16]
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	9d00      	ldr	r5, [sp, #0]
 80074ca:	4631      	mov	r1, r6
 80074cc:	4650      	mov	r0, sl
 80074ce:	f7ff f9d4 	bl	800687a <quorem>
 80074d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80074d6:	9b00      	ldr	r3, [sp, #0]
 80074d8:	f805 9b01 	strb.w	r9, [r5], #1
 80074dc:	1aea      	subs	r2, r5, r3
 80074de:	9b01      	ldr	r3, [sp, #4]
 80074e0:	4293      	cmp	r3, r2
 80074e2:	dd07      	ble.n	80074f4 <_dtoa_r+0xb64>
 80074e4:	4651      	mov	r1, sl
 80074e6:	2300      	movs	r3, #0
 80074e8:	220a      	movs	r2, #10
 80074ea:	4620      	mov	r0, r4
 80074ec:	f000 f9a4 	bl	8007838 <__multadd>
 80074f0:	4682      	mov	sl, r0
 80074f2:	e7ea      	b.n	80074ca <_dtoa_r+0xb3a>
 80074f4:	9b01      	ldr	r3, [sp, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bfc8      	it	gt
 80074fa:	461d      	movgt	r5, r3
 80074fc:	9b00      	ldr	r3, [sp, #0]
 80074fe:	bfd8      	it	le
 8007500:	2501      	movle	r5, #1
 8007502:	441d      	add	r5, r3
 8007504:	f04f 0800 	mov.w	r8, #0
 8007508:	4651      	mov	r1, sl
 800750a:	2201      	movs	r2, #1
 800750c:	4620      	mov	r0, r4
 800750e:	f000 fb41 	bl	8007b94 <__lshift>
 8007512:	4631      	mov	r1, r6
 8007514:	4682      	mov	sl, r0
 8007516:	f000 fba9 	bl	8007c6c <__mcmp>
 800751a:	2800      	cmp	r0, #0
 800751c:	dc96      	bgt.n	800744c <_dtoa_r+0xabc>
 800751e:	d102      	bne.n	8007526 <_dtoa_r+0xb96>
 8007520:	f019 0f01 	tst.w	r9, #1
 8007524:	d192      	bne.n	800744c <_dtoa_r+0xabc>
 8007526:	462b      	mov	r3, r5
 8007528:	461d      	mov	r5, r3
 800752a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800752e:	2a30      	cmp	r2, #48	; 0x30
 8007530:	d0fa      	beq.n	8007528 <_dtoa_r+0xb98>
 8007532:	e6dd      	b.n	80072f0 <_dtoa_r+0x960>
 8007534:	9a00      	ldr	r2, [sp, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d189      	bne.n	800744e <_dtoa_r+0xabe>
 800753a:	f10b 0b01 	add.w	fp, fp, #1
 800753e:	2331      	movs	r3, #49	; 0x31
 8007540:	e796      	b.n	8007470 <_dtoa_r+0xae0>
 8007542:	4b0a      	ldr	r3, [pc, #40]	; (800756c <_dtoa_r+0xbdc>)
 8007544:	f7ff ba99 	b.w	8006a7a <_dtoa_r+0xea>
 8007548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800754a:	2b00      	cmp	r3, #0
 800754c:	f47f aa6d 	bne.w	8006a2a <_dtoa_r+0x9a>
 8007550:	4b07      	ldr	r3, [pc, #28]	; (8007570 <_dtoa_r+0xbe0>)
 8007552:	f7ff ba92 	b.w	8006a7a <_dtoa_r+0xea>
 8007556:	9b01      	ldr	r3, [sp, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	dcb5      	bgt.n	80074c8 <_dtoa_r+0xb38>
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	2b02      	cmp	r3, #2
 8007560:	f73f aeb1 	bgt.w	80072c6 <_dtoa_r+0x936>
 8007564:	e7b0      	b.n	80074c8 <_dtoa_r+0xb38>
 8007566:	bf00      	nop
 8007568:	080098c8 	.word	0x080098c8
 800756c:	08009828 	.word	0x08009828
 8007570:	0800984c 	.word	0x0800984c

08007574 <_free_r>:
 8007574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007576:	2900      	cmp	r1, #0
 8007578:	d044      	beq.n	8007604 <_free_r+0x90>
 800757a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800757e:	9001      	str	r0, [sp, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f1a1 0404 	sub.w	r4, r1, #4
 8007586:	bfb8      	it	lt
 8007588:	18e4      	addlt	r4, r4, r3
 800758a:	f000 f8e7 	bl	800775c <__malloc_lock>
 800758e:	4a1e      	ldr	r2, [pc, #120]	; (8007608 <_free_r+0x94>)
 8007590:	9801      	ldr	r0, [sp, #4]
 8007592:	6813      	ldr	r3, [r2, #0]
 8007594:	b933      	cbnz	r3, 80075a4 <_free_r+0x30>
 8007596:	6063      	str	r3, [r4, #4]
 8007598:	6014      	str	r4, [r2, #0]
 800759a:	b003      	add	sp, #12
 800759c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075a0:	f000 b8e2 	b.w	8007768 <__malloc_unlock>
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	d908      	bls.n	80075ba <_free_r+0x46>
 80075a8:	6825      	ldr	r5, [r4, #0]
 80075aa:	1961      	adds	r1, r4, r5
 80075ac:	428b      	cmp	r3, r1
 80075ae:	bf01      	itttt	eq
 80075b0:	6819      	ldreq	r1, [r3, #0]
 80075b2:	685b      	ldreq	r3, [r3, #4]
 80075b4:	1949      	addeq	r1, r1, r5
 80075b6:	6021      	streq	r1, [r4, #0]
 80075b8:	e7ed      	b.n	8007596 <_free_r+0x22>
 80075ba:	461a      	mov	r2, r3
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	b10b      	cbz	r3, 80075c4 <_free_r+0x50>
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	d9fa      	bls.n	80075ba <_free_r+0x46>
 80075c4:	6811      	ldr	r1, [r2, #0]
 80075c6:	1855      	adds	r5, r2, r1
 80075c8:	42a5      	cmp	r5, r4
 80075ca:	d10b      	bne.n	80075e4 <_free_r+0x70>
 80075cc:	6824      	ldr	r4, [r4, #0]
 80075ce:	4421      	add	r1, r4
 80075d0:	1854      	adds	r4, r2, r1
 80075d2:	42a3      	cmp	r3, r4
 80075d4:	6011      	str	r1, [r2, #0]
 80075d6:	d1e0      	bne.n	800759a <_free_r+0x26>
 80075d8:	681c      	ldr	r4, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	6053      	str	r3, [r2, #4]
 80075de:	440c      	add	r4, r1
 80075e0:	6014      	str	r4, [r2, #0]
 80075e2:	e7da      	b.n	800759a <_free_r+0x26>
 80075e4:	d902      	bls.n	80075ec <_free_r+0x78>
 80075e6:	230c      	movs	r3, #12
 80075e8:	6003      	str	r3, [r0, #0]
 80075ea:	e7d6      	b.n	800759a <_free_r+0x26>
 80075ec:	6825      	ldr	r5, [r4, #0]
 80075ee:	1961      	adds	r1, r4, r5
 80075f0:	428b      	cmp	r3, r1
 80075f2:	bf04      	itt	eq
 80075f4:	6819      	ldreq	r1, [r3, #0]
 80075f6:	685b      	ldreq	r3, [r3, #4]
 80075f8:	6063      	str	r3, [r4, #4]
 80075fa:	bf04      	itt	eq
 80075fc:	1949      	addeq	r1, r1, r5
 80075fe:	6021      	streq	r1, [r4, #0]
 8007600:	6054      	str	r4, [r2, #4]
 8007602:	e7ca      	b.n	800759a <_free_r+0x26>
 8007604:	b003      	add	sp, #12
 8007606:	bd30      	pop	{r4, r5, pc}
 8007608:	20000694 	.word	0x20000694

0800760c <malloc>:
 800760c:	4b02      	ldr	r3, [pc, #8]	; (8007618 <malloc+0xc>)
 800760e:	4601      	mov	r1, r0
 8007610:	6818      	ldr	r0, [r3, #0]
 8007612:	f000 b823 	b.w	800765c <_malloc_r>
 8007616:	bf00      	nop
 8007618:	20000074 	.word	0x20000074

0800761c <sbrk_aligned>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4e0e      	ldr	r6, [pc, #56]	; (8007658 <sbrk_aligned+0x3c>)
 8007620:	460c      	mov	r4, r1
 8007622:	6831      	ldr	r1, [r6, #0]
 8007624:	4605      	mov	r5, r0
 8007626:	b911      	cbnz	r1, 800762e <sbrk_aligned+0x12>
 8007628:	f000 fea8 	bl	800837c <_sbrk_r>
 800762c:	6030      	str	r0, [r6, #0]
 800762e:	4621      	mov	r1, r4
 8007630:	4628      	mov	r0, r5
 8007632:	f000 fea3 	bl	800837c <_sbrk_r>
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	d00a      	beq.n	8007650 <sbrk_aligned+0x34>
 800763a:	1cc4      	adds	r4, r0, #3
 800763c:	f024 0403 	bic.w	r4, r4, #3
 8007640:	42a0      	cmp	r0, r4
 8007642:	d007      	beq.n	8007654 <sbrk_aligned+0x38>
 8007644:	1a21      	subs	r1, r4, r0
 8007646:	4628      	mov	r0, r5
 8007648:	f000 fe98 	bl	800837c <_sbrk_r>
 800764c:	3001      	adds	r0, #1
 800764e:	d101      	bne.n	8007654 <sbrk_aligned+0x38>
 8007650:	f04f 34ff 	mov.w	r4, #4294967295
 8007654:	4620      	mov	r0, r4
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	20000698 	.word	0x20000698

0800765c <_malloc_r>:
 800765c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007660:	1ccd      	adds	r5, r1, #3
 8007662:	f025 0503 	bic.w	r5, r5, #3
 8007666:	3508      	adds	r5, #8
 8007668:	2d0c      	cmp	r5, #12
 800766a:	bf38      	it	cc
 800766c:	250c      	movcc	r5, #12
 800766e:	2d00      	cmp	r5, #0
 8007670:	4607      	mov	r7, r0
 8007672:	db01      	blt.n	8007678 <_malloc_r+0x1c>
 8007674:	42a9      	cmp	r1, r5
 8007676:	d905      	bls.n	8007684 <_malloc_r+0x28>
 8007678:	230c      	movs	r3, #12
 800767a:	603b      	str	r3, [r7, #0]
 800767c:	2600      	movs	r6, #0
 800767e:	4630      	mov	r0, r6
 8007680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007684:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007758 <_malloc_r+0xfc>
 8007688:	f000 f868 	bl	800775c <__malloc_lock>
 800768c:	f8d8 3000 	ldr.w	r3, [r8]
 8007690:	461c      	mov	r4, r3
 8007692:	bb5c      	cbnz	r4, 80076ec <_malloc_r+0x90>
 8007694:	4629      	mov	r1, r5
 8007696:	4638      	mov	r0, r7
 8007698:	f7ff ffc0 	bl	800761c <sbrk_aligned>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	4604      	mov	r4, r0
 80076a0:	d155      	bne.n	800774e <_malloc_r+0xf2>
 80076a2:	f8d8 4000 	ldr.w	r4, [r8]
 80076a6:	4626      	mov	r6, r4
 80076a8:	2e00      	cmp	r6, #0
 80076aa:	d145      	bne.n	8007738 <_malloc_r+0xdc>
 80076ac:	2c00      	cmp	r4, #0
 80076ae:	d048      	beq.n	8007742 <_malloc_r+0xe6>
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	4631      	mov	r1, r6
 80076b4:	4638      	mov	r0, r7
 80076b6:	eb04 0903 	add.w	r9, r4, r3
 80076ba:	f000 fe5f 	bl	800837c <_sbrk_r>
 80076be:	4581      	cmp	r9, r0
 80076c0:	d13f      	bne.n	8007742 <_malloc_r+0xe6>
 80076c2:	6821      	ldr	r1, [r4, #0]
 80076c4:	1a6d      	subs	r5, r5, r1
 80076c6:	4629      	mov	r1, r5
 80076c8:	4638      	mov	r0, r7
 80076ca:	f7ff ffa7 	bl	800761c <sbrk_aligned>
 80076ce:	3001      	adds	r0, #1
 80076d0:	d037      	beq.n	8007742 <_malloc_r+0xe6>
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	442b      	add	r3, r5
 80076d6:	6023      	str	r3, [r4, #0]
 80076d8:	f8d8 3000 	ldr.w	r3, [r8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d038      	beq.n	8007752 <_malloc_r+0xf6>
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	42a2      	cmp	r2, r4
 80076e4:	d12b      	bne.n	800773e <_malloc_r+0xe2>
 80076e6:	2200      	movs	r2, #0
 80076e8:	605a      	str	r2, [r3, #4]
 80076ea:	e00f      	b.n	800770c <_malloc_r+0xb0>
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	1b52      	subs	r2, r2, r5
 80076f0:	d41f      	bmi.n	8007732 <_malloc_r+0xd6>
 80076f2:	2a0b      	cmp	r2, #11
 80076f4:	d917      	bls.n	8007726 <_malloc_r+0xca>
 80076f6:	1961      	adds	r1, r4, r5
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	6025      	str	r5, [r4, #0]
 80076fc:	bf18      	it	ne
 80076fe:	6059      	strne	r1, [r3, #4]
 8007700:	6863      	ldr	r3, [r4, #4]
 8007702:	bf08      	it	eq
 8007704:	f8c8 1000 	streq.w	r1, [r8]
 8007708:	5162      	str	r2, [r4, r5]
 800770a:	604b      	str	r3, [r1, #4]
 800770c:	4638      	mov	r0, r7
 800770e:	f104 060b 	add.w	r6, r4, #11
 8007712:	f000 f829 	bl	8007768 <__malloc_unlock>
 8007716:	f026 0607 	bic.w	r6, r6, #7
 800771a:	1d23      	adds	r3, r4, #4
 800771c:	1af2      	subs	r2, r6, r3
 800771e:	d0ae      	beq.n	800767e <_malloc_r+0x22>
 8007720:	1b9b      	subs	r3, r3, r6
 8007722:	50a3      	str	r3, [r4, r2]
 8007724:	e7ab      	b.n	800767e <_malloc_r+0x22>
 8007726:	42a3      	cmp	r3, r4
 8007728:	6862      	ldr	r2, [r4, #4]
 800772a:	d1dd      	bne.n	80076e8 <_malloc_r+0x8c>
 800772c:	f8c8 2000 	str.w	r2, [r8]
 8007730:	e7ec      	b.n	800770c <_malloc_r+0xb0>
 8007732:	4623      	mov	r3, r4
 8007734:	6864      	ldr	r4, [r4, #4]
 8007736:	e7ac      	b.n	8007692 <_malloc_r+0x36>
 8007738:	4634      	mov	r4, r6
 800773a:	6876      	ldr	r6, [r6, #4]
 800773c:	e7b4      	b.n	80076a8 <_malloc_r+0x4c>
 800773e:	4613      	mov	r3, r2
 8007740:	e7cc      	b.n	80076dc <_malloc_r+0x80>
 8007742:	230c      	movs	r3, #12
 8007744:	603b      	str	r3, [r7, #0]
 8007746:	4638      	mov	r0, r7
 8007748:	f000 f80e 	bl	8007768 <__malloc_unlock>
 800774c:	e797      	b.n	800767e <_malloc_r+0x22>
 800774e:	6025      	str	r5, [r4, #0]
 8007750:	e7dc      	b.n	800770c <_malloc_r+0xb0>
 8007752:	605b      	str	r3, [r3, #4]
 8007754:	deff      	udf	#255	; 0xff
 8007756:	bf00      	nop
 8007758:	20000694 	.word	0x20000694

0800775c <__malloc_lock>:
 800775c:	4801      	ldr	r0, [pc, #4]	; (8007764 <__malloc_lock+0x8>)
 800775e:	f7ff b88a 	b.w	8006876 <__retarget_lock_acquire_recursive>
 8007762:	bf00      	nop
 8007764:	20000690 	.word	0x20000690

08007768 <__malloc_unlock>:
 8007768:	4801      	ldr	r0, [pc, #4]	; (8007770 <__malloc_unlock+0x8>)
 800776a:	f7ff b885 	b.w	8006878 <__retarget_lock_release_recursive>
 800776e:	bf00      	nop
 8007770:	20000690 	.word	0x20000690

08007774 <_Balloc>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	69c6      	ldr	r6, [r0, #28]
 8007778:	4604      	mov	r4, r0
 800777a:	460d      	mov	r5, r1
 800777c:	b976      	cbnz	r6, 800779c <_Balloc+0x28>
 800777e:	2010      	movs	r0, #16
 8007780:	f7ff ff44 	bl	800760c <malloc>
 8007784:	4602      	mov	r2, r0
 8007786:	61e0      	str	r0, [r4, #28]
 8007788:	b920      	cbnz	r0, 8007794 <_Balloc+0x20>
 800778a:	4b18      	ldr	r3, [pc, #96]	; (80077ec <_Balloc+0x78>)
 800778c:	4818      	ldr	r0, [pc, #96]	; (80077f0 <_Balloc+0x7c>)
 800778e:	216b      	movs	r1, #107	; 0x6b
 8007790:	f000 fe12 	bl	80083b8 <__assert_func>
 8007794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007798:	6006      	str	r6, [r0, #0]
 800779a:	60c6      	str	r6, [r0, #12]
 800779c:	69e6      	ldr	r6, [r4, #28]
 800779e:	68f3      	ldr	r3, [r6, #12]
 80077a0:	b183      	cbz	r3, 80077c4 <_Balloc+0x50>
 80077a2:	69e3      	ldr	r3, [r4, #28]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077aa:	b9b8      	cbnz	r0, 80077dc <_Balloc+0x68>
 80077ac:	2101      	movs	r1, #1
 80077ae:	fa01 f605 	lsl.w	r6, r1, r5
 80077b2:	1d72      	adds	r2, r6, #5
 80077b4:	0092      	lsls	r2, r2, #2
 80077b6:	4620      	mov	r0, r4
 80077b8:	f000 fe1c 	bl	80083f4 <_calloc_r>
 80077bc:	b160      	cbz	r0, 80077d8 <_Balloc+0x64>
 80077be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077c2:	e00e      	b.n	80077e2 <_Balloc+0x6e>
 80077c4:	2221      	movs	r2, #33	; 0x21
 80077c6:	2104      	movs	r1, #4
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 fe13 	bl	80083f4 <_calloc_r>
 80077ce:	69e3      	ldr	r3, [r4, #28]
 80077d0:	60f0      	str	r0, [r6, #12]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e4      	bne.n	80077a2 <_Balloc+0x2e>
 80077d8:	2000      	movs	r0, #0
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	6802      	ldr	r2, [r0, #0]
 80077de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077e2:	2300      	movs	r3, #0
 80077e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077e8:	e7f7      	b.n	80077da <_Balloc+0x66>
 80077ea:	bf00      	nop
 80077ec:	08009859 	.word	0x08009859
 80077f0:	080098d9 	.word	0x080098d9

080077f4 <_Bfree>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	69c6      	ldr	r6, [r0, #28]
 80077f8:	4605      	mov	r5, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	b976      	cbnz	r6, 800781c <_Bfree+0x28>
 80077fe:	2010      	movs	r0, #16
 8007800:	f7ff ff04 	bl	800760c <malloc>
 8007804:	4602      	mov	r2, r0
 8007806:	61e8      	str	r0, [r5, #28]
 8007808:	b920      	cbnz	r0, 8007814 <_Bfree+0x20>
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <_Bfree+0x3c>)
 800780c:	4809      	ldr	r0, [pc, #36]	; (8007834 <_Bfree+0x40>)
 800780e:	218f      	movs	r1, #143	; 0x8f
 8007810:	f000 fdd2 	bl	80083b8 <__assert_func>
 8007814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007818:	6006      	str	r6, [r0, #0]
 800781a:	60c6      	str	r6, [r0, #12]
 800781c:	b13c      	cbz	r4, 800782e <_Bfree+0x3a>
 800781e:	69eb      	ldr	r3, [r5, #28]
 8007820:	6862      	ldr	r2, [r4, #4]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007828:	6021      	str	r1, [r4, #0]
 800782a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	08009859 	.word	0x08009859
 8007834:	080098d9 	.word	0x080098d9

08007838 <__multadd>:
 8007838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800783c:	690d      	ldr	r5, [r1, #16]
 800783e:	4607      	mov	r7, r0
 8007840:	460c      	mov	r4, r1
 8007842:	461e      	mov	r6, r3
 8007844:	f101 0c14 	add.w	ip, r1, #20
 8007848:	2000      	movs	r0, #0
 800784a:	f8dc 3000 	ldr.w	r3, [ip]
 800784e:	b299      	uxth	r1, r3
 8007850:	fb02 6101 	mla	r1, r2, r1, r6
 8007854:	0c1e      	lsrs	r6, r3, #16
 8007856:	0c0b      	lsrs	r3, r1, #16
 8007858:	fb02 3306 	mla	r3, r2, r6, r3
 800785c:	b289      	uxth	r1, r1
 800785e:	3001      	adds	r0, #1
 8007860:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007864:	4285      	cmp	r5, r0
 8007866:	f84c 1b04 	str.w	r1, [ip], #4
 800786a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800786e:	dcec      	bgt.n	800784a <__multadd+0x12>
 8007870:	b30e      	cbz	r6, 80078b6 <__multadd+0x7e>
 8007872:	68a3      	ldr	r3, [r4, #8]
 8007874:	42ab      	cmp	r3, r5
 8007876:	dc19      	bgt.n	80078ac <__multadd+0x74>
 8007878:	6861      	ldr	r1, [r4, #4]
 800787a:	4638      	mov	r0, r7
 800787c:	3101      	adds	r1, #1
 800787e:	f7ff ff79 	bl	8007774 <_Balloc>
 8007882:	4680      	mov	r8, r0
 8007884:	b928      	cbnz	r0, 8007892 <__multadd+0x5a>
 8007886:	4602      	mov	r2, r0
 8007888:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <__multadd+0x84>)
 800788a:	480d      	ldr	r0, [pc, #52]	; (80078c0 <__multadd+0x88>)
 800788c:	21ba      	movs	r1, #186	; 0xba
 800788e:	f000 fd93 	bl	80083b8 <__assert_func>
 8007892:	6922      	ldr	r2, [r4, #16]
 8007894:	3202      	adds	r2, #2
 8007896:	f104 010c 	add.w	r1, r4, #12
 800789a:	0092      	lsls	r2, r2, #2
 800789c:	300c      	adds	r0, #12
 800789e:	f000 fd7d 	bl	800839c <memcpy>
 80078a2:	4621      	mov	r1, r4
 80078a4:	4638      	mov	r0, r7
 80078a6:	f7ff ffa5 	bl	80077f4 <_Bfree>
 80078aa:	4644      	mov	r4, r8
 80078ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078b0:	3501      	adds	r5, #1
 80078b2:	615e      	str	r6, [r3, #20]
 80078b4:	6125      	str	r5, [r4, #16]
 80078b6:	4620      	mov	r0, r4
 80078b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078bc:	080098c8 	.word	0x080098c8
 80078c0:	080098d9 	.word	0x080098d9

080078c4 <__hi0bits>:
 80078c4:	0c03      	lsrs	r3, r0, #16
 80078c6:	041b      	lsls	r3, r3, #16
 80078c8:	b9d3      	cbnz	r3, 8007900 <__hi0bits+0x3c>
 80078ca:	0400      	lsls	r0, r0, #16
 80078cc:	2310      	movs	r3, #16
 80078ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078d2:	bf04      	itt	eq
 80078d4:	0200      	lsleq	r0, r0, #8
 80078d6:	3308      	addeq	r3, #8
 80078d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078dc:	bf04      	itt	eq
 80078de:	0100      	lsleq	r0, r0, #4
 80078e0:	3304      	addeq	r3, #4
 80078e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078e6:	bf04      	itt	eq
 80078e8:	0080      	lsleq	r0, r0, #2
 80078ea:	3302      	addeq	r3, #2
 80078ec:	2800      	cmp	r0, #0
 80078ee:	db05      	blt.n	80078fc <__hi0bits+0x38>
 80078f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078f4:	f103 0301 	add.w	r3, r3, #1
 80078f8:	bf08      	it	eq
 80078fa:	2320      	moveq	r3, #32
 80078fc:	4618      	mov	r0, r3
 80078fe:	4770      	bx	lr
 8007900:	2300      	movs	r3, #0
 8007902:	e7e4      	b.n	80078ce <__hi0bits+0xa>

08007904 <__lo0bits>:
 8007904:	6803      	ldr	r3, [r0, #0]
 8007906:	f013 0207 	ands.w	r2, r3, #7
 800790a:	d00c      	beq.n	8007926 <__lo0bits+0x22>
 800790c:	07d9      	lsls	r1, r3, #31
 800790e:	d422      	bmi.n	8007956 <__lo0bits+0x52>
 8007910:	079a      	lsls	r2, r3, #30
 8007912:	bf49      	itett	mi
 8007914:	085b      	lsrmi	r3, r3, #1
 8007916:	089b      	lsrpl	r3, r3, #2
 8007918:	6003      	strmi	r3, [r0, #0]
 800791a:	2201      	movmi	r2, #1
 800791c:	bf5c      	itt	pl
 800791e:	6003      	strpl	r3, [r0, #0]
 8007920:	2202      	movpl	r2, #2
 8007922:	4610      	mov	r0, r2
 8007924:	4770      	bx	lr
 8007926:	b299      	uxth	r1, r3
 8007928:	b909      	cbnz	r1, 800792e <__lo0bits+0x2a>
 800792a:	0c1b      	lsrs	r3, r3, #16
 800792c:	2210      	movs	r2, #16
 800792e:	b2d9      	uxtb	r1, r3
 8007930:	b909      	cbnz	r1, 8007936 <__lo0bits+0x32>
 8007932:	3208      	adds	r2, #8
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	0719      	lsls	r1, r3, #28
 8007938:	bf04      	itt	eq
 800793a:	091b      	lsreq	r3, r3, #4
 800793c:	3204      	addeq	r2, #4
 800793e:	0799      	lsls	r1, r3, #30
 8007940:	bf04      	itt	eq
 8007942:	089b      	lsreq	r3, r3, #2
 8007944:	3202      	addeq	r2, #2
 8007946:	07d9      	lsls	r1, r3, #31
 8007948:	d403      	bmi.n	8007952 <__lo0bits+0x4e>
 800794a:	085b      	lsrs	r3, r3, #1
 800794c:	f102 0201 	add.w	r2, r2, #1
 8007950:	d003      	beq.n	800795a <__lo0bits+0x56>
 8007952:	6003      	str	r3, [r0, #0]
 8007954:	e7e5      	b.n	8007922 <__lo0bits+0x1e>
 8007956:	2200      	movs	r2, #0
 8007958:	e7e3      	b.n	8007922 <__lo0bits+0x1e>
 800795a:	2220      	movs	r2, #32
 800795c:	e7e1      	b.n	8007922 <__lo0bits+0x1e>
	...

08007960 <__i2b>:
 8007960:	b510      	push	{r4, lr}
 8007962:	460c      	mov	r4, r1
 8007964:	2101      	movs	r1, #1
 8007966:	f7ff ff05 	bl	8007774 <_Balloc>
 800796a:	4602      	mov	r2, r0
 800796c:	b928      	cbnz	r0, 800797a <__i2b+0x1a>
 800796e:	4b05      	ldr	r3, [pc, #20]	; (8007984 <__i2b+0x24>)
 8007970:	4805      	ldr	r0, [pc, #20]	; (8007988 <__i2b+0x28>)
 8007972:	f240 1145 	movw	r1, #325	; 0x145
 8007976:	f000 fd1f 	bl	80083b8 <__assert_func>
 800797a:	2301      	movs	r3, #1
 800797c:	6144      	str	r4, [r0, #20]
 800797e:	6103      	str	r3, [r0, #16]
 8007980:	bd10      	pop	{r4, pc}
 8007982:	bf00      	nop
 8007984:	080098c8 	.word	0x080098c8
 8007988:	080098d9 	.word	0x080098d9

0800798c <__multiply>:
 800798c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007990:	4691      	mov	r9, r2
 8007992:	690a      	ldr	r2, [r1, #16]
 8007994:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007998:	429a      	cmp	r2, r3
 800799a:	bfb8      	it	lt
 800799c:	460b      	movlt	r3, r1
 800799e:	460c      	mov	r4, r1
 80079a0:	bfbc      	itt	lt
 80079a2:	464c      	movlt	r4, r9
 80079a4:	4699      	movlt	r9, r3
 80079a6:	6927      	ldr	r7, [r4, #16]
 80079a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079ac:	68a3      	ldr	r3, [r4, #8]
 80079ae:	6861      	ldr	r1, [r4, #4]
 80079b0:	eb07 060a 	add.w	r6, r7, sl
 80079b4:	42b3      	cmp	r3, r6
 80079b6:	b085      	sub	sp, #20
 80079b8:	bfb8      	it	lt
 80079ba:	3101      	addlt	r1, #1
 80079bc:	f7ff feda 	bl	8007774 <_Balloc>
 80079c0:	b930      	cbnz	r0, 80079d0 <__multiply+0x44>
 80079c2:	4602      	mov	r2, r0
 80079c4:	4b44      	ldr	r3, [pc, #272]	; (8007ad8 <__multiply+0x14c>)
 80079c6:	4845      	ldr	r0, [pc, #276]	; (8007adc <__multiply+0x150>)
 80079c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80079cc:	f000 fcf4 	bl	80083b8 <__assert_func>
 80079d0:	f100 0514 	add.w	r5, r0, #20
 80079d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079d8:	462b      	mov	r3, r5
 80079da:	2200      	movs	r2, #0
 80079dc:	4543      	cmp	r3, r8
 80079de:	d321      	bcc.n	8007a24 <__multiply+0x98>
 80079e0:	f104 0314 	add.w	r3, r4, #20
 80079e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079e8:	f109 0314 	add.w	r3, r9, #20
 80079ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079f0:	9202      	str	r2, [sp, #8]
 80079f2:	1b3a      	subs	r2, r7, r4
 80079f4:	3a15      	subs	r2, #21
 80079f6:	f022 0203 	bic.w	r2, r2, #3
 80079fa:	3204      	adds	r2, #4
 80079fc:	f104 0115 	add.w	r1, r4, #21
 8007a00:	428f      	cmp	r7, r1
 8007a02:	bf38      	it	cc
 8007a04:	2204      	movcc	r2, #4
 8007a06:	9201      	str	r2, [sp, #4]
 8007a08:	9a02      	ldr	r2, [sp, #8]
 8007a0a:	9303      	str	r3, [sp, #12]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d80c      	bhi.n	8007a2a <__multiply+0x9e>
 8007a10:	2e00      	cmp	r6, #0
 8007a12:	dd03      	ble.n	8007a1c <__multiply+0x90>
 8007a14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d05b      	beq.n	8007ad4 <__multiply+0x148>
 8007a1c:	6106      	str	r6, [r0, #16]
 8007a1e:	b005      	add	sp, #20
 8007a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a24:	f843 2b04 	str.w	r2, [r3], #4
 8007a28:	e7d8      	b.n	80079dc <__multiply+0x50>
 8007a2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a2e:	f1ba 0f00 	cmp.w	sl, #0
 8007a32:	d024      	beq.n	8007a7e <__multiply+0xf2>
 8007a34:	f104 0e14 	add.w	lr, r4, #20
 8007a38:	46a9      	mov	r9, r5
 8007a3a:	f04f 0c00 	mov.w	ip, #0
 8007a3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a42:	f8d9 1000 	ldr.w	r1, [r9]
 8007a46:	fa1f fb82 	uxth.w	fp, r2
 8007a4a:	b289      	uxth	r1, r1
 8007a4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a54:	f8d9 2000 	ldr.w	r2, [r9]
 8007a58:	4461      	add	r1, ip
 8007a5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a66:	b289      	uxth	r1, r1
 8007a68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a6c:	4577      	cmp	r7, lr
 8007a6e:	f849 1b04 	str.w	r1, [r9], #4
 8007a72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a76:	d8e2      	bhi.n	8007a3e <__multiply+0xb2>
 8007a78:	9a01      	ldr	r2, [sp, #4]
 8007a7a:	f845 c002 	str.w	ip, [r5, r2]
 8007a7e:	9a03      	ldr	r2, [sp, #12]
 8007a80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a84:	3304      	adds	r3, #4
 8007a86:	f1b9 0f00 	cmp.w	r9, #0
 8007a8a:	d021      	beq.n	8007ad0 <__multiply+0x144>
 8007a8c:	6829      	ldr	r1, [r5, #0]
 8007a8e:	f104 0c14 	add.w	ip, r4, #20
 8007a92:	46ae      	mov	lr, r5
 8007a94:	f04f 0a00 	mov.w	sl, #0
 8007a98:	f8bc b000 	ldrh.w	fp, [ip]
 8007a9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007aa0:	fb09 220b 	mla	r2, r9, fp, r2
 8007aa4:	4452      	add	r2, sl
 8007aa6:	b289      	uxth	r1, r1
 8007aa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007aac:	f84e 1b04 	str.w	r1, [lr], #4
 8007ab0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ab4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ab8:	f8be 1000 	ldrh.w	r1, [lr]
 8007abc:	fb09 110a 	mla	r1, r9, sl, r1
 8007ac0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007ac4:	4567      	cmp	r7, ip
 8007ac6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007aca:	d8e5      	bhi.n	8007a98 <__multiply+0x10c>
 8007acc:	9a01      	ldr	r2, [sp, #4]
 8007ace:	50a9      	str	r1, [r5, r2]
 8007ad0:	3504      	adds	r5, #4
 8007ad2:	e799      	b.n	8007a08 <__multiply+0x7c>
 8007ad4:	3e01      	subs	r6, #1
 8007ad6:	e79b      	b.n	8007a10 <__multiply+0x84>
 8007ad8:	080098c8 	.word	0x080098c8
 8007adc:	080098d9 	.word	0x080098d9

08007ae0 <__pow5mult>:
 8007ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae4:	4615      	mov	r5, r2
 8007ae6:	f012 0203 	ands.w	r2, r2, #3
 8007aea:	4606      	mov	r6, r0
 8007aec:	460f      	mov	r7, r1
 8007aee:	d007      	beq.n	8007b00 <__pow5mult+0x20>
 8007af0:	4c25      	ldr	r4, [pc, #148]	; (8007b88 <__pow5mult+0xa8>)
 8007af2:	3a01      	subs	r2, #1
 8007af4:	2300      	movs	r3, #0
 8007af6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007afa:	f7ff fe9d 	bl	8007838 <__multadd>
 8007afe:	4607      	mov	r7, r0
 8007b00:	10ad      	asrs	r5, r5, #2
 8007b02:	d03d      	beq.n	8007b80 <__pow5mult+0xa0>
 8007b04:	69f4      	ldr	r4, [r6, #28]
 8007b06:	b97c      	cbnz	r4, 8007b28 <__pow5mult+0x48>
 8007b08:	2010      	movs	r0, #16
 8007b0a:	f7ff fd7f 	bl	800760c <malloc>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	61f0      	str	r0, [r6, #28]
 8007b12:	b928      	cbnz	r0, 8007b20 <__pow5mult+0x40>
 8007b14:	4b1d      	ldr	r3, [pc, #116]	; (8007b8c <__pow5mult+0xac>)
 8007b16:	481e      	ldr	r0, [pc, #120]	; (8007b90 <__pow5mult+0xb0>)
 8007b18:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007b1c:	f000 fc4c 	bl	80083b8 <__assert_func>
 8007b20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b24:	6004      	str	r4, [r0, #0]
 8007b26:	60c4      	str	r4, [r0, #12]
 8007b28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b30:	b94c      	cbnz	r4, 8007b46 <__pow5mult+0x66>
 8007b32:	f240 2171 	movw	r1, #625	; 0x271
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7ff ff12 	bl	8007960 <__i2b>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b42:	4604      	mov	r4, r0
 8007b44:	6003      	str	r3, [r0, #0]
 8007b46:	f04f 0900 	mov.w	r9, #0
 8007b4a:	07eb      	lsls	r3, r5, #31
 8007b4c:	d50a      	bpl.n	8007b64 <__pow5mult+0x84>
 8007b4e:	4639      	mov	r1, r7
 8007b50:	4622      	mov	r2, r4
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ff1a 	bl	800798c <__multiply>
 8007b58:	4639      	mov	r1, r7
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f7ff fe49 	bl	80077f4 <_Bfree>
 8007b62:	4647      	mov	r7, r8
 8007b64:	106d      	asrs	r5, r5, #1
 8007b66:	d00b      	beq.n	8007b80 <__pow5mult+0xa0>
 8007b68:	6820      	ldr	r0, [r4, #0]
 8007b6a:	b938      	cbnz	r0, 8007b7c <__pow5mult+0x9c>
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4630      	mov	r0, r6
 8007b72:	f7ff ff0b 	bl	800798c <__multiply>
 8007b76:	6020      	str	r0, [r4, #0]
 8007b78:	f8c0 9000 	str.w	r9, [r0]
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	e7e4      	b.n	8007b4a <__pow5mult+0x6a>
 8007b80:	4638      	mov	r0, r7
 8007b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b86:	bf00      	nop
 8007b88:	08009a28 	.word	0x08009a28
 8007b8c:	08009859 	.word	0x08009859
 8007b90:	080098d9 	.word	0x080098d9

08007b94 <__lshift>:
 8007b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b98:	460c      	mov	r4, r1
 8007b9a:	6849      	ldr	r1, [r1, #4]
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ba2:	68a3      	ldr	r3, [r4, #8]
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	4691      	mov	r9, r2
 8007ba8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bac:	f108 0601 	add.w	r6, r8, #1
 8007bb0:	42b3      	cmp	r3, r6
 8007bb2:	db0b      	blt.n	8007bcc <__lshift+0x38>
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f7ff fddd 	bl	8007774 <_Balloc>
 8007bba:	4605      	mov	r5, r0
 8007bbc:	b948      	cbnz	r0, 8007bd2 <__lshift+0x3e>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <__lshift+0xd0>)
 8007bc2:	4829      	ldr	r0, [pc, #164]	; (8007c68 <__lshift+0xd4>)
 8007bc4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007bc8:	f000 fbf6 	bl	80083b8 <__assert_func>
 8007bcc:	3101      	adds	r1, #1
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	e7ee      	b.n	8007bb0 <__lshift+0x1c>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f100 0114 	add.w	r1, r0, #20
 8007bd8:	f100 0210 	add.w	r2, r0, #16
 8007bdc:	4618      	mov	r0, r3
 8007bde:	4553      	cmp	r3, sl
 8007be0:	db33      	blt.n	8007c4a <__lshift+0xb6>
 8007be2:	6920      	ldr	r0, [r4, #16]
 8007be4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007be8:	f104 0314 	add.w	r3, r4, #20
 8007bec:	f019 091f 	ands.w	r9, r9, #31
 8007bf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bf8:	d02b      	beq.n	8007c52 <__lshift+0xbe>
 8007bfa:	f1c9 0e20 	rsb	lr, r9, #32
 8007bfe:	468a      	mov	sl, r1
 8007c00:	2200      	movs	r2, #0
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	fa00 f009 	lsl.w	r0, r0, r9
 8007c08:	4310      	orrs	r0, r2
 8007c0a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c12:	459c      	cmp	ip, r3
 8007c14:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c18:	d8f3      	bhi.n	8007c02 <__lshift+0x6e>
 8007c1a:	ebac 0304 	sub.w	r3, ip, r4
 8007c1e:	3b15      	subs	r3, #21
 8007c20:	f023 0303 	bic.w	r3, r3, #3
 8007c24:	3304      	adds	r3, #4
 8007c26:	f104 0015 	add.w	r0, r4, #21
 8007c2a:	4584      	cmp	ip, r0
 8007c2c:	bf38      	it	cc
 8007c2e:	2304      	movcc	r3, #4
 8007c30:	50ca      	str	r2, [r1, r3]
 8007c32:	b10a      	cbz	r2, 8007c38 <__lshift+0xa4>
 8007c34:	f108 0602 	add.w	r6, r8, #2
 8007c38:	3e01      	subs	r6, #1
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	612e      	str	r6, [r5, #16]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	f7ff fdd8 	bl	80077f4 <_Bfree>
 8007c44:	4628      	mov	r0, r5
 8007c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c4e:	3301      	adds	r3, #1
 8007c50:	e7c5      	b.n	8007bde <__lshift+0x4a>
 8007c52:	3904      	subs	r1, #4
 8007c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c58:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c5c:	459c      	cmp	ip, r3
 8007c5e:	d8f9      	bhi.n	8007c54 <__lshift+0xc0>
 8007c60:	e7ea      	b.n	8007c38 <__lshift+0xa4>
 8007c62:	bf00      	nop
 8007c64:	080098c8 	.word	0x080098c8
 8007c68:	080098d9 	.word	0x080098d9

08007c6c <__mcmp>:
 8007c6c:	b530      	push	{r4, r5, lr}
 8007c6e:	6902      	ldr	r2, [r0, #16]
 8007c70:	690c      	ldr	r4, [r1, #16]
 8007c72:	1b12      	subs	r2, r2, r4
 8007c74:	d10e      	bne.n	8007c94 <__mcmp+0x28>
 8007c76:	f100 0314 	add.w	r3, r0, #20
 8007c7a:	3114      	adds	r1, #20
 8007c7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c8c:	42a5      	cmp	r5, r4
 8007c8e:	d003      	beq.n	8007c98 <__mcmp+0x2c>
 8007c90:	d305      	bcc.n	8007c9e <__mcmp+0x32>
 8007c92:	2201      	movs	r2, #1
 8007c94:	4610      	mov	r0, r2
 8007c96:	bd30      	pop	{r4, r5, pc}
 8007c98:	4283      	cmp	r3, r0
 8007c9a:	d3f3      	bcc.n	8007c84 <__mcmp+0x18>
 8007c9c:	e7fa      	b.n	8007c94 <__mcmp+0x28>
 8007c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca2:	e7f7      	b.n	8007c94 <__mcmp+0x28>

08007ca4 <__mdiff>:
 8007ca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	460c      	mov	r4, r1
 8007caa:	4606      	mov	r6, r0
 8007cac:	4611      	mov	r1, r2
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4690      	mov	r8, r2
 8007cb2:	f7ff ffdb 	bl	8007c6c <__mcmp>
 8007cb6:	1e05      	subs	r5, r0, #0
 8007cb8:	d110      	bne.n	8007cdc <__mdiff+0x38>
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff fd59 	bl	8007774 <_Balloc>
 8007cc2:	b930      	cbnz	r0, 8007cd2 <__mdiff+0x2e>
 8007cc4:	4b3a      	ldr	r3, [pc, #232]	; (8007db0 <__mdiff+0x10c>)
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	f240 2137 	movw	r1, #567	; 0x237
 8007ccc:	4839      	ldr	r0, [pc, #228]	; (8007db4 <__mdiff+0x110>)
 8007cce:	f000 fb73 	bl	80083b8 <__assert_func>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cdc:	bfa4      	itt	ge
 8007cde:	4643      	movge	r3, r8
 8007ce0:	46a0      	movge	r8, r4
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ce8:	bfa6      	itte	ge
 8007cea:	461c      	movge	r4, r3
 8007cec:	2500      	movge	r5, #0
 8007cee:	2501      	movlt	r5, #1
 8007cf0:	f7ff fd40 	bl	8007774 <_Balloc>
 8007cf4:	b920      	cbnz	r0, 8007d00 <__mdiff+0x5c>
 8007cf6:	4b2e      	ldr	r3, [pc, #184]	; (8007db0 <__mdiff+0x10c>)
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	f240 2145 	movw	r1, #581	; 0x245
 8007cfe:	e7e5      	b.n	8007ccc <__mdiff+0x28>
 8007d00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d04:	6926      	ldr	r6, [r4, #16]
 8007d06:	60c5      	str	r5, [r0, #12]
 8007d08:	f104 0914 	add.w	r9, r4, #20
 8007d0c:	f108 0514 	add.w	r5, r8, #20
 8007d10:	f100 0e14 	add.w	lr, r0, #20
 8007d14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d1c:	f108 0210 	add.w	r2, r8, #16
 8007d20:	46f2      	mov	sl, lr
 8007d22:	2100      	movs	r1, #0
 8007d24:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d2c:	fa11 f88b 	uxtah	r8, r1, fp
 8007d30:	b299      	uxth	r1, r3
 8007d32:	0c1b      	lsrs	r3, r3, #16
 8007d34:	eba8 0801 	sub.w	r8, r8, r1
 8007d38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d3c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d40:	fa1f f888 	uxth.w	r8, r8
 8007d44:	1419      	asrs	r1, r3, #16
 8007d46:	454e      	cmp	r6, r9
 8007d48:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d4c:	f84a 3b04 	str.w	r3, [sl], #4
 8007d50:	d8e8      	bhi.n	8007d24 <__mdiff+0x80>
 8007d52:	1b33      	subs	r3, r6, r4
 8007d54:	3b15      	subs	r3, #21
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	3415      	adds	r4, #21
 8007d5e:	42a6      	cmp	r6, r4
 8007d60:	bf38      	it	cc
 8007d62:	2304      	movcc	r3, #4
 8007d64:	441d      	add	r5, r3
 8007d66:	4473      	add	r3, lr
 8007d68:	469e      	mov	lr, r3
 8007d6a:	462e      	mov	r6, r5
 8007d6c:	4566      	cmp	r6, ip
 8007d6e:	d30e      	bcc.n	8007d8e <__mdiff+0xea>
 8007d70:	f10c 0203 	add.w	r2, ip, #3
 8007d74:	1b52      	subs	r2, r2, r5
 8007d76:	f022 0203 	bic.w	r2, r2, #3
 8007d7a:	3d03      	subs	r5, #3
 8007d7c:	45ac      	cmp	ip, r5
 8007d7e:	bf38      	it	cc
 8007d80:	2200      	movcc	r2, #0
 8007d82:	4413      	add	r3, r2
 8007d84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d88:	b17a      	cbz	r2, 8007daa <__mdiff+0x106>
 8007d8a:	6107      	str	r7, [r0, #16]
 8007d8c:	e7a4      	b.n	8007cd8 <__mdiff+0x34>
 8007d8e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d92:	fa11 f288 	uxtah	r2, r1, r8
 8007d96:	1414      	asrs	r4, r2, #16
 8007d98:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d9c:	b292      	uxth	r2, r2
 8007d9e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007da2:	f84e 2b04 	str.w	r2, [lr], #4
 8007da6:	1421      	asrs	r1, r4, #16
 8007da8:	e7e0      	b.n	8007d6c <__mdiff+0xc8>
 8007daa:	3f01      	subs	r7, #1
 8007dac:	e7ea      	b.n	8007d84 <__mdiff+0xe0>
 8007dae:	bf00      	nop
 8007db0:	080098c8 	.word	0x080098c8
 8007db4:	080098d9 	.word	0x080098d9

08007db8 <__d2b>:
 8007db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	460f      	mov	r7, r1
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	ec59 8b10 	vmov	r8, r9, d0
 8007dc4:	4616      	mov	r6, r2
 8007dc6:	f7ff fcd5 	bl	8007774 <_Balloc>
 8007dca:	4604      	mov	r4, r0
 8007dcc:	b930      	cbnz	r0, 8007ddc <__d2b+0x24>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	4b24      	ldr	r3, [pc, #144]	; (8007e64 <__d2b+0xac>)
 8007dd2:	4825      	ldr	r0, [pc, #148]	; (8007e68 <__d2b+0xb0>)
 8007dd4:	f240 310f 	movw	r1, #783	; 0x30f
 8007dd8:	f000 faee 	bl	80083b8 <__assert_func>
 8007ddc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007de4:	bb2d      	cbnz	r5, 8007e32 <__d2b+0x7a>
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	f1b8 0300 	subs.w	r3, r8, #0
 8007dec:	d026      	beq.n	8007e3c <__d2b+0x84>
 8007dee:	4668      	mov	r0, sp
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	f7ff fd87 	bl	8007904 <__lo0bits>
 8007df6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007dfa:	b1e8      	cbz	r0, 8007e38 <__d2b+0x80>
 8007dfc:	f1c0 0320 	rsb	r3, r0, #32
 8007e00:	fa02 f303 	lsl.w	r3, r2, r3
 8007e04:	430b      	orrs	r3, r1
 8007e06:	40c2      	lsrs	r2, r0
 8007e08:	6163      	str	r3, [r4, #20]
 8007e0a:	9201      	str	r2, [sp, #4]
 8007e0c:	9b01      	ldr	r3, [sp, #4]
 8007e0e:	61a3      	str	r3, [r4, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bf14      	ite	ne
 8007e14:	2202      	movne	r2, #2
 8007e16:	2201      	moveq	r2, #1
 8007e18:	6122      	str	r2, [r4, #16]
 8007e1a:	b1bd      	cbz	r5, 8007e4c <__d2b+0x94>
 8007e1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e20:	4405      	add	r5, r0
 8007e22:	603d      	str	r5, [r7, #0]
 8007e24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e28:	6030      	str	r0, [r6, #0]
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	b003      	add	sp, #12
 8007e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e36:	e7d6      	b.n	8007de6 <__d2b+0x2e>
 8007e38:	6161      	str	r1, [r4, #20]
 8007e3a:	e7e7      	b.n	8007e0c <__d2b+0x54>
 8007e3c:	a801      	add	r0, sp, #4
 8007e3e:	f7ff fd61 	bl	8007904 <__lo0bits>
 8007e42:	9b01      	ldr	r3, [sp, #4]
 8007e44:	6163      	str	r3, [r4, #20]
 8007e46:	3020      	adds	r0, #32
 8007e48:	2201      	movs	r2, #1
 8007e4a:	e7e5      	b.n	8007e18 <__d2b+0x60>
 8007e4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e54:	6038      	str	r0, [r7, #0]
 8007e56:	6918      	ldr	r0, [r3, #16]
 8007e58:	f7ff fd34 	bl	80078c4 <__hi0bits>
 8007e5c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e60:	e7e2      	b.n	8007e28 <__d2b+0x70>
 8007e62:	bf00      	nop
 8007e64:	080098c8 	.word	0x080098c8
 8007e68:	080098d9 	.word	0x080098d9

08007e6c <__sfputc_r>:
 8007e6c:	6893      	ldr	r3, [r2, #8]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	b410      	push	{r4}
 8007e74:	6093      	str	r3, [r2, #8]
 8007e76:	da08      	bge.n	8007e8a <__sfputc_r+0x1e>
 8007e78:	6994      	ldr	r4, [r2, #24]
 8007e7a:	42a3      	cmp	r3, r4
 8007e7c:	db01      	blt.n	8007e82 <__sfputc_r+0x16>
 8007e7e:	290a      	cmp	r1, #10
 8007e80:	d103      	bne.n	8007e8a <__sfputc_r+0x1e>
 8007e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e86:	f000 b9e3 	b.w	8008250 <__swbuf_r>
 8007e8a:	6813      	ldr	r3, [r2, #0]
 8007e8c:	1c58      	adds	r0, r3, #1
 8007e8e:	6010      	str	r0, [r2, #0]
 8007e90:	7019      	strb	r1, [r3, #0]
 8007e92:	4608      	mov	r0, r1
 8007e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <__sfputs_r>:
 8007e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	460f      	mov	r7, r1
 8007ea0:	4614      	mov	r4, r2
 8007ea2:	18d5      	adds	r5, r2, r3
 8007ea4:	42ac      	cmp	r4, r5
 8007ea6:	d101      	bne.n	8007eac <__sfputs_r+0x12>
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	e007      	b.n	8007ebc <__sfputs_r+0x22>
 8007eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb0:	463a      	mov	r2, r7
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff ffda 	bl	8007e6c <__sfputc_r>
 8007eb8:	1c43      	adds	r3, r0, #1
 8007eba:	d1f3      	bne.n	8007ea4 <__sfputs_r+0xa>
 8007ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ec0 <_vfiprintf_r>:
 8007ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	b09d      	sub	sp, #116	; 0x74
 8007ec8:	4614      	mov	r4, r2
 8007eca:	4698      	mov	r8, r3
 8007ecc:	4606      	mov	r6, r0
 8007ece:	b118      	cbz	r0, 8007ed8 <_vfiprintf_r+0x18>
 8007ed0:	6a03      	ldr	r3, [r0, #32]
 8007ed2:	b90b      	cbnz	r3, 8007ed8 <_vfiprintf_r+0x18>
 8007ed4:	f7fe fbc6 	bl	8006664 <__sinit>
 8007ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eda:	07d9      	lsls	r1, r3, #31
 8007edc:	d405      	bmi.n	8007eea <_vfiprintf_r+0x2a>
 8007ede:	89ab      	ldrh	r3, [r5, #12]
 8007ee0:	059a      	lsls	r2, r3, #22
 8007ee2:	d402      	bmi.n	8007eea <_vfiprintf_r+0x2a>
 8007ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ee6:	f7fe fcc6 	bl	8006876 <__retarget_lock_acquire_recursive>
 8007eea:	89ab      	ldrh	r3, [r5, #12]
 8007eec:	071b      	lsls	r3, r3, #28
 8007eee:	d501      	bpl.n	8007ef4 <_vfiprintf_r+0x34>
 8007ef0:	692b      	ldr	r3, [r5, #16]
 8007ef2:	b99b      	cbnz	r3, 8007f1c <_vfiprintf_r+0x5c>
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f000 f9e8 	bl	80082cc <__swsetup_r>
 8007efc:	b170      	cbz	r0, 8007f1c <_vfiprintf_r+0x5c>
 8007efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f00:	07dc      	lsls	r4, r3, #31
 8007f02:	d504      	bpl.n	8007f0e <_vfiprintf_r+0x4e>
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295
 8007f08:	b01d      	add	sp, #116	; 0x74
 8007f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	0598      	lsls	r0, r3, #22
 8007f12:	d4f7      	bmi.n	8007f04 <_vfiprintf_r+0x44>
 8007f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f16:	f7fe fcaf 	bl	8006878 <__retarget_lock_release_recursive>
 8007f1a:	e7f3      	b.n	8007f04 <_vfiprintf_r+0x44>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f20:	2320      	movs	r3, #32
 8007f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f2a:	2330      	movs	r3, #48	; 0x30
 8007f2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80080e0 <_vfiprintf_r+0x220>
 8007f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f34:	f04f 0901 	mov.w	r9, #1
 8007f38:	4623      	mov	r3, r4
 8007f3a:	469a      	mov	sl, r3
 8007f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f40:	b10a      	cbz	r2, 8007f46 <_vfiprintf_r+0x86>
 8007f42:	2a25      	cmp	r2, #37	; 0x25
 8007f44:	d1f9      	bne.n	8007f3a <_vfiprintf_r+0x7a>
 8007f46:	ebba 0b04 	subs.w	fp, sl, r4
 8007f4a:	d00b      	beq.n	8007f64 <_vfiprintf_r+0xa4>
 8007f4c:	465b      	mov	r3, fp
 8007f4e:	4622      	mov	r2, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff ffa1 	bl	8007e9a <__sfputs_r>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f000 80a9 	beq.w	80080b0 <_vfiprintf_r+0x1f0>
 8007f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f60:	445a      	add	r2, fp
 8007f62:	9209      	str	r2, [sp, #36]	; 0x24
 8007f64:	f89a 3000 	ldrb.w	r3, [sl]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 80a1 	beq.w	80080b0 <_vfiprintf_r+0x1f0>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f04f 32ff 	mov.w	r2, #4294967295
 8007f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f78:	f10a 0a01 	add.w	sl, sl, #1
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	9307      	str	r3, [sp, #28]
 8007f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f84:	931a      	str	r3, [sp, #104]	; 0x68
 8007f86:	4654      	mov	r4, sl
 8007f88:	2205      	movs	r2, #5
 8007f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8e:	4854      	ldr	r0, [pc, #336]	; (80080e0 <_vfiprintf_r+0x220>)
 8007f90:	f7f8 f926 	bl	80001e0 <memchr>
 8007f94:	9a04      	ldr	r2, [sp, #16]
 8007f96:	b9d8      	cbnz	r0, 8007fd0 <_vfiprintf_r+0x110>
 8007f98:	06d1      	lsls	r1, r2, #27
 8007f9a:	bf44      	itt	mi
 8007f9c:	2320      	movmi	r3, #32
 8007f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fa2:	0713      	lsls	r3, r2, #28
 8007fa4:	bf44      	itt	mi
 8007fa6:	232b      	movmi	r3, #43	; 0x2b
 8007fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fac:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fb2:	d015      	beq.n	8007fe0 <_vfiprintf_r+0x120>
 8007fb4:	9a07      	ldr	r2, [sp, #28]
 8007fb6:	4654      	mov	r4, sl
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f04f 0c0a 	mov.w	ip, #10
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc4:	3b30      	subs	r3, #48	; 0x30
 8007fc6:	2b09      	cmp	r3, #9
 8007fc8:	d94d      	bls.n	8008066 <_vfiprintf_r+0x1a6>
 8007fca:	b1b0      	cbz	r0, 8007ffa <_vfiprintf_r+0x13a>
 8007fcc:	9207      	str	r2, [sp, #28]
 8007fce:	e014      	b.n	8007ffa <_vfiprintf_r+0x13a>
 8007fd0:	eba0 0308 	sub.w	r3, r0, r8
 8007fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	46a2      	mov	sl, r4
 8007fde:	e7d2      	b.n	8007f86 <_vfiprintf_r+0xc6>
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	1d19      	adds	r1, r3, #4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	9103      	str	r1, [sp, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bfbb      	ittet	lt
 8007fec:	425b      	neglt	r3, r3
 8007fee:	f042 0202 	orrlt.w	r2, r2, #2
 8007ff2:	9307      	strge	r3, [sp, #28]
 8007ff4:	9307      	strlt	r3, [sp, #28]
 8007ff6:	bfb8      	it	lt
 8007ff8:	9204      	strlt	r2, [sp, #16]
 8007ffa:	7823      	ldrb	r3, [r4, #0]
 8007ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ffe:	d10c      	bne.n	800801a <_vfiprintf_r+0x15a>
 8008000:	7863      	ldrb	r3, [r4, #1]
 8008002:	2b2a      	cmp	r3, #42	; 0x2a
 8008004:	d134      	bne.n	8008070 <_vfiprintf_r+0x1b0>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	1d1a      	adds	r2, r3, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	9203      	str	r2, [sp, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfb8      	it	lt
 8008012:	f04f 33ff 	movlt.w	r3, #4294967295
 8008016:	3402      	adds	r4, #2
 8008018:	9305      	str	r3, [sp, #20]
 800801a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80080f0 <_vfiprintf_r+0x230>
 800801e:	7821      	ldrb	r1, [r4, #0]
 8008020:	2203      	movs	r2, #3
 8008022:	4650      	mov	r0, sl
 8008024:	f7f8 f8dc 	bl	80001e0 <memchr>
 8008028:	b138      	cbz	r0, 800803a <_vfiprintf_r+0x17a>
 800802a:	9b04      	ldr	r3, [sp, #16]
 800802c:	eba0 000a 	sub.w	r0, r0, sl
 8008030:	2240      	movs	r2, #64	; 0x40
 8008032:	4082      	lsls	r2, r0
 8008034:	4313      	orrs	r3, r2
 8008036:	3401      	adds	r4, #1
 8008038:	9304      	str	r3, [sp, #16]
 800803a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800803e:	4829      	ldr	r0, [pc, #164]	; (80080e4 <_vfiprintf_r+0x224>)
 8008040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008044:	2206      	movs	r2, #6
 8008046:	f7f8 f8cb 	bl	80001e0 <memchr>
 800804a:	2800      	cmp	r0, #0
 800804c:	d03f      	beq.n	80080ce <_vfiprintf_r+0x20e>
 800804e:	4b26      	ldr	r3, [pc, #152]	; (80080e8 <_vfiprintf_r+0x228>)
 8008050:	bb1b      	cbnz	r3, 800809a <_vfiprintf_r+0x1da>
 8008052:	9b03      	ldr	r3, [sp, #12]
 8008054:	3307      	adds	r3, #7
 8008056:	f023 0307 	bic.w	r3, r3, #7
 800805a:	3308      	adds	r3, #8
 800805c:	9303      	str	r3, [sp, #12]
 800805e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008060:	443b      	add	r3, r7
 8008062:	9309      	str	r3, [sp, #36]	; 0x24
 8008064:	e768      	b.n	8007f38 <_vfiprintf_r+0x78>
 8008066:	fb0c 3202 	mla	r2, ip, r2, r3
 800806a:	460c      	mov	r4, r1
 800806c:	2001      	movs	r0, #1
 800806e:	e7a6      	b.n	8007fbe <_vfiprintf_r+0xfe>
 8008070:	2300      	movs	r3, #0
 8008072:	3401      	adds	r4, #1
 8008074:	9305      	str	r3, [sp, #20]
 8008076:	4619      	mov	r1, r3
 8008078:	f04f 0c0a 	mov.w	ip, #10
 800807c:	4620      	mov	r0, r4
 800807e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008082:	3a30      	subs	r2, #48	; 0x30
 8008084:	2a09      	cmp	r2, #9
 8008086:	d903      	bls.n	8008090 <_vfiprintf_r+0x1d0>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0c6      	beq.n	800801a <_vfiprintf_r+0x15a>
 800808c:	9105      	str	r1, [sp, #20]
 800808e:	e7c4      	b.n	800801a <_vfiprintf_r+0x15a>
 8008090:	fb0c 2101 	mla	r1, ip, r1, r2
 8008094:	4604      	mov	r4, r0
 8008096:	2301      	movs	r3, #1
 8008098:	e7f0      	b.n	800807c <_vfiprintf_r+0x1bc>
 800809a:	ab03      	add	r3, sp, #12
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	462a      	mov	r2, r5
 80080a0:	4b12      	ldr	r3, [pc, #72]	; (80080ec <_vfiprintf_r+0x22c>)
 80080a2:	a904      	add	r1, sp, #16
 80080a4:	4630      	mov	r0, r6
 80080a6:	f7fd fe8b 	bl	8005dc0 <_printf_float>
 80080aa:	4607      	mov	r7, r0
 80080ac:	1c78      	adds	r0, r7, #1
 80080ae:	d1d6      	bne.n	800805e <_vfiprintf_r+0x19e>
 80080b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080b2:	07d9      	lsls	r1, r3, #31
 80080b4:	d405      	bmi.n	80080c2 <_vfiprintf_r+0x202>
 80080b6:	89ab      	ldrh	r3, [r5, #12]
 80080b8:	059a      	lsls	r2, r3, #22
 80080ba:	d402      	bmi.n	80080c2 <_vfiprintf_r+0x202>
 80080bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080be:	f7fe fbdb 	bl	8006878 <__retarget_lock_release_recursive>
 80080c2:	89ab      	ldrh	r3, [r5, #12]
 80080c4:	065b      	lsls	r3, r3, #25
 80080c6:	f53f af1d 	bmi.w	8007f04 <_vfiprintf_r+0x44>
 80080ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080cc:	e71c      	b.n	8007f08 <_vfiprintf_r+0x48>
 80080ce:	ab03      	add	r3, sp, #12
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	462a      	mov	r2, r5
 80080d4:	4b05      	ldr	r3, [pc, #20]	; (80080ec <_vfiprintf_r+0x22c>)
 80080d6:	a904      	add	r1, sp, #16
 80080d8:	4630      	mov	r0, r6
 80080da:	f7fe f915 	bl	8006308 <_printf_i>
 80080de:	e7e4      	b.n	80080aa <_vfiprintf_r+0x1ea>
 80080e0:	08009a34 	.word	0x08009a34
 80080e4:	08009a3e 	.word	0x08009a3e
 80080e8:	08005dc1 	.word	0x08005dc1
 80080ec:	08007e9b 	.word	0x08007e9b
 80080f0:	08009a3a 	.word	0x08009a3a

080080f4 <__sflush_r>:
 80080f4:	898a      	ldrh	r2, [r1, #12]
 80080f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fa:	4605      	mov	r5, r0
 80080fc:	0710      	lsls	r0, r2, #28
 80080fe:	460c      	mov	r4, r1
 8008100:	d458      	bmi.n	80081b4 <__sflush_r+0xc0>
 8008102:	684b      	ldr	r3, [r1, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	dc05      	bgt.n	8008114 <__sflush_r+0x20>
 8008108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	dc02      	bgt.n	8008114 <__sflush_r+0x20>
 800810e:	2000      	movs	r0, #0
 8008110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008116:	2e00      	cmp	r6, #0
 8008118:	d0f9      	beq.n	800810e <__sflush_r+0x1a>
 800811a:	2300      	movs	r3, #0
 800811c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008120:	682f      	ldr	r7, [r5, #0]
 8008122:	6a21      	ldr	r1, [r4, #32]
 8008124:	602b      	str	r3, [r5, #0]
 8008126:	d032      	beq.n	800818e <__sflush_r+0x9a>
 8008128:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	075a      	lsls	r2, r3, #29
 800812e:	d505      	bpl.n	800813c <__sflush_r+0x48>
 8008130:	6863      	ldr	r3, [r4, #4]
 8008132:	1ac0      	subs	r0, r0, r3
 8008134:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008136:	b10b      	cbz	r3, 800813c <__sflush_r+0x48>
 8008138:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800813a:	1ac0      	subs	r0, r0, r3
 800813c:	2300      	movs	r3, #0
 800813e:	4602      	mov	r2, r0
 8008140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008142:	6a21      	ldr	r1, [r4, #32]
 8008144:	4628      	mov	r0, r5
 8008146:	47b0      	blx	r6
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	d106      	bne.n	800815c <__sflush_r+0x68>
 800814e:	6829      	ldr	r1, [r5, #0]
 8008150:	291d      	cmp	r1, #29
 8008152:	d82b      	bhi.n	80081ac <__sflush_r+0xb8>
 8008154:	4a29      	ldr	r2, [pc, #164]	; (80081fc <__sflush_r+0x108>)
 8008156:	410a      	asrs	r2, r1
 8008158:	07d6      	lsls	r6, r2, #31
 800815a:	d427      	bmi.n	80081ac <__sflush_r+0xb8>
 800815c:	2200      	movs	r2, #0
 800815e:	6062      	str	r2, [r4, #4]
 8008160:	04d9      	lsls	r1, r3, #19
 8008162:	6922      	ldr	r2, [r4, #16]
 8008164:	6022      	str	r2, [r4, #0]
 8008166:	d504      	bpl.n	8008172 <__sflush_r+0x7e>
 8008168:	1c42      	adds	r2, r0, #1
 800816a:	d101      	bne.n	8008170 <__sflush_r+0x7c>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b903      	cbnz	r3, 8008172 <__sflush_r+0x7e>
 8008170:	6560      	str	r0, [r4, #84]	; 0x54
 8008172:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008174:	602f      	str	r7, [r5, #0]
 8008176:	2900      	cmp	r1, #0
 8008178:	d0c9      	beq.n	800810e <__sflush_r+0x1a>
 800817a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800817e:	4299      	cmp	r1, r3
 8008180:	d002      	beq.n	8008188 <__sflush_r+0x94>
 8008182:	4628      	mov	r0, r5
 8008184:	f7ff f9f6 	bl	8007574 <_free_r>
 8008188:	2000      	movs	r0, #0
 800818a:	6360      	str	r0, [r4, #52]	; 0x34
 800818c:	e7c0      	b.n	8008110 <__sflush_r+0x1c>
 800818e:	2301      	movs	r3, #1
 8008190:	4628      	mov	r0, r5
 8008192:	47b0      	blx	r6
 8008194:	1c41      	adds	r1, r0, #1
 8008196:	d1c8      	bne.n	800812a <__sflush_r+0x36>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0c5      	beq.n	800812a <__sflush_r+0x36>
 800819e:	2b1d      	cmp	r3, #29
 80081a0:	d001      	beq.n	80081a6 <__sflush_r+0xb2>
 80081a2:	2b16      	cmp	r3, #22
 80081a4:	d101      	bne.n	80081aa <__sflush_r+0xb6>
 80081a6:	602f      	str	r7, [r5, #0]
 80081a8:	e7b1      	b.n	800810e <__sflush_r+0x1a>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b0:	81a3      	strh	r3, [r4, #12]
 80081b2:	e7ad      	b.n	8008110 <__sflush_r+0x1c>
 80081b4:	690f      	ldr	r7, [r1, #16]
 80081b6:	2f00      	cmp	r7, #0
 80081b8:	d0a9      	beq.n	800810e <__sflush_r+0x1a>
 80081ba:	0793      	lsls	r3, r2, #30
 80081bc:	680e      	ldr	r6, [r1, #0]
 80081be:	bf08      	it	eq
 80081c0:	694b      	ldreq	r3, [r1, #20]
 80081c2:	600f      	str	r7, [r1, #0]
 80081c4:	bf18      	it	ne
 80081c6:	2300      	movne	r3, #0
 80081c8:	eba6 0807 	sub.w	r8, r6, r7
 80081cc:	608b      	str	r3, [r1, #8]
 80081ce:	f1b8 0f00 	cmp.w	r8, #0
 80081d2:	dd9c      	ble.n	800810e <__sflush_r+0x1a>
 80081d4:	6a21      	ldr	r1, [r4, #32]
 80081d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081d8:	4643      	mov	r3, r8
 80081da:	463a      	mov	r2, r7
 80081dc:	4628      	mov	r0, r5
 80081de:	47b0      	blx	r6
 80081e0:	2800      	cmp	r0, #0
 80081e2:	dc06      	bgt.n	80081f2 <__sflush_r+0xfe>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	e78e      	b.n	8008110 <__sflush_r+0x1c>
 80081f2:	4407      	add	r7, r0
 80081f4:	eba8 0800 	sub.w	r8, r8, r0
 80081f8:	e7e9      	b.n	80081ce <__sflush_r+0xda>
 80081fa:	bf00      	nop
 80081fc:	dfbffffe 	.word	0xdfbffffe

08008200 <_fflush_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	690b      	ldr	r3, [r1, #16]
 8008204:	4605      	mov	r5, r0
 8008206:	460c      	mov	r4, r1
 8008208:	b913      	cbnz	r3, 8008210 <_fflush_r+0x10>
 800820a:	2500      	movs	r5, #0
 800820c:	4628      	mov	r0, r5
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	b118      	cbz	r0, 800821a <_fflush_r+0x1a>
 8008212:	6a03      	ldr	r3, [r0, #32]
 8008214:	b90b      	cbnz	r3, 800821a <_fflush_r+0x1a>
 8008216:	f7fe fa25 	bl	8006664 <__sinit>
 800821a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0f3      	beq.n	800820a <_fflush_r+0xa>
 8008222:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008224:	07d0      	lsls	r0, r2, #31
 8008226:	d404      	bmi.n	8008232 <_fflush_r+0x32>
 8008228:	0599      	lsls	r1, r3, #22
 800822a:	d402      	bmi.n	8008232 <_fflush_r+0x32>
 800822c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800822e:	f7fe fb22 	bl	8006876 <__retarget_lock_acquire_recursive>
 8008232:	4628      	mov	r0, r5
 8008234:	4621      	mov	r1, r4
 8008236:	f7ff ff5d 	bl	80080f4 <__sflush_r>
 800823a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800823c:	07da      	lsls	r2, r3, #31
 800823e:	4605      	mov	r5, r0
 8008240:	d4e4      	bmi.n	800820c <_fflush_r+0xc>
 8008242:	89a3      	ldrh	r3, [r4, #12]
 8008244:	059b      	lsls	r3, r3, #22
 8008246:	d4e1      	bmi.n	800820c <_fflush_r+0xc>
 8008248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800824a:	f7fe fb15 	bl	8006878 <__retarget_lock_release_recursive>
 800824e:	e7dd      	b.n	800820c <_fflush_r+0xc>

08008250 <__swbuf_r>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	460e      	mov	r6, r1
 8008254:	4614      	mov	r4, r2
 8008256:	4605      	mov	r5, r0
 8008258:	b118      	cbz	r0, 8008262 <__swbuf_r+0x12>
 800825a:	6a03      	ldr	r3, [r0, #32]
 800825c:	b90b      	cbnz	r3, 8008262 <__swbuf_r+0x12>
 800825e:	f7fe fa01 	bl	8006664 <__sinit>
 8008262:	69a3      	ldr	r3, [r4, #24]
 8008264:	60a3      	str	r3, [r4, #8]
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	071a      	lsls	r2, r3, #28
 800826a:	d525      	bpl.n	80082b8 <__swbuf_r+0x68>
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	b31b      	cbz	r3, 80082b8 <__swbuf_r+0x68>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	6922      	ldr	r2, [r4, #16]
 8008274:	1a98      	subs	r0, r3, r2
 8008276:	6963      	ldr	r3, [r4, #20]
 8008278:	b2f6      	uxtb	r6, r6
 800827a:	4283      	cmp	r3, r0
 800827c:	4637      	mov	r7, r6
 800827e:	dc04      	bgt.n	800828a <__swbuf_r+0x3a>
 8008280:	4621      	mov	r1, r4
 8008282:	4628      	mov	r0, r5
 8008284:	f7ff ffbc 	bl	8008200 <_fflush_r>
 8008288:	b9e0      	cbnz	r0, 80082c4 <__swbuf_r+0x74>
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	3b01      	subs	r3, #1
 800828e:	60a3      	str	r3, [r4, #8]
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	6022      	str	r2, [r4, #0]
 8008296:	701e      	strb	r6, [r3, #0]
 8008298:	6962      	ldr	r2, [r4, #20]
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	429a      	cmp	r2, r3
 800829e:	d004      	beq.n	80082aa <__swbuf_r+0x5a>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	07db      	lsls	r3, r3, #31
 80082a4:	d506      	bpl.n	80082b4 <__swbuf_r+0x64>
 80082a6:	2e0a      	cmp	r6, #10
 80082a8:	d104      	bne.n	80082b4 <__swbuf_r+0x64>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f7ff ffa7 	bl	8008200 <_fflush_r>
 80082b2:	b938      	cbnz	r0, 80082c4 <__swbuf_r+0x74>
 80082b4:	4638      	mov	r0, r7
 80082b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b8:	4621      	mov	r1, r4
 80082ba:	4628      	mov	r0, r5
 80082bc:	f000 f806 	bl	80082cc <__swsetup_r>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d0d5      	beq.n	8008270 <__swbuf_r+0x20>
 80082c4:	f04f 37ff 	mov.w	r7, #4294967295
 80082c8:	e7f4      	b.n	80082b4 <__swbuf_r+0x64>
	...

080082cc <__swsetup_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4b2a      	ldr	r3, [pc, #168]	; (8008378 <__swsetup_r+0xac>)
 80082d0:	4605      	mov	r5, r0
 80082d2:	6818      	ldr	r0, [r3, #0]
 80082d4:	460c      	mov	r4, r1
 80082d6:	b118      	cbz	r0, 80082e0 <__swsetup_r+0x14>
 80082d8:	6a03      	ldr	r3, [r0, #32]
 80082da:	b90b      	cbnz	r3, 80082e0 <__swsetup_r+0x14>
 80082dc:	f7fe f9c2 	bl	8006664 <__sinit>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082e6:	0718      	lsls	r0, r3, #28
 80082e8:	d422      	bmi.n	8008330 <__swsetup_r+0x64>
 80082ea:	06d9      	lsls	r1, r3, #27
 80082ec:	d407      	bmi.n	80082fe <__swsetup_r+0x32>
 80082ee:	2309      	movs	r3, #9
 80082f0:	602b      	str	r3, [r5, #0]
 80082f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082f6:	81a3      	strh	r3, [r4, #12]
 80082f8:	f04f 30ff 	mov.w	r0, #4294967295
 80082fc:	e034      	b.n	8008368 <__swsetup_r+0x9c>
 80082fe:	0758      	lsls	r0, r3, #29
 8008300:	d512      	bpl.n	8008328 <__swsetup_r+0x5c>
 8008302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008304:	b141      	cbz	r1, 8008318 <__swsetup_r+0x4c>
 8008306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800830a:	4299      	cmp	r1, r3
 800830c:	d002      	beq.n	8008314 <__swsetup_r+0x48>
 800830e:	4628      	mov	r0, r5
 8008310:	f7ff f930 	bl	8007574 <_free_r>
 8008314:	2300      	movs	r3, #0
 8008316:	6363      	str	r3, [r4, #52]	; 0x34
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800831e:	81a3      	strh	r3, [r4, #12]
 8008320:	2300      	movs	r3, #0
 8008322:	6063      	str	r3, [r4, #4]
 8008324:	6923      	ldr	r3, [r4, #16]
 8008326:	6023      	str	r3, [r4, #0]
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	f043 0308 	orr.w	r3, r3, #8
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	6923      	ldr	r3, [r4, #16]
 8008332:	b94b      	cbnz	r3, 8008348 <__swsetup_r+0x7c>
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800833a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800833e:	d003      	beq.n	8008348 <__swsetup_r+0x7c>
 8008340:	4621      	mov	r1, r4
 8008342:	4628      	mov	r0, r5
 8008344:	f000 f8c4 	bl	80084d0 <__smakebuf_r>
 8008348:	89a0      	ldrh	r0, [r4, #12]
 800834a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800834e:	f010 0301 	ands.w	r3, r0, #1
 8008352:	d00a      	beq.n	800836a <__swsetup_r+0x9e>
 8008354:	2300      	movs	r3, #0
 8008356:	60a3      	str	r3, [r4, #8]
 8008358:	6963      	ldr	r3, [r4, #20]
 800835a:	425b      	negs	r3, r3
 800835c:	61a3      	str	r3, [r4, #24]
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	b943      	cbnz	r3, 8008374 <__swsetup_r+0xa8>
 8008362:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008366:	d1c4      	bne.n	80082f2 <__swsetup_r+0x26>
 8008368:	bd38      	pop	{r3, r4, r5, pc}
 800836a:	0781      	lsls	r1, r0, #30
 800836c:	bf58      	it	pl
 800836e:	6963      	ldrpl	r3, [r4, #20]
 8008370:	60a3      	str	r3, [r4, #8]
 8008372:	e7f4      	b.n	800835e <__swsetup_r+0x92>
 8008374:	2000      	movs	r0, #0
 8008376:	e7f7      	b.n	8008368 <__swsetup_r+0x9c>
 8008378:	20000074 	.word	0x20000074

0800837c <_sbrk_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4d06      	ldr	r5, [pc, #24]	; (8008398 <_sbrk_r+0x1c>)
 8008380:	2300      	movs	r3, #0
 8008382:	4604      	mov	r4, r0
 8008384:	4608      	mov	r0, r1
 8008386:	602b      	str	r3, [r5, #0]
 8008388:	f7fa fba4 	bl	8002ad4 <_sbrk>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_sbrk_r+0x1a>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_sbrk_r+0x1a>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	2000068c 	.word	0x2000068c

0800839c <memcpy>:
 800839c:	440a      	add	r2, r1
 800839e:	4291      	cmp	r1, r2
 80083a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80083a4:	d100      	bne.n	80083a8 <memcpy+0xc>
 80083a6:	4770      	bx	lr
 80083a8:	b510      	push	{r4, lr}
 80083aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083b2:	4291      	cmp	r1, r2
 80083b4:	d1f9      	bne.n	80083aa <memcpy+0xe>
 80083b6:	bd10      	pop	{r4, pc}

080083b8 <__assert_func>:
 80083b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ba:	4614      	mov	r4, r2
 80083bc:	461a      	mov	r2, r3
 80083be:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <__assert_func+0x2c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4605      	mov	r5, r0
 80083c4:	68d8      	ldr	r0, [r3, #12]
 80083c6:	b14c      	cbz	r4, 80083dc <__assert_func+0x24>
 80083c8:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <__assert_func+0x30>)
 80083ca:	9100      	str	r1, [sp, #0]
 80083cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083d0:	4906      	ldr	r1, [pc, #24]	; (80083ec <__assert_func+0x34>)
 80083d2:	462b      	mov	r3, r5
 80083d4:	f000 f844 	bl	8008460 <fiprintf>
 80083d8:	f000 f8d8 	bl	800858c <abort>
 80083dc:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <__assert_func+0x38>)
 80083de:	461c      	mov	r4, r3
 80083e0:	e7f3      	b.n	80083ca <__assert_func+0x12>
 80083e2:	bf00      	nop
 80083e4:	20000074 	.word	0x20000074
 80083e8:	08009a4f 	.word	0x08009a4f
 80083ec:	08009a5c 	.word	0x08009a5c
 80083f0:	08009a8a 	.word	0x08009a8a

080083f4 <_calloc_r>:
 80083f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083f6:	fba1 2402 	umull	r2, r4, r1, r2
 80083fa:	b94c      	cbnz	r4, 8008410 <_calloc_r+0x1c>
 80083fc:	4611      	mov	r1, r2
 80083fe:	9201      	str	r2, [sp, #4]
 8008400:	f7ff f92c 	bl	800765c <_malloc_r>
 8008404:	9a01      	ldr	r2, [sp, #4]
 8008406:	4605      	mov	r5, r0
 8008408:	b930      	cbnz	r0, 8008418 <_calloc_r+0x24>
 800840a:	4628      	mov	r0, r5
 800840c:	b003      	add	sp, #12
 800840e:	bd30      	pop	{r4, r5, pc}
 8008410:	220c      	movs	r2, #12
 8008412:	6002      	str	r2, [r0, #0]
 8008414:	2500      	movs	r5, #0
 8008416:	e7f8      	b.n	800840a <_calloc_r+0x16>
 8008418:	4621      	mov	r1, r4
 800841a:	f7fe f9ae 	bl	800677a <memset>
 800841e:	e7f4      	b.n	800840a <_calloc_r+0x16>

08008420 <__ascii_mbtowc>:
 8008420:	b082      	sub	sp, #8
 8008422:	b901      	cbnz	r1, 8008426 <__ascii_mbtowc+0x6>
 8008424:	a901      	add	r1, sp, #4
 8008426:	b142      	cbz	r2, 800843a <__ascii_mbtowc+0x1a>
 8008428:	b14b      	cbz	r3, 800843e <__ascii_mbtowc+0x1e>
 800842a:	7813      	ldrb	r3, [r2, #0]
 800842c:	600b      	str	r3, [r1, #0]
 800842e:	7812      	ldrb	r2, [r2, #0]
 8008430:	1e10      	subs	r0, r2, #0
 8008432:	bf18      	it	ne
 8008434:	2001      	movne	r0, #1
 8008436:	b002      	add	sp, #8
 8008438:	4770      	bx	lr
 800843a:	4610      	mov	r0, r2
 800843c:	e7fb      	b.n	8008436 <__ascii_mbtowc+0x16>
 800843e:	f06f 0001 	mvn.w	r0, #1
 8008442:	e7f8      	b.n	8008436 <__ascii_mbtowc+0x16>

08008444 <__ascii_wctomb>:
 8008444:	b149      	cbz	r1, 800845a <__ascii_wctomb+0x16>
 8008446:	2aff      	cmp	r2, #255	; 0xff
 8008448:	bf85      	ittet	hi
 800844a:	238a      	movhi	r3, #138	; 0x8a
 800844c:	6003      	strhi	r3, [r0, #0]
 800844e:	700a      	strbls	r2, [r1, #0]
 8008450:	f04f 30ff 	movhi.w	r0, #4294967295
 8008454:	bf98      	it	ls
 8008456:	2001      	movls	r0, #1
 8008458:	4770      	bx	lr
 800845a:	4608      	mov	r0, r1
 800845c:	4770      	bx	lr
	...

08008460 <fiprintf>:
 8008460:	b40e      	push	{r1, r2, r3}
 8008462:	b503      	push	{r0, r1, lr}
 8008464:	4601      	mov	r1, r0
 8008466:	ab03      	add	r3, sp, #12
 8008468:	4805      	ldr	r0, [pc, #20]	; (8008480 <fiprintf+0x20>)
 800846a:	f853 2b04 	ldr.w	r2, [r3], #4
 800846e:	6800      	ldr	r0, [r0, #0]
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	f7ff fd25 	bl	8007ec0 <_vfiprintf_r>
 8008476:	b002      	add	sp, #8
 8008478:	f85d eb04 	ldr.w	lr, [sp], #4
 800847c:	b003      	add	sp, #12
 800847e:	4770      	bx	lr
 8008480:	20000074 	.word	0x20000074

08008484 <__swhatbuf_r>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	460c      	mov	r4, r1
 8008488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848c:	2900      	cmp	r1, #0
 800848e:	b096      	sub	sp, #88	; 0x58
 8008490:	4615      	mov	r5, r2
 8008492:	461e      	mov	r6, r3
 8008494:	da0d      	bge.n	80084b2 <__swhatbuf_r+0x2e>
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	f013 0f80 	tst.w	r3, #128	; 0x80
 800849c:	f04f 0100 	mov.w	r1, #0
 80084a0:	bf0c      	ite	eq
 80084a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80084a6:	2340      	movne	r3, #64	; 0x40
 80084a8:	2000      	movs	r0, #0
 80084aa:	6031      	str	r1, [r6, #0]
 80084ac:	602b      	str	r3, [r5, #0]
 80084ae:	b016      	add	sp, #88	; 0x58
 80084b0:	bd70      	pop	{r4, r5, r6, pc}
 80084b2:	466a      	mov	r2, sp
 80084b4:	f000 f848 	bl	8008548 <_fstat_r>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	dbec      	blt.n	8008496 <__swhatbuf_r+0x12>
 80084bc:	9901      	ldr	r1, [sp, #4]
 80084be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80084c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80084c6:	4259      	negs	r1, r3
 80084c8:	4159      	adcs	r1, r3
 80084ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ce:	e7eb      	b.n	80084a8 <__swhatbuf_r+0x24>

080084d0 <__smakebuf_r>:
 80084d0:	898b      	ldrh	r3, [r1, #12]
 80084d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084d4:	079d      	lsls	r5, r3, #30
 80084d6:	4606      	mov	r6, r0
 80084d8:	460c      	mov	r4, r1
 80084da:	d507      	bpl.n	80084ec <__smakebuf_r+0x1c>
 80084dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	6123      	str	r3, [r4, #16]
 80084e4:	2301      	movs	r3, #1
 80084e6:	6163      	str	r3, [r4, #20]
 80084e8:	b002      	add	sp, #8
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	ab01      	add	r3, sp, #4
 80084ee:	466a      	mov	r2, sp
 80084f0:	f7ff ffc8 	bl	8008484 <__swhatbuf_r>
 80084f4:	9900      	ldr	r1, [sp, #0]
 80084f6:	4605      	mov	r5, r0
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff f8af 	bl	800765c <_malloc_r>
 80084fe:	b948      	cbnz	r0, 8008514 <__smakebuf_r+0x44>
 8008500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008504:	059a      	lsls	r2, r3, #22
 8008506:	d4ef      	bmi.n	80084e8 <__smakebuf_r+0x18>
 8008508:	f023 0303 	bic.w	r3, r3, #3
 800850c:	f043 0302 	orr.w	r3, r3, #2
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	e7e3      	b.n	80084dc <__smakebuf_r+0xc>
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	6020      	str	r0, [r4, #0]
 8008518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800851c:	81a3      	strh	r3, [r4, #12]
 800851e:	9b00      	ldr	r3, [sp, #0]
 8008520:	6163      	str	r3, [r4, #20]
 8008522:	9b01      	ldr	r3, [sp, #4]
 8008524:	6120      	str	r0, [r4, #16]
 8008526:	b15b      	cbz	r3, 8008540 <__smakebuf_r+0x70>
 8008528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800852c:	4630      	mov	r0, r6
 800852e:	f000 f81d 	bl	800856c <_isatty_r>
 8008532:	b128      	cbz	r0, 8008540 <__smakebuf_r+0x70>
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	f023 0303 	bic.w	r3, r3, #3
 800853a:	f043 0301 	orr.w	r3, r3, #1
 800853e:	81a3      	strh	r3, [r4, #12]
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	431d      	orrs	r5, r3
 8008544:	81a5      	strh	r5, [r4, #12]
 8008546:	e7cf      	b.n	80084e8 <__smakebuf_r+0x18>

08008548 <_fstat_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4d07      	ldr	r5, [pc, #28]	; (8008568 <_fstat_r+0x20>)
 800854c:	2300      	movs	r3, #0
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	4611      	mov	r1, r2
 8008554:	602b      	str	r3, [r5, #0]
 8008556:	f7fa fa94 	bl	8002a82 <_fstat>
 800855a:	1c43      	adds	r3, r0, #1
 800855c:	d102      	bne.n	8008564 <_fstat_r+0x1c>
 800855e:	682b      	ldr	r3, [r5, #0]
 8008560:	b103      	cbz	r3, 8008564 <_fstat_r+0x1c>
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	bd38      	pop	{r3, r4, r5, pc}
 8008566:	bf00      	nop
 8008568:	2000068c 	.word	0x2000068c

0800856c <_isatty_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4d06      	ldr	r5, [pc, #24]	; (8008588 <_isatty_r+0x1c>)
 8008570:	2300      	movs	r3, #0
 8008572:	4604      	mov	r4, r0
 8008574:	4608      	mov	r0, r1
 8008576:	602b      	str	r3, [r5, #0]
 8008578:	f7fa fa93 	bl	8002aa2 <_isatty>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_isatty_r+0x1a>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_isatty_r+0x1a>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	2000068c 	.word	0x2000068c

0800858c <abort>:
 800858c:	b508      	push	{r3, lr}
 800858e:	2006      	movs	r0, #6
 8008590:	f000 f82c 	bl	80085ec <raise>
 8008594:	2001      	movs	r0, #1
 8008596:	f7fa fa25 	bl	80029e4 <_exit>

0800859a <_raise_r>:
 800859a:	291f      	cmp	r1, #31
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4604      	mov	r4, r0
 80085a0:	460d      	mov	r5, r1
 80085a2:	d904      	bls.n	80085ae <_raise_r+0x14>
 80085a4:	2316      	movs	r3, #22
 80085a6:	6003      	str	r3, [r0, #0]
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ac:	bd38      	pop	{r3, r4, r5, pc}
 80085ae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80085b0:	b112      	cbz	r2, 80085b8 <_raise_r+0x1e>
 80085b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085b6:	b94b      	cbnz	r3, 80085cc <_raise_r+0x32>
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 f831 	bl	8008620 <_getpid_r>
 80085be:	462a      	mov	r2, r5
 80085c0:	4601      	mov	r1, r0
 80085c2:	4620      	mov	r0, r4
 80085c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085c8:	f000 b818 	b.w	80085fc <_kill_r>
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d00a      	beq.n	80085e6 <_raise_r+0x4c>
 80085d0:	1c59      	adds	r1, r3, #1
 80085d2:	d103      	bne.n	80085dc <_raise_r+0x42>
 80085d4:	2316      	movs	r3, #22
 80085d6:	6003      	str	r3, [r0, #0]
 80085d8:	2001      	movs	r0, #1
 80085da:	e7e7      	b.n	80085ac <_raise_r+0x12>
 80085dc:	2400      	movs	r4, #0
 80085de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085e2:	4628      	mov	r0, r5
 80085e4:	4798      	blx	r3
 80085e6:	2000      	movs	r0, #0
 80085e8:	e7e0      	b.n	80085ac <_raise_r+0x12>
	...

080085ec <raise>:
 80085ec:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <raise+0xc>)
 80085ee:	4601      	mov	r1, r0
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	f7ff bfd2 	b.w	800859a <_raise_r>
 80085f6:	bf00      	nop
 80085f8:	20000074 	.word	0x20000074

080085fc <_kill_r>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4d07      	ldr	r5, [pc, #28]	; (800861c <_kill_r+0x20>)
 8008600:	2300      	movs	r3, #0
 8008602:	4604      	mov	r4, r0
 8008604:	4608      	mov	r0, r1
 8008606:	4611      	mov	r1, r2
 8008608:	602b      	str	r3, [r5, #0]
 800860a:	f7fa f9db 	bl	80029c4 <_kill>
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	d102      	bne.n	8008618 <_kill_r+0x1c>
 8008612:	682b      	ldr	r3, [r5, #0]
 8008614:	b103      	cbz	r3, 8008618 <_kill_r+0x1c>
 8008616:	6023      	str	r3, [r4, #0]
 8008618:	bd38      	pop	{r3, r4, r5, pc}
 800861a:	bf00      	nop
 800861c:	2000068c 	.word	0x2000068c

08008620 <_getpid_r>:
 8008620:	f7fa b9c8 	b.w	80029b4 <_getpid>
 8008624:	0000      	movs	r0, r0
	...

08008628 <cos>:
 8008628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800862a:	ec53 2b10 	vmov	r2, r3, d0
 800862e:	4826      	ldr	r0, [pc, #152]	; (80086c8 <cos+0xa0>)
 8008630:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008634:	4281      	cmp	r1, r0
 8008636:	dc06      	bgt.n	8008646 <cos+0x1e>
 8008638:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80086c0 <cos+0x98>
 800863c:	b005      	add	sp, #20
 800863e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008642:	f000 b89d 	b.w	8008780 <__kernel_cos>
 8008646:	4821      	ldr	r0, [pc, #132]	; (80086cc <cos+0xa4>)
 8008648:	4281      	cmp	r1, r0
 800864a:	dd09      	ble.n	8008660 <cos+0x38>
 800864c:	ee10 0a10 	vmov	r0, s0
 8008650:	4619      	mov	r1, r3
 8008652:	f7f7 fe21 	bl	8000298 <__aeabi_dsub>
 8008656:	ec41 0b10 	vmov	d0, r0, r1
 800865a:	b005      	add	sp, #20
 800865c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008660:	4668      	mov	r0, sp
 8008662:	f000 fa15 	bl	8008a90 <__ieee754_rem_pio2>
 8008666:	f000 0003 	and.w	r0, r0, #3
 800866a:	2801      	cmp	r0, #1
 800866c:	d00b      	beq.n	8008686 <cos+0x5e>
 800866e:	2802      	cmp	r0, #2
 8008670:	d016      	beq.n	80086a0 <cos+0x78>
 8008672:	b9e0      	cbnz	r0, 80086ae <cos+0x86>
 8008674:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008678:	ed9d 0b00 	vldr	d0, [sp]
 800867c:	f000 f880 	bl	8008780 <__kernel_cos>
 8008680:	ec51 0b10 	vmov	r0, r1, d0
 8008684:	e7e7      	b.n	8008656 <cos+0x2e>
 8008686:	ed9d 1b02 	vldr	d1, [sp, #8]
 800868a:	ed9d 0b00 	vldr	d0, [sp]
 800868e:	f000 f93f 	bl	8008910 <__kernel_sin>
 8008692:	ec53 2b10 	vmov	r2, r3, d0
 8008696:	ee10 0a10 	vmov	r0, s0
 800869a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800869e:	e7da      	b.n	8008656 <cos+0x2e>
 80086a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80086a4:	ed9d 0b00 	vldr	d0, [sp]
 80086a8:	f000 f86a 	bl	8008780 <__kernel_cos>
 80086ac:	e7f1      	b.n	8008692 <cos+0x6a>
 80086ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80086b2:	ed9d 0b00 	vldr	d0, [sp]
 80086b6:	2001      	movs	r0, #1
 80086b8:	f000 f92a 	bl	8008910 <__kernel_sin>
 80086bc:	e7e0      	b.n	8008680 <cos+0x58>
 80086be:	bf00      	nop
	...
 80086c8:	3fe921fb 	.word	0x3fe921fb
 80086cc:	7fefffff 	.word	0x7fefffff

080086d0 <sin>:
 80086d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086d2:	ec53 2b10 	vmov	r2, r3, d0
 80086d6:	4828      	ldr	r0, [pc, #160]	; (8008778 <sin+0xa8>)
 80086d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80086dc:	4281      	cmp	r1, r0
 80086de:	dc07      	bgt.n	80086f0 <sin+0x20>
 80086e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008770 <sin+0xa0>
 80086e4:	2000      	movs	r0, #0
 80086e6:	b005      	add	sp, #20
 80086e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086ec:	f000 b910 	b.w	8008910 <__kernel_sin>
 80086f0:	4822      	ldr	r0, [pc, #136]	; (800877c <sin+0xac>)
 80086f2:	4281      	cmp	r1, r0
 80086f4:	dd09      	ble.n	800870a <sin+0x3a>
 80086f6:	ee10 0a10 	vmov	r0, s0
 80086fa:	4619      	mov	r1, r3
 80086fc:	f7f7 fdcc 	bl	8000298 <__aeabi_dsub>
 8008700:	ec41 0b10 	vmov	d0, r0, r1
 8008704:	b005      	add	sp, #20
 8008706:	f85d fb04 	ldr.w	pc, [sp], #4
 800870a:	4668      	mov	r0, sp
 800870c:	f000 f9c0 	bl	8008a90 <__ieee754_rem_pio2>
 8008710:	f000 0003 	and.w	r0, r0, #3
 8008714:	2801      	cmp	r0, #1
 8008716:	d00c      	beq.n	8008732 <sin+0x62>
 8008718:	2802      	cmp	r0, #2
 800871a:	d011      	beq.n	8008740 <sin+0x70>
 800871c:	b9f0      	cbnz	r0, 800875c <sin+0x8c>
 800871e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008722:	ed9d 0b00 	vldr	d0, [sp]
 8008726:	2001      	movs	r0, #1
 8008728:	f000 f8f2 	bl	8008910 <__kernel_sin>
 800872c:	ec51 0b10 	vmov	r0, r1, d0
 8008730:	e7e6      	b.n	8008700 <sin+0x30>
 8008732:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008736:	ed9d 0b00 	vldr	d0, [sp]
 800873a:	f000 f821 	bl	8008780 <__kernel_cos>
 800873e:	e7f5      	b.n	800872c <sin+0x5c>
 8008740:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008744:	ed9d 0b00 	vldr	d0, [sp]
 8008748:	2001      	movs	r0, #1
 800874a:	f000 f8e1 	bl	8008910 <__kernel_sin>
 800874e:	ec53 2b10 	vmov	r2, r3, d0
 8008752:	ee10 0a10 	vmov	r0, s0
 8008756:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800875a:	e7d1      	b.n	8008700 <sin+0x30>
 800875c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008760:	ed9d 0b00 	vldr	d0, [sp]
 8008764:	f000 f80c 	bl	8008780 <__kernel_cos>
 8008768:	e7f1      	b.n	800874e <sin+0x7e>
 800876a:	bf00      	nop
 800876c:	f3af 8000 	nop.w
	...
 8008778:	3fe921fb 	.word	0x3fe921fb
 800877c:	7fefffff 	.word	0x7fefffff

08008780 <__kernel_cos>:
 8008780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	ec57 6b10 	vmov	r6, r7, d0
 8008788:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800878c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008790:	ed8d 1b00 	vstr	d1, [sp]
 8008794:	da07      	bge.n	80087a6 <__kernel_cos+0x26>
 8008796:	ee10 0a10 	vmov	r0, s0
 800879a:	4639      	mov	r1, r7
 800879c:	f7f8 f9e4 	bl	8000b68 <__aeabi_d2iz>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f000 8088 	beq.w	80088b6 <__kernel_cos+0x136>
 80087a6:	4632      	mov	r2, r6
 80087a8:	463b      	mov	r3, r7
 80087aa:	4630      	mov	r0, r6
 80087ac:	4639      	mov	r1, r7
 80087ae:	f7f7 ff2b 	bl	8000608 <__aeabi_dmul>
 80087b2:	4b51      	ldr	r3, [pc, #324]	; (80088f8 <__kernel_cos+0x178>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	4604      	mov	r4, r0
 80087b8:	460d      	mov	r5, r1
 80087ba:	f7f7 ff25 	bl	8000608 <__aeabi_dmul>
 80087be:	a340      	add	r3, pc, #256	; (adr r3, 80088c0 <__kernel_cos+0x140>)
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	4682      	mov	sl, r0
 80087c6:	468b      	mov	fp, r1
 80087c8:	4620      	mov	r0, r4
 80087ca:	4629      	mov	r1, r5
 80087cc:	f7f7 ff1c 	bl	8000608 <__aeabi_dmul>
 80087d0:	a33d      	add	r3, pc, #244	; (adr r3, 80088c8 <__kernel_cos+0x148>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 fd61 	bl	800029c <__adddf3>
 80087da:	4622      	mov	r2, r4
 80087dc:	462b      	mov	r3, r5
 80087de:	f7f7 ff13 	bl	8000608 <__aeabi_dmul>
 80087e2:	a33b      	add	r3, pc, #236	; (adr r3, 80088d0 <__kernel_cos+0x150>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	f7f7 fd56 	bl	8000298 <__aeabi_dsub>
 80087ec:	4622      	mov	r2, r4
 80087ee:	462b      	mov	r3, r5
 80087f0:	f7f7 ff0a 	bl	8000608 <__aeabi_dmul>
 80087f4:	a338      	add	r3, pc, #224	; (adr r3, 80088d8 <__kernel_cos+0x158>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f7 fd4f 	bl	800029c <__adddf3>
 80087fe:	4622      	mov	r2, r4
 8008800:	462b      	mov	r3, r5
 8008802:	f7f7 ff01 	bl	8000608 <__aeabi_dmul>
 8008806:	a336      	add	r3, pc, #216	; (adr r3, 80088e0 <__kernel_cos+0x160>)
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	f7f7 fd44 	bl	8000298 <__aeabi_dsub>
 8008810:	4622      	mov	r2, r4
 8008812:	462b      	mov	r3, r5
 8008814:	f7f7 fef8 	bl	8000608 <__aeabi_dmul>
 8008818:	a333      	add	r3, pc, #204	; (adr r3, 80088e8 <__kernel_cos+0x168>)
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f7f7 fd3d 	bl	800029c <__adddf3>
 8008822:	4622      	mov	r2, r4
 8008824:	462b      	mov	r3, r5
 8008826:	f7f7 feef 	bl	8000608 <__aeabi_dmul>
 800882a:	4622      	mov	r2, r4
 800882c:	462b      	mov	r3, r5
 800882e:	f7f7 feeb 	bl	8000608 <__aeabi_dmul>
 8008832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008836:	4604      	mov	r4, r0
 8008838:	460d      	mov	r5, r1
 800883a:	4630      	mov	r0, r6
 800883c:	4639      	mov	r1, r7
 800883e:	f7f7 fee3 	bl	8000608 <__aeabi_dmul>
 8008842:	460b      	mov	r3, r1
 8008844:	4602      	mov	r2, r0
 8008846:	4629      	mov	r1, r5
 8008848:	4620      	mov	r0, r4
 800884a:	f7f7 fd25 	bl	8000298 <__aeabi_dsub>
 800884e:	4b2b      	ldr	r3, [pc, #172]	; (80088fc <__kernel_cos+0x17c>)
 8008850:	4598      	cmp	r8, r3
 8008852:	4606      	mov	r6, r0
 8008854:	460f      	mov	r7, r1
 8008856:	dc10      	bgt.n	800887a <__kernel_cos+0xfa>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4650      	mov	r0, sl
 800885e:	4659      	mov	r1, fp
 8008860:	f7f7 fd1a 	bl	8000298 <__aeabi_dsub>
 8008864:	460b      	mov	r3, r1
 8008866:	4926      	ldr	r1, [pc, #152]	; (8008900 <__kernel_cos+0x180>)
 8008868:	4602      	mov	r2, r0
 800886a:	2000      	movs	r0, #0
 800886c:	f7f7 fd14 	bl	8000298 <__aeabi_dsub>
 8008870:	ec41 0b10 	vmov	d0, r0, r1
 8008874:	b003      	add	sp, #12
 8008876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887a:	4b22      	ldr	r3, [pc, #136]	; (8008904 <__kernel_cos+0x184>)
 800887c:	4920      	ldr	r1, [pc, #128]	; (8008900 <__kernel_cos+0x180>)
 800887e:	4598      	cmp	r8, r3
 8008880:	bfcc      	ite	gt
 8008882:	4d21      	ldrgt	r5, [pc, #132]	; (8008908 <__kernel_cos+0x188>)
 8008884:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008888:	2400      	movs	r4, #0
 800888a:	4622      	mov	r2, r4
 800888c:	462b      	mov	r3, r5
 800888e:	2000      	movs	r0, #0
 8008890:	f7f7 fd02 	bl	8000298 <__aeabi_dsub>
 8008894:	4622      	mov	r2, r4
 8008896:	4680      	mov	r8, r0
 8008898:	4689      	mov	r9, r1
 800889a:	462b      	mov	r3, r5
 800889c:	4650      	mov	r0, sl
 800889e:	4659      	mov	r1, fp
 80088a0:	f7f7 fcfa 	bl	8000298 <__aeabi_dsub>
 80088a4:	4632      	mov	r2, r6
 80088a6:	463b      	mov	r3, r7
 80088a8:	f7f7 fcf6 	bl	8000298 <__aeabi_dsub>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4640      	mov	r0, r8
 80088b2:	4649      	mov	r1, r9
 80088b4:	e7da      	b.n	800886c <__kernel_cos+0xec>
 80088b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80088f0 <__kernel_cos+0x170>
 80088ba:	e7db      	b.n	8008874 <__kernel_cos+0xf4>
 80088bc:	f3af 8000 	nop.w
 80088c0:	be8838d4 	.word	0xbe8838d4
 80088c4:	bda8fae9 	.word	0xbda8fae9
 80088c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80088cc:	3e21ee9e 	.word	0x3e21ee9e
 80088d0:	809c52ad 	.word	0x809c52ad
 80088d4:	3e927e4f 	.word	0x3e927e4f
 80088d8:	19cb1590 	.word	0x19cb1590
 80088dc:	3efa01a0 	.word	0x3efa01a0
 80088e0:	16c15177 	.word	0x16c15177
 80088e4:	3f56c16c 	.word	0x3f56c16c
 80088e8:	5555554c 	.word	0x5555554c
 80088ec:	3fa55555 	.word	0x3fa55555
 80088f0:	00000000 	.word	0x00000000
 80088f4:	3ff00000 	.word	0x3ff00000
 80088f8:	3fe00000 	.word	0x3fe00000
 80088fc:	3fd33332 	.word	0x3fd33332
 8008900:	3ff00000 	.word	0x3ff00000
 8008904:	3fe90000 	.word	0x3fe90000
 8008908:	3fd20000 	.word	0x3fd20000
 800890c:	00000000 	.word	0x00000000

08008910 <__kernel_sin>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	ed2d 8b04 	vpush	{d8-d9}
 8008918:	eeb0 8a41 	vmov.f32	s16, s2
 800891c:	eef0 8a61 	vmov.f32	s17, s3
 8008920:	ec55 4b10 	vmov	r4, r5, d0
 8008924:	b083      	sub	sp, #12
 8008926:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800892a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800892e:	9001      	str	r0, [sp, #4]
 8008930:	da06      	bge.n	8008940 <__kernel_sin+0x30>
 8008932:	ee10 0a10 	vmov	r0, s0
 8008936:	4629      	mov	r1, r5
 8008938:	f7f8 f916 	bl	8000b68 <__aeabi_d2iz>
 800893c:	2800      	cmp	r0, #0
 800893e:	d051      	beq.n	80089e4 <__kernel_sin+0xd4>
 8008940:	4622      	mov	r2, r4
 8008942:	462b      	mov	r3, r5
 8008944:	4620      	mov	r0, r4
 8008946:	4629      	mov	r1, r5
 8008948:	f7f7 fe5e 	bl	8000608 <__aeabi_dmul>
 800894c:	4682      	mov	sl, r0
 800894e:	468b      	mov	fp, r1
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	4620      	mov	r0, r4
 8008956:	4629      	mov	r1, r5
 8008958:	f7f7 fe56 	bl	8000608 <__aeabi_dmul>
 800895c:	a341      	add	r3, pc, #260	; (adr r3, 8008a64 <__kernel_sin+0x154>)
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	4680      	mov	r8, r0
 8008964:	4689      	mov	r9, r1
 8008966:	4650      	mov	r0, sl
 8008968:	4659      	mov	r1, fp
 800896a:	f7f7 fe4d 	bl	8000608 <__aeabi_dmul>
 800896e:	a33f      	add	r3, pc, #252	; (adr r3, 8008a6c <__kernel_sin+0x15c>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f7f7 fc90 	bl	8000298 <__aeabi_dsub>
 8008978:	4652      	mov	r2, sl
 800897a:	465b      	mov	r3, fp
 800897c:	f7f7 fe44 	bl	8000608 <__aeabi_dmul>
 8008980:	a33c      	add	r3, pc, #240	; (adr r3, 8008a74 <__kernel_sin+0x164>)
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	f7f7 fc89 	bl	800029c <__adddf3>
 800898a:	4652      	mov	r2, sl
 800898c:	465b      	mov	r3, fp
 800898e:	f7f7 fe3b 	bl	8000608 <__aeabi_dmul>
 8008992:	a33a      	add	r3, pc, #232	; (adr r3, 8008a7c <__kernel_sin+0x16c>)
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f7f7 fc7e 	bl	8000298 <__aeabi_dsub>
 800899c:	4652      	mov	r2, sl
 800899e:	465b      	mov	r3, fp
 80089a0:	f7f7 fe32 	bl	8000608 <__aeabi_dmul>
 80089a4:	a337      	add	r3, pc, #220	; (adr r3, 8008a84 <__kernel_sin+0x174>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f7 fc77 	bl	800029c <__adddf3>
 80089ae:	9b01      	ldr	r3, [sp, #4]
 80089b0:	4606      	mov	r6, r0
 80089b2:	460f      	mov	r7, r1
 80089b4:	b9eb      	cbnz	r3, 80089f2 <__kernel_sin+0xe2>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4650      	mov	r0, sl
 80089bc:	4659      	mov	r1, fp
 80089be:	f7f7 fe23 	bl	8000608 <__aeabi_dmul>
 80089c2:	a325      	add	r3, pc, #148	; (adr r3, 8008a58 <__kernel_sin+0x148>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	f7f7 fc66 	bl	8000298 <__aeabi_dsub>
 80089cc:	4642      	mov	r2, r8
 80089ce:	464b      	mov	r3, r9
 80089d0:	f7f7 fe1a 	bl	8000608 <__aeabi_dmul>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4620      	mov	r0, r4
 80089da:	4629      	mov	r1, r5
 80089dc:	f7f7 fc5e 	bl	800029c <__adddf3>
 80089e0:	4604      	mov	r4, r0
 80089e2:	460d      	mov	r5, r1
 80089e4:	ec45 4b10 	vmov	d0, r4, r5
 80089e8:	b003      	add	sp, #12
 80089ea:	ecbd 8b04 	vpop	{d8-d9}
 80089ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f2:	4b1b      	ldr	r3, [pc, #108]	; (8008a60 <__kernel_sin+0x150>)
 80089f4:	ec51 0b18 	vmov	r0, r1, d8
 80089f8:	2200      	movs	r2, #0
 80089fa:	f7f7 fe05 	bl	8000608 <__aeabi_dmul>
 80089fe:	4632      	mov	r2, r6
 8008a00:	ec41 0b19 	vmov	d9, r0, r1
 8008a04:	463b      	mov	r3, r7
 8008a06:	4640      	mov	r0, r8
 8008a08:	4649      	mov	r1, r9
 8008a0a:	f7f7 fdfd 	bl	8000608 <__aeabi_dmul>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	ec51 0b19 	vmov	r0, r1, d9
 8008a16:	f7f7 fc3f 	bl	8000298 <__aeabi_dsub>
 8008a1a:	4652      	mov	r2, sl
 8008a1c:	465b      	mov	r3, fp
 8008a1e:	f7f7 fdf3 	bl	8000608 <__aeabi_dmul>
 8008a22:	ec53 2b18 	vmov	r2, r3, d8
 8008a26:	f7f7 fc37 	bl	8000298 <__aeabi_dsub>
 8008a2a:	a30b      	add	r3, pc, #44	; (adr r3, 8008a58 <__kernel_sin+0x148>)
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	4606      	mov	r6, r0
 8008a32:	460f      	mov	r7, r1
 8008a34:	4640      	mov	r0, r8
 8008a36:	4649      	mov	r1, r9
 8008a38:	f7f7 fde6 	bl	8000608 <__aeabi_dmul>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4630      	mov	r0, r6
 8008a42:	4639      	mov	r1, r7
 8008a44:	f7f7 fc2a 	bl	800029c <__adddf3>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4629      	mov	r1, r5
 8008a50:	f7f7 fc22 	bl	8000298 <__aeabi_dsub>
 8008a54:	e7c4      	b.n	80089e0 <__kernel_sin+0xd0>
 8008a56:	bf00      	nop
 8008a58:	55555549 	.word	0x55555549
 8008a5c:	3fc55555 	.word	0x3fc55555
 8008a60:	3fe00000 	.word	0x3fe00000
 8008a64:	5acfd57c 	.word	0x5acfd57c
 8008a68:	3de5d93a 	.word	0x3de5d93a
 8008a6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008a70:	3e5ae5e6 	.word	0x3e5ae5e6
 8008a74:	57b1fe7d 	.word	0x57b1fe7d
 8008a78:	3ec71de3 	.word	0x3ec71de3
 8008a7c:	19c161d5 	.word	0x19c161d5
 8008a80:	3f2a01a0 	.word	0x3f2a01a0
 8008a84:	1110f8a6 	.word	0x1110f8a6
 8008a88:	3f811111 	.word	0x3f811111
 8008a8c:	00000000 	.word	0x00000000

08008a90 <__ieee754_rem_pio2>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	ed2d 8b02 	vpush	{d8}
 8008a98:	ec55 4b10 	vmov	r4, r5, d0
 8008a9c:	4bca      	ldr	r3, [pc, #808]	; (8008dc8 <__ieee754_rem_pio2+0x338>)
 8008a9e:	b08b      	sub	sp, #44	; 0x2c
 8008aa0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008aa4:	4598      	cmp	r8, r3
 8008aa6:	4682      	mov	sl, r0
 8008aa8:	9502      	str	r5, [sp, #8]
 8008aaa:	dc08      	bgt.n	8008abe <__ieee754_rem_pio2+0x2e>
 8008aac:	2200      	movs	r2, #0
 8008aae:	2300      	movs	r3, #0
 8008ab0:	ed80 0b00 	vstr	d0, [r0]
 8008ab4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008ab8:	f04f 0b00 	mov.w	fp, #0
 8008abc:	e028      	b.n	8008b10 <__ieee754_rem_pio2+0x80>
 8008abe:	4bc3      	ldr	r3, [pc, #780]	; (8008dcc <__ieee754_rem_pio2+0x33c>)
 8008ac0:	4598      	cmp	r8, r3
 8008ac2:	dc78      	bgt.n	8008bb6 <__ieee754_rem_pio2+0x126>
 8008ac4:	9b02      	ldr	r3, [sp, #8]
 8008ac6:	4ec2      	ldr	r6, [pc, #776]	; (8008dd0 <__ieee754_rem_pio2+0x340>)
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	ee10 0a10 	vmov	r0, s0
 8008ace:	a3b0      	add	r3, pc, #704	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x300>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	dd39      	ble.n	8008b4c <__ieee754_rem_pio2+0xbc>
 8008ad8:	f7f7 fbde 	bl	8000298 <__aeabi_dsub>
 8008adc:	45b0      	cmp	r8, r6
 8008ade:	4604      	mov	r4, r0
 8008ae0:	460d      	mov	r5, r1
 8008ae2:	d01b      	beq.n	8008b1c <__ieee754_rem_pio2+0x8c>
 8008ae4:	a3ac      	add	r3, pc, #688	; (adr r3, 8008d98 <__ieee754_rem_pio2+0x308>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	f7f7 fbd5 	bl	8000298 <__aeabi_dsub>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	e9ca 2300 	strd	r2, r3, [sl]
 8008af6:	4620      	mov	r0, r4
 8008af8:	4629      	mov	r1, r5
 8008afa:	f7f7 fbcd 	bl	8000298 <__aeabi_dsub>
 8008afe:	a3a6      	add	r3, pc, #664	; (adr r3, 8008d98 <__ieee754_rem_pio2+0x308>)
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	f7f7 fbc8 	bl	8000298 <__aeabi_dsub>
 8008b08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b0c:	f04f 0b01 	mov.w	fp, #1
 8008b10:	4658      	mov	r0, fp
 8008b12:	b00b      	add	sp, #44	; 0x2c
 8008b14:	ecbd 8b02 	vpop	{d8}
 8008b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008da0 <__ieee754_rem_pio2+0x310>)
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	f7f7 fbb9 	bl	8000298 <__aeabi_dsub>
 8008b26:	a3a0      	add	r3, pc, #640	; (adr r3, 8008da8 <__ieee754_rem_pio2+0x318>)
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	460d      	mov	r5, r1
 8008b30:	f7f7 fbb2 	bl	8000298 <__aeabi_dsub>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	e9ca 2300 	strd	r2, r3, [sl]
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 fbaa 	bl	8000298 <__aeabi_dsub>
 8008b44:	a398      	add	r3, pc, #608	; (adr r3, 8008da8 <__ieee754_rem_pio2+0x318>)
 8008b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4a:	e7db      	b.n	8008b04 <__ieee754_rem_pio2+0x74>
 8008b4c:	f7f7 fba6 	bl	800029c <__adddf3>
 8008b50:	45b0      	cmp	r8, r6
 8008b52:	4604      	mov	r4, r0
 8008b54:	460d      	mov	r5, r1
 8008b56:	d016      	beq.n	8008b86 <__ieee754_rem_pio2+0xf6>
 8008b58:	a38f      	add	r3, pc, #572	; (adr r3, 8008d98 <__ieee754_rem_pio2+0x308>)
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	f7f7 fb9d 	bl	800029c <__adddf3>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	e9ca 2300 	strd	r2, r3, [sl]
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	f7f7 fb93 	bl	8000298 <__aeabi_dsub>
 8008b72:	a389      	add	r3, pc, #548	; (adr r3, 8008d98 <__ieee754_rem_pio2+0x308>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	f7f7 fb90 	bl	800029c <__adddf3>
 8008b7c:	f04f 3bff 	mov.w	fp, #4294967295
 8008b80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b84:	e7c4      	b.n	8008b10 <__ieee754_rem_pio2+0x80>
 8008b86:	a386      	add	r3, pc, #536	; (adr r3, 8008da0 <__ieee754_rem_pio2+0x310>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f7f7 fb86 	bl	800029c <__adddf3>
 8008b90:	a385      	add	r3, pc, #532	; (adr r3, 8008da8 <__ieee754_rem_pio2+0x318>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	4604      	mov	r4, r0
 8008b98:	460d      	mov	r5, r1
 8008b9a:	f7f7 fb7f 	bl	800029c <__adddf3>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	e9ca 2300 	strd	r2, r3, [sl]
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	f7f7 fb75 	bl	8000298 <__aeabi_dsub>
 8008bae:	a37e      	add	r3, pc, #504	; (adr r3, 8008da8 <__ieee754_rem_pio2+0x318>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	e7e0      	b.n	8008b78 <__ieee754_rem_pio2+0xe8>
 8008bb6:	4b87      	ldr	r3, [pc, #540]	; (8008dd4 <__ieee754_rem_pio2+0x344>)
 8008bb8:	4598      	cmp	r8, r3
 8008bba:	f300 80d8 	bgt.w	8008d6e <__ieee754_rem_pio2+0x2de>
 8008bbe:	f000 f96d 	bl	8008e9c <fabs>
 8008bc2:	ec55 4b10 	vmov	r4, r5, d0
 8008bc6:	ee10 0a10 	vmov	r0, s0
 8008bca:	a379      	add	r3, pc, #484	; (adr r3, 8008db0 <__ieee754_rem_pio2+0x320>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	f7f7 fd19 	bl	8000608 <__aeabi_dmul>
 8008bd6:	4b80      	ldr	r3, [pc, #512]	; (8008dd8 <__ieee754_rem_pio2+0x348>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f7f7 fb5f 	bl	800029c <__adddf3>
 8008bde:	f7f7 ffc3 	bl	8000b68 <__aeabi_d2iz>
 8008be2:	4683      	mov	fp, r0
 8008be4:	f7f7 fca6 	bl	8000534 <__aeabi_i2d>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	ec43 2b18 	vmov	d8, r2, r3
 8008bf0:	a367      	add	r3, pc, #412	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x300>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fd07 	bl	8000608 <__aeabi_dmul>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4620      	mov	r0, r4
 8008c00:	4629      	mov	r1, r5
 8008c02:	f7f7 fb49 	bl	8000298 <__aeabi_dsub>
 8008c06:	a364      	add	r3, pc, #400	; (adr r3, 8008d98 <__ieee754_rem_pio2+0x308>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	460f      	mov	r7, r1
 8008c10:	ec51 0b18 	vmov	r0, r1, d8
 8008c14:	f7f7 fcf8 	bl	8000608 <__aeabi_dmul>
 8008c18:	f1bb 0f1f 	cmp.w	fp, #31
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	460d      	mov	r5, r1
 8008c20:	dc0d      	bgt.n	8008c3e <__ieee754_rem_pio2+0x1ae>
 8008c22:	4b6e      	ldr	r3, [pc, #440]	; (8008ddc <__ieee754_rem_pio2+0x34c>)
 8008c24:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2c:	4543      	cmp	r3, r8
 8008c2e:	d006      	beq.n	8008c3e <__ieee754_rem_pio2+0x1ae>
 8008c30:	4622      	mov	r2, r4
 8008c32:	462b      	mov	r3, r5
 8008c34:	4630      	mov	r0, r6
 8008c36:	4639      	mov	r1, r7
 8008c38:	f7f7 fb2e 	bl	8000298 <__aeabi_dsub>
 8008c3c:	e00e      	b.n	8008c5c <__ieee754_rem_pio2+0x1cc>
 8008c3e:	462b      	mov	r3, r5
 8008c40:	4622      	mov	r2, r4
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 fb27 	bl	8000298 <__aeabi_dsub>
 8008c4a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008c4e:	9303      	str	r3, [sp, #12]
 8008c50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c54:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008c58:	2b10      	cmp	r3, #16
 8008c5a:	dc02      	bgt.n	8008c62 <__ieee754_rem_pio2+0x1d2>
 8008c5c:	e9ca 0100 	strd	r0, r1, [sl]
 8008c60:	e039      	b.n	8008cd6 <__ieee754_rem_pio2+0x246>
 8008c62:	a34f      	add	r3, pc, #316	; (adr r3, 8008da0 <__ieee754_rem_pio2+0x310>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	ec51 0b18 	vmov	r0, r1, d8
 8008c6c:	f7f7 fccc 	bl	8000608 <__aeabi_dmul>
 8008c70:	4604      	mov	r4, r0
 8008c72:	460d      	mov	r5, r1
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4630      	mov	r0, r6
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	f7f7 fb0c 	bl	8000298 <__aeabi_dsub>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4680      	mov	r8, r0
 8008c86:	4689      	mov	r9, r1
 8008c88:	4630      	mov	r0, r6
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	f7f7 fb04 	bl	8000298 <__aeabi_dsub>
 8008c90:	4622      	mov	r2, r4
 8008c92:	462b      	mov	r3, r5
 8008c94:	f7f7 fb00 	bl	8000298 <__aeabi_dsub>
 8008c98:	a343      	add	r3, pc, #268	; (adr r3, 8008da8 <__ieee754_rem_pio2+0x318>)
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	460d      	mov	r5, r1
 8008ca2:	ec51 0b18 	vmov	r0, r1, d8
 8008ca6:	f7f7 fcaf 	bl	8000608 <__aeabi_dmul>
 8008caa:	4622      	mov	r2, r4
 8008cac:	462b      	mov	r3, r5
 8008cae:	f7f7 faf3 	bl	8000298 <__aeabi_dsub>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	460d      	mov	r5, r1
 8008cba:	4640      	mov	r0, r8
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	f7f7 faeb 	bl	8000298 <__aeabi_dsub>
 8008cc2:	9a03      	ldr	r2, [sp, #12]
 8008cc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	2b31      	cmp	r3, #49	; 0x31
 8008ccc:	dc24      	bgt.n	8008d18 <__ieee754_rem_pio2+0x288>
 8008cce:	e9ca 0100 	strd	r0, r1, [sl]
 8008cd2:	4646      	mov	r6, r8
 8008cd4:	464f      	mov	r7, r9
 8008cd6:	e9da 8900 	ldrd	r8, r9, [sl]
 8008cda:	4630      	mov	r0, r6
 8008cdc:	4642      	mov	r2, r8
 8008cde:	464b      	mov	r3, r9
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	f7f7 fad9 	bl	8000298 <__aeabi_dsub>
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	4622      	mov	r2, r4
 8008cea:	f7f7 fad5 	bl	8000298 <__aeabi_dsub>
 8008cee:	9b02      	ldr	r3, [sp, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008cf6:	f6bf af0b 	bge.w	8008b10 <__ieee754_rem_pio2+0x80>
 8008cfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008cfe:	f8ca 3004 	str.w	r3, [sl, #4]
 8008d02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d06:	f8ca 8000 	str.w	r8, [sl]
 8008d0a:	f8ca 0008 	str.w	r0, [sl, #8]
 8008d0e:	f8ca 300c 	str.w	r3, [sl, #12]
 8008d12:	f1cb 0b00 	rsb	fp, fp, #0
 8008d16:	e6fb      	b.n	8008b10 <__ieee754_rem_pio2+0x80>
 8008d18:	a327      	add	r3, pc, #156	; (adr r3, 8008db8 <__ieee754_rem_pio2+0x328>)
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	ec51 0b18 	vmov	r0, r1, d8
 8008d22:	f7f7 fc71 	bl	8000608 <__aeabi_dmul>
 8008d26:	4604      	mov	r4, r0
 8008d28:	460d      	mov	r5, r1
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4649      	mov	r1, r9
 8008d32:	f7f7 fab1 	bl	8000298 <__aeabi_dsub>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4606      	mov	r6, r0
 8008d3c:	460f      	mov	r7, r1
 8008d3e:	4640      	mov	r0, r8
 8008d40:	4649      	mov	r1, r9
 8008d42:	f7f7 faa9 	bl	8000298 <__aeabi_dsub>
 8008d46:	4622      	mov	r2, r4
 8008d48:	462b      	mov	r3, r5
 8008d4a:	f7f7 faa5 	bl	8000298 <__aeabi_dsub>
 8008d4e:	a31c      	add	r3, pc, #112	; (adr r3, 8008dc0 <__ieee754_rem_pio2+0x330>)
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	4604      	mov	r4, r0
 8008d56:	460d      	mov	r5, r1
 8008d58:	ec51 0b18 	vmov	r0, r1, d8
 8008d5c:	f7f7 fc54 	bl	8000608 <__aeabi_dmul>
 8008d60:	4622      	mov	r2, r4
 8008d62:	462b      	mov	r3, r5
 8008d64:	f7f7 fa98 	bl	8000298 <__aeabi_dsub>
 8008d68:	4604      	mov	r4, r0
 8008d6a:	460d      	mov	r5, r1
 8008d6c:	e760      	b.n	8008c30 <__ieee754_rem_pio2+0x1a0>
 8008d6e:	4b1c      	ldr	r3, [pc, #112]	; (8008de0 <__ieee754_rem_pio2+0x350>)
 8008d70:	4598      	cmp	r8, r3
 8008d72:	dd37      	ble.n	8008de4 <__ieee754_rem_pio2+0x354>
 8008d74:	ee10 2a10 	vmov	r2, s0
 8008d78:	462b      	mov	r3, r5
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	f7f7 fa8b 	bl	8000298 <__aeabi_dsub>
 8008d82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d86:	e9ca 0100 	strd	r0, r1, [sl]
 8008d8a:	e695      	b.n	8008ab8 <__ieee754_rem_pio2+0x28>
 8008d8c:	f3af 8000 	nop.w
 8008d90:	54400000 	.word	0x54400000
 8008d94:	3ff921fb 	.word	0x3ff921fb
 8008d98:	1a626331 	.word	0x1a626331
 8008d9c:	3dd0b461 	.word	0x3dd0b461
 8008da0:	1a600000 	.word	0x1a600000
 8008da4:	3dd0b461 	.word	0x3dd0b461
 8008da8:	2e037073 	.word	0x2e037073
 8008dac:	3ba3198a 	.word	0x3ba3198a
 8008db0:	6dc9c883 	.word	0x6dc9c883
 8008db4:	3fe45f30 	.word	0x3fe45f30
 8008db8:	2e000000 	.word	0x2e000000
 8008dbc:	3ba3198a 	.word	0x3ba3198a
 8008dc0:	252049c1 	.word	0x252049c1
 8008dc4:	397b839a 	.word	0x397b839a
 8008dc8:	3fe921fb 	.word	0x3fe921fb
 8008dcc:	4002d97b 	.word	0x4002d97b
 8008dd0:	3ff921fb 	.word	0x3ff921fb
 8008dd4:	413921fb 	.word	0x413921fb
 8008dd8:	3fe00000 	.word	0x3fe00000
 8008ddc:	08009b8c 	.word	0x08009b8c
 8008de0:	7fefffff 	.word	0x7fefffff
 8008de4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008de8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8008dec:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008df0:	4620      	mov	r0, r4
 8008df2:	460d      	mov	r5, r1
 8008df4:	f7f7 feb8 	bl	8000b68 <__aeabi_d2iz>
 8008df8:	f7f7 fb9c 	bl	8000534 <__aeabi_i2d>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4620      	mov	r0, r4
 8008e02:	4629      	mov	r1, r5
 8008e04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e08:	f7f7 fa46 	bl	8000298 <__aeabi_dsub>
 8008e0c:	4b21      	ldr	r3, [pc, #132]	; (8008e94 <__ieee754_rem_pio2+0x404>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f7f7 fbfa 	bl	8000608 <__aeabi_dmul>
 8008e14:	460d      	mov	r5, r1
 8008e16:	4604      	mov	r4, r0
 8008e18:	f7f7 fea6 	bl	8000b68 <__aeabi_d2iz>
 8008e1c:	f7f7 fb8a 	bl	8000534 <__aeabi_i2d>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4620      	mov	r0, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e2c:	f7f7 fa34 	bl	8000298 <__aeabi_dsub>
 8008e30:	4b18      	ldr	r3, [pc, #96]	; (8008e94 <__ieee754_rem_pio2+0x404>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	f7f7 fbe8 	bl	8000608 <__aeabi_dmul>
 8008e38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008e3c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008e40:	2703      	movs	r7, #3
 8008e42:	2400      	movs	r4, #0
 8008e44:	2500      	movs	r5, #0
 8008e46:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	46b9      	mov	r9, r7
 8008e50:	3f01      	subs	r7, #1
 8008e52:	f7f7 fe41 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d1f5      	bne.n	8008e46 <__ieee754_rem_pio2+0x3b6>
 8008e5a:	4b0f      	ldr	r3, [pc, #60]	; (8008e98 <__ieee754_rem_pio2+0x408>)
 8008e5c:	9301      	str	r3, [sp, #4]
 8008e5e:	2302      	movs	r3, #2
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	4632      	mov	r2, r6
 8008e64:	464b      	mov	r3, r9
 8008e66:	4651      	mov	r1, sl
 8008e68:	a804      	add	r0, sp, #16
 8008e6a:	f000 f821 	bl	8008eb0 <__kernel_rem_pio2>
 8008e6e:	9b02      	ldr	r3, [sp, #8]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	4683      	mov	fp, r0
 8008e74:	f6bf ae4c 	bge.w	8008b10 <__ieee754_rem_pio2+0x80>
 8008e78:	e9da 2100 	ldrd	r2, r1, [sl]
 8008e7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e80:	e9ca 2300 	strd	r2, r3, [sl]
 8008e84:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008e88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e8c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008e90:	e73f      	b.n	8008d12 <__ieee754_rem_pio2+0x282>
 8008e92:	bf00      	nop
 8008e94:	41700000 	.word	0x41700000
 8008e98:	08009c0c 	.word	0x08009c0c

08008e9c <fabs>:
 8008e9c:	ec51 0b10 	vmov	r0, r1, d0
 8008ea0:	ee10 2a10 	vmov	r2, s0
 8008ea4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ea8:	ec43 2b10 	vmov	d0, r2, r3
 8008eac:	4770      	bx	lr
	...

08008eb0 <__kernel_rem_pio2>:
 8008eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	ed2d 8b02 	vpush	{d8}
 8008eb8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008ebc:	f112 0f14 	cmn.w	r2, #20
 8008ec0:	9306      	str	r3, [sp, #24]
 8008ec2:	9104      	str	r1, [sp, #16]
 8008ec4:	4bc2      	ldr	r3, [pc, #776]	; (80091d0 <__kernel_rem_pio2+0x320>)
 8008ec6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008ec8:	9009      	str	r0, [sp, #36]	; 0x24
 8008eca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	9b06      	ldr	r3, [sp, #24]
 8008ed2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ed6:	bfa8      	it	ge
 8008ed8:	1ed4      	subge	r4, r2, #3
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	bfb2      	itee	lt
 8008ede:	2400      	movlt	r4, #0
 8008ee0:	2318      	movge	r3, #24
 8008ee2:	fb94 f4f3 	sdivge	r4, r4, r3
 8008ee6:	f06f 0317 	mvn.w	r3, #23
 8008eea:	fb04 3303 	mla	r3, r4, r3, r3
 8008eee:	eb03 0a02 	add.w	sl, r3, r2
 8008ef2:	9b00      	ldr	r3, [sp, #0]
 8008ef4:	9a05      	ldr	r2, [sp, #20]
 8008ef6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80091c0 <__kernel_rem_pio2+0x310>
 8008efa:	eb03 0802 	add.w	r8, r3, r2
 8008efe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008f00:	1aa7      	subs	r7, r4, r2
 8008f02:	ae20      	add	r6, sp, #128	; 0x80
 8008f04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008f08:	2500      	movs	r5, #0
 8008f0a:	4545      	cmp	r5, r8
 8008f0c:	dd13      	ble.n	8008f36 <__kernel_rem_pio2+0x86>
 8008f0e:	9b06      	ldr	r3, [sp, #24]
 8008f10:	aa20      	add	r2, sp, #128	; 0x80
 8008f12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008f16:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008f1a:	f04f 0800 	mov.w	r8, #0
 8008f1e:	9b00      	ldr	r3, [sp, #0]
 8008f20:	4598      	cmp	r8, r3
 8008f22:	dc31      	bgt.n	8008f88 <__kernel_rem_pio2+0xd8>
 8008f24:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80091c0 <__kernel_rem_pio2+0x310>
 8008f28:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008f2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f30:	462f      	mov	r7, r5
 8008f32:	2600      	movs	r6, #0
 8008f34:	e01b      	b.n	8008f6e <__kernel_rem_pio2+0xbe>
 8008f36:	42ef      	cmn	r7, r5
 8008f38:	d407      	bmi.n	8008f4a <__kernel_rem_pio2+0x9a>
 8008f3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008f3e:	f7f7 faf9 	bl	8000534 <__aeabi_i2d>
 8008f42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008f46:	3501      	adds	r5, #1
 8008f48:	e7df      	b.n	8008f0a <__kernel_rem_pio2+0x5a>
 8008f4a:	ec51 0b18 	vmov	r0, r1, d8
 8008f4e:	e7f8      	b.n	8008f42 <__kernel_rem_pio2+0x92>
 8008f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008f58:	f7f7 fb56 	bl	8000608 <__aeabi_dmul>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f64:	f7f7 f99a 	bl	800029c <__adddf3>
 8008f68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f6c:	3601      	adds	r6, #1
 8008f6e:	9b05      	ldr	r3, [sp, #20]
 8008f70:	429e      	cmp	r6, r3
 8008f72:	f1a7 0708 	sub.w	r7, r7, #8
 8008f76:	ddeb      	ble.n	8008f50 <__kernel_rem_pio2+0xa0>
 8008f78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f7c:	f108 0801 	add.w	r8, r8, #1
 8008f80:	ecab 7b02 	vstmia	fp!, {d7}
 8008f84:	3508      	adds	r5, #8
 8008f86:	e7ca      	b.n	8008f1e <__kernel_rem_pio2+0x6e>
 8008f88:	9b00      	ldr	r3, [sp, #0]
 8008f8a:	aa0c      	add	r2, sp, #48	; 0x30
 8008f8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f90:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f92:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008f94:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f98:	9c00      	ldr	r4, [sp, #0]
 8008f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f9c:	00e3      	lsls	r3, r4, #3
 8008f9e:	9308      	str	r3, [sp, #32]
 8008fa0:	ab98      	add	r3, sp, #608	; 0x260
 8008fa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fa6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008faa:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008fae:	ab70      	add	r3, sp, #448	; 0x1c0
 8008fb0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008fb4:	46c3      	mov	fp, r8
 8008fb6:	46a1      	mov	r9, r4
 8008fb8:	f1b9 0f00 	cmp.w	r9, #0
 8008fbc:	f1a5 0508 	sub.w	r5, r5, #8
 8008fc0:	dc77      	bgt.n	80090b2 <__kernel_rem_pio2+0x202>
 8008fc2:	ec47 6b10 	vmov	d0, r6, r7
 8008fc6:	4650      	mov	r0, sl
 8008fc8:	f000 fac2 	bl	8009550 <scalbn>
 8008fcc:	ec57 6b10 	vmov	r6, r7, d0
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008fd6:	ee10 0a10 	vmov	r0, s0
 8008fda:	4639      	mov	r1, r7
 8008fdc:	f7f7 fb14 	bl	8000608 <__aeabi_dmul>
 8008fe0:	ec41 0b10 	vmov	d0, r0, r1
 8008fe4:	f000 fb34 	bl	8009650 <floor>
 8008fe8:	4b7a      	ldr	r3, [pc, #488]	; (80091d4 <__kernel_rem_pio2+0x324>)
 8008fea:	ec51 0b10 	vmov	r0, r1, d0
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f7f7 fb0a 	bl	8000608 <__aeabi_dmul>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	f7f7 f94c 	bl	8000298 <__aeabi_dsub>
 8009000:	460f      	mov	r7, r1
 8009002:	4606      	mov	r6, r0
 8009004:	f7f7 fdb0 	bl	8000b68 <__aeabi_d2iz>
 8009008:	9002      	str	r0, [sp, #8]
 800900a:	f7f7 fa93 	bl	8000534 <__aeabi_i2d>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	4630      	mov	r0, r6
 8009014:	4639      	mov	r1, r7
 8009016:	f7f7 f93f 	bl	8000298 <__aeabi_dsub>
 800901a:	f1ba 0f00 	cmp.w	sl, #0
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	dd6d      	ble.n	8009100 <__kernel_rem_pio2+0x250>
 8009024:	1e61      	subs	r1, r4, #1
 8009026:	ab0c      	add	r3, sp, #48	; 0x30
 8009028:	9d02      	ldr	r5, [sp, #8]
 800902a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800902e:	f1ca 0018 	rsb	r0, sl, #24
 8009032:	fa43 f200 	asr.w	r2, r3, r0
 8009036:	4415      	add	r5, r2
 8009038:	4082      	lsls	r2, r0
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	aa0c      	add	r2, sp, #48	; 0x30
 800903e:	9502      	str	r5, [sp, #8]
 8009040:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009044:	f1ca 0217 	rsb	r2, sl, #23
 8009048:	fa43 fb02 	asr.w	fp, r3, r2
 800904c:	f1bb 0f00 	cmp.w	fp, #0
 8009050:	dd65      	ble.n	800911e <__kernel_rem_pio2+0x26e>
 8009052:	9b02      	ldr	r3, [sp, #8]
 8009054:	2200      	movs	r2, #0
 8009056:	3301      	adds	r3, #1
 8009058:	9302      	str	r3, [sp, #8]
 800905a:	4615      	mov	r5, r2
 800905c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009060:	4294      	cmp	r4, r2
 8009062:	f300 809f 	bgt.w	80091a4 <__kernel_rem_pio2+0x2f4>
 8009066:	f1ba 0f00 	cmp.w	sl, #0
 800906a:	dd07      	ble.n	800907c <__kernel_rem_pio2+0x1cc>
 800906c:	f1ba 0f01 	cmp.w	sl, #1
 8009070:	f000 80c1 	beq.w	80091f6 <__kernel_rem_pio2+0x346>
 8009074:	f1ba 0f02 	cmp.w	sl, #2
 8009078:	f000 80c7 	beq.w	800920a <__kernel_rem_pio2+0x35a>
 800907c:	f1bb 0f02 	cmp.w	fp, #2
 8009080:	d14d      	bne.n	800911e <__kernel_rem_pio2+0x26e>
 8009082:	4632      	mov	r2, r6
 8009084:	463b      	mov	r3, r7
 8009086:	4954      	ldr	r1, [pc, #336]	; (80091d8 <__kernel_rem_pio2+0x328>)
 8009088:	2000      	movs	r0, #0
 800908a:	f7f7 f905 	bl	8000298 <__aeabi_dsub>
 800908e:	4606      	mov	r6, r0
 8009090:	460f      	mov	r7, r1
 8009092:	2d00      	cmp	r5, #0
 8009094:	d043      	beq.n	800911e <__kernel_rem_pio2+0x26e>
 8009096:	4650      	mov	r0, sl
 8009098:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80091c8 <__kernel_rem_pio2+0x318>
 800909c:	f000 fa58 	bl	8009550 <scalbn>
 80090a0:	4630      	mov	r0, r6
 80090a2:	4639      	mov	r1, r7
 80090a4:	ec53 2b10 	vmov	r2, r3, d0
 80090a8:	f7f7 f8f6 	bl	8000298 <__aeabi_dsub>
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	e035      	b.n	800911e <__kernel_rem_pio2+0x26e>
 80090b2:	4b4a      	ldr	r3, [pc, #296]	; (80091dc <__kernel_rem_pio2+0x32c>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	4630      	mov	r0, r6
 80090b8:	4639      	mov	r1, r7
 80090ba:	f7f7 faa5 	bl	8000608 <__aeabi_dmul>
 80090be:	f7f7 fd53 	bl	8000b68 <__aeabi_d2iz>
 80090c2:	f7f7 fa37 	bl	8000534 <__aeabi_i2d>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	ec43 2b18 	vmov	d8, r2, r3
 80090ce:	4b44      	ldr	r3, [pc, #272]	; (80091e0 <__kernel_rem_pio2+0x330>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	f7f7 fa99 	bl	8000608 <__aeabi_dmul>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4630      	mov	r0, r6
 80090dc:	4639      	mov	r1, r7
 80090de:	f7f7 f8db 	bl	8000298 <__aeabi_dsub>
 80090e2:	f7f7 fd41 	bl	8000b68 <__aeabi_d2iz>
 80090e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090ea:	f84b 0b04 	str.w	r0, [fp], #4
 80090ee:	ec51 0b18 	vmov	r0, r1, d8
 80090f2:	f7f7 f8d3 	bl	800029c <__adddf3>
 80090f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80090fa:	4606      	mov	r6, r0
 80090fc:	460f      	mov	r7, r1
 80090fe:	e75b      	b.n	8008fb8 <__kernel_rem_pio2+0x108>
 8009100:	d106      	bne.n	8009110 <__kernel_rem_pio2+0x260>
 8009102:	1e63      	subs	r3, r4, #1
 8009104:	aa0c      	add	r2, sp, #48	; 0x30
 8009106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800910a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800910e:	e79d      	b.n	800904c <__kernel_rem_pio2+0x19c>
 8009110:	4b34      	ldr	r3, [pc, #208]	; (80091e4 <__kernel_rem_pio2+0x334>)
 8009112:	2200      	movs	r2, #0
 8009114:	f7f7 fcfe 	bl	8000b14 <__aeabi_dcmpge>
 8009118:	2800      	cmp	r0, #0
 800911a:	d140      	bne.n	800919e <__kernel_rem_pio2+0x2ee>
 800911c:	4683      	mov	fp, r0
 800911e:	2200      	movs	r2, #0
 8009120:	2300      	movs	r3, #0
 8009122:	4630      	mov	r0, r6
 8009124:	4639      	mov	r1, r7
 8009126:	f7f7 fcd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800912a:	2800      	cmp	r0, #0
 800912c:	f000 80c1 	beq.w	80092b2 <__kernel_rem_pio2+0x402>
 8009130:	1e65      	subs	r5, r4, #1
 8009132:	462b      	mov	r3, r5
 8009134:	2200      	movs	r2, #0
 8009136:	9900      	ldr	r1, [sp, #0]
 8009138:	428b      	cmp	r3, r1
 800913a:	da6d      	bge.n	8009218 <__kernel_rem_pio2+0x368>
 800913c:	2a00      	cmp	r2, #0
 800913e:	f000 808a 	beq.w	8009256 <__kernel_rem_pio2+0x3a6>
 8009142:	ab0c      	add	r3, sp, #48	; 0x30
 8009144:	f1aa 0a18 	sub.w	sl, sl, #24
 8009148:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 80ae 	beq.w	80092ae <__kernel_rem_pio2+0x3fe>
 8009152:	4650      	mov	r0, sl
 8009154:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80091c8 <__kernel_rem_pio2+0x318>
 8009158:	f000 f9fa 	bl	8009550 <scalbn>
 800915c:	1c6b      	adds	r3, r5, #1
 800915e:	00da      	lsls	r2, r3, #3
 8009160:	9205      	str	r2, [sp, #20]
 8009162:	ec57 6b10 	vmov	r6, r7, d0
 8009166:	aa70      	add	r2, sp, #448	; 0x1c0
 8009168:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80091dc <__kernel_rem_pio2+0x32c>
 800916c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8009170:	462c      	mov	r4, r5
 8009172:	f04f 0800 	mov.w	r8, #0
 8009176:	2c00      	cmp	r4, #0
 8009178:	f280 80d4 	bge.w	8009324 <__kernel_rem_pio2+0x474>
 800917c:	462c      	mov	r4, r5
 800917e:	2c00      	cmp	r4, #0
 8009180:	f2c0 8102 	blt.w	8009388 <__kernel_rem_pio2+0x4d8>
 8009184:	4b18      	ldr	r3, [pc, #96]	; (80091e8 <__kernel_rem_pio2+0x338>)
 8009186:	461e      	mov	r6, r3
 8009188:	ab70      	add	r3, sp, #448	; 0x1c0
 800918a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800918e:	1b2b      	subs	r3, r5, r4
 8009190:	f04f 0900 	mov.w	r9, #0
 8009194:	f04f 0a00 	mov.w	sl, #0
 8009198:	2700      	movs	r7, #0
 800919a:	9306      	str	r3, [sp, #24]
 800919c:	e0e6      	b.n	800936c <__kernel_rem_pio2+0x4bc>
 800919e:	f04f 0b02 	mov.w	fp, #2
 80091a2:	e756      	b.n	8009052 <__kernel_rem_pio2+0x1a2>
 80091a4:	f8d8 3000 	ldr.w	r3, [r8]
 80091a8:	bb05      	cbnz	r5, 80091ec <__kernel_rem_pio2+0x33c>
 80091aa:	b123      	cbz	r3, 80091b6 <__kernel_rem_pio2+0x306>
 80091ac:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80091b0:	f8c8 3000 	str.w	r3, [r8]
 80091b4:	2301      	movs	r3, #1
 80091b6:	3201      	adds	r2, #1
 80091b8:	f108 0804 	add.w	r8, r8, #4
 80091bc:	461d      	mov	r5, r3
 80091be:	e74f      	b.n	8009060 <__kernel_rem_pio2+0x1b0>
	...
 80091cc:	3ff00000 	.word	0x3ff00000
 80091d0:	08009d58 	.word	0x08009d58
 80091d4:	40200000 	.word	0x40200000
 80091d8:	3ff00000 	.word	0x3ff00000
 80091dc:	3e700000 	.word	0x3e700000
 80091e0:	41700000 	.word	0x41700000
 80091e4:	3fe00000 	.word	0x3fe00000
 80091e8:	08009d18 	.word	0x08009d18
 80091ec:	1acb      	subs	r3, r1, r3
 80091ee:	f8c8 3000 	str.w	r3, [r8]
 80091f2:	462b      	mov	r3, r5
 80091f4:	e7df      	b.n	80091b6 <__kernel_rem_pio2+0x306>
 80091f6:	1e62      	subs	r2, r4, #1
 80091f8:	ab0c      	add	r3, sp, #48	; 0x30
 80091fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009202:	a90c      	add	r1, sp, #48	; 0x30
 8009204:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009208:	e738      	b.n	800907c <__kernel_rem_pio2+0x1cc>
 800920a:	1e62      	subs	r2, r4, #1
 800920c:	ab0c      	add	r3, sp, #48	; 0x30
 800920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009212:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009216:	e7f4      	b.n	8009202 <__kernel_rem_pio2+0x352>
 8009218:	a90c      	add	r1, sp, #48	; 0x30
 800921a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800921e:	3b01      	subs	r3, #1
 8009220:	430a      	orrs	r2, r1
 8009222:	e788      	b.n	8009136 <__kernel_rem_pio2+0x286>
 8009224:	3301      	adds	r3, #1
 8009226:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800922a:	2900      	cmp	r1, #0
 800922c:	d0fa      	beq.n	8009224 <__kernel_rem_pio2+0x374>
 800922e:	9a08      	ldr	r2, [sp, #32]
 8009230:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8009234:	446a      	add	r2, sp
 8009236:	3a98      	subs	r2, #152	; 0x98
 8009238:	9208      	str	r2, [sp, #32]
 800923a:	9a06      	ldr	r2, [sp, #24]
 800923c:	a920      	add	r1, sp, #128	; 0x80
 800923e:	18a2      	adds	r2, r4, r2
 8009240:	18e3      	adds	r3, r4, r3
 8009242:	f104 0801 	add.w	r8, r4, #1
 8009246:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800924a:	9302      	str	r3, [sp, #8]
 800924c:	9b02      	ldr	r3, [sp, #8]
 800924e:	4543      	cmp	r3, r8
 8009250:	da04      	bge.n	800925c <__kernel_rem_pio2+0x3ac>
 8009252:	461c      	mov	r4, r3
 8009254:	e6a2      	b.n	8008f9c <__kernel_rem_pio2+0xec>
 8009256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009258:	2301      	movs	r3, #1
 800925a:	e7e4      	b.n	8009226 <__kernel_rem_pio2+0x376>
 800925c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009262:	f7f7 f967 	bl	8000534 <__aeabi_i2d>
 8009266:	e8e5 0102 	strd	r0, r1, [r5], #8
 800926a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926c:	46ab      	mov	fp, r5
 800926e:	461c      	mov	r4, r3
 8009270:	f04f 0900 	mov.w	r9, #0
 8009274:	2600      	movs	r6, #0
 8009276:	2700      	movs	r7, #0
 8009278:	9b05      	ldr	r3, [sp, #20]
 800927a:	4599      	cmp	r9, r3
 800927c:	dd06      	ble.n	800928c <__kernel_rem_pio2+0x3dc>
 800927e:	9b08      	ldr	r3, [sp, #32]
 8009280:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009284:	f108 0801 	add.w	r8, r8, #1
 8009288:	9308      	str	r3, [sp, #32]
 800928a:	e7df      	b.n	800924c <__kernel_rem_pio2+0x39c>
 800928c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009290:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009294:	f7f7 f9b8 	bl	8000608 <__aeabi_dmul>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4630      	mov	r0, r6
 800929e:	4639      	mov	r1, r7
 80092a0:	f7f6 fffc 	bl	800029c <__adddf3>
 80092a4:	f109 0901 	add.w	r9, r9, #1
 80092a8:	4606      	mov	r6, r0
 80092aa:	460f      	mov	r7, r1
 80092ac:	e7e4      	b.n	8009278 <__kernel_rem_pio2+0x3c8>
 80092ae:	3d01      	subs	r5, #1
 80092b0:	e747      	b.n	8009142 <__kernel_rem_pio2+0x292>
 80092b2:	ec47 6b10 	vmov	d0, r6, r7
 80092b6:	f1ca 0000 	rsb	r0, sl, #0
 80092ba:	f000 f949 	bl	8009550 <scalbn>
 80092be:	ec57 6b10 	vmov	r6, r7, d0
 80092c2:	4ba0      	ldr	r3, [pc, #640]	; (8009544 <__kernel_rem_pio2+0x694>)
 80092c4:	ee10 0a10 	vmov	r0, s0
 80092c8:	2200      	movs	r2, #0
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f7 fc22 	bl	8000b14 <__aeabi_dcmpge>
 80092d0:	b1f8      	cbz	r0, 8009312 <__kernel_rem_pio2+0x462>
 80092d2:	4b9d      	ldr	r3, [pc, #628]	; (8009548 <__kernel_rem_pio2+0x698>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	4630      	mov	r0, r6
 80092d8:	4639      	mov	r1, r7
 80092da:	f7f7 f995 	bl	8000608 <__aeabi_dmul>
 80092de:	f7f7 fc43 	bl	8000b68 <__aeabi_d2iz>
 80092e2:	4680      	mov	r8, r0
 80092e4:	f7f7 f926 	bl	8000534 <__aeabi_i2d>
 80092e8:	4b96      	ldr	r3, [pc, #600]	; (8009544 <__kernel_rem_pio2+0x694>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	f7f7 f98c 	bl	8000608 <__aeabi_dmul>
 80092f0:	460b      	mov	r3, r1
 80092f2:	4602      	mov	r2, r0
 80092f4:	4639      	mov	r1, r7
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7f6 ffce 	bl	8000298 <__aeabi_dsub>
 80092fc:	f7f7 fc34 	bl	8000b68 <__aeabi_d2iz>
 8009300:	1c65      	adds	r5, r4, #1
 8009302:	ab0c      	add	r3, sp, #48	; 0x30
 8009304:	f10a 0a18 	add.w	sl, sl, #24
 8009308:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800930c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009310:	e71f      	b.n	8009152 <__kernel_rem_pio2+0x2a2>
 8009312:	4630      	mov	r0, r6
 8009314:	4639      	mov	r1, r7
 8009316:	f7f7 fc27 	bl	8000b68 <__aeabi_d2iz>
 800931a:	ab0c      	add	r3, sp, #48	; 0x30
 800931c:	4625      	mov	r5, r4
 800931e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009322:	e716      	b.n	8009152 <__kernel_rem_pio2+0x2a2>
 8009324:	ab0c      	add	r3, sp, #48	; 0x30
 8009326:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800932a:	f7f7 f903 	bl	8000534 <__aeabi_i2d>
 800932e:	4632      	mov	r2, r6
 8009330:	463b      	mov	r3, r7
 8009332:	f7f7 f969 	bl	8000608 <__aeabi_dmul>
 8009336:	4642      	mov	r2, r8
 8009338:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800933c:	464b      	mov	r3, r9
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	f7f7 f961 	bl	8000608 <__aeabi_dmul>
 8009346:	3c01      	subs	r4, #1
 8009348:	4606      	mov	r6, r0
 800934a:	460f      	mov	r7, r1
 800934c:	e713      	b.n	8009176 <__kernel_rem_pio2+0x2c6>
 800934e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8009352:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8009356:	f7f7 f957 	bl	8000608 <__aeabi_dmul>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4648      	mov	r0, r9
 8009360:	4651      	mov	r1, sl
 8009362:	f7f6 ff9b 	bl	800029c <__adddf3>
 8009366:	3701      	adds	r7, #1
 8009368:	4681      	mov	r9, r0
 800936a:	468a      	mov	sl, r1
 800936c:	9b00      	ldr	r3, [sp, #0]
 800936e:	429f      	cmp	r7, r3
 8009370:	dc02      	bgt.n	8009378 <__kernel_rem_pio2+0x4c8>
 8009372:	9b06      	ldr	r3, [sp, #24]
 8009374:	429f      	cmp	r7, r3
 8009376:	ddea      	ble.n	800934e <__kernel_rem_pio2+0x49e>
 8009378:	9a06      	ldr	r2, [sp, #24]
 800937a:	ab48      	add	r3, sp, #288	; 0x120
 800937c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009380:	e9c6 9a00 	strd	r9, sl, [r6]
 8009384:	3c01      	subs	r4, #1
 8009386:	e6fa      	b.n	800917e <__kernel_rem_pio2+0x2ce>
 8009388:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800938a:	2b02      	cmp	r3, #2
 800938c:	dc0b      	bgt.n	80093a6 <__kernel_rem_pio2+0x4f6>
 800938e:	2b00      	cmp	r3, #0
 8009390:	dc39      	bgt.n	8009406 <__kernel_rem_pio2+0x556>
 8009392:	d05d      	beq.n	8009450 <__kernel_rem_pio2+0x5a0>
 8009394:	9b02      	ldr	r3, [sp, #8]
 8009396:	f003 0007 	and.w	r0, r3, #7
 800939a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800939e:	ecbd 8b02 	vpop	{d8}
 80093a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80093a8:	2b03      	cmp	r3, #3
 80093aa:	d1f3      	bne.n	8009394 <__kernel_rem_pio2+0x4e4>
 80093ac:	9b05      	ldr	r3, [sp, #20]
 80093ae:	9500      	str	r5, [sp, #0]
 80093b0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80093b4:	eb0d 0403 	add.w	r4, sp, r3
 80093b8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80093bc:	46a2      	mov	sl, r4
 80093be:	9b00      	ldr	r3, [sp, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f1aa 0a08 	sub.w	sl, sl, #8
 80093c6:	dc69      	bgt.n	800949c <__kernel_rem_pio2+0x5ec>
 80093c8:	46aa      	mov	sl, r5
 80093ca:	f1ba 0f01 	cmp.w	sl, #1
 80093ce:	f1a4 0408 	sub.w	r4, r4, #8
 80093d2:	f300 8083 	bgt.w	80094dc <__kernel_rem_pio2+0x62c>
 80093d6:	9c05      	ldr	r4, [sp, #20]
 80093d8:	ab48      	add	r3, sp, #288	; 0x120
 80093da:	441c      	add	r4, r3
 80093dc:	2000      	movs	r0, #0
 80093de:	2100      	movs	r1, #0
 80093e0:	2d01      	cmp	r5, #1
 80093e2:	f300 809a 	bgt.w	800951a <__kernel_rem_pio2+0x66a>
 80093e6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80093ea:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80093ee:	f1bb 0f00 	cmp.w	fp, #0
 80093f2:	f040 8098 	bne.w	8009526 <__kernel_rem_pio2+0x676>
 80093f6:	9b04      	ldr	r3, [sp, #16]
 80093f8:	e9c3 7800 	strd	r7, r8, [r3]
 80093fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009400:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009404:	e7c6      	b.n	8009394 <__kernel_rem_pio2+0x4e4>
 8009406:	9e05      	ldr	r6, [sp, #20]
 8009408:	ab48      	add	r3, sp, #288	; 0x120
 800940a:	441e      	add	r6, r3
 800940c:	462c      	mov	r4, r5
 800940e:	2000      	movs	r0, #0
 8009410:	2100      	movs	r1, #0
 8009412:	2c00      	cmp	r4, #0
 8009414:	da33      	bge.n	800947e <__kernel_rem_pio2+0x5ce>
 8009416:	f1bb 0f00 	cmp.w	fp, #0
 800941a:	d036      	beq.n	800948a <__kernel_rem_pio2+0x5da>
 800941c:	4602      	mov	r2, r0
 800941e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009422:	9c04      	ldr	r4, [sp, #16]
 8009424:	e9c4 2300 	strd	r2, r3, [r4]
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009430:	f7f6 ff32 	bl	8000298 <__aeabi_dsub>
 8009434:	ae4a      	add	r6, sp, #296	; 0x128
 8009436:	2401      	movs	r4, #1
 8009438:	42a5      	cmp	r5, r4
 800943a:	da29      	bge.n	8009490 <__kernel_rem_pio2+0x5e0>
 800943c:	f1bb 0f00 	cmp.w	fp, #0
 8009440:	d002      	beq.n	8009448 <__kernel_rem_pio2+0x598>
 8009442:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009446:	4619      	mov	r1, r3
 8009448:	9b04      	ldr	r3, [sp, #16]
 800944a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800944e:	e7a1      	b.n	8009394 <__kernel_rem_pio2+0x4e4>
 8009450:	9c05      	ldr	r4, [sp, #20]
 8009452:	ab48      	add	r3, sp, #288	; 0x120
 8009454:	441c      	add	r4, r3
 8009456:	2000      	movs	r0, #0
 8009458:	2100      	movs	r1, #0
 800945a:	2d00      	cmp	r5, #0
 800945c:	da09      	bge.n	8009472 <__kernel_rem_pio2+0x5c2>
 800945e:	f1bb 0f00 	cmp.w	fp, #0
 8009462:	d002      	beq.n	800946a <__kernel_rem_pio2+0x5ba>
 8009464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009468:	4619      	mov	r1, r3
 800946a:	9b04      	ldr	r3, [sp, #16]
 800946c:	e9c3 0100 	strd	r0, r1, [r3]
 8009470:	e790      	b.n	8009394 <__kernel_rem_pio2+0x4e4>
 8009472:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009476:	f7f6 ff11 	bl	800029c <__adddf3>
 800947a:	3d01      	subs	r5, #1
 800947c:	e7ed      	b.n	800945a <__kernel_rem_pio2+0x5aa>
 800947e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009482:	f7f6 ff0b 	bl	800029c <__adddf3>
 8009486:	3c01      	subs	r4, #1
 8009488:	e7c3      	b.n	8009412 <__kernel_rem_pio2+0x562>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	e7c8      	b.n	8009422 <__kernel_rem_pio2+0x572>
 8009490:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009494:	f7f6 ff02 	bl	800029c <__adddf3>
 8009498:	3401      	adds	r4, #1
 800949a:	e7cd      	b.n	8009438 <__kernel_rem_pio2+0x588>
 800949c:	e9da 8900 	ldrd	r8, r9, [sl]
 80094a0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80094a4:	9b00      	ldr	r3, [sp, #0]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	4632      	mov	r2, r6
 80094ac:	463b      	mov	r3, r7
 80094ae:	4640      	mov	r0, r8
 80094b0:	4649      	mov	r1, r9
 80094b2:	f7f6 fef3 	bl	800029c <__adddf3>
 80094b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	4640      	mov	r0, r8
 80094c0:	4649      	mov	r1, r9
 80094c2:	f7f6 fee9 	bl	8000298 <__aeabi_dsub>
 80094c6:	4632      	mov	r2, r6
 80094c8:	463b      	mov	r3, r7
 80094ca:	f7f6 fee7 	bl	800029c <__adddf3>
 80094ce:	ed9d 7b06 	vldr	d7, [sp, #24]
 80094d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80094d6:	ed8a 7b00 	vstr	d7, [sl]
 80094da:	e770      	b.n	80093be <__kernel_rem_pio2+0x50e>
 80094dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80094e0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80094e4:	4640      	mov	r0, r8
 80094e6:	4632      	mov	r2, r6
 80094e8:	463b      	mov	r3, r7
 80094ea:	4649      	mov	r1, r9
 80094ec:	f7f6 fed6 	bl	800029c <__adddf3>
 80094f0:	e9cd 0100 	strd	r0, r1, [sp]
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	4640      	mov	r0, r8
 80094fa:	4649      	mov	r1, r9
 80094fc:	f7f6 fecc 	bl	8000298 <__aeabi_dsub>
 8009500:	4632      	mov	r2, r6
 8009502:	463b      	mov	r3, r7
 8009504:	f7f6 feca 	bl	800029c <__adddf3>
 8009508:	ed9d 7b00 	vldr	d7, [sp]
 800950c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009510:	ed84 7b00 	vstr	d7, [r4]
 8009514:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009518:	e757      	b.n	80093ca <__kernel_rem_pio2+0x51a>
 800951a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800951e:	f7f6 febd 	bl	800029c <__adddf3>
 8009522:	3d01      	subs	r5, #1
 8009524:	e75c      	b.n	80093e0 <__kernel_rem_pio2+0x530>
 8009526:	9b04      	ldr	r3, [sp, #16]
 8009528:	9a04      	ldr	r2, [sp, #16]
 800952a:	601f      	str	r7, [r3, #0]
 800952c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009530:	605c      	str	r4, [r3, #4]
 8009532:	609d      	str	r5, [r3, #8]
 8009534:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009538:	60d3      	str	r3, [r2, #12]
 800953a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800953e:	6110      	str	r0, [r2, #16]
 8009540:	6153      	str	r3, [r2, #20]
 8009542:	e727      	b.n	8009394 <__kernel_rem_pio2+0x4e4>
 8009544:	41700000 	.word	0x41700000
 8009548:	3e700000 	.word	0x3e700000
 800954c:	00000000 	.word	0x00000000

08009550 <scalbn>:
 8009550:	b570      	push	{r4, r5, r6, lr}
 8009552:	ec55 4b10 	vmov	r4, r5, d0
 8009556:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800955a:	4606      	mov	r6, r0
 800955c:	462b      	mov	r3, r5
 800955e:	b999      	cbnz	r1, 8009588 <scalbn+0x38>
 8009560:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009564:	4323      	orrs	r3, r4
 8009566:	d03f      	beq.n	80095e8 <scalbn+0x98>
 8009568:	4b35      	ldr	r3, [pc, #212]	; (8009640 <scalbn+0xf0>)
 800956a:	4629      	mov	r1, r5
 800956c:	ee10 0a10 	vmov	r0, s0
 8009570:	2200      	movs	r2, #0
 8009572:	f7f7 f849 	bl	8000608 <__aeabi_dmul>
 8009576:	4b33      	ldr	r3, [pc, #204]	; (8009644 <scalbn+0xf4>)
 8009578:	429e      	cmp	r6, r3
 800957a:	4604      	mov	r4, r0
 800957c:	460d      	mov	r5, r1
 800957e:	da10      	bge.n	80095a2 <scalbn+0x52>
 8009580:	a327      	add	r3, pc, #156	; (adr r3, 8009620 <scalbn+0xd0>)
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	e01f      	b.n	80095c8 <scalbn+0x78>
 8009588:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800958c:	4291      	cmp	r1, r2
 800958e:	d10c      	bne.n	80095aa <scalbn+0x5a>
 8009590:	ee10 2a10 	vmov	r2, s0
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f6 fe80 	bl	800029c <__adddf3>
 800959c:	4604      	mov	r4, r0
 800959e:	460d      	mov	r5, r1
 80095a0:	e022      	b.n	80095e8 <scalbn+0x98>
 80095a2:	460b      	mov	r3, r1
 80095a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80095a8:	3936      	subs	r1, #54	; 0x36
 80095aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80095ae:	4296      	cmp	r6, r2
 80095b0:	dd0d      	ble.n	80095ce <scalbn+0x7e>
 80095b2:	2d00      	cmp	r5, #0
 80095b4:	a11c      	add	r1, pc, #112	; (adr r1, 8009628 <scalbn+0xd8>)
 80095b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ba:	da02      	bge.n	80095c2 <scalbn+0x72>
 80095bc:	a11c      	add	r1, pc, #112	; (adr r1, 8009630 <scalbn+0xe0>)
 80095be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095c2:	a319      	add	r3, pc, #100	; (adr r3, 8009628 <scalbn+0xd8>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	f7f7 f81e 	bl	8000608 <__aeabi_dmul>
 80095cc:	e7e6      	b.n	800959c <scalbn+0x4c>
 80095ce:	1872      	adds	r2, r6, r1
 80095d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80095d4:	428a      	cmp	r2, r1
 80095d6:	dcec      	bgt.n	80095b2 <scalbn+0x62>
 80095d8:	2a00      	cmp	r2, #0
 80095da:	dd08      	ble.n	80095ee <scalbn+0x9e>
 80095dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80095e8:	ec45 4b10 	vmov	d0, r4, r5
 80095ec:	bd70      	pop	{r4, r5, r6, pc}
 80095ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80095f2:	da08      	bge.n	8009606 <scalbn+0xb6>
 80095f4:	2d00      	cmp	r5, #0
 80095f6:	a10a      	add	r1, pc, #40	; (adr r1, 8009620 <scalbn+0xd0>)
 80095f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095fc:	dac0      	bge.n	8009580 <scalbn+0x30>
 80095fe:	a10e      	add	r1, pc, #56	; (adr r1, 8009638 <scalbn+0xe8>)
 8009600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009604:	e7bc      	b.n	8009580 <scalbn+0x30>
 8009606:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800960a:	3236      	adds	r2, #54	; 0x36
 800960c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009610:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009614:	4620      	mov	r0, r4
 8009616:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <scalbn+0xf8>)
 8009618:	2200      	movs	r2, #0
 800961a:	e7d5      	b.n	80095c8 <scalbn+0x78>
 800961c:	f3af 8000 	nop.w
 8009620:	c2f8f359 	.word	0xc2f8f359
 8009624:	01a56e1f 	.word	0x01a56e1f
 8009628:	8800759c 	.word	0x8800759c
 800962c:	7e37e43c 	.word	0x7e37e43c
 8009630:	8800759c 	.word	0x8800759c
 8009634:	fe37e43c 	.word	0xfe37e43c
 8009638:	c2f8f359 	.word	0xc2f8f359
 800963c:	81a56e1f 	.word	0x81a56e1f
 8009640:	43500000 	.word	0x43500000
 8009644:	ffff3cb0 	.word	0xffff3cb0
 8009648:	3c900000 	.word	0x3c900000
 800964c:	00000000 	.word	0x00000000

08009650 <floor>:
 8009650:	ec51 0b10 	vmov	r0, r1, d0
 8009654:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800965c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009660:	2e13      	cmp	r6, #19
 8009662:	ee10 5a10 	vmov	r5, s0
 8009666:	ee10 8a10 	vmov	r8, s0
 800966a:	460c      	mov	r4, r1
 800966c:	dc31      	bgt.n	80096d2 <floor+0x82>
 800966e:	2e00      	cmp	r6, #0
 8009670:	da14      	bge.n	800969c <floor+0x4c>
 8009672:	a333      	add	r3, pc, #204	; (adr r3, 8009740 <floor+0xf0>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	f7f6 fe10 	bl	800029c <__adddf3>
 800967c:	2200      	movs	r2, #0
 800967e:	2300      	movs	r3, #0
 8009680:	f7f7 fa52 	bl	8000b28 <__aeabi_dcmpgt>
 8009684:	b138      	cbz	r0, 8009696 <floor+0x46>
 8009686:	2c00      	cmp	r4, #0
 8009688:	da53      	bge.n	8009732 <floor+0xe2>
 800968a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800968e:	4325      	orrs	r5, r4
 8009690:	d052      	beq.n	8009738 <floor+0xe8>
 8009692:	4c2d      	ldr	r4, [pc, #180]	; (8009748 <floor+0xf8>)
 8009694:	2500      	movs	r5, #0
 8009696:	4621      	mov	r1, r4
 8009698:	4628      	mov	r0, r5
 800969a:	e024      	b.n	80096e6 <floor+0x96>
 800969c:	4f2b      	ldr	r7, [pc, #172]	; (800974c <floor+0xfc>)
 800969e:	4137      	asrs	r7, r6
 80096a0:	ea01 0307 	and.w	r3, r1, r7
 80096a4:	4303      	orrs	r3, r0
 80096a6:	d01e      	beq.n	80096e6 <floor+0x96>
 80096a8:	a325      	add	r3, pc, #148	; (adr r3, 8009740 <floor+0xf0>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 fdf5 	bl	800029c <__adddf3>
 80096b2:	2200      	movs	r2, #0
 80096b4:	2300      	movs	r3, #0
 80096b6:	f7f7 fa37 	bl	8000b28 <__aeabi_dcmpgt>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d0eb      	beq.n	8009696 <floor+0x46>
 80096be:	2c00      	cmp	r4, #0
 80096c0:	bfbe      	ittt	lt
 80096c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80096c6:	4133      	asrlt	r3, r6
 80096c8:	18e4      	addlt	r4, r4, r3
 80096ca:	ea24 0407 	bic.w	r4, r4, r7
 80096ce:	2500      	movs	r5, #0
 80096d0:	e7e1      	b.n	8009696 <floor+0x46>
 80096d2:	2e33      	cmp	r6, #51	; 0x33
 80096d4:	dd0b      	ble.n	80096ee <floor+0x9e>
 80096d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80096da:	d104      	bne.n	80096e6 <floor+0x96>
 80096dc:	ee10 2a10 	vmov	r2, s0
 80096e0:	460b      	mov	r3, r1
 80096e2:	f7f6 fddb 	bl	800029c <__adddf3>
 80096e6:	ec41 0b10 	vmov	d0, r0, r1
 80096ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80096f2:	f04f 37ff 	mov.w	r7, #4294967295
 80096f6:	40df      	lsrs	r7, r3
 80096f8:	4238      	tst	r0, r7
 80096fa:	d0f4      	beq.n	80096e6 <floor+0x96>
 80096fc:	a310      	add	r3, pc, #64	; (adr r3, 8009740 <floor+0xf0>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	f7f6 fdcb 	bl	800029c <__adddf3>
 8009706:	2200      	movs	r2, #0
 8009708:	2300      	movs	r3, #0
 800970a:	f7f7 fa0d 	bl	8000b28 <__aeabi_dcmpgt>
 800970e:	2800      	cmp	r0, #0
 8009710:	d0c1      	beq.n	8009696 <floor+0x46>
 8009712:	2c00      	cmp	r4, #0
 8009714:	da0a      	bge.n	800972c <floor+0xdc>
 8009716:	2e14      	cmp	r6, #20
 8009718:	d101      	bne.n	800971e <floor+0xce>
 800971a:	3401      	adds	r4, #1
 800971c:	e006      	b.n	800972c <floor+0xdc>
 800971e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009722:	2301      	movs	r3, #1
 8009724:	40b3      	lsls	r3, r6
 8009726:	441d      	add	r5, r3
 8009728:	45a8      	cmp	r8, r5
 800972a:	d8f6      	bhi.n	800971a <floor+0xca>
 800972c:	ea25 0507 	bic.w	r5, r5, r7
 8009730:	e7b1      	b.n	8009696 <floor+0x46>
 8009732:	2500      	movs	r5, #0
 8009734:	462c      	mov	r4, r5
 8009736:	e7ae      	b.n	8009696 <floor+0x46>
 8009738:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800973c:	e7ab      	b.n	8009696 <floor+0x46>
 800973e:	bf00      	nop
 8009740:	8800759c 	.word	0x8800759c
 8009744:	7e37e43c 	.word	0x7e37e43c
 8009748:	bff00000 	.word	0xbff00000
 800974c:	000fffff 	.word	0x000fffff

08009750 <_init>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	bf00      	nop
 8009754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009756:	bc08      	pop	{r3}
 8009758:	469e      	mov	lr, r3
 800975a:	4770      	bx	lr

0800975c <_fini>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	bf00      	nop
 8009760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009762:	bc08      	pop	{r3}
 8009764:	469e      	mov	lr, r3
 8009766:	4770      	bx	lr
